(() => {
  let __defineProperty = Object.defineProperty;
  let __hasOwnProperty = Object.prototype.hasOwnProperty;
  let __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  let __markAsModule = (target) => {
    return __defineProperty(target, "__esModule", {value: true});
  };
  let __export = (target, all) => {
    __markAsModule(target);
    for (let name9 in all)
      __defineProperty(target, name9, {get: all[name9], enumerable: true});
  };
  let __exportStar2 = (target, module) => {
    __markAsModule(target);
    for (let key2 in module)
      if (__hasOwnProperty.call(module, key2) && !__hasOwnProperty.call(target, key2) && key2 !== "default")
        __defineProperty(target, key2, {get: () => module[key2], enumerable: true});
    return target;
  };
  let __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar2(__defineProperty({}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to2 = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key2 in from) {
          if (hasOwnProperty.call(from, key2)) {
            to2[key2] = from[key2];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to2[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to2;
    };
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location2 + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var checkPropTypes = require_checkPropTypes();
        var ReactVersion = "16.13.1";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          suspense: null
        };
        var ReactCurrentOwner = {
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name9, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name9 || "Unknown") + sourceInfo;
        }
        var Resolved = 1;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;
        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentlyValidatingElement) {
              var name9 = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name9, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            ReactDebugCurrentFrame,
            ReactComponentTreeHook: {}
          });
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x3) {
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component4(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component4.prototype.isReactComponent = {};
        Component4.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component4.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component4.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component4.prototype;
        function PureComponent(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component4.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key2, ref2, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key: key2,
            ref: ref2,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config2, children) {
          var propName;
          var props = {};
          var key2 = null;
          var ref2 = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref2 = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              key2 = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key2 || ref2) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref2) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key2, ref2, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key2 = element.key;
          var ref2 = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref2 = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              key2 = "" + config2.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key2, ref2, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key2) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = ("" + key2).replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }
        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;
          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
          }
          var child2;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child2 = children[i2];
              nextName = nextNamePrefix + getComponentKey(child2, i2);
              subtreeCount += traverseAllChildrenImpl(child2, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              {
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii2 = 0;
              while (!(step = iterator.next()).done) {
                child2 = step.value;
                nextName = nextNamePrefix + getComponentKey(child2, ii2++);
                subtreeCount += traverseAllChildrenImpl(child2, nextName, callback, traverseContext);
              }
            } else if (type === "object") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                }
              }
            }
          }
          return subtreeCount;
        }
        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }
          return traverseAllChildrenImpl(children, "", callback, traverseContext);
        }
        function getComponentKey(component10, index2) {
          if (typeof component10 === "object" && component10 !== null && component10.key != null) {
            return escape(component10.key);
          }
          return index2.toString(36);
        }
        function forEachSingleChild(bookKeeping, child2, name9) {
          var func = bookKeeping.func, context2 = bookKeeping.context;
          func.call(context2, child2, bookKeeping.count++);
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }
          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child2, childKey) {
          var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context2 = bookKeeping.context;
          var mappedChild = func.call(context2, child2, bookKeeping.count++);
          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child2 || child2.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
            }
            result.push(mappedChild);
          }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix2, func, context2) {
          var escapedPrefix = "";
          if (prefix2 != null) {
            escapedPrefix = escapeUserProvidedKey(prefix2) + "/";
          }
          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context2);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapChildren(children, func, context2) {
          if (children == null) {
            return children;
          }
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context2);
          return result;
        }
        function countChildren(children) {
          return traverseAllChildren(children, function() {
            return null;
          }, null);
        }
        function toArray(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function(child2) {
            return child2;
          });
          return result;
        }
        function onlyChild2(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context2 = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context2.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context2
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context2,
              _calculateChangedBits: context2._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context2.Provider;
                },
                set: function(_Provider) {
                  context2.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context2._currentValue;
                },
                set: function(_currentValue) {
                  context2._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context2._currentValue2;
                },
                set: function(_currentValue2) {
                  context2._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context2._threadCount;
                },
                set: function(_threadCount) {
                  context2._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context2.Consumer;
                }
              }
            });
            context2.Consumer = Consumer;
          }
          {
            context2._currentRenderer = null;
            context2._currentRenderer2 = null;
          }
          return context2;
        }
        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            _status: -1,
            _result: null
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
        }
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function memo(type, compare) {
          {
            if (!isValidElementType2(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext2(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref2, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref2, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name9 = getComponentName(ReactCurrentOwner.current.type);
            if (name9) {
              return "\n\nCheck the render method of `" + name9 + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child2 = node[i2];
              if (isValidElement(child2)) {
                validateExplicitKey(child2, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var name9 = getComponentName(type);
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              setCurrentlyValidatingElement(element);
              checkPropTypes(propTypes, element.props, "prop", name9, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name9 || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key2 = keys[i2];
              if (key2 !== "children" && key2 !== "key") {
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                break;
              }
            }
            if (fragment.ref !== null) {
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
            }
            setCurrentlyValidatingElement(null);
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType2(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = new Map([[frozenObject, null]]);
            var testSet = new Set([frozenObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild2
        };
        exports.Children = Children;
        exports.Component = Component4;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext2;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider2 = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider2;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var checkPropTypes = require_checkPropTypes();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x3, y2) {
        if (x3 === y2) {
          return x3 !== 0 || 1 / x3 === 1 / y2;
        } else {
          return x3 !== x3 && y2 !== y2;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is2(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key2 in propValue) {
            if (has(propValue, key2)) {
              var error = typeChecker(propValue, key2, componentName, location2, propFullName + "." + key2, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key2 in shapeTypes) {
            var checker = shapeTypes[key2];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key2, componentName, location2, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key2 in allKeys) {
            var checker = shapeTypes[key2];
            if (!checker) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key2, componentName, location2, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/isarray/index.js
  var require_isarray = __commonJS((exports, module) => {
    module.exports = Array.isArray || function(arr) {
      return Object.prototype.toString.call(arr) == "[object Array]";
    };
  });

  // node_modules/path-to-regexp/index.js
  var require_path_to_regexp = __commonJS((exports, module) => {
    var isarray = require_isarray();
    module.exports = pathToRegexp2;
    module.exports.parse = parse;
    module.exports.compile = compile;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    var PATH_REGEXP = new RegExp([
      "(\\\\.)",
      "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
    ].join("|"), "g");
    function parse(str, options) {
      var tokens = [];
      var key2 = 0;
      var index2 = 0;
      var path = "";
      var defaultDelimiter = options && options.delimiter || "/";
      var res;
      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index2, offset);
        index2 = offset + m.length;
        if (escaped) {
          path += escaped[1];
          continue;
        }
        var next = str[index2];
        var prefix2 = res[2];
        var name9 = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        if (path) {
          tokens.push(path);
          path = "";
        }
        var partial = prefix2 != null && next != null && next !== prefix2;
        var repeat = modifier === "+" || modifier === "*";
        var optional = modifier === "?" || modifier === "*";
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
          name: name9 || key2++,
          prefix: prefix2 || "",
          delimiter,
          optional,
          repeat,
          partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter) + "]+?"
        });
      }
      if (index2 < str.length) {
        path += str.substr(index2);
      }
      if (path) {
        tokens.push(path);
      }
      return tokens;
    }
    function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
    }
    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function tokensToFunction(tokens, options) {
      var matches = new Array(tokens.length);
      for (var i2 = 0; i2 < tokens.length; i2++) {
        if (typeof tokens[i2] === "object") {
          matches[i2] = new RegExp("^(?:" + tokens[i2].pattern + ")$", flags(options));
        }
      }
      return function(obj, opts) {
        var path = "";
        var data = obj || {};
        var options2 = opts || {};
        var encode2 = options2.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for (var i3 = 0; i3 < tokens.length; i3++) {
          var token = tokens[i3];
          if (typeof token === "string") {
            path += token;
            continue;
          }
          var value = data[token.name];
          var segment;
          if (value == null) {
            if (token.optional) {
              if (token.partial) {
                path += token.prefix;
              }
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined');
            }
          }
          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
            }
            if (value.length === 0) {
              if (token.optional) {
                continue;
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty');
              }
            }
            for (var j2 = 0; j2 < value.length; j2++) {
              segment = encode2(value[j2]);
              if (!matches[i3].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + "`");
              }
              path += (j2 === 0 ? token.prefix : token.delimiter) + segment;
            }
            continue;
          }
          segment = token.asterisk ? encodeAsterisk(value) : encode2(value);
          if (!matches[i3].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
          }
          path += token.prefix + segment;
        }
        return path;
      };
    }
    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
    }
    function escapeGroup(group) {
      return group.replace(/([=!:$\/()])/g, "\\$1");
    }
    function attachKeys(re2, keys) {
      re2.keys = keys;
      return re2;
    }
    function flags(options) {
      return options && options.sensitive ? "" : "i";
    }
    function regexpToRegexp(path, keys) {
      var groups = path.source.match(/\((?!\?)/g);
      if (groups) {
        for (var i2 = 0; i2 < groups.length; i2++) {
          keys.push({
            name: i2,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }
      return attachKeys(path, keys);
    }
    function arrayToRegexp(path, keys, options) {
      var parts = [];
      for (var i2 = 0; i2 < path.length; i2++) {
        parts.push(pathToRegexp2(path[i2], keys, options).source);
      }
      var regexp = new RegExp("(?:" + parts.join("|") + ")", flags(options));
      return attachKeys(regexp, keys);
    }
    function stringToRegexp(path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options);
    }
    function tokensToRegExp(tokens, keys, options) {
      if (!isarray(keys)) {
        options = keys || options;
        keys = [];
      }
      options = options || {};
      var strict = options.strict;
      var end = options.end !== false;
      var route = "";
      for (var i2 = 0; i2 < tokens.length; i2++) {
        var token = tokens[i2];
        if (typeof token === "string") {
          route += escapeString(token);
        } else {
          var prefix2 = escapeString(token.prefix);
          var capture = "(?:" + token.pattern + ")";
          keys.push(token);
          if (token.repeat) {
            capture += "(?:" + prefix2 + capture + ")*";
          }
          if (token.optional) {
            if (!token.partial) {
              capture = "(?:" + prefix2 + "(" + capture + "))?";
            } else {
              capture = prefix2 + "(" + capture + ")?";
            }
          } else {
            capture = prefix2 + "(" + capture + ")";
          }
          route += capture;
        }
      }
      var delimiter = escapeString(options.delimiter || "/");
      var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + "(?:" + delimiter + "(?=$))?";
      }
      if (end) {
        route += "$";
      } else {
        route += strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
      }
      return attachKeys(new RegExp("^" + route, flags(options)), keys);
    }
    function pathToRegexp2(path, keys, options) {
      if (!isarray(keys)) {
        options = keys || options;
        keys = [];
      }
      options = options || {};
      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys);
      }
      if (isarray(path)) {
        return arrayToRegexp(path, keys, options);
      }
      return stringToRegexp(path, keys, options);
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS((exports, module) => {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component10) {
      if (reactIs.isMemo(component10)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component10["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key2 = keys[i2];
          if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key2);
            try {
              defineProperty(targetComponent, key2, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  });

  // node_modules/@firebase/database/dist/index.esm.js
  var require_index_esm = __commonJS((exports, module) => {
    __export(exports, {
      DataSnapshot: () => DataSnapshot,
      Database: () => Database,
      OnDisconnect: () => OnDisconnect,
      Query: () => Query,
      Reference: () => Reference2,
      ServerValue: () => ServerValue,
      enableLogging: () => enableLogging,
      registerDatabase: () => registerDatabase
    });
    var DOMStorageWrapper = function() {
      function DOMStorageWrapper2(domStorage_) {
        this.domStorage_ = domStorage_;
        this.prefix_ = "firebase:";
      }
      DOMStorageWrapper2.prototype.set = function(key2, value) {
        if (value == null) {
          this.domStorage_.removeItem(this.prefixedName_(key2));
        } else {
          this.domStorage_.setItem(this.prefixedName_(key2), stringify(value));
        }
      };
      DOMStorageWrapper2.prototype.get = function(key2) {
        var storedVal = this.domStorage_.getItem(this.prefixedName_(key2));
        if (storedVal == null) {
          return null;
        } else {
          return jsonEval(storedVal);
        }
      };
      DOMStorageWrapper2.prototype.remove = function(key2) {
        this.domStorage_.removeItem(this.prefixedName_(key2));
      };
      DOMStorageWrapper2.prototype.prefixedName_ = function(name10) {
        return this.prefix_ + name10;
      };
      DOMStorageWrapper2.prototype.toString = function() {
        return this.domStorage_.toString();
      };
      return DOMStorageWrapper2;
    }();
    var MemoryStorage = function() {
      function MemoryStorage2() {
        this.cache_ = {};
        this.isInMemoryStorage = true;
      }
      MemoryStorage2.prototype.set = function(key2, value) {
        if (value == null) {
          delete this.cache_[key2];
        } else {
          this.cache_[key2] = value;
        }
      };
      MemoryStorage2.prototype.get = function(key2) {
        if (contains(this.cache_, key2)) {
          return this.cache_[key2];
        }
        return null;
      };
      MemoryStorage2.prototype.remove = function(key2) {
        delete this.cache_[key2];
      };
      return MemoryStorage2;
    }();
    var createStoragefor = function(domStorageName) {
      try {
        if (typeof window !== "undefined" && typeof window[domStorageName] !== "undefined") {
          var domStorage = window[domStorageName];
          domStorage.setItem("firebase:sentinel", "cache");
          domStorage.removeItem("firebase:sentinel");
          return new DOMStorageWrapper(domStorage);
        }
      } catch (e) {
      }
      return new MemoryStorage();
    };
    var PersistentStorage = createStoragefor("localStorage");
    var SessionStorage = createStoragefor("sessionStorage");
    var logClient = new Logger("@firebase/database");
    var LUIDGenerator = function() {
      var id2 = 1;
      return function() {
        return id2++;
      };
    }();
    var sha1 = function(str) {
      var utf8Bytes = stringToByteArray$1(str);
      var sha12 = new Sha1();
      sha12.update(utf8Bytes);
      var sha1Bytes = sha12.digest();
      return base64.encodeByteArray(sha1Bytes);
    };
    var buildLogMessage_ = function() {
      var varArgs = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        varArgs[_i2] = arguments[_i2];
      }
      var message = "";
      for (var i2 = 0; i2 < varArgs.length; i2++) {
        var arg = varArgs[i2];
        if (Array.isArray(arg) || arg && typeof arg === "object" && typeof arg.length === "number") {
          message += buildLogMessage_.apply(null, arg);
        } else if (typeof arg === "object") {
          message += stringify(arg);
        } else {
          message += arg;
        }
        message += " ";
      }
      return message;
    };
    var logger12 = null;
    var firstLog_ = true;
    var enableLogging = function(logger_, persistent) {
      assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
      if (logger_ === true) {
        logClient.logLevel = LogLevel.VERBOSE;
        logger12 = logClient.log.bind(logClient);
        if (persistent) {
          SessionStorage.set("logging_enabled", true);
        }
      } else if (typeof logger_ === "function") {
        logger12 = logger_;
      } else {
        logger12 = null;
        SessionStorage.remove("logging_enabled");
      }
    };
    var log = function() {
      var varArgs = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        varArgs[_i2] = arguments[_i2];
      }
      if (firstLog_ === true) {
        firstLog_ = false;
        if (logger12 === null && SessionStorage.get("logging_enabled") === true) {
          enableLogging(true);
        }
      }
      if (logger12) {
        var message = buildLogMessage_.apply(null, varArgs);
        logger12(message);
      }
    };
    var logWrapper = function(prefix2) {
      return function() {
        var varArgs = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          varArgs[_i2] = arguments[_i2];
        }
        log.apply(void 0, __spread([prefix2], varArgs));
      };
    };
    var error = function() {
      var varArgs = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        varArgs[_i2] = arguments[_i2];
      }
      var message = "FIREBASE INTERNAL ERROR: " + buildLogMessage_.apply(void 0, __spread(varArgs));
      logClient.error(message);
    };
    var fatal = function() {
      var varArgs = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        varArgs[_i2] = arguments[_i2];
      }
      var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spread(varArgs));
      logClient.error(message);
      throw new Error(message);
    };
    var warn = function() {
      var varArgs = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        varArgs[_i2] = arguments[_i2];
      }
      var message = "FIREBASE WARNING: " + buildLogMessage_.apply(void 0, __spread(varArgs));
      logClient.warn(message);
    };
    var warnIfPageIsSecure = function() {
      if (typeof window !== "undefined" && window.location && window.location.protocol && window.location.protocol.indexOf("https:") !== -1) {
        warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
      }
    };
    var isInvalidJSONNumber = function(data) {
      return typeof data === "number" && (data !== data || data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
    };
    var executeWhenDOMReady = function(fn2) {
      if (isNodeSdk() || document.readyState === "complete") {
        fn2();
      } else {
        var called_1 = false;
        var wrappedFn_1 = function() {
          if (!document.body) {
            setTimeout(wrappedFn_1, Math.floor(10));
            return;
          }
          if (!called_1) {
            called_1 = true;
            fn2();
          }
        };
        if (document.addEventListener) {
          document.addEventListener("DOMContentLoaded", wrappedFn_1, false);
          window.addEventListener("load", wrappedFn_1, false);
        } else if (document.attachEvent) {
          document.attachEvent("onreadystatechange", function() {
            if (document.readyState === "complete") {
              wrappedFn_1();
            }
          });
          window.attachEvent("onload", wrappedFn_1);
        }
      }
    };
    var MIN_NAME = "[MIN_NAME]";
    var MAX_NAME = "[MAX_NAME]";
    var nameCompare = function(a, b) {
      if (a === b) {
        return 0;
      } else if (a === MIN_NAME || b === MAX_NAME) {
        return -1;
      } else if (b === MIN_NAME || a === MAX_NAME) {
        return 1;
      } else {
        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
        if (aAsInt !== null) {
          if (bAsInt !== null) {
            return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
          } else {
            return -1;
          }
        } else if (bAsInt !== null) {
          return 1;
        } else {
          return a < b ? -1 : 1;
        }
      }
    };
    var stringCompare = function(a, b) {
      if (a === b) {
        return 0;
      } else if (a < b) {
        return -1;
      } else {
        return 1;
      }
    };
    var requireKey = function(key2, obj) {
      if (obj && key2 in obj) {
        return obj[key2];
      } else {
        throw new Error("Missing required key (" + key2 + ") in object: " + stringify(obj));
      }
    };
    var ObjectToUniqueKey = function(obj) {
      if (typeof obj !== "object" || obj === null) {
        return stringify(obj);
      }
      var keys = [];
      for (var k3 in obj) {
        keys.push(k3);
      }
      keys.sort();
      var key2 = "{";
      for (var i2 = 0; i2 < keys.length; i2++) {
        if (i2 !== 0) {
          key2 += ",";
        }
        key2 += stringify(keys[i2]);
        key2 += ":";
        key2 += ObjectToUniqueKey(obj[keys[i2]]);
      }
      key2 += "}";
      return key2;
    };
    var splitStringBySize = function(str, segsize) {
      var len = str.length;
      if (len <= segsize) {
        return [str];
      }
      var dataSegs = [];
      for (var c = 0; c < len; c += segsize) {
        if (c + segsize > len) {
          dataSegs.push(str.substring(c, len));
        } else {
          dataSegs.push(str.substring(c, c + segsize));
        }
      }
      return dataSegs;
    };
    function each(obj, fn2) {
      for (var key2 in obj) {
        if (obj.hasOwnProperty(key2)) {
          fn2(key2, obj[key2]);
        }
      }
    }
    var doubleToIEEE754String = function(v2) {
      assert(!isInvalidJSONNumber(v2), "Invalid JSON number");
      var ebits = 11, fbits = 52;
      var bias = (1 << ebits - 1) - 1;
      var s, e, f, ln2, i2;
      if (v2 === 0) {
        e = 0;
        f = 0;
        s = 1 / v2 === -Infinity ? 1 : 0;
      } else {
        s = v2 < 0;
        v2 = Math.abs(v2);
        if (v2 >= Math.pow(2, 1 - bias)) {
          ln2 = Math.min(Math.floor(Math.log(v2) / Math.LN2), bias);
          e = ln2 + bias;
          f = Math.round(v2 * Math.pow(2, fbits - ln2) - Math.pow(2, fbits));
        } else {
          e = 0;
          f = Math.round(v2 / Math.pow(2, 1 - bias - fbits));
        }
      }
      var bits = [];
      for (i2 = fbits; i2; i2 -= 1) {
        bits.push(f % 2 ? 1 : 0);
        f = Math.floor(f / 2);
      }
      for (i2 = ebits; i2; i2 -= 1) {
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
      }
      bits.push(s ? 1 : 0);
      bits.reverse();
      var str = bits.join("");
      var hexByteString = "";
      for (i2 = 0; i2 < 64; i2 += 8) {
        var hexByte = parseInt(str.substr(i2, 8), 2).toString(16);
        if (hexByte.length === 1) {
          hexByte = "0" + hexByte;
        }
        hexByteString = hexByteString + hexByte;
      }
      return hexByteString.toLowerCase();
    };
    var isChromeExtensionContentScript = function() {
      return !!(typeof window === "object" && window["chrome"] && window["chrome"]["extension"] && !/^chrome/.test(window.location.href));
    };
    var isWindowsStoreApp = function() {
      return typeof Windows === "object" && typeof Windows.UI === "object";
    };
    var errorForServerCode = function(code, query) {
      var reason = "Unknown Error";
      if (code === "too_big") {
        reason = "The data requested exceeds the maximum size that can be accessed with a single request.";
      } else if (code === "permission_denied") {
        reason = "Client doesn't have permission to access the desired data.";
      } else if (code === "unavailable") {
        reason = "The service is unavailable";
      }
      var error2 = new Error(code + " at " + query.path.toString() + ": " + reason);
      error2.code = code.toUpperCase();
      return error2;
    };
    var INTEGER_REGEXP_ = new RegExp("^-?(0*)\\d{1,10}$");
    var INTEGER_32_MIN = -2147483648;
    var INTEGER_32_MAX = 2147483647;
    var tryParseInt = function(str) {
      if (INTEGER_REGEXP_.test(str)) {
        var intVal = Number(str);
        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
          return intVal;
        }
      }
      return null;
    };
    var exceptionGuard = function(fn2) {
      try {
        fn2();
      } catch (e) {
        setTimeout(function() {
          var stack = e.stack || "";
          warn("Exception was thrown by user callback.", stack);
          throw e;
        }, Math.floor(0));
      }
    };
    var beingCrawled = function() {
      var userAgent = typeof window === "object" && window["navigator"] && window["navigator"]["userAgent"] || "";
      return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
    };
    var setTimeoutNonBlocking = function(fn2, time) {
      var timeout = setTimeout(fn2, time);
      if (typeof timeout === "object" && timeout["unref"]) {
        timeout["unref"]();
      }
      return timeout;
    };
    var Path = function() {
      function Path2(pathOrString, pieceNum) {
        if (pieceNum === void 0) {
          this.pieces_ = pathOrString.split("/");
          var copyTo = 0;
          for (var i2 = 0; i2 < this.pieces_.length; i2++) {
            if (this.pieces_[i2].length > 0) {
              this.pieces_[copyTo] = this.pieces_[i2];
              copyTo++;
            }
          }
          this.pieces_.length = copyTo;
          this.pieceNum_ = 0;
        } else {
          this.pieces_ = pathOrString;
          this.pieceNum_ = pieceNum;
        }
      }
      Object.defineProperty(Path2, "Empty", {
        get: function() {
          return new Path2("");
        },
        enumerable: false,
        configurable: true
      });
      Path2.prototype.getFront = function() {
        if (this.pieceNum_ >= this.pieces_.length) {
          return null;
        }
        return this.pieces_[this.pieceNum_];
      };
      Path2.prototype.getLength = function() {
        return this.pieces_.length - this.pieceNum_;
      };
      Path2.prototype.popFront = function() {
        var pieceNum = this.pieceNum_;
        if (pieceNum < this.pieces_.length) {
          pieceNum++;
        }
        return new Path2(this.pieces_, pieceNum);
      };
      Path2.prototype.getBack = function() {
        if (this.pieceNum_ < this.pieces_.length) {
          return this.pieces_[this.pieces_.length - 1];
        }
        return null;
      };
      Path2.prototype.toString = function() {
        var pathString = "";
        for (var i2 = this.pieceNum_; i2 < this.pieces_.length; i2++) {
          if (this.pieces_[i2] !== "") {
            pathString += "/" + this.pieces_[i2];
          }
        }
        return pathString || "/";
      };
      Path2.prototype.toUrlEncodedString = function() {
        var pathString = "";
        for (var i2 = this.pieceNum_; i2 < this.pieces_.length; i2++) {
          if (this.pieces_[i2] !== "") {
            pathString += "/" + encodeURIComponent(String(this.pieces_[i2]));
          }
        }
        return pathString || "/";
      };
      Path2.prototype.slice = function(begin) {
        if (begin === void 0) {
          begin = 0;
        }
        return this.pieces_.slice(this.pieceNum_ + begin);
      };
      Path2.prototype.parent = function() {
        if (this.pieceNum_ >= this.pieces_.length) {
          return null;
        }
        var pieces = [];
        for (var i2 = this.pieceNum_; i2 < this.pieces_.length - 1; i2++) {
          pieces.push(this.pieces_[i2]);
        }
        return new Path2(pieces, 0);
      };
      Path2.prototype.child = function(childPathObj) {
        var pieces = [];
        for (var i2 = this.pieceNum_; i2 < this.pieces_.length; i2++) {
          pieces.push(this.pieces_[i2]);
        }
        if (childPathObj instanceof Path2) {
          for (var i2 = childPathObj.pieceNum_; i2 < childPathObj.pieces_.length; i2++) {
            pieces.push(childPathObj.pieces_[i2]);
          }
        } else {
          var childPieces = childPathObj.split("/");
          for (var i2 = 0; i2 < childPieces.length; i2++) {
            if (childPieces[i2].length > 0) {
              pieces.push(childPieces[i2]);
            }
          }
        }
        return new Path2(pieces, 0);
      };
      Path2.prototype.isEmpty = function() {
        return this.pieceNum_ >= this.pieces_.length;
      };
      Path2.relativePath = function(outerPath, innerPath) {
        var outer = outerPath.getFront(), inner = innerPath.getFront();
        if (outer === null) {
          return innerPath;
        } else if (outer === inner) {
          return Path2.relativePath(outerPath.popFront(), innerPath.popFront());
        } else {
          throw new Error("INTERNAL ERROR: innerPath (" + innerPath + ") is not within outerPath (" + outerPath + ")");
        }
      };
      Path2.comparePaths = function(left, right) {
        var leftKeys = left.slice();
        var rightKeys = right.slice();
        for (var i2 = 0; i2 < leftKeys.length && i2 < rightKeys.length; i2++) {
          var cmp = nameCompare(leftKeys[i2], rightKeys[i2]);
          if (cmp !== 0) {
            return cmp;
          }
        }
        if (leftKeys.length === rightKeys.length) {
          return 0;
        }
        return leftKeys.length < rightKeys.length ? -1 : 1;
      };
      Path2.prototype.equals = function(other) {
        if (this.getLength() !== other.getLength()) {
          return false;
        }
        for (var i2 = this.pieceNum_, j2 = other.pieceNum_; i2 <= this.pieces_.length; i2++, j2++) {
          if (this.pieces_[i2] !== other.pieces_[j2]) {
            return false;
          }
        }
        return true;
      };
      Path2.prototype.contains = function(other) {
        var i2 = this.pieceNum_;
        var j2 = other.pieceNum_;
        if (this.getLength() > other.getLength()) {
          return false;
        }
        while (i2 < this.pieces_.length) {
          if (this.pieces_[i2] !== other.pieces_[j2]) {
            return false;
          }
          ++i2;
          ++j2;
        }
        return true;
      };
      return Path2;
    }();
    var ValidationPath = function() {
      function ValidationPath2(path, errorPrefix_) {
        this.errorPrefix_ = errorPrefix_;
        this.parts_ = path.slice();
        this.byteLength_ = Math.max(1, this.parts_.length);
        for (var i2 = 0; i2 < this.parts_.length; i2++) {
          this.byteLength_ += stringLength(this.parts_[i2]);
        }
        this.checkValid_();
      }
      Object.defineProperty(ValidationPath2, "MAX_PATH_DEPTH", {
        get: function() {
          return 32;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ValidationPath2, "MAX_PATH_LENGTH_BYTES", {
        get: function() {
          return 768;
        },
        enumerable: false,
        configurable: true
      });
      ValidationPath2.prototype.push = function(child2) {
        if (this.parts_.length > 0) {
          this.byteLength_ += 1;
        }
        this.parts_.push(child2);
        this.byteLength_ += stringLength(child2);
        this.checkValid_();
      };
      ValidationPath2.prototype.pop = function() {
        var last = this.parts_.pop();
        this.byteLength_ -= stringLength(last);
        if (this.parts_.length > 0) {
          this.byteLength_ -= 1;
        }
      };
      ValidationPath2.prototype.checkValid_ = function() {
        if (this.byteLength_ > ValidationPath2.MAX_PATH_LENGTH_BYTES) {
          throw new Error(this.errorPrefix_ + "has a key path longer than " + ValidationPath2.MAX_PATH_LENGTH_BYTES + " bytes (" + this.byteLength_ + ").");
        }
        if (this.parts_.length > ValidationPath2.MAX_PATH_DEPTH) {
          throw new Error(this.errorPrefix_ + "path specified exceeds the maximum depth that can be written (" + ValidationPath2.MAX_PATH_DEPTH + ") or object contains a cycle " + this.toErrorString());
        }
      };
      ValidationPath2.prototype.toErrorString = function() {
        if (this.parts_.length === 0) {
          return "";
        }
        return "in property '" + this.parts_.join(".") + "'";
      };
      return ValidationPath2;
    }();
    var PROTOCOL_VERSION = "5";
    var VERSION_PARAM = "v";
    var TRANSPORT_SESSION_PARAM = "s";
    var REFERER_PARAM = "r";
    var FORGE_REF = "f";
    var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
    var LAST_SESSION_PARAM = "ls";
    var APPLICATION_ID_PARAM = "p";
    var WEBSOCKET = "websocket";
    var LONG_POLLING = "long_polling";
    var RepoInfo = function() {
      function RepoInfo2(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
        if (nodeAdmin === void 0) {
          nodeAdmin = false;
        }
        if (persistenceKey === void 0) {
          persistenceKey = "";
        }
        if (includeNamespaceInQueryParams === void 0) {
          includeNamespaceInQueryParams = false;
        }
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.nodeAdmin = nodeAdmin;
        this.persistenceKey = persistenceKey;
        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
        this.host = host.toLowerCase();
        this.domain = this.host.substr(this.host.indexOf(".") + 1);
        this.internalHost = PersistentStorage.get("host:" + host) || this.host;
      }
      RepoInfo2.prototype.needsQueryParam = function() {
        return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;
      };
      RepoInfo2.prototype.isCacheableHost = function() {
        return this.internalHost.substr(0, 2) === "s-";
      };
      RepoInfo2.prototype.isDemoHost = function() {
        return this.domain === "firebaseio-demo.com";
      };
      RepoInfo2.prototype.isCustomHost = function() {
        return this.domain !== "firebaseio.com" && this.domain !== "firebaseio-demo.com";
      };
      RepoInfo2.prototype.updateHost = function(newHost) {
        if (newHost !== this.internalHost) {
          this.internalHost = newHost;
          if (this.isCacheableHost()) {
            PersistentStorage.set("host:" + this.host, this.internalHost);
          }
        }
      };
      RepoInfo2.prototype.connectionURL = function(type, params) {
        assert(typeof type === "string", "typeof type must == string");
        assert(typeof params === "object", "typeof params must == object");
        var connURL;
        if (type === WEBSOCKET) {
          connURL = (this.secure ? "wss://" : "ws://") + this.internalHost + "/.ws?";
        } else if (type === LONG_POLLING) {
          connURL = (this.secure ? "https://" : "http://") + this.internalHost + "/.lp?";
        } else {
          throw new Error("Unknown connection type: " + type);
        }
        if (this.needsQueryParam()) {
          params["ns"] = this.namespace;
        }
        var pairs = [];
        each(params, function(key2, value) {
          pairs.push(key2 + "=" + value);
        });
        return connURL + pairs.join("&");
      };
      RepoInfo2.prototype.toString = function() {
        var str = this.toURLString();
        if (this.persistenceKey) {
          str += "<" + this.persistenceKey + ">";
        }
        return str;
      };
      RepoInfo2.prototype.toURLString = function() {
        var protocol = this.secure ? "https://" : "http://";
        var query = this.includeNamespaceInQueryParams ? "?ns=" + this.namespace : "";
        return "" + protocol + this.host + "/" + query;
      };
      return RepoInfo2;
    }();
    function decodePath(pathString) {
      var pathStringDecoded = "";
      var pieces = pathString.split("/");
      for (var i2 = 0; i2 < pieces.length; i2++) {
        if (pieces[i2].length > 0) {
          var piece = pieces[i2];
          try {
            piece = decodeURIComponent(piece.replace(/\+/g, " "));
          } catch (e) {
          }
          pathStringDecoded += "/" + piece;
        }
      }
      return pathStringDecoded;
    }
    function decodeQuery(queryString) {
      var e_1, _a9;
      var results = {};
      if (queryString.charAt(0) === "?") {
        queryString = queryString.substring(1);
      }
      try {
        for (var _b = __values(queryString.split("&")), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var segment = _c2.value;
          if (segment.length === 0) {
            continue;
          }
          var kv = segment.split("=");
          if (kv.length === 2) {
            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
          } else {
            warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
          }
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return results;
    }
    var parseRepoInfo = function(dataURL, nodeAdmin) {
      var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
      if (parsedUrl.domain === "firebase.com") {
        fatal(parsedUrl.host + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
      }
      if ((!namespace || namespace === "undefined") && parsedUrl.domain !== "localhost") {
        fatal("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");
      }
      if (!parsedUrl.secure) {
        warnIfPageIsSecure();
      }
      var webSocketOnly = parsedUrl.scheme === "ws" || parsedUrl.scheme === "wss";
      return {
        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, "", namespace !== parsedUrl.subdomain),
        path: new Path(parsedUrl.pathString)
      };
    };
    var parseDatabaseURL = function(dataURL) {
      var host = "", domain = "", subdomain = "", pathString = "", namespace = "";
      var secure = true, scheme = "https", port = 443;
      if (typeof dataURL === "string") {
        var colonInd = dataURL.indexOf("//");
        if (colonInd >= 0) {
          scheme = dataURL.substring(0, colonInd - 1);
          dataURL = dataURL.substring(colonInd + 2);
        }
        var slashInd = dataURL.indexOf("/");
        if (slashInd === -1) {
          slashInd = dataURL.length;
        }
        var questionMarkInd = dataURL.indexOf("?");
        if (questionMarkInd === -1) {
          questionMarkInd = dataURL.length;
        }
        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
        if (slashInd < questionMarkInd) {
          pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
        }
        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
        colonInd = host.indexOf(":");
        if (colonInd >= 0) {
          secure = scheme === "https" || scheme === "wss";
          port = parseInt(host.substring(colonInd + 1), 10);
        } else {
          colonInd = host.length;
        }
        var hostWithoutPort = host.slice(0, colonInd);
        if (hostWithoutPort.toLowerCase() === "localhost") {
          domain = "localhost";
        } else if (hostWithoutPort.split(".").length <= 2) {
          domain = hostWithoutPort;
        } else {
          var dotInd = host.indexOf(".");
          subdomain = host.substring(0, dotInd).toLowerCase();
          domain = host.substring(dotInd + 1);
          namespace = subdomain;
        }
        if ("ns" in queryParams) {
          namespace = queryParams["ns"];
        }
      }
      return {
        host,
        port,
        domain,
        subdomain,
        secure,
        scheme,
        pathString,
        namespace
      };
    };
    var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    var isValidKey2 = function(key2) {
      return typeof key2 === "string" && key2.length !== 0 && !INVALID_KEY_REGEX_.test(key2);
    };
    var isValidPathString = function(pathString) {
      return typeof pathString === "string" && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
    };
    var isValidRootPathString = function(pathString) {
      if (pathString) {
        pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
      }
      return isValidPathString(pathString);
    };
    var isValidPriority = function(priority) {
      return priority === null || typeof priority === "string" || typeof priority === "number" && !isInvalidJSONNumber(priority) || priority && typeof priority === "object" && contains(priority, ".sv");
    };
    var validateFirebaseDataArg = function(fnName, argumentNumber, data, path, optional) {
      if (optional && data === void 0) {
        return;
      }
      validateFirebaseData(errorPrefix(fnName, argumentNumber, optional), data, path);
    };
    var validateFirebaseData = function(errorPrefix2, data, path_) {
      var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix2) : path_;
      if (data === void 0) {
        throw new Error(errorPrefix2 + "contains undefined " + path.toErrorString());
      }
      if (typeof data === "function") {
        throw new Error(errorPrefix2 + "contains a function " + path.toErrorString() + " with contents = " + data.toString());
      }
      if (isInvalidJSONNumber(data)) {
        throw new Error(errorPrefix2 + "contains " + data.toString() + " " + path.toErrorString());
      }
      if (typeof data === "string" && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {
        throw new Error(errorPrefix2 + "contains a string greater than " + MAX_LEAF_SIZE_ + " utf8 bytes " + path.toErrorString() + " ('" + data.substring(0, 50) + "...')");
      }
      if (data && typeof data === "object") {
        var hasDotValue_1 = false;
        var hasActualChild_1 = false;
        each(data, function(key2, value) {
          if (key2 === ".value") {
            hasDotValue_1 = true;
          } else if (key2 !== ".priority" && key2 !== ".sv") {
            hasActualChild_1 = true;
            if (!isValidKey2(key2)) {
              throw new Error(errorPrefix2 + " contains an invalid key (" + key2 + ") " + path.toErrorString() + `.  Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
            }
          }
          path.push(key2);
          validateFirebaseData(errorPrefix2, value, path);
          path.pop();
        });
        if (hasDotValue_1 && hasActualChild_1) {
          throw new Error(errorPrefix2 + ' contains ".value" child ' + path.toErrorString() + " in addition to actual children.");
        }
      }
    };
    var validateFirebaseMergePaths = function(errorPrefix2, mergePaths) {
      var i2, curPath;
      for (i2 = 0; i2 < mergePaths.length; i2++) {
        curPath = mergePaths[i2];
        var keys = curPath.slice();
        for (var j2 = 0; j2 < keys.length; j2++) {
          if (keys[j2] === ".priority" && j2 === keys.length - 1)
            ;
          else if (!isValidKey2(keys[j2])) {
            throw new Error(errorPrefix2 + "contains an invalid key (" + keys[j2] + ") in path " + curPath.toString() + `. Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
          }
        }
      }
      mergePaths.sort(Path.comparePaths);
      var prevPath = null;
      for (i2 = 0; i2 < mergePaths.length; i2++) {
        curPath = mergePaths[i2];
        if (prevPath !== null && prevPath.contains(curPath)) {
          throw new Error(errorPrefix2 + "contains a path " + prevPath.toString() + " that is ancestor of another path " + curPath.toString());
        }
        prevPath = curPath;
      }
    };
    var validateFirebaseMergeDataArg = function(fnName, argumentNumber, data, path, optional) {
      if (optional && data === void 0) {
        return;
      }
      var errorPrefix$1 = errorPrefix(fnName, argumentNumber, optional);
      if (!(data && typeof data === "object") || Array.isArray(data)) {
        throw new Error(errorPrefix$1 + " must be an object containing the children to replace.");
      }
      var mergePaths = [];
      each(data, function(key2, value) {
        var curPath = new Path(key2);
        validateFirebaseData(errorPrefix$1, value, path.child(curPath));
        if (curPath.getBack() === ".priority") {
          if (!isValidPriority(value)) {
            throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");
          }
        }
        mergePaths.push(curPath);
      });
      validateFirebaseMergePaths(errorPrefix$1, mergePaths);
    };
    var validatePriority = function(fnName, argumentNumber, priority, optional) {
      if (optional && priority === void 0) {
        return;
      }
      if (isInvalidJSONNumber(priority)) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "is " + priority.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");
      }
      if (!isValidPriority(priority)) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid Firebase priority (a string, finite number, server value, or null).");
      }
    };
    var validateEventType = function(fnName, argumentNumber, eventType, optional) {
      if (optional && eventType === void 0) {
        return;
      }
      switch (eventType) {
        case "value":
        case "child_added":
        case "child_removed":
        case "child_changed":
        case "child_moved":
          break;
        default:
          throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
      }
    };
    var validateKey = function(fnName, argumentNumber, key2, optional) {
      if (optional && key2 === void 0) {
        return;
      }
      if (!isValidKey2(key2)) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = "' + key2 + `".  Firebase keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]").`);
      }
    };
    var validatePathString = function(fnName, argumentNumber, pathString, optional) {
      if (optional && pathString === void 0) {
        return;
      }
      if (!isValidPathString(pathString)) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = "' + pathString + `". Paths must be non-empty strings and can't contain ".", "#", "$", "[", or "]"`);
      }
    };
    var validateRootPathString = function(fnName, argumentNumber, pathString, optional) {
      if (pathString) {
        pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
      }
      validatePathString(fnName, argumentNumber, pathString, optional);
    };
    var validateWritablePath = function(fnName, path) {
      if (path.getFront() === ".info") {
        throw new Error(fnName + " failed = Can't modify data under /.info/");
      }
    };
    var validateUrl = function(fnName, argumentNumber, parsedUrl) {
      var pathString = parsedUrl.path.toString();
      if (!(typeof parsedUrl.repoInfo.host === "string") || parsedUrl.repoInfo.host.length === 0 || !isValidKey2(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(":")[0] !== "localhost" || pathString.length !== 0 && !isValidRootPathString(pathString)) {
        throw new Error(errorPrefix(fnName, argumentNumber, false) + `must be a valid firebase URL and the path can't contain ".", "#", "$", "[", or "]".`);
      }
    };
    var validateBoolean = function(fnName, argumentNumber, bool, optional) {
      if (optional && bool === void 0) {
        return;
      }
      if (typeof bool !== "boolean") {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a boolean.");
      }
    };
    var OnDisconnect = function() {
      function OnDisconnect2(repo_, path_) {
        this.repo_ = repo_;
        this.path_ = path_;
      }
      OnDisconnect2.prototype.cancel = function(onComplete) {
        validateArgCount("OnDisconnect.cancel", 0, 1, arguments.length);
        validateCallback("OnDisconnect.cancel", 1, onComplete, true);
        var deferred = new Deferred();
        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      OnDisconnect2.prototype.remove = function(onComplete) {
        validateArgCount("OnDisconnect.remove", 0, 1, arguments.length);
        validateWritablePath("OnDisconnect.remove", this.path_);
        validateCallback("OnDisconnect.remove", 1, onComplete, true);
        var deferred = new Deferred();
        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      OnDisconnect2.prototype.set = function(value, onComplete) {
        validateArgCount("OnDisconnect.set", 1, 2, arguments.length);
        validateWritablePath("OnDisconnect.set", this.path_);
        validateFirebaseDataArg("OnDisconnect.set", 1, value, this.path_, false);
        validateCallback("OnDisconnect.set", 2, onComplete, true);
        var deferred = new Deferred();
        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      OnDisconnect2.prototype.setWithPriority = function(value, priority, onComplete) {
        validateArgCount("OnDisconnect.setWithPriority", 2, 3, arguments.length);
        validateWritablePath("OnDisconnect.setWithPriority", this.path_);
        validateFirebaseDataArg("OnDisconnect.setWithPriority", 1, value, this.path_, false);
        validatePriority("OnDisconnect.setWithPriority", 2, priority, false);
        validateCallback("OnDisconnect.setWithPriority", 3, onComplete, true);
        var deferred = new Deferred();
        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      OnDisconnect2.prototype.update = function(objectToMerge, onComplete) {
        validateArgCount("OnDisconnect.update", 1, 2, arguments.length);
        validateWritablePath("OnDisconnect.update", this.path_);
        if (Array.isArray(objectToMerge)) {
          var newObjectToMerge = {};
          for (var i2 = 0; i2 < objectToMerge.length; ++i2) {
            newObjectToMerge["" + i2] = objectToMerge[i2];
          }
          objectToMerge = newObjectToMerge;
          warn("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }
        validateFirebaseMergeDataArg("OnDisconnect.update", 1, objectToMerge, this.path_, false);
        validateCallback("OnDisconnect.update", 2, onComplete, true);
        var deferred = new Deferred();
        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      return OnDisconnect2;
    }();
    var TransactionResult = function() {
      function TransactionResult2(committed, snapshot) {
        this.committed = committed;
        this.snapshot = snapshot;
      }
      TransactionResult2.prototype.toJSON = function() {
        validateArgCount("TransactionResult.toJSON", 0, 1, arguments.length);
        return {committed: this.committed, snapshot: this.snapshot.toJSON()};
      };
      return TransactionResult2;
    }();
    var PUSH_CHARS = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
    var MIN_PUSH_CHAR = "-";
    var MAX_PUSH_CHAR = "z";
    var MAX_KEY_LEN = 786;
    var nextPushId = function() {
      var lastPushTime = 0;
      var lastRandChars = [];
      return function(now) {
        var duplicateTime = now === lastPushTime;
        lastPushTime = now;
        var i2;
        var timeStampChars = new Array(8);
        for (i2 = 7; i2 >= 0; i2--) {
          timeStampChars[i2] = PUSH_CHARS.charAt(now % 64);
          now = Math.floor(now / 64);
        }
        assert(now === 0, "Cannot push at time == 0");
        var id2 = timeStampChars.join("");
        if (!duplicateTime) {
          for (i2 = 0; i2 < 12; i2++) {
            lastRandChars[i2] = Math.floor(Math.random() * 64);
          }
        } else {
          for (i2 = 11; i2 >= 0 && lastRandChars[i2] === 63; i2--) {
            lastRandChars[i2] = 0;
          }
          lastRandChars[i2]++;
        }
        for (i2 = 0; i2 < 12; i2++) {
          id2 += PUSH_CHARS.charAt(lastRandChars[i2]);
        }
        assert(id2.length === 20, "nextPushId: Length should be 20.");
        return id2;
      };
    }();
    var successor = function(key2) {
      if (key2 === "" + INTEGER_32_MAX) {
        return MIN_PUSH_CHAR;
      }
      var keyAsInt = tryParseInt(key2);
      if (keyAsInt != null) {
        return "" + (keyAsInt + 1);
      }
      var next = new Array(key2.length);
      for (var i_1 = 0; i_1 < next.length; i_1++) {
        next[i_1] = key2.charAt(i_1);
      }
      if (next.length < MAX_KEY_LEN) {
        next.push(MIN_PUSH_CHAR);
        return next.join("");
      }
      var i2 = next.length - 1;
      while (i2 >= 0 && next[i2] === MAX_PUSH_CHAR) {
        i2--;
      }
      if (i2 === -1) {
        return MAX_NAME;
      }
      var source = next[i2];
      var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
      next[i2] = sourcePlusOne;
      return next.slice(0, i2 + 1).join("");
    };
    var predecessor = function(key2) {
      if (key2 === "" + INTEGER_32_MIN) {
        return MIN_NAME;
      }
      var keyAsInt = tryParseInt(key2);
      if (keyAsInt != null) {
        return "" + (keyAsInt - 1);
      }
      var next = new Array(key2.length);
      for (var i2 = 0; i2 < next.length; i2++) {
        next[i2] = key2.charAt(i2);
      }
      if (next[next.length - 1] === MIN_PUSH_CHAR) {
        if (next.length === 1) {
          return "" + INTEGER_32_MAX;
        }
        delete next[next.length - 1];
        return next.join("");
      }
      next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
      return next.join("") + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
    };
    var NamedNode = function() {
      function NamedNode2(name10, node) {
        this.name = name10;
        this.node = node;
      }
      NamedNode2.Wrap = function(name10, node) {
        return new NamedNode2(name10, node);
      };
      return NamedNode2;
    }();
    var Index = function() {
      function Index2() {
      }
      Index2.prototype.getCompare = function() {
        return this.compare.bind(this);
      };
      Index2.prototype.indexedValueChanged = function(oldNode, newNode) {
        var oldWrapped = new NamedNode(MIN_NAME, oldNode);
        var newWrapped = new NamedNode(MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
      };
      Index2.prototype.minPost = function() {
        return NamedNode.MIN;
      };
      return Index2;
    }();
    var __EMPTY_NODE;
    var KeyIndex = function(_super) {
      __extends(KeyIndex2, _super);
      function KeyIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(KeyIndex2, "__EMPTY_NODE", {
        get: function() {
          return __EMPTY_NODE;
        },
        set: function(val) {
          __EMPTY_NODE = val;
        },
        enumerable: false,
        configurable: true
      });
      KeyIndex2.prototype.compare = function(a, b) {
        return nameCompare(a.name, b.name);
      };
      KeyIndex2.prototype.isDefinedOn = function(node) {
        throw assertionError("KeyIndex.isDefinedOn not expected to be called.");
      };
      KeyIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return false;
      };
      KeyIndex2.prototype.minPost = function() {
        return NamedNode.MIN;
      };
      KeyIndex2.prototype.maxPost = function() {
        return new NamedNode(MAX_NAME, __EMPTY_NODE);
      };
      KeyIndex2.prototype.makePost = function(indexValue, name10) {
        assert(typeof indexValue === "string", "KeyIndex indexValue must always be a string.");
        return new NamedNode(indexValue, __EMPTY_NODE);
      };
      KeyIndex2.prototype.toString = function() {
        return ".key";
      };
      return KeyIndex2;
    }(Index);
    var KEY_INDEX = new KeyIndex();
    var MAX_NODE;
    function setMaxNode(val) {
      MAX_NODE = val;
    }
    var priorityHashText = function(priority) {
      if (typeof priority === "number") {
        return "number:" + doubleToIEEE754String(priority);
      } else {
        return "string:" + priority;
      }
    };
    var validatePriorityNode = function(priorityNode) {
      if (priorityNode.isLeafNode()) {
        var val = priorityNode.val();
        assert(typeof val === "string" || typeof val === "number" || typeof val === "object" && contains(val, ".sv"), "Priority must be a string or number.");
      } else {
        assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), "priority of unexpected type.");
      }
      assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };
    var __childrenNodeConstructor;
    var LeafNode = function() {
      function LeafNode2(value_, priorityNode_) {
        if (priorityNode_ === void 0) {
          priorityNode_ = LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
        }
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        assert(this.value_ !== void 0 && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        validatePriorityNode(this.priorityNode_);
      }
      Object.defineProperty(LeafNode2, "__childrenNodeConstructor", {
        get: function() {
          return __childrenNodeConstructor;
        },
        set: function(val) {
          __childrenNodeConstructor = val;
        },
        enumerable: false,
        configurable: true
      });
      LeafNode2.prototype.isLeafNode = function() {
        return true;
      };
      LeafNode2.prototype.getPriority = function() {
        return this.priorityNode_;
      };
      LeafNode2.prototype.updatePriority = function(newPriorityNode) {
        return new LeafNode2(this.value_, newPriorityNode);
      };
      LeafNode2.prototype.getImmediateChild = function(childName) {
        if (childName === ".priority") {
          return this.priorityNode_;
        } else {
          return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
        }
      };
      LeafNode2.prototype.getChild = function(path) {
        if (path.isEmpty()) {
          return this;
        } else if (path.getFront() === ".priority") {
          return this.priorityNode_;
        } else {
          return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
        }
      };
      LeafNode2.prototype.hasChild = function() {
        return false;
      };
      LeafNode2.prototype.getPredecessorChildName = function(childName, childNode) {
        return null;
      };
      LeafNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
        if (childName === ".priority") {
          return this.updatePriority(newChildNode);
        } else if (newChildNode.isEmpty() && childName !== ".priority") {
          return this;
        } else {
          return LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
        }
      };
      LeafNode2.prototype.updateChild = function(path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
          return newChildNode;
        } else if (newChildNode.isEmpty() && front !== ".priority") {
          return this;
        } else {
          assert(front !== ".priority" || path.getLength() === 1, ".priority must be the last token in a path");
          return this.updateImmediateChild(front, LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
        }
      };
      LeafNode2.prototype.isEmpty = function() {
        return false;
      };
      LeafNode2.prototype.numChildren = function() {
        return 0;
      };
      LeafNode2.prototype.forEachChild = function(index2, action) {
        return false;
      };
      LeafNode2.prototype.val = function(exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty()) {
          return {
            ".value": this.getValue(),
            ".priority": this.getPriority().val()
          };
        } else {
          return this.getValue();
        }
      };
      LeafNode2.prototype.hash = function() {
        if (this.lazyHash_ === null) {
          var toHash = "";
          if (!this.priorityNode_.isEmpty()) {
            toHash += "priority:" + priorityHashText(this.priorityNode_.val()) + ":";
          }
          var type = typeof this.value_;
          toHash += type + ":";
          if (type === "number") {
            toHash += doubleToIEEE754String(this.value_);
          } else {
            toHash += this.value_;
          }
          this.lazyHash_ = sha1(toHash);
        }
        return this.lazyHash_;
      };
      LeafNode2.prototype.getValue = function() {
        return this.value_;
      };
      LeafNode2.prototype.compareTo = function(other) {
        if (other === LeafNode2.__childrenNodeConstructor.EMPTY_NODE) {
          return 1;
        } else if (other instanceof LeafNode2.__childrenNodeConstructor) {
          return -1;
        } else {
          assert(other.isLeafNode(), "Unknown node type");
          return this.compareToLeafNode_(other);
        }
      };
      LeafNode2.prototype.compareToLeafNode_ = function(otherLeaf) {
        var otherLeafType = typeof otherLeaf.value_;
        var thisLeafType = typeof this.value_;
        var otherIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        var thisIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        assert(otherIndex >= 0, "Unknown leaf type: " + otherLeafType);
        assert(thisIndex >= 0, "Unknown leaf type: " + thisLeafType);
        if (otherIndex === thisIndex) {
          if (thisLeafType === "object") {
            return 0;
          } else {
            if (this.value_ < otherLeaf.value_) {
              return -1;
            } else if (this.value_ === otherLeaf.value_) {
              return 0;
            } else {
              return 1;
            }
          }
        } else {
          return thisIndex - otherIndex;
        }
      };
      LeafNode2.prototype.withIndex = function() {
        return this;
      };
      LeafNode2.prototype.isIndexed = function() {
        return true;
      };
      LeafNode2.prototype.equals = function(other) {
        if (other === this) {
          return true;
        } else if (other.isLeafNode()) {
          var otherLeaf = other;
          return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
        } else {
          return false;
        }
      };
      LeafNode2.VALUE_TYPE_ORDER = ["object", "boolean", "number", "string"];
      return LeafNode2;
    }();
    var nodeFromJSON;
    var MAX_NODE$1;
    function setNodeFromJSON(val) {
      nodeFromJSON = val;
    }
    function setMaxNode$1(val) {
      MAX_NODE$1 = val;
    }
    var PriorityIndex = function(_super) {
      __extends(PriorityIndex2, _super);
      function PriorityIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PriorityIndex2.prototype.compare = function(a, b) {
        var aPriority = a.node.getPriority();
        var bPriority = b.node.getPriority();
        var indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) {
          return nameCompare(a.name, b.name);
        } else {
          return indexCmp;
        }
      };
      PriorityIndex2.prototype.isDefinedOn = function(node) {
        return !node.getPriority().isEmpty();
      };
      PriorityIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
      };
      PriorityIndex2.prototype.minPost = function() {
        return NamedNode.MIN;
      };
      PriorityIndex2.prototype.maxPost = function() {
        return new NamedNode(MAX_NAME, new LeafNode("[PRIORITY-POST]", MAX_NODE$1));
      };
      PriorityIndex2.prototype.makePost = function(indexValue, name10) {
        var priorityNode = nodeFromJSON(indexValue);
        return new NamedNode(name10, new LeafNode("[PRIORITY-POST]", priorityNode));
      };
      PriorityIndex2.prototype.toString = function() {
        return ".priority";
      };
      return PriorityIndex2;
    }(Index);
    var PRIORITY_INDEX = new PriorityIndex();
    var SortedMapIterator = function() {
      function SortedMapIterator2(node, startKey, comparator, isReverse_, resultGenerator_) {
        if (resultGenerator_ === void 0) {
          resultGenerator_ = null;
        }
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        this.nodeStack_ = [];
        var cmp = 1;
        while (!node.isEmpty()) {
          node = node;
          cmp = startKey ? comparator(node.key, startKey) : 1;
          if (isReverse_) {
            cmp *= -1;
          }
          if (cmp < 0) {
            if (this.isReverse_) {
              node = node.left;
            } else {
              node = node.right;
            }
          } else if (cmp === 0) {
            this.nodeStack_.push(node);
            break;
          } else {
            this.nodeStack_.push(node);
            if (this.isReverse_) {
              node = node.right;
            } else {
              node = node.left;
            }
          }
        }
      }
      SortedMapIterator2.prototype.getNext = function() {
        if (this.nodeStack_.length === 0) {
          return null;
        }
        var node = this.nodeStack_.pop();
        var result;
        if (this.resultGenerator_) {
          result = this.resultGenerator_(node.key, node.value);
        } else {
          result = {key: node.key, value: node.value};
        }
        if (this.isReverse_) {
          node = node.left;
          while (!node.isEmpty()) {
            this.nodeStack_.push(node);
            node = node.right;
          }
        } else {
          node = node.right;
          while (!node.isEmpty()) {
            this.nodeStack_.push(node);
            node = node.left;
          }
        }
        return result;
      };
      SortedMapIterator2.prototype.hasNext = function() {
        return this.nodeStack_.length > 0;
      };
      SortedMapIterator2.prototype.peek = function() {
        if (this.nodeStack_.length === 0) {
          return null;
        }
        var node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) {
          return this.resultGenerator_(node.key, node.value);
        } else {
          return {key: node.key, value: node.value};
        }
      };
      return SortedMapIterator2;
    }();
    var LLRBNode = function() {
      function LLRBNode2(key2, value, color, left, right) {
        this.key = key2;
        this.value = value;
        this.color = color != null ? color : LLRBNode2.RED;
        this.left = left != null ? left : SortedMap.EMPTY_NODE;
        this.right = right != null ? right : SortedMap.EMPTY_NODE;
      }
      LLRBNode2.prototype.copy = function(key2, value, color, left, right) {
        return new LLRBNode2(key2 != null ? key2 : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      };
      LLRBNode2.prototype.count = function() {
        return this.left.count() + 1 + this.right.count();
      };
      LLRBNode2.prototype.isEmpty = function() {
        return false;
      };
      LLRBNode2.prototype.inorderTraversal = function(action) {
        return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
      };
      LLRBNode2.prototype.reverseTraversal = function(action) {
        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
      };
      LLRBNode2.prototype.min_ = function() {
        if (this.left.isEmpty()) {
          return this;
        } else {
          return this.left.min_();
        }
      };
      LLRBNode2.prototype.minKey = function() {
        return this.min_().key;
      };
      LLRBNode2.prototype.maxKey = function() {
        if (this.right.isEmpty()) {
          return this.key;
        } else {
          return this.right.maxKey();
        }
      };
      LLRBNode2.prototype.insert = function(key2, value, comparator) {
        var n2 = this;
        var cmp = comparator(key2, n2.key);
        if (cmp < 0) {
          n2 = n2.copy(null, null, null, n2.left.insert(key2, value, comparator), null);
        } else if (cmp === 0) {
          n2 = n2.copy(null, value, null, null, null);
        } else {
          n2 = n2.copy(null, null, null, null, n2.right.insert(key2, value, comparator));
        }
        return n2.fixUp_();
      };
      LLRBNode2.prototype.removeMin_ = function() {
        if (this.left.isEmpty()) {
          return SortedMap.EMPTY_NODE;
        }
        var n2 = this;
        if (!n2.left.isRed_() && !n2.left.left.isRed_()) {
          n2 = n2.moveRedLeft_();
        }
        n2 = n2.copy(null, null, null, n2.left.removeMin_(), null);
        return n2.fixUp_();
      };
      LLRBNode2.prototype.remove = function(key2, comparator) {
        var n2, smallest;
        n2 = this;
        if (comparator(key2, n2.key) < 0) {
          if (!n2.left.isEmpty() && !n2.left.isRed_() && !n2.left.left.isRed_()) {
            n2 = n2.moveRedLeft_();
          }
          n2 = n2.copy(null, null, null, n2.left.remove(key2, comparator), null);
        } else {
          if (n2.left.isRed_()) {
            n2 = n2.rotateRight_();
          }
          if (!n2.right.isEmpty() && !n2.right.isRed_() && !n2.right.left.isRed_()) {
            n2 = n2.moveRedRight_();
          }
          if (comparator(key2, n2.key) === 0) {
            if (n2.right.isEmpty()) {
              return SortedMap.EMPTY_NODE;
            } else {
              smallest = n2.right.min_();
              n2 = n2.copy(smallest.key, smallest.value, null, null, n2.right.removeMin_());
            }
          }
          n2 = n2.copy(null, null, null, null, n2.right.remove(key2, comparator));
        }
        return n2.fixUp_();
      };
      LLRBNode2.prototype.isRed_ = function() {
        return this.color;
      };
      LLRBNode2.prototype.fixUp_ = function() {
        var n2 = this;
        if (n2.right.isRed_() && !n2.left.isRed_()) {
          n2 = n2.rotateLeft_();
        }
        if (n2.left.isRed_() && n2.left.left.isRed_()) {
          n2 = n2.rotateRight_();
        }
        if (n2.left.isRed_() && n2.right.isRed_()) {
          n2 = n2.colorFlip_();
        }
        return n2;
      };
      LLRBNode2.prototype.moveRedLeft_ = function() {
        var n2 = this.colorFlip_();
        if (n2.right.left.isRed_()) {
          n2 = n2.copy(null, null, null, null, n2.right.rotateRight_());
          n2 = n2.rotateLeft_();
          n2 = n2.colorFlip_();
        }
        return n2;
      };
      LLRBNode2.prototype.moveRedRight_ = function() {
        var n2 = this.colorFlip_();
        if (n2.left.left.isRed_()) {
          n2 = n2.rotateRight_();
          n2 = n2.colorFlip_();
        }
        return n2;
      };
      LLRBNode2.prototype.rotateLeft_ = function() {
        var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
      };
      LLRBNode2.prototype.rotateRight_ = function() {
        var nr2 = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr2);
      };
      LLRBNode2.prototype.colorFlip_ = function() {
        var left = this.left.copy(null, null, !this.left.color, null, null);
        var right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
      };
      LLRBNode2.prototype.checkMaxDepth_ = function() {
        var blackDepth = this.check_();
        return Math.pow(2, blackDepth) <= this.count() + 1;
      };
      LLRBNode2.prototype.check_ = function() {
        if (this.isRed_() && this.left.isRed_()) {
          throw new Error("Red node has red child(" + this.key + "," + this.value + ")");
        }
        if (this.right.isRed_()) {
          throw new Error("Right child of (" + this.key + "," + this.value + ") is red");
        }
        var blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) {
          throw new Error("Black depths differ");
        } else {
          return blackDepth + (this.isRed_() ? 0 : 1);
        }
      };
      LLRBNode2.RED = true;
      LLRBNode2.BLACK = false;
      return LLRBNode2;
    }();
    var LLRBEmptyNode = function() {
      function LLRBEmptyNode2() {
      }
      LLRBEmptyNode2.prototype.copy = function(key2, value, color, left, right) {
        return this;
      };
      LLRBEmptyNode2.prototype.insert = function(key2, value, comparator) {
        return new LLRBNode(key2, value, null);
      };
      LLRBEmptyNode2.prototype.remove = function(key2, comparator) {
        return this;
      };
      LLRBEmptyNode2.prototype.count = function() {
        return 0;
      };
      LLRBEmptyNode2.prototype.isEmpty = function() {
        return true;
      };
      LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
        return false;
      };
      LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
        return false;
      };
      LLRBEmptyNode2.prototype.minKey = function() {
        return null;
      };
      LLRBEmptyNode2.prototype.maxKey = function() {
        return null;
      };
      LLRBEmptyNode2.prototype.check_ = function() {
        return 0;
      };
      LLRBEmptyNode2.prototype.isRed_ = function() {
        return false;
      };
      return LLRBEmptyNode2;
    }();
    var SortedMap = function() {
      function SortedMap2(comparator_, root_) {
        if (root_ === void 0) {
          root_ = SortedMap2.EMPTY_NODE;
        }
        this.comparator_ = comparator_;
        this.root_ = root_;
      }
      SortedMap2.prototype.insert = function(key2, value) {
        return new SortedMap2(this.comparator_, this.root_.insert(key2, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
      };
      SortedMap2.prototype.remove = function(key2) {
        return new SortedMap2(this.comparator_, this.root_.remove(key2, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
      };
      SortedMap2.prototype.get = function(key2) {
        var cmp;
        var node = this.root_;
        while (!node.isEmpty()) {
          cmp = this.comparator_(key2, node.key);
          if (cmp === 0) {
            return node.value;
          } else if (cmp < 0) {
            node = node.left;
          } else if (cmp > 0) {
            node = node.right;
          }
        }
        return null;
      };
      SortedMap2.prototype.getPredecessorKey = function(key2) {
        var cmp, node = this.root_, rightParent = null;
        while (!node.isEmpty()) {
          cmp = this.comparator_(key2, node.key);
          if (cmp === 0) {
            if (!node.left.isEmpty()) {
              node = node.left;
              while (!node.right.isEmpty()) {
                node = node.right;
              }
              return node.key;
            } else if (rightParent) {
              return rightParent.key;
            } else {
              return null;
            }
          } else if (cmp < 0) {
            node = node.left;
          } else if (cmp > 0) {
            rightParent = node;
            node = node.right;
          }
        }
        throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
      };
      SortedMap2.prototype.isEmpty = function() {
        return this.root_.isEmpty();
      };
      SortedMap2.prototype.count = function() {
        return this.root_.count();
      };
      SortedMap2.prototype.minKey = function() {
        return this.root_.minKey();
      };
      SortedMap2.prototype.maxKey = function() {
        return this.root_.maxKey();
      };
      SortedMap2.prototype.inorderTraversal = function(action) {
        return this.root_.inorderTraversal(action);
      };
      SortedMap2.prototype.reverseTraversal = function(action) {
        return this.root_.reverseTraversal(action);
      };
      SortedMap2.prototype.getIterator = function(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
      };
      SortedMap2.prototype.getIteratorFrom = function(key2, resultGenerator) {
        return new SortedMapIterator(this.root_, key2, this.comparator_, false, resultGenerator);
      };
      SortedMap2.prototype.getReverseIteratorFrom = function(key2, resultGenerator) {
        return new SortedMapIterator(this.root_, key2, this.comparator_, true, resultGenerator);
      };
      SortedMap2.prototype.getReverseIterator = function(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
      };
      SortedMap2.EMPTY_NODE = new LLRBEmptyNode();
      return SortedMap2;
    }();
    var LOG_2 = Math.log(2);
    var Base12Num = function() {
      function Base12Num2(length) {
        var logBase2 = function(num) {
          return parseInt(Math.log(num) / LOG_2, 10);
        };
        var bitMask = function(bits) {
          return parseInt(Array(bits + 1).join("1"), 2);
        };
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        var mask = bitMask(this.count);
        this.bits_ = length + 1 & mask;
      }
      Base12Num2.prototype.nextBitIsOne = function() {
        var result = !(this.bits_ & 1 << this.current_);
        this.current_--;
        return result;
      };
      return Base12Num2;
    }();
    var buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
      childList.sort(cmp);
      var buildBalancedTree = function(low, high) {
        var length = high - low;
        var namedNode;
        var key2;
        if (length === 0) {
          return null;
        } else if (length === 1) {
          namedNode = childList[low];
          key2 = keyFn ? keyFn(namedNode) : namedNode;
          return new LLRBNode(key2, namedNode.node, LLRBNode.BLACK, null, null);
        } else {
          var middle = parseInt(length / 2, 10) + low;
          var left = buildBalancedTree(low, middle);
          var right = buildBalancedTree(middle + 1, high);
          namedNode = childList[middle];
          key2 = keyFn ? keyFn(namedNode) : namedNode;
          return new LLRBNode(key2, namedNode.node, LLRBNode.BLACK, left, right);
        }
      };
      var buildFrom12Array = function(base122) {
        var node = null;
        var root2 = null;
        var index2 = childList.length;
        var buildPennant = function(chunkSize2, color) {
          var low = index2 - chunkSize2;
          var high = index2;
          index2 -= chunkSize2;
          var childTree = buildBalancedTree(low + 1, high);
          var namedNode = childList[low];
          var key2 = keyFn ? keyFn(namedNode) : namedNode;
          attachPennant(new LLRBNode(key2, namedNode.node, color, null, childTree));
        };
        var attachPennant = function(pennant) {
          if (node) {
            node.left = pennant;
            node = pennant;
          } else {
            root2 = pennant;
            node = pennant;
          }
        };
        for (var i2 = 0; i2 < base122.count; ++i2) {
          var isOne = base122.nextBitIsOne();
          var chunkSize = Math.pow(2, base122.count - (i2 + 1));
          if (isOne) {
            buildPennant(chunkSize, LLRBNode.BLACK);
          } else {
            buildPennant(chunkSize, LLRBNode.BLACK);
            buildPennant(chunkSize, LLRBNode.RED);
          }
        }
        return root2;
      };
      var base12 = new Base12Num(childList.length);
      var root = buildFrom12Array(base12);
      return new SortedMap(mapSortFn || cmp, root);
    };
    var _defaultIndexMap;
    var fallbackObject = {};
    var IndexMap = function() {
      function IndexMap2(indexes_, indexSet_) {
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
      }
      Object.defineProperty(IndexMap2, "Default", {
        get: function() {
          assert(fallbackObject && PRIORITY_INDEX, "ChildrenNode.ts has not been loaded");
          _defaultIndexMap = _defaultIndexMap || new IndexMap2({".priority": fallbackObject}, {".priority": PRIORITY_INDEX});
          return _defaultIndexMap;
        },
        enumerable: false,
        configurable: true
      });
      IndexMap2.prototype.get = function(indexKey) {
        var sortedMap = safeGet(this.indexes_, indexKey);
        if (!sortedMap) {
          throw new Error("No index defined for " + indexKey);
        }
        if (sortedMap instanceof SortedMap) {
          return sortedMap;
        } else {
          return null;
        }
      };
      IndexMap2.prototype.hasIndex = function(indexDefinition) {
        return contains(this.indexSet_, indexDefinition.toString());
      };
      IndexMap2.prototype.addIndex = function(indexDefinition, existingChildren) {
        assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        var childList = [];
        var sawIndexedValue = false;
        var iter = existingChildren.getIterator(NamedNode.Wrap);
        var next = iter.getNext();
        while (next) {
          sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
          childList.push(next);
          next = iter.getNext();
        }
        var newIndex;
        if (sawIndexedValue) {
          newIndex = buildChildSet(childList, indexDefinition.getCompare());
        } else {
          newIndex = fallbackObject;
        }
        var indexName = indexDefinition.toString();
        var newIndexSet = __assign({}, this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        var newIndexes = __assign({}, this.indexes_);
        newIndexes[indexName] = newIndex;
        return new IndexMap2(newIndexes, newIndexSet);
      };
      IndexMap2.prototype.addToIndexes = function(namedNode, existingChildren) {
        var _this = this;
        var newIndexes = map(this.indexes_, function(indexedChildren, indexName) {
          var index2 = safeGet(_this.indexSet_, indexName);
          assert(index2, "Missing index implementation for " + indexName);
          if (indexedChildren === fallbackObject) {
            if (index2.isDefinedOn(namedNode.node)) {
              var childList = [];
              var iter = existingChildren.getIterator(NamedNode.Wrap);
              var next = iter.getNext();
              while (next) {
                if (next.name !== namedNode.name) {
                  childList.push(next);
                }
                next = iter.getNext();
              }
              childList.push(namedNode);
              return buildChildSet(childList, index2.getCompare());
            } else {
              return fallbackObject;
            }
          } else {
            var existingSnap = existingChildren.get(namedNode.name);
            var newChildren = indexedChildren;
            if (existingSnap) {
              newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
            }
            return newChildren.insert(namedNode, namedNode.node);
          }
        });
        return new IndexMap2(newIndexes, this.indexSet_);
      };
      IndexMap2.prototype.removeFromIndexes = function(namedNode, existingChildren) {
        var newIndexes = map(this.indexes_, function(indexedChildren) {
          if (indexedChildren === fallbackObject) {
            return indexedChildren;
          } else {
            var existingSnap = existingChildren.get(namedNode.name);
            if (existingSnap) {
              return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
            } else {
              return indexedChildren;
            }
          }
        });
        return new IndexMap2(newIndexes, this.indexSet_);
      };
      return IndexMap2;
    }();
    function NAME_ONLY_COMPARATOR(left, right) {
      return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
      return nameCompare(left, right);
    }
    var EMPTY_NODE;
    var ChildrenNode = function() {
      function ChildrenNode2(children_, priorityNode_, indexMap_) {
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        if (this.priorityNode_) {
          validatePriorityNode(this.priorityNode_);
        }
        if (this.children_.isEmpty()) {
          assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), "An empty node cannot have a priority");
        }
      }
      Object.defineProperty(ChildrenNode2, "EMPTY_NODE", {
        get: function() {
          return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode2(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
        },
        enumerable: false,
        configurable: true
      });
      ChildrenNode2.prototype.isLeafNode = function() {
        return false;
      };
      ChildrenNode2.prototype.getPriority = function() {
        return this.priorityNode_ || EMPTY_NODE;
      };
      ChildrenNode2.prototype.updatePriority = function(newPriorityNode) {
        if (this.children_.isEmpty()) {
          return this;
        } else {
          return new ChildrenNode2(this.children_, newPriorityNode, this.indexMap_);
        }
      };
      ChildrenNode2.prototype.getImmediateChild = function(childName) {
        if (childName === ".priority") {
          return this.getPriority();
        } else {
          var child2 = this.children_.get(childName);
          return child2 === null ? EMPTY_NODE : child2;
        }
      };
      ChildrenNode2.prototype.getChild = function(path) {
        var front = path.getFront();
        if (front === null) {
          return this;
        }
        return this.getImmediateChild(front).getChild(path.popFront());
      };
      ChildrenNode2.prototype.hasChild = function(childName) {
        return this.children_.get(childName) !== null;
      };
      ChildrenNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
        assert(newChildNode, "We should always be passing snapshot nodes");
        if (childName === ".priority") {
          return this.updatePriority(newChildNode);
        } else {
          var namedNode = new NamedNode(childName, newChildNode);
          var newChildren = void 0, newIndexMap = void 0;
          if (newChildNode.isEmpty()) {
            newChildren = this.children_.remove(childName);
            newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
          } else {
            newChildren = this.children_.insert(childName, newChildNode);
            newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
          }
          var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
          return new ChildrenNode2(newChildren, newPriority, newIndexMap);
        }
      };
      ChildrenNode2.prototype.updateChild = function(path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
          return newChildNode;
        } else {
          assert(path.getFront() !== ".priority" || path.getLength() === 1, ".priority must be the last token in a path");
          var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
          return this.updateImmediateChild(front, newImmediateChild);
        }
      };
      ChildrenNode2.prototype.isEmpty = function() {
        return this.children_.isEmpty();
      };
      ChildrenNode2.prototype.numChildren = function() {
        return this.children_.count();
      };
      ChildrenNode2.prototype.val = function(exportFormat) {
        if (this.isEmpty()) {
          return null;
        }
        var obj = {};
        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild(PRIORITY_INDEX, function(key3, childNode) {
          obj[key3] = childNode.val(exportFormat);
          numKeys++;
          if (allIntegerKeys && ChildrenNode2.INTEGER_REGEXP_.test(key3)) {
            maxKey = Math.max(maxKey, Number(key3));
          } else {
            allIntegerKeys = false;
          }
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
          var array = [];
          for (var key2 in obj) {
            array[key2] = obj[key2];
          }
          return array;
        } else {
          if (exportFormat && !this.getPriority().isEmpty()) {
            obj[".priority"] = this.getPriority().val();
          }
          return obj;
        }
      };
      ChildrenNode2.prototype.hash = function() {
        if (this.lazyHash_ === null) {
          var toHash_1 = "";
          if (!this.getPriority().isEmpty()) {
            toHash_1 += "priority:" + priorityHashText(this.getPriority().val()) + ":";
          }
          this.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
            var childHash = childNode.hash();
            if (childHash !== "") {
              toHash_1 += ":" + key2 + ":" + childHash;
            }
          });
          this.lazyHash_ = toHash_1 === "" ? "" : sha1(toHash_1);
        }
        return this.lazyHash_;
      };
      ChildrenNode2.prototype.getPredecessorChildName = function(childName, childNode, index2) {
        var idx = this.resolveIndex_(index2);
        if (idx) {
          var predecessor2 = idx.getPredecessorKey(new NamedNode(childName, childNode));
          return predecessor2 ? predecessor2.name : null;
        } else {
          return this.children_.getPredecessorKey(childName);
        }
      };
      ChildrenNode2.prototype.getFirstChildName = function(indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          var minKey = idx.minKey();
          return minKey && minKey.name;
        } else {
          return this.children_.minKey();
        }
      };
      ChildrenNode2.prototype.getFirstChild = function(indexDefinition) {
        var minKey = this.getFirstChildName(indexDefinition);
        if (minKey) {
          return new NamedNode(minKey, this.children_.get(minKey));
        } else {
          return null;
        }
      };
      ChildrenNode2.prototype.getLastChildName = function(indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          var maxKey = idx.maxKey();
          return maxKey && maxKey.name;
        } else {
          return this.children_.maxKey();
        }
      };
      ChildrenNode2.prototype.getLastChild = function(indexDefinition) {
        var maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) {
          return new NamedNode(maxKey, this.children_.get(maxKey));
        } else {
          return null;
        }
      };
      ChildrenNode2.prototype.forEachChild = function(index2, action) {
        var idx = this.resolveIndex_(index2);
        if (idx) {
          return idx.inorderTraversal(function(wrappedNode) {
            return action(wrappedNode.name, wrappedNode.node);
          });
        } else {
          return this.children_.inorderTraversal(action);
        }
      };
      ChildrenNode2.prototype.getIterator = function(indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
      };
      ChildrenNode2.prototype.getIteratorFrom = function(startPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          return idx.getIteratorFrom(startPost, function(key2) {
            return key2;
          });
        } else {
          var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
          var next = iterator.peek();
          while (next != null && indexDefinition.compare(next, startPost) < 0) {
            iterator.getNext();
            next = iterator.peek();
          }
          return iterator;
        }
      };
      ChildrenNode2.prototype.getReverseIterator = function(indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
      };
      ChildrenNode2.prototype.getReverseIteratorFrom = function(endPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          return idx.getReverseIteratorFrom(endPost, function(key2) {
            return key2;
          });
        } else {
          var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
          var next = iterator.peek();
          while (next != null && indexDefinition.compare(next, endPost) > 0) {
            iterator.getNext();
            next = iterator.peek();
          }
          return iterator;
        }
      };
      ChildrenNode2.prototype.compareTo = function(other) {
        if (this.isEmpty()) {
          if (other.isEmpty()) {
            return 0;
          } else {
            return -1;
          }
        } else if (other.isLeafNode() || other.isEmpty()) {
          return 1;
        } else if (other === MAX_NODE$2) {
          return -1;
        } else {
          return 0;
        }
      };
      ChildrenNode2.prototype.withIndex = function(indexDefinition) {
        if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
          return this;
        } else {
          var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
          return new ChildrenNode2(this.children_, this.priorityNode_, newIndexMap);
        }
      };
      ChildrenNode2.prototype.isIndexed = function(index2) {
        return index2 === KEY_INDEX || this.indexMap_.hasIndex(index2);
      };
      ChildrenNode2.prototype.equals = function(other) {
        if (other === this) {
          return true;
        } else if (other.isLeafNode()) {
          return false;
        } else {
          var otherChildrenNode = other;
          if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
            return false;
          } else if (this.children_.count() === otherChildrenNode.children_.count()) {
            var thisIter = this.getIterator(PRIORITY_INDEX);
            var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
            var thisCurrent = thisIter.getNext();
            var otherCurrent = otherIter.getNext();
            while (thisCurrent && otherCurrent) {
              if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
                return false;
              }
              thisCurrent = thisIter.getNext();
              otherCurrent = otherIter.getNext();
            }
            return thisCurrent === null && otherCurrent === null;
          } else {
            return false;
          }
        }
      };
      ChildrenNode2.prototype.resolveIndex_ = function(indexDefinition) {
        if (indexDefinition === KEY_INDEX) {
          return null;
        } else {
          return this.indexMap_.get(indexDefinition.toString());
        }
      };
      ChildrenNode2.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
      return ChildrenNode2;
    }();
    var MaxNode = function(_super) {
      __extends(MaxNode2, _super);
      function MaxNode2() {
        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
      }
      MaxNode2.prototype.compareTo = function(other) {
        if (other === this) {
          return 0;
        } else {
          return 1;
        }
      };
      MaxNode2.prototype.equals = function(other) {
        return other === this;
      };
      MaxNode2.prototype.getPriority = function() {
        return this;
      };
      MaxNode2.prototype.getImmediateChild = function(childName) {
        return ChildrenNode.EMPTY_NODE;
      };
      MaxNode2.prototype.isEmpty = function() {
        return false;
      };
      return MaxNode2;
    }(ChildrenNode);
    var MAX_NODE$2 = new MaxNode();
    Object.defineProperties(NamedNode, {
      MIN: {
        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
      },
      MAX: {
        value: new NamedNode(MAX_NAME, MAX_NODE$2)
      }
    });
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode(MAX_NODE$2);
    setMaxNode$1(MAX_NODE$2);
    var USE_HINZE = true;
    function nodeFromJSON$1(json, priority) {
      if (priority === void 0) {
        priority = null;
      }
      if (json === null) {
        return ChildrenNode.EMPTY_NODE;
      }
      if (typeof json === "object" && ".priority" in json) {
        priority = json[".priority"];
      }
      assert(priority === null || typeof priority === "string" || typeof priority === "number" || typeof priority === "object" && ".sv" in priority, "Invalid priority type found: " + typeof priority);
      if (typeof json === "object" && ".value" in json && json[".value"] !== null) {
        json = json[".value"];
      }
      if (typeof json !== "object" || ".sv" in json) {
        var jsonLeaf = json;
        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
      }
      if (!(json instanceof Array) && USE_HINZE) {
        var children_1 = [];
        var childrenHavePriority_1 = false;
        var hinzeJsonObj = json;
        each(hinzeJsonObj, function(key2, child2) {
          if (key2.substring(0, 1) !== ".") {
            var childNode = nodeFromJSON$1(child2);
            if (!childNode.isEmpty()) {
              childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
              children_1.push(new NamedNode(key2, childNode));
            }
          }
        });
        if (children_1.length === 0) {
          return ChildrenNode.EMPTY_NODE;
        }
        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function(namedNode) {
          return namedNode.name;
        }, NAME_COMPARATOR);
        if (childrenHavePriority_1) {
          var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
          return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({".priority": sortedChildSet}, {".priority": PRIORITY_INDEX}));
        } else {
          return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
        }
      } else {
        var node_1 = ChildrenNode.EMPTY_NODE;
        each(json, function(key2, childData) {
          if (contains(json, key2)) {
            if (key2.substring(0, 1) !== ".") {
              var childNode = nodeFromJSON$1(childData);
              if (childNode.isLeafNode() || !childNode.isEmpty()) {
                node_1 = node_1.updateImmediateChild(key2, childNode);
              }
            }
          }
        });
        return node_1.updatePriority(nodeFromJSON$1(priority));
      }
    }
    setNodeFromJSON(nodeFromJSON$1);
    var ValueIndex = function(_super) {
      __extends(ValueIndex2, _super);
      function ValueIndex2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueIndex2.prototype.compare = function(a, b) {
        var indexCmp = a.node.compareTo(b.node);
        if (indexCmp === 0) {
          return nameCompare(a.name, b.name);
        } else {
          return indexCmp;
        }
      };
      ValueIndex2.prototype.isDefinedOn = function(node) {
        return true;
      };
      ValueIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
        return !oldNode.equals(newNode);
      };
      ValueIndex2.prototype.minPost = function() {
        return NamedNode.MIN;
      };
      ValueIndex2.prototype.maxPost = function() {
        return NamedNode.MAX;
      };
      ValueIndex2.prototype.makePost = function(indexValue, name10) {
        var valueNode = nodeFromJSON$1(indexValue);
        return new NamedNode(name10, valueNode);
      };
      ValueIndex2.prototype.toString = function() {
        return ".value";
      };
      return ValueIndex2;
    }(Index);
    var VALUE_INDEX = new ValueIndex();
    var PathIndex = function(_super) {
      __extends(PathIndex2, _super);
      function PathIndex2(indexPath_) {
        var _this = _super.call(this) || this;
        _this.indexPath_ = indexPath_;
        assert(!indexPath_.isEmpty() && indexPath_.getFront() !== ".priority", "Can't create PathIndex with empty path or .priority key");
        return _this;
      }
      PathIndex2.prototype.extractChild = function(snap) {
        return snap.getChild(this.indexPath_);
      };
      PathIndex2.prototype.isDefinedOn = function(node) {
        return !node.getChild(this.indexPath_).isEmpty();
      };
      PathIndex2.prototype.compare = function(a, b) {
        var aChild = this.extractChild(a.node);
        var bChild = this.extractChild(b.node);
        var indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) {
          return nameCompare(a.name, b.name);
        } else {
          return indexCmp;
        }
      };
      PathIndex2.prototype.makePost = function(indexValue, name10) {
        var valueNode = nodeFromJSON$1(indexValue);
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new NamedNode(name10, node);
      };
      PathIndex2.prototype.maxPost = function() {
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
        return new NamedNode(MAX_NAME, node);
      };
      PathIndex2.prototype.toString = function() {
        return this.indexPath_.slice().join("/");
      };
      return PathIndex2;
    }(Index);
    var DataSnapshot = function() {
      function DataSnapshot2(node_, ref_, index_) {
        this.node_ = node_;
        this.ref_ = ref_;
        this.index_ = index_;
      }
      DataSnapshot2.prototype.val = function() {
        validateArgCount("DataSnapshot.val", 0, 0, arguments.length);
        return this.node_.val();
      };
      DataSnapshot2.prototype.exportVal = function() {
        validateArgCount("DataSnapshot.exportVal", 0, 0, arguments.length);
        return this.node_.val(true);
      };
      DataSnapshot2.prototype.toJSON = function() {
        validateArgCount("DataSnapshot.toJSON", 0, 1, arguments.length);
        return this.exportVal();
      };
      DataSnapshot2.prototype.exists = function() {
        validateArgCount("DataSnapshot.exists", 0, 0, arguments.length);
        return !this.node_.isEmpty();
      };
      DataSnapshot2.prototype.child = function(childPathString) {
        validateArgCount("DataSnapshot.child", 0, 1, arguments.length);
        childPathString = String(childPathString);
        validatePathString("DataSnapshot.child", 1, childPathString, false);
        var childPath = new Path(childPathString);
        var childRef = this.ref_.child(childPath);
        return new DataSnapshot2(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
      };
      DataSnapshot2.prototype.hasChild = function(childPathString) {
        validateArgCount("DataSnapshot.hasChild", 1, 1, arguments.length);
        validatePathString("DataSnapshot.hasChild", 1, childPathString, false);
        var childPath = new Path(childPathString);
        return !this.node_.getChild(childPath).isEmpty();
      };
      DataSnapshot2.prototype.getPriority = function() {
        validateArgCount("DataSnapshot.getPriority", 0, 0, arguments.length);
        return this.node_.getPriority().val();
      };
      DataSnapshot2.prototype.forEach = function(action) {
        var _this = this;
        validateArgCount("DataSnapshot.forEach", 1, 1, arguments.length);
        validateCallback("DataSnapshot.forEach", 1, action, false);
        if (this.node_.isLeafNode()) {
          return false;
        }
        var childrenNode = this.node_;
        return !!childrenNode.forEachChild(this.index_, function(key2, node) {
          return action(new DataSnapshot2(node, _this.ref_.child(key2), PRIORITY_INDEX));
        });
      };
      DataSnapshot2.prototype.hasChildren = function() {
        validateArgCount("DataSnapshot.hasChildren", 0, 0, arguments.length);
        if (this.node_.isLeafNode()) {
          return false;
        } else {
          return !this.node_.isEmpty();
        }
      };
      Object.defineProperty(DataSnapshot2.prototype, "key", {
        get: function() {
          return this.ref_.getKey();
        },
        enumerable: false,
        configurable: true
      });
      DataSnapshot2.prototype.numChildren = function() {
        validateArgCount("DataSnapshot.numChildren", 0, 0, arguments.length);
        return this.node_.numChildren();
      };
      DataSnapshot2.prototype.getRef = function() {
        validateArgCount("DataSnapshot.ref", 0, 0, arguments.length);
        return this.ref_;
      };
      Object.defineProperty(DataSnapshot2.prototype, "ref", {
        get: function() {
          return this.getRef();
        },
        enumerable: false,
        configurable: true
      });
      return DataSnapshot2;
    }();
    var DataEvent = function() {
      function DataEvent2(eventType, eventRegistration, snapshot, prevName) {
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
      }
      DataEvent2.prototype.getPath = function() {
        var ref2 = this.snapshot.getRef();
        if (this.eventType === "value") {
          return ref2.path;
        } else {
          return ref2.getParent().path;
        }
      };
      DataEvent2.prototype.getEventType = function() {
        return this.eventType;
      };
      DataEvent2.prototype.getEventRunner = function() {
        return this.eventRegistration.getEventRunner(this);
      };
      DataEvent2.prototype.toString = function() {
        return this.getPath().toString() + ":" + this.eventType + ":" + stringify(this.snapshot.exportVal());
      };
      return DataEvent2;
    }();
    var CancelEvent = function() {
      function CancelEvent2(eventRegistration, error2, path) {
        this.eventRegistration = eventRegistration;
        this.error = error2;
        this.path = path;
      }
      CancelEvent2.prototype.getPath = function() {
        return this.path;
      };
      CancelEvent2.prototype.getEventType = function() {
        return "cancel";
      };
      CancelEvent2.prototype.getEventRunner = function() {
        return this.eventRegistration.getEventRunner(this);
      };
      CancelEvent2.prototype.toString = function() {
        return this.path.toString() + ":cancel";
      };
      return CancelEvent2;
    }();
    var ValueEventRegistration = function() {
      function ValueEventRegistration2(callback_, cancelCallback_, context_) {
        this.callback_ = callback_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
      }
      ValueEventRegistration2.prototype.respondsTo = function(eventType) {
        return eventType === "value";
      };
      ValueEventRegistration2.prototype.createEvent = function(change, query) {
        var index2 = query.getQueryParams().getIndex();
        return new DataEvent("value", this, new DataSnapshot(change.snapshotNode, query.getRef(), index2));
      };
      ValueEventRegistration2.prototype.getEventRunner = function(eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === "cancel") {
          assert(this.cancelCallback_, "Raising a cancel event on a listener with no cancel callback");
          var cancelCB_1 = this.cancelCallback_;
          return function() {
            cancelCB_1.call(ctx, eventData.error);
          };
        } else {
          var cb_1 = this.callback_;
          return function() {
            cb_1.call(ctx, eventData.snapshot);
          };
        }
      };
      ValueEventRegistration2.prototype.createCancelEvent = function(error2, path) {
        if (this.cancelCallback_) {
          return new CancelEvent(this, error2, path);
        } else {
          return null;
        }
      };
      ValueEventRegistration2.prototype.matches = function(other) {
        if (!(other instanceof ValueEventRegistration2)) {
          return false;
        } else if (!other.callback_ || !this.callback_) {
          return true;
        } else {
          return other.callback_ === this.callback_ && other.context_ === this.context_;
        }
      };
      ValueEventRegistration2.prototype.hasAnyCallback = function() {
        return this.callback_ !== null;
      };
      return ValueEventRegistration2;
    }();
    var ChildEventRegistration = function() {
      function ChildEventRegistration2(callbacks_, cancelCallback_, context_) {
        this.callbacks_ = callbacks_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
      }
      ChildEventRegistration2.prototype.respondsTo = function(eventType) {
        var eventToCheck = eventType === "children_added" ? "child_added" : eventType;
        eventToCheck = eventToCheck === "children_removed" ? "child_removed" : eventToCheck;
        return contains(this.callbacks_, eventToCheck);
      };
      ChildEventRegistration2.prototype.createCancelEvent = function(error2, path) {
        if (this.cancelCallback_) {
          return new CancelEvent(this, error2, path);
        } else {
          return null;
        }
      };
      ChildEventRegistration2.prototype.createEvent = function(change, query) {
        assert(change.childName != null, "Child events should have a childName.");
        var ref2 = query.getRef().child(change.childName);
        var index2 = query.getQueryParams().getIndex();
        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref2, index2), change.prevName);
      };
      ChildEventRegistration2.prototype.getEventRunner = function(eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === "cancel") {
          assert(this.cancelCallback_, "Raising a cancel event on a listener with no cancel callback");
          var cancelCB_2 = this.cancelCallback_;
          return function() {
            cancelCB_2.call(ctx, eventData.error);
          };
        } else {
          var cb_2 = this.callbacks_[eventData.eventType];
          return function() {
            cb_2.call(ctx, eventData.snapshot, eventData.prevName);
          };
        }
      };
      ChildEventRegistration2.prototype.matches = function(other) {
        var _this = this;
        if (other instanceof ChildEventRegistration2) {
          if (!this.callbacks_ || !other.callbacks_) {
            return true;
          } else if (this.context_ === other.context_) {
            var otherKeys = Object.keys(other.callbacks_);
            var thisKeys = Object.keys(this.callbacks_);
            var otherCount = otherKeys.length;
            var thisCount = thisKeys.length;
            if (otherCount === thisCount) {
              if (otherCount === 1) {
                var otherKey = otherKeys[0];
                var thisKey = thisKeys[0];
                return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);
              } else {
                return thisKeys.every(function(eventType) {
                  return other.callbacks_[eventType] === _this.callbacks_[eventType];
                });
              }
            }
          }
        }
        return false;
      };
      ChildEventRegistration2.prototype.hasAnyCallback = function() {
        return this.callbacks_ !== null;
      };
      return ChildEventRegistration2;
    }();
    var __referenceConstructor;
    var Query = function() {
      function Query2(repo, path, queryParams_, orderByCalled_) {
        this.repo = repo;
        this.path = path;
        this.queryParams_ = queryParams_;
        this.orderByCalled_ = orderByCalled_;
      }
      Object.defineProperty(Query2, "__referenceConstructor", {
        get: function() {
          assert(__referenceConstructor, "Reference.ts has not been loaded");
          return __referenceConstructor;
        },
        set: function(val) {
          __referenceConstructor = val;
        },
        enumerable: false,
        configurable: true
      });
      Query2.validateQueryEndpoints_ = function(params) {
        var startNode = null;
        var endNode = null;
        if (params.hasStart()) {
          startNode = params.getIndexStartValue();
        }
        if (params.hasEnd()) {
          endNode = params.getIndexEndValue();
        }
        if (params.getIndex() === KEY_INDEX) {
          var tooManyArgsError = "Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().";
          var wrongArgTypeError = "Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";
          if (params.hasStart()) {
            var startName = params.getIndexStartName();
            if (startName !== MIN_NAME && !(params.hasStartAfter() && startName === MAX_NAME)) {
              throw new Error(tooManyArgsError);
            } else if (typeof startNode !== "string") {
              throw new Error(wrongArgTypeError);
            }
          }
          if (params.hasEnd()) {
            var endName = params.getIndexEndName();
            if (endName !== MAX_NAME && !(params.hasEndBefore() && endName === MIN_NAME)) {
              throw new Error(tooManyArgsError);
            } else if (typeof endNode !== "string") {
              throw new Error(wrongArgTypeError);
            }
          }
        } else if (params.getIndex() === PRIORITY_INDEX) {
          if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {
            throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");
          }
        } else {
          assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, "unknown index type.");
          if (startNode != null && typeof startNode === "object" || endNode != null && typeof endNode === "object") {
            throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
          }
        }
      };
      Query2.validateLimit_ = function(params) {
        if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
          throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
        }
      };
      Query2.prototype.validateNoPreviousOrderByCall_ = function(fnName) {
        if (this.orderByCalled_ === true) {
          throw new Error(fnName + ": You can't combine multiple orderBy calls.");
        }
      };
      Query2.prototype.getQueryParams = function() {
        return this.queryParams_;
      };
      Query2.prototype.getRef = function() {
        validateArgCount("Query.ref", 0, 0, arguments.length);
        return new Query2.__referenceConstructor(this.repo, this.path);
      };
      Query2.prototype.on = function(eventType, callback, cancelCallbackOrContext, context2) {
        validateArgCount("Query.on", 2, 4, arguments.length);
        validateEventType("Query.on", 1, eventType, false);
        validateCallback("Query.on", 2, callback, false);
        var ret = Query2.getCancelAndContextArgs_("Query.on", cancelCallbackOrContext, context2);
        if (eventType === "value") {
          this.onValueEvent(callback, ret.cancel, ret.context);
        } else {
          var callbacks = {};
          callbacks[eventType] = callback;
          this.onChildEvent(callbacks, ret.cancel, ret.context);
        }
        return callback;
      };
      Query2.prototype.onValueEvent = function(callback, cancelCallback, context2) {
        var container = new ValueEventRegistration(callback, cancelCallback || null, context2 || null);
        this.repo.addEventCallbackForQuery(this, container);
      };
      Query2.prototype.onChildEvent = function(callbacks, cancelCallback, context2) {
        var container = new ChildEventRegistration(callbacks, cancelCallback, context2);
        this.repo.addEventCallbackForQuery(this, container);
      };
      Query2.prototype.off = function(eventType, callback, context2) {
        validateArgCount("Query.off", 0, 3, arguments.length);
        validateEventType("Query.off", 1, eventType, true);
        validateCallback("Query.off", 2, callback, true);
        validateContextObject("Query.off", 3, context2, true);
        var container = null;
        var callbacks = null;
        if (eventType === "value") {
          var valueCallback = callback || null;
          container = new ValueEventRegistration(valueCallback, null, context2 || null);
        } else if (eventType) {
          if (callback) {
            callbacks = {};
            callbacks[eventType] = callback;
          }
          container = new ChildEventRegistration(callbacks, null, context2 || null);
        }
        this.repo.removeEventCallbackForQuery(this, container);
      };
      Query2.prototype.get = function() {
        return this.repo.getValue(this);
      };
      Query2.prototype.once = function(eventType, userCallback, failureCallbackOrContext, context2) {
        var _this = this;
        validateArgCount("Query.once", 1, 4, arguments.length);
        validateEventType("Query.once", 1, eventType, false);
        validateCallback("Query.once", 2, userCallback, true);
        var ret = Query2.getCancelAndContextArgs_("Query.once", failureCallbackOrContext, context2);
        var firstCall = true;
        var deferred = new Deferred();
        deferred.promise.catch(function() {
        });
        var onceCallback = function(snapshot) {
          if (firstCall) {
            firstCall = false;
            _this.off(eventType, onceCallback);
            if (userCallback) {
              userCallback.bind(ret.context)(snapshot);
            }
            deferred.resolve(snapshot);
          }
        };
        this.on(eventType, onceCallback, function(err) {
          _this.off(eventType, onceCallback);
          if (ret.cancel) {
            ret.cancel.bind(ret.context)(err);
          }
          deferred.reject(err);
        });
        return deferred.promise;
      };
      Query2.prototype.limitToFirst = function(limit) {
        validateArgCount("Query.limitToFirst", 1, 1, arguments.length);
        if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
          throw new Error("Query.limitToFirst: First argument must be a positive integer.");
        }
        if (this.queryParams_.hasLimit()) {
          throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");
        }
        return new Query2(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
      };
      Query2.prototype.limitToLast = function(limit) {
        validateArgCount("Query.limitToLast", 1, 1, arguments.length);
        if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
          throw new Error("Query.limitToLast: First argument must be a positive integer.");
        }
        if (this.queryParams_.hasLimit()) {
          throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");
        }
        return new Query2(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
      };
      Query2.prototype.orderByChild = function(path) {
        validateArgCount("Query.orderByChild", 1, 1, arguments.length);
        if (path === "$key") {
          throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
        } else if (path === "$priority") {
          throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
        } else if (path === "$value") {
          throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
        }
        validatePathString("Query.orderByChild", 1, path, false);
        this.validateNoPreviousOrderByCall_("Query.orderByChild");
        var parsedPath = new Path(path);
        if (parsedPath.isEmpty()) {
          throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
        }
        var index2 = new PathIndex(parsedPath);
        var newParams = this.queryParams_.orderBy(index2);
        Query2.validateQueryEndpoints_(newParams);
        return new Query2(this.repo, this.path, newParams, true);
      };
      Query2.prototype.orderByKey = function() {
        validateArgCount("Query.orderByKey", 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_("Query.orderByKey");
        var newParams = this.queryParams_.orderBy(KEY_INDEX);
        Query2.validateQueryEndpoints_(newParams);
        return new Query2(this.repo, this.path, newParams, true);
      };
      Query2.prototype.orderByPriority = function() {
        validateArgCount("Query.orderByPriority", 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_("Query.orderByPriority");
        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
        Query2.validateQueryEndpoints_(newParams);
        return new Query2(this.repo, this.path, newParams, true);
      };
      Query2.prototype.orderByValue = function() {
        validateArgCount("Query.orderByValue", 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_("Query.orderByValue");
        var newParams = this.queryParams_.orderBy(VALUE_INDEX);
        Query2.validateQueryEndpoints_(newParams);
        return new Query2(this.repo, this.path, newParams, true);
      };
      Query2.prototype.startAt = function(value, name10) {
        if (value === void 0) {
          value = null;
        }
        validateArgCount("Query.startAt", 0, 2, arguments.length);
        validateFirebaseDataArg("Query.startAt", 1, value, this.path, true);
        validateKey("Query.startAt", 2, name10, true);
        var newParams = this.queryParams_.startAt(value, name10);
        Query2.validateLimit_(newParams);
        Query2.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasStart()) {
          throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");
        }
        if (value === void 0) {
          value = null;
          name10 = null;
        }
        return new Query2(this.repo, this.path, newParams, this.orderByCalled_);
      };
      Query2.prototype.startAfter = function(value, name10) {
        if (value === void 0) {
          value = null;
        }
        validateArgCount("Query.startAfter", 0, 2, arguments.length);
        validateFirebaseDataArg("Query.startAfter", 1, value, this.path, false);
        validateKey("Query.startAfter", 2, name10, true);
        var newParams = this.queryParams_.startAfter(value, name10);
        Query2.validateLimit_(newParams);
        Query2.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasStart()) {
          throw new Error("Query.startAfter: Starting point was already set (by another call to startAt, startAfter or equalTo).");
        }
        return new Query2(this.repo, this.path, newParams, this.orderByCalled_);
      };
      Query2.prototype.endAt = function(value, name10) {
        if (value === void 0) {
          value = null;
        }
        validateArgCount("Query.endAt", 0, 2, arguments.length);
        validateFirebaseDataArg("Query.endAt", 1, value, this.path, true);
        validateKey("Query.endAt", 2, name10, true);
        var newParams = this.queryParams_.endAt(value, name10);
        Query2.validateLimit_(newParams);
        Query2.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasEnd()) {
          throw new Error("Query.endAt: Ending point was already set (by another call to endAt, endBefore, or equalTo).");
        }
        return new Query2(this.repo, this.path, newParams, this.orderByCalled_);
      };
      Query2.prototype.endBefore = function(value, name10) {
        if (value === void 0) {
          value = null;
        }
        validateArgCount("Query.endBefore", 0, 2, arguments.length);
        validateFirebaseDataArg("Query.endBefore", 1, value, this.path, false);
        validateKey("Query.endBefore", 2, name10, true);
        var newParams = this.queryParams_.endBefore(value, name10);
        Query2.validateLimit_(newParams);
        Query2.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasEnd()) {
          throw new Error("Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or equalTo).");
        }
        return new Query2(this.repo, this.path, newParams, this.orderByCalled_);
      };
      Query2.prototype.equalTo = function(value, name10) {
        validateArgCount("Query.equalTo", 1, 2, arguments.length);
        validateFirebaseDataArg("Query.equalTo", 1, value, this.path, false);
        validateKey("Query.equalTo", 2, name10, true);
        if (this.queryParams_.hasStart()) {
          throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");
        }
        if (this.queryParams_.hasEnd()) {
          throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");
        }
        return this.startAt(value, name10).endAt(value, name10);
      };
      Query2.prototype.toString = function() {
        validateArgCount("Query.toString", 0, 0, arguments.length);
        return this.repo.toString() + this.path.toUrlEncodedString();
      };
      Query2.prototype.toJSON = function() {
        validateArgCount("Query.toJSON", 0, 1, arguments.length);
        return this.toString();
      };
      Query2.prototype.queryObject = function() {
        return this.queryParams_.getQueryObject();
      };
      Query2.prototype.queryIdentifier = function() {
        var obj = this.queryObject();
        var id2 = ObjectToUniqueKey(obj);
        return id2 === "{}" ? "default" : id2;
      };
      Query2.prototype.isEqual = function(other) {
        validateArgCount("Query.isEqual", 1, 1, arguments.length);
        if (!(other instanceof Query2)) {
          var error2 = "Query.isEqual failed: First argument must be an instance of firebase.database.Query.";
          throw new Error(error2);
        }
        var sameRepo = this.repo === other.repo;
        var samePath = this.path.equals(other.path);
        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
        return sameRepo && samePath && sameQueryIdentifier;
      };
      Query2.getCancelAndContextArgs_ = function(fnName, cancelOrContext, context2) {
        var ret = {cancel: null, context: null};
        if (cancelOrContext && context2) {
          ret.cancel = cancelOrContext;
          validateCallback(fnName, 3, ret.cancel, true);
          ret.context = context2;
          validateContextObject(fnName, 4, ret.context, true);
        } else if (cancelOrContext) {
          if (typeof cancelOrContext === "object" && cancelOrContext !== null) {
            ret.context = cancelOrContext;
          } else if (typeof cancelOrContext === "function") {
            ret.cancel = cancelOrContext;
          } else {
            throw new Error(errorPrefix(fnName, 3, true) + " must either be a cancel callback or a context object.");
          }
        }
        return ret;
      };
      Object.defineProperty(Query2.prototype, "ref", {
        get: function() {
          return this.getRef();
        },
        enumerable: false,
        configurable: true
      });
      return Query2;
    }();
    var ExistingValueProvider = function() {
      function ExistingValueProvider2(node_) {
        this.node_ = node_;
      }
      ExistingValueProvider2.prototype.getImmediateChild = function(childName) {
        var child2 = this.node_.getImmediateChild(childName);
        return new ExistingValueProvider2(child2);
      };
      ExistingValueProvider2.prototype.node = function() {
        return this.node_;
      };
      return ExistingValueProvider2;
    }();
    var DeferredValueProvider = function() {
      function DeferredValueProvider2(syncTree, path) {
        this.syncTree_ = syncTree;
        this.path_ = path;
      }
      DeferredValueProvider2.prototype.getImmediateChild = function(childName) {
        var childPath = this.path_.child(childName);
        return new DeferredValueProvider2(this.syncTree_, childPath);
      };
      DeferredValueProvider2.prototype.node = function() {
        return this.syncTree_.calcCompleteEventCache(this.path_);
      };
      return DeferredValueProvider2;
    }();
    var generateWithValues = function(values) {
      values = values || {};
      values["timestamp"] = values["timestamp"] || new Date().getTime();
      return values;
    };
    var resolveDeferredLeafValue = function(value, existingVal, serverValues) {
      if (!value || typeof value !== "object") {
        return value;
      }
      assert(".sv" in value, "Unexpected leaf node or priority contents");
      if (typeof value[".sv"] === "string") {
        return resolveScalarDeferredValue(value[".sv"], existingVal, serverValues);
      } else if (typeof value[".sv"] === "object") {
        return resolveComplexDeferredValue(value[".sv"], existingVal);
      } else {
        assert(false, "Unexpected server value: " + JSON.stringify(value, null, 2));
      }
    };
    var resolveScalarDeferredValue = function(op, existing, serverValues) {
      switch (op) {
        case "timestamp":
          return serverValues["timestamp"];
        default:
          assert(false, "Unexpected server value: " + op);
      }
    };
    var resolveComplexDeferredValue = function(op, existing, unused) {
      if (!op.hasOwnProperty("increment")) {
        assert(false, "Unexpected server value: " + JSON.stringify(op, null, 2));
      }
      var delta = op["increment"];
      if (typeof delta !== "number") {
        assert(false, "Unexpected increment value: " + delta);
      }
      var existingNode = existing.node();
      assert(existingNode !== null && typeof existingNode !== "undefined", "Expected ChildrenNode.EMPTY_NODE for nulls");
      if (!existingNode.isLeafNode()) {
        return delta;
      }
      var leaf = existingNode;
      var existingVal = leaf.getValue();
      if (typeof existingVal !== "number") {
        return delta;
      }
      return existingVal + delta;
    };
    var resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
      return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    var resolveDeferredValueSnapshot = function(node, existing, serverValues) {
      return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
      var rawPri = node.getPriority().val();
      var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild(".priority"), serverValues);
      var newNode;
      if (node.isLeafNode()) {
        var leafNode = node;
        var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
          return new LeafNode(value, nodeFromJSON$1(priority));
        } else {
          return node;
        }
      } else {
        var childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) {
          newNode = newNode.updatePriority(new LeafNode(priority));
        }
        childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
          var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
          if (newChildNode !== childNode) {
            newNode = newNode.updateImmediateChild(childName, newChildNode);
          }
        });
        return newNode;
      }
    }
    var SparseSnapshotTree = function() {
      function SparseSnapshotTree2() {
        this.value = null;
        this.children = new Map();
      }
      SparseSnapshotTree2.prototype.find = function(path) {
        if (this.value != null) {
          return this.value.getChild(path);
        } else if (!path.isEmpty() && this.children.size > 0) {
          var childKey = path.getFront();
          path = path.popFront();
          if (this.children.has(childKey)) {
            var childTree = this.children.get(childKey);
            return childTree.find(path);
          } else {
            return null;
          }
        } else {
          return null;
        }
      };
      SparseSnapshotTree2.prototype.remember = function(path, data) {
        if (path.isEmpty()) {
          this.value = data;
          this.children.clear();
        } else if (this.value !== null) {
          this.value = this.value.updateChild(path, data);
        } else {
          var childKey = path.getFront();
          if (!this.children.has(childKey)) {
            this.children.set(childKey, new SparseSnapshotTree2());
          }
          var child2 = this.children.get(childKey);
          path = path.popFront();
          child2.remember(path, data);
        }
      };
      SparseSnapshotTree2.prototype.forget = function(path) {
        if (path.isEmpty()) {
          this.value = null;
          this.children.clear();
          return true;
        } else {
          if (this.value !== null) {
            if (this.value.isLeafNode()) {
              return false;
            } else {
              var value = this.value;
              this.value = null;
              var self_1 = this;
              value.forEachChild(PRIORITY_INDEX, function(key2, tree) {
                self_1.remember(new Path(key2), tree);
              });
              return this.forget(path);
            }
          } else if (this.children.size > 0) {
            var childKey = path.getFront();
            path = path.popFront();
            if (this.children.has(childKey)) {
              var safeToRemove = this.children.get(childKey).forget(path);
              if (safeToRemove) {
                this.children.delete(childKey);
              }
            }
            return this.children.size === 0;
          } else {
            return true;
          }
        }
      };
      SparseSnapshotTree2.prototype.forEachTree = function(prefixPath, func) {
        if (this.value !== null) {
          func(prefixPath, this.value);
        } else {
          this.forEachChild(function(key2, tree) {
            var path = new Path(prefixPath.toString() + "/" + key2);
            tree.forEachTree(path, func);
          });
        }
      };
      SparseSnapshotTree2.prototype.forEachChild = function(func) {
        this.children.forEach(function(tree, key2) {
          func(key2, tree);
        });
      };
      return SparseSnapshotTree2;
    }();
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["OVERWRITE"] = 0] = "OVERWRITE";
      OperationType2[OperationType2["MERGE"] = 1] = "MERGE";
      OperationType2[OperationType2["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
      OperationType2[OperationType2["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    var OperationSource = function() {
      function OperationSource2(fromUser, fromServer, queryId, tagged) {
        this.fromUser = fromUser;
        this.fromServer = fromServer;
        this.queryId = queryId;
        this.tagged = tagged;
        assert(!tagged || fromServer, "Tagged queries must be from server.");
      }
      OperationSource2.User = new OperationSource2(true, false, null, false);
      OperationSource2.Server = new OperationSource2(false, true, null, false);
      OperationSource2.forServerTaggedQuery = function(queryId) {
        return new OperationSource2(false, true, queryId, true);
      };
      return OperationSource2;
    }();
    var AckUserWrite = function() {
      function AckUserWrite2(path, affectedTree, revert) {
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        this.type = OperationType.ACK_USER_WRITE;
        this.source = OperationSource.User;
      }
      AckUserWrite2.prototype.operationForChild = function(childName) {
        if (!this.path.isEmpty()) {
          assert(this.path.getFront() === childName, "operationForChild called for unrelated child.");
          return new AckUserWrite2(this.path.popFront(), this.affectedTree, this.revert);
        } else if (this.affectedTree.value != null) {
          assert(this.affectedTree.children.isEmpty(), "affectedTree should not have overlapping affected paths.");
          return this;
        } else {
          var childTree = this.affectedTree.subtree(new Path(childName));
          return new AckUserWrite2(Path.Empty, childTree, this.revert);
        }
      };
      return AckUserWrite2;
    }();
    var emptyChildrenSingleton;
    var EmptyChildren = function() {
      if (!emptyChildrenSingleton) {
        emptyChildrenSingleton = new SortedMap(stringCompare);
      }
      return emptyChildrenSingleton;
    };
    var ImmutableTree = function() {
      function ImmutableTree2(value, children) {
        if (children === void 0) {
          children = EmptyChildren();
        }
        this.value = value;
        this.children = children;
      }
      ImmutableTree2.fromObject = function(obj) {
        var tree = ImmutableTree2.Empty;
        each(obj, function(childPath, childSnap) {
          tree = tree.set(new Path(childPath), childSnap);
        });
        return tree;
      };
      ImmutableTree2.prototype.isEmpty = function() {
        return this.value === null && this.children.isEmpty();
      };
      ImmutableTree2.prototype.findRootMostMatchingPathAndValue = function(relativePath, predicate) {
        if (this.value != null && predicate(this.value)) {
          return {path: Path.Empty, value: this.value};
        } else {
          if (relativePath.isEmpty()) {
            return null;
          } else {
            var front = relativePath.getFront();
            var child2 = this.children.get(front);
            if (child2 !== null) {
              var childExistingPathAndValue = child2.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
              if (childExistingPathAndValue != null) {
                var fullPath = new Path(front).child(childExistingPathAndValue.path);
                return {path: fullPath, value: childExistingPathAndValue.value};
              } else {
                return null;
              }
            } else {
              return null;
            }
          }
        }
      };
      ImmutableTree2.prototype.findRootMostValueAndPath = function(relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, function() {
          return true;
        });
      };
      ImmutableTree2.prototype.subtree = function(relativePath) {
        if (relativePath.isEmpty()) {
          return this;
        } else {
          var front = relativePath.getFront();
          var childTree = this.children.get(front);
          if (childTree !== null) {
            return childTree.subtree(relativePath.popFront());
          } else {
            return ImmutableTree2.Empty;
          }
        }
      };
      ImmutableTree2.prototype.set = function(relativePath, toSet) {
        if (relativePath.isEmpty()) {
          return new ImmutableTree2(toSet, this.children);
        } else {
          var front = relativePath.getFront();
          var child2 = this.children.get(front) || ImmutableTree2.Empty;
          var newChild = child2.set(relativePath.popFront(), toSet);
          var newChildren = this.children.insert(front, newChild);
          return new ImmutableTree2(this.value, newChildren);
        }
      };
      ImmutableTree2.prototype.remove = function(relativePath) {
        if (relativePath.isEmpty()) {
          if (this.children.isEmpty()) {
            return ImmutableTree2.Empty;
          } else {
            return new ImmutableTree2(null, this.children);
          }
        } else {
          var front = relativePath.getFront();
          var child2 = this.children.get(front);
          if (child2) {
            var newChild = child2.remove(relativePath.popFront());
            var newChildren = void 0;
            if (newChild.isEmpty()) {
              newChildren = this.children.remove(front);
            } else {
              newChildren = this.children.insert(front, newChild);
            }
            if (this.value === null && newChildren.isEmpty()) {
              return ImmutableTree2.Empty;
            } else {
              return new ImmutableTree2(this.value, newChildren);
            }
          } else {
            return this;
          }
        }
      };
      ImmutableTree2.prototype.get = function(relativePath) {
        if (relativePath.isEmpty()) {
          return this.value;
        } else {
          var front = relativePath.getFront();
          var child2 = this.children.get(front);
          if (child2) {
            return child2.get(relativePath.popFront());
          } else {
            return null;
          }
        }
      };
      ImmutableTree2.prototype.setTree = function(relativePath, newTree) {
        if (relativePath.isEmpty()) {
          return newTree;
        } else {
          var front = relativePath.getFront();
          var child2 = this.children.get(front) || ImmutableTree2.Empty;
          var newChild = child2.setTree(relativePath.popFront(), newTree);
          var newChildren = void 0;
          if (newChild.isEmpty()) {
            newChildren = this.children.remove(front);
          } else {
            newChildren = this.children.insert(front, newChild);
          }
          return new ImmutableTree2(this.value, newChildren);
        }
      };
      ImmutableTree2.prototype.fold = function(fn2) {
        return this.fold_(Path.Empty, fn2);
      };
      ImmutableTree2.prototype.fold_ = function(pathSoFar, fn2) {
        var accum = {};
        this.children.inorderTraversal(function(childKey, childTree) {
          accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn2);
        });
        return fn2(pathSoFar, this.value, accum);
      };
      ImmutableTree2.prototype.findOnPath = function(path, f) {
        return this.findOnPath_(path, Path.Empty, f);
      };
      ImmutableTree2.prototype.findOnPath_ = function(pathToFollow, pathSoFar, f) {
        var result = this.value ? f(pathSoFar, this.value) : false;
        if (result) {
          return result;
        } else {
          if (pathToFollow.isEmpty()) {
            return null;
          } else {
            var front = pathToFollow.getFront();
            var nextChild = this.children.get(front);
            if (nextChild) {
              return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
            } else {
              return null;
            }
          }
        }
      };
      ImmutableTree2.prototype.foreachOnPath = function(path, f) {
        return this.foreachOnPath_(path, Path.Empty, f);
      };
      ImmutableTree2.prototype.foreachOnPath_ = function(pathToFollow, currentRelativePath, f) {
        if (pathToFollow.isEmpty()) {
          return this;
        } else {
          if (this.value) {
            f(currentRelativePath, this.value);
          }
          var front = pathToFollow.getFront();
          var nextChild = this.children.get(front);
          if (nextChild) {
            return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
          } else {
            return ImmutableTree2.Empty;
          }
        }
      };
      ImmutableTree2.prototype.foreach = function(f) {
        this.foreach_(Path.Empty, f);
      };
      ImmutableTree2.prototype.foreach_ = function(currentRelativePath, f) {
        this.children.inorderTraversal(function(childName, childTree) {
          childTree.foreach_(currentRelativePath.child(childName), f);
        });
        if (this.value) {
          f(currentRelativePath, this.value);
        }
      };
      ImmutableTree2.prototype.foreachChild = function(f) {
        this.children.inorderTraversal(function(childName, childTree) {
          if (childTree.value) {
            f(childName, childTree.value);
          }
        });
      };
      ImmutableTree2.Empty = new ImmutableTree2(null);
      return ImmutableTree2;
    }();
    var ListenComplete = function() {
      function ListenComplete2(source, path) {
        this.source = source;
        this.path = path;
        this.type = OperationType.LISTEN_COMPLETE;
      }
      ListenComplete2.prototype.operationForChild = function(childName) {
        if (this.path.isEmpty()) {
          return new ListenComplete2(this.source, Path.Empty);
        } else {
          return new ListenComplete2(this.source, this.path.popFront());
        }
      };
      return ListenComplete2;
    }();
    var Overwrite = function() {
      function Overwrite2(source, path, snap) {
        this.source = source;
        this.path = path;
        this.snap = snap;
        this.type = OperationType.OVERWRITE;
      }
      Overwrite2.prototype.operationForChild = function(childName) {
        if (this.path.isEmpty()) {
          return new Overwrite2(this.source, Path.Empty, this.snap.getImmediateChild(childName));
        } else {
          return new Overwrite2(this.source, this.path.popFront(), this.snap);
        }
      };
      return Overwrite2;
    }();
    var Merge = function() {
      function Merge2(source, path, children) {
        this.source = source;
        this.path = path;
        this.children = children;
        this.type = OperationType.MERGE;
      }
      Merge2.prototype.operationForChild = function(childName) {
        if (this.path.isEmpty()) {
          var childTree = this.children.subtree(new Path(childName));
          if (childTree.isEmpty()) {
            return null;
          } else if (childTree.value) {
            return new Overwrite(this.source, Path.Empty, childTree.value);
          } else {
            return new Merge2(this.source, Path.Empty, childTree);
          }
        } else {
          assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
          return new Merge2(this.source, this.path.popFront(), this.children);
        }
      };
      Merge2.prototype.toString = function() {
        return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
      };
      return Merge2;
    }();
    var CacheNode = function() {
      function CacheNode2(node_, fullyInitialized_, filtered_) {
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
      }
      CacheNode2.prototype.isFullyInitialized = function() {
        return this.fullyInitialized_;
      };
      CacheNode2.prototype.isFiltered = function() {
        return this.filtered_;
      };
      CacheNode2.prototype.isCompleteForPath = function(path) {
        if (path.isEmpty()) {
          return this.isFullyInitialized() && !this.filtered_;
        }
        var childKey = path.getFront();
        return this.isCompleteForChild(childKey);
      };
      CacheNode2.prototype.isCompleteForChild = function(key2) {
        return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key2);
      };
      CacheNode2.prototype.getNode = function() {
        return this.node_;
      };
      return CacheNode2;
    }();
    var ViewCache = function() {
      function ViewCache2(eventCache_, serverCache_) {
        this.eventCache_ = eventCache_;
        this.serverCache_ = serverCache_;
      }
      ViewCache2.prototype.updateEventSnap = function(eventSnap, complete, filtered) {
        return new ViewCache2(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
      };
      ViewCache2.prototype.updateServerSnap = function(serverSnap, complete, filtered) {
        return new ViewCache2(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
      };
      ViewCache2.prototype.getEventCache = function() {
        return this.eventCache_;
      };
      ViewCache2.prototype.getCompleteEventSnap = function() {
        return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;
      };
      ViewCache2.prototype.getServerCache = function() {
        return this.serverCache_;
      };
      ViewCache2.prototype.getCompleteServerSnap = function() {
        return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;
      };
      ViewCache2.Empty = new ViewCache2(new CacheNode(ChildrenNode.EMPTY_NODE, false, false), new CacheNode(ChildrenNode.EMPTY_NODE, false, false));
      return ViewCache2;
    }();
    var Change = function() {
      function Change2(type, snapshotNode, childName, oldSnap, prevName) {
        this.type = type;
        this.snapshotNode = snapshotNode;
        this.childName = childName;
        this.oldSnap = oldSnap;
        this.prevName = prevName;
      }
      Change2.valueChange = function(snapshot) {
        return new Change2(Change2.VALUE, snapshot);
      };
      Change2.childAddedChange = function(childKey, snapshot) {
        return new Change2(Change2.CHILD_ADDED, snapshot, childKey);
      };
      Change2.childRemovedChange = function(childKey, snapshot) {
        return new Change2(Change2.CHILD_REMOVED, snapshot, childKey);
      };
      Change2.childChangedChange = function(childKey, newSnapshot, oldSnapshot) {
        return new Change2(Change2.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
      };
      Change2.childMovedChange = function(childKey, snapshot) {
        return new Change2(Change2.CHILD_MOVED, snapshot, childKey);
      };
      Change2.CHILD_ADDED = "child_added";
      Change2.CHILD_REMOVED = "child_removed";
      Change2.CHILD_CHANGED = "child_changed";
      Change2.CHILD_MOVED = "child_moved";
      Change2.VALUE = "value";
      return Change2;
    }();
    var IndexedFilter = function() {
      function IndexedFilter2(index_) {
        this.index_ = index_;
      }
      IndexedFilter2.prototype.updateChild = function(snap, key2, newChild, affectedPath, source, optChangeAccumulator) {
        assert(snap.isIndexed(this.index_), "A node must be indexed if only a child is updated");
        var oldChild = snap.getImmediateChild(key2);
        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
          if (oldChild.isEmpty() === newChild.isEmpty()) {
            return snap;
          }
        }
        if (optChangeAccumulator != null) {
          if (newChild.isEmpty()) {
            if (snap.hasChild(key2)) {
              optChangeAccumulator.trackChildChange(Change.childRemovedChange(key2, oldChild));
            } else {
              assert(snap.isLeafNode(), "A child remove without an old child only makes sense on a leaf node");
            }
          } else if (oldChild.isEmpty()) {
            optChangeAccumulator.trackChildChange(Change.childAddedChange(key2, newChild));
          } else {
            optChangeAccumulator.trackChildChange(Change.childChangedChange(key2, newChild, oldChild));
          }
        }
        if (snap.isLeafNode() && newChild.isEmpty()) {
          return snap;
        } else {
          return snap.updateImmediateChild(key2, newChild).withIndex(this.index_);
        }
      };
      IndexedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        if (optChangeAccumulator != null) {
          if (!oldSnap.isLeafNode()) {
            oldSnap.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
              if (!newSnap.hasChild(key2)) {
                optChangeAccumulator.trackChildChange(Change.childRemovedChange(key2, childNode));
              }
            });
          }
          if (!newSnap.isLeafNode()) {
            newSnap.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
              if (oldSnap.hasChild(key2)) {
                var oldChild = oldSnap.getImmediateChild(key2);
                if (!oldChild.equals(childNode)) {
                  optChangeAccumulator.trackChildChange(Change.childChangedChange(key2, childNode, oldChild));
                }
              } else {
                optChangeAccumulator.trackChildChange(Change.childAddedChange(key2, childNode));
              }
            });
          }
        }
        return newSnap.withIndex(this.index_);
      };
      IndexedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
        if (oldSnap.isEmpty()) {
          return ChildrenNode.EMPTY_NODE;
        } else {
          return oldSnap.updatePriority(newPriority);
        }
      };
      IndexedFilter2.prototype.filtersNodes = function() {
        return false;
      };
      IndexedFilter2.prototype.getIndexedFilter = function() {
        return this;
      };
      IndexedFilter2.prototype.getIndex = function() {
        return this.index_;
      };
      return IndexedFilter2;
    }();
    var ChildChangeAccumulator = function() {
      function ChildChangeAccumulator2() {
        this.changeMap = new Map();
      }
      ChildChangeAccumulator2.prototype.trackChildChange = function(change) {
        var type = change.type;
        var childKey = change.childName;
        assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, "Only child changes supported for tracking");
        assert(childKey !== ".priority", "Only non-priority child changes can be tracked.");
        var oldChange = this.changeMap.get(childKey);
        if (oldChange) {
          var oldType = oldChange.type;
          if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {
            this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
          } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {
            this.changeMap.delete(childKey);
          } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {
            this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
          } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {
            this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
          } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {
            this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
          } else {
            throw assertionError("Illegal combination of changes: " + change + " occurred after " + oldChange);
          }
        } else {
          this.changeMap.set(childKey, change);
        }
      };
      ChildChangeAccumulator2.prototype.getChanges = function() {
        return Array.from(this.changeMap.values());
      };
      return ChildChangeAccumulator2;
    }();
    var NoCompleteChildSource_ = function() {
      function NoCompleteChildSource_2() {
      }
      NoCompleteChildSource_2.prototype.getCompleteChild = function(childKey) {
        return null;
      };
      NoCompleteChildSource_2.prototype.getChildAfterChild = function(index2, child2, reverse) {
        return null;
      };
      return NoCompleteChildSource_2;
    }();
    var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    var WriteTreeCompleteChildSource = function() {
      function WriteTreeCompleteChildSource2(writes_, viewCache_, optCompleteServerCache_) {
        if (optCompleteServerCache_ === void 0) {
          optCompleteServerCache_ = null;
        }
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
      }
      WriteTreeCompleteChildSource2.prototype.getCompleteChild = function(childKey) {
        var node = this.viewCache_.getEventCache();
        if (node.isCompleteForChild(childKey)) {
          return node.getNode().getImmediateChild(childKey);
        } else {
          var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();
          return this.writes_.calcCompleteChild(childKey, serverNode);
        }
      };
      WriteTreeCompleteChildSource2.prototype.getChildAfterChild = function(index2, child2, reverse) {
        var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();
        var nodes = this.writes_.calcIndexedSlice(completeServerData, child2, 1, reverse, index2);
        if (nodes.length === 0) {
          return null;
        } else {
          return nodes[0];
        }
      };
      return WriteTreeCompleteChildSource2;
    }();
    var ProcessorResult = function() {
      function ProcessorResult2(viewCache, changes) {
        this.viewCache = viewCache;
        this.changes = changes;
      }
      return ProcessorResult2;
    }();
    var ViewProcessor = function() {
      function ViewProcessor2(filter_) {
        this.filter_ = filter_;
      }
      ViewProcessor2.prototype.assertIndexed = function(viewCache) {
        assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), "Event snap not indexed");
        assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), "Server snap not indexed");
      };
      ViewProcessor2.prototype.applyOperation = function(oldViewCache, operation, writesCache, completeCache) {
        var accumulator = new ChildChangeAccumulator();
        var newViewCache, filterServerNode;
        if (operation.type === OperationType.OVERWRITE) {
          var overwrite = operation;
          if (overwrite.source.fromUser) {
            newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
          } else {
            assert(overwrite.source.fromServer, "Unknown source.");
            filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();
            newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
          }
        } else if (operation.type === OperationType.MERGE) {
          var merge = operation;
          if (merge.source.fromUser) {
            newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
          } else {
            assert(merge.source.fromServer, "Unknown source.");
            filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();
            newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
          }
        } else if (operation.type === OperationType.ACK_USER_WRITE) {
          var ackUserWrite = operation;
          if (!ackUserWrite.revert) {
            newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
          } else {
            newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
          }
        } else if (operation.type === OperationType.LISTEN_COMPLETE) {
          newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
        } else {
          throw assertionError("Unknown operation type: " + operation.type);
        }
        var changes = accumulator.getChanges();
        ViewProcessor2.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
        return new ProcessorResult(newViewCache, changes);
      };
      ViewProcessor2.maybeAddValueEvent_ = function(oldViewCache, newViewCache, accumulator) {
        var eventSnap = newViewCache.getEventCache();
        if (eventSnap.isFullyInitialized()) {
          var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
          var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
          if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
            accumulator.push(Change.valueChange(newViewCache.getCompleteEventSnap()));
          }
        }
      };
      ViewProcessor2.prototype.generateEventCacheAfterServerEvent_ = function(viewCache, changePath, writesCache, source, accumulator) {
        var oldEventSnap = viewCache.getEventCache();
        if (writesCache.shadowingWrite(changePath) != null) {
          return viewCache;
        } else {
          var newEventCache = void 0, serverNode = void 0;
          if (changePath.isEmpty()) {
            assert(viewCache.getServerCache().isFullyInitialized(), "If change path is empty, we must have complete server data");
            if (viewCache.getServerCache().isFiltered()) {
              var serverCache = viewCache.getCompleteServerSnap();
              var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
              var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
              newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
            } else {
              var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
              newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
            }
          } else {
            var childKey = changePath.getFront();
            if (childKey === ".priority") {
              assert(changePath.getLength() === 1, "Can't have a priority with additional path components");
              var oldEventNode = oldEventSnap.getNode();
              serverNode = viewCache.getServerCache().getNode();
              var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
              if (updatedPriority != null) {
                newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
              } else {
                newEventCache = oldEventSnap.getNode();
              }
            } else {
              var childChangePath = changePath.popFront();
              var newEventChild = void 0;
              if (oldEventSnap.isCompleteForChild(childKey)) {
                serverNode = viewCache.getServerCache().getNode();
                var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                if (eventChildUpdate != null) {
                  newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
                } else {
                  newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                }
              } else {
                newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
              }
              if (newEventChild != null) {
                newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
              } else {
                newEventCache = oldEventSnap.getNode();
              }
            }
          }
          return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
        }
      };
      ViewProcessor2.prototype.applyServerOverwrite_ = function(oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
        var oldServerSnap = oldViewCache.getServerCache();
        var newServerCache;
        var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();
        if (changePath.isEmpty()) {
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
        } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
          var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
        } else {
          var childKey = changePath.getFront();
          if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {
            return oldViewCache;
          }
          var childChangePath = changePath.popFront();
          var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
          var newChildNode = childNode.updateChild(childChangePath, changedSnap);
          if (childKey === ".priority") {
            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
          } else {
            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
          }
        }
        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
      };
      ViewProcessor2.prototype.applyUserOverwrite_ = function(oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
        var oldEventSnap = oldViewCache.getEventCache();
        var newViewCache, newEventCache;
        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
        if (changePath.isEmpty()) {
          newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
          newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
        } else {
          var childKey = changePath.getFront();
          if (childKey === ".priority") {
            newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
            newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
          } else {
            var childChangePath = changePath.popFront();
            var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
            var newChild = void 0;
            if (childChangePath.isEmpty()) {
              newChild = changedSnap;
            } else {
              var childNode = source.getCompleteChild(childKey);
              if (childNode != null) {
                if (childChangePath.getBack() === ".priority" && childNode.getChild(childChangePath.parent()).isEmpty()) {
                  newChild = childNode;
                } else {
                  newChild = childNode.updateChild(childChangePath, changedSnap);
                }
              } else {
                newChild = ChildrenNode.EMPTY_NODE;
              }
            }
            if (!oldChild.equals(newChild)) {
              var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
              newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
            } else {
              newViewCache = oldViewCache;
            }
          }
        }
        return newViewCache;
      };
      ViewProcessor2.cacheHasChild_ = function(viewCache, childKey) {
        return viewCache.getEventCache().isCompleteForChild(childKey);
      };
      ViewProcessor2.prototype.applyUserMerge_ = function(viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
        var _this = this;
        var curViewCache = viewCache;
        changedChildren.foreach(function(relativePath, childNode) {
          var writePath = path.child(relativePath);
          if (ViewProcessor2.cacheHasChild_(viewCache, writePath.getFront())) {
            curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
        });
        changedChildren.foreach(function(relativePath, childNode) {
          var writePath = path.child(relativePath);
          if (!ViewProcessor2.cacheHasChild_(viewCache, writePath.getFront())) {
            curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
        });
        return curViewCache;
      };
      ViewProcessor2.prototype.applyMerge_ = function(node, merge) {
        merge.foreach(function(relativePath, childNode) {
          node = node.updateChild(relativePath, childNode);
        });
        return node;
      };
      ViewProcessor2.prototype.applyServerMerge_ = function(viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
        var _this = this;
        if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {
          return viewCache;
        }
        var curViewCache = viewCache;
        var viewMergeTree;
        if (path.isEmpty()) {
          viewMergeTree = changedChildren;
        } else {
          viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
        }
        var serverNode = viewCache.getServerCache().getNode();
        viewMergeTree.children.inorderTraversal(function(childKey, childTree) {
          if (serverNode.hasChild(childKey)) {
            var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);
            var newChild = _this.applyMerge_(serverChild, childTree);
            curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
        });
        viewMergeTree.children.inorderTraversal(function(childKey, childMergeTree) {
          var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;
          if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
            var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);
            var newChild = _this.applyMerge_(serverChild, childMergeTree);
            curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
        });
        return curViewCache;
      };
      ViewProcessor2.prototype.ackUserWrite_ = function(viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
        if (writesCache.shadowingWrite(ackPath) != null) {
          return viewCache;
        }
        var filterServerNode = viewCache.getServerCache().isFiltered();
        var serverCache = viewCache.getServerCache();
        if (affectedTree.value != null) {
          if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
            return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
          } else if (ackPath.isEmpty()) {
            var changedChildren_1 = ImmutableTree.Empty;
            serverCache.getNode().forEachChild(KEY_INDEX, function(name10, node) {
              changedChildren_1 = changedChildren_1.set(new Path(name10), node);
            });
            return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
          } else {
            return viewCache;
          }
        } else {
          var changedChildren_2 = ImmutableTree.Empty;
          affectedTree.foreach(function(mergePath, value) {
            var serverCachePath = ackPath.child(mergePath);
            if (serverCache.isCompleteForPath(serverCachePath)) {
              changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
            }
          });
          return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
        }
      };
      ViewProcessor2.prototype.listenComplete_ = function(viewCache, path, writesCache, accumulator) {
        var oldServerNode = viewCache.getServerCache();
        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
      };
      ViewProcessor2.prototype.revertUserWrite_ = function(viewCache, path, writesCache, completeServerCache, accumulator) {
        var complete;
        if (writesCache.shadowingWrite(path) != null) {
          return viewCache;
        } else {
          var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
          var oldEventCache = viewCache.getEventCache().getNode();
          var newEventCache = void 0;
          if (path.isEmpty() || path.getFront() === ".priority") {
            var newNode = void 0;
            if (viewCache.getServerCache().isFullyInitialized()) {
              newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
            } else {
              var serverChildren = viewCache.getServerCache().getNode();
              assert(serverChildren instanceof ChildrenNode, "serverChildren would be complete if leaf node");
              newNode = writesCache.calcCompleteEventChildren(serverChildren);
            }
            newNode = newNode;
            newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
          } else {
            var childKey = path.getFront();
            var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
            if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {
              newChild = oldEventCache.getImmediateChild(childKey);
            }
            if (newChild != null) {
              newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
            } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
              newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
            } else {
              newEventCache = oldEventCache;
            }
            if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {
              complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
              if (complete.isLeafNode()) {
                newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
              }
            }
          }
          complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;
          return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
        }
      };
      return ViewProcessor2;
    }();
    var EventGenerator = function() {
      function EventGenerator2(query_) {
        this.query_ = query_;
        this.index_ = this.query_.getQueryParams().getIndex();
      }
      EventGenerator2.prototype.generateEventsForChanges = function(changes, eventCache, eventRegistrations) {
        var _this = this;
        var events = [];
        var moves = [];
        changes.forEach(function(change) {
          if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
            moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
          }
        });
        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
        return events;
      };
      EventGenerator2.prototype.generateEventsForType_ = function(events, eventType, changes, registrations, eventCache) {
        var _this = this;
        var filteredChanges = changes.filter(function(change) {
          return change.type === eventType;
        });
        filteredChanges.sort(this.compareChanges_.bind(this));
        filteredChanges.forEach(function(change) {
          var materializedChange = _this.materializeSingleChange_(change, eventCache);
          registrations.forEach(function(registration) {
            if (registration.respondsTo(change.type)) {
              events.push(registration.createEvent(materializedChange, _this.query_));
            }
          });
        });
      };
      EventGenerator2.prototype.materializeSingleChange_ = function(change, eventCache) {
        if (change.type === "value" || change.type === "child_removed") {
          return change;
        } else {
          change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, this.index_);
          return change;
        }
      };
      EventGenerator2.prototype.compareChanges_ = function(a, b) {
        if (a.childName == null || b.childName == null) {
          throw assertionError("Should only compare child_ events.");
        }
        var aWrapped = new NamedNode(a.childName, a.snapshotNode);
        var bWrapped = new NamedNode(b.childName, b.snapshotNode);
        return this.index_.compare(aWrapped, bWrapped);
      };
      return EventGenerator2;
    }();
    var View = function() {
      function View2(query_, initialViewCache) {
        this.query_ = query_;
        this.eventRegistrations_ = [];
        var params = this.query_.getQueryParams();
        var indexFilter = new IndexedFilter(params.getIndex());
        var filter = params.getNodeFilter();
        this.processor_ = new ViewProcessor(filter);
        var initialServerCache = initialViewCache.getServerCache();
        var initialEventCache = initialViewCache.getEventCache();
        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
        this.viewCache_ = new ViewCache(newEventCache, newServerCache);
        this.eventGenerator_ = new EventGenerator(this.query_);
      }
      View2.prototype.getQuery = function() {
        return this.query_;
      };
      View2.prototype.getServerCache = function() {
        return this.viewCache_.getServerCache().getNode();
      };
      View2.prototype.getCompleteServerCache = function(path) {
        var cache2 = this.viewCache_.getCompleteServerSnap();
        if (cache2) {
          if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache2.getImmediateChild(path.getFront()).isEmpty()) {
            return cache2.getChild(path);
          }
        }
        return null;
      };
      View2.prototype.isEmpty = function() {
        return this.eventRegistrations_.length === 0;
      };
      View2.prototype.addEventRegistration = function(eventRegistration) {
        this.eventRegistrations_.push(eventRegistration);
      };
      View2.prototype.removeEventRegistration = function(eventRegistration, cancelError) {
        var cancelEvents = [];
        if (cancelError) {
          assert(eventRegistration == null, "A cancel should cancel all event registrations.");
          var path_1 = this.query_.path;
          this.eventRegistrations_.forEach(function(registration) {
            cancelError = cancelError;
            var maybeEvent = registration.createCancelEvent(cancelError, path_1);
            if (maybeEvent) {
              cancelEvents.push(maybeEvent);
            }
          });
        }
        if (eventRegistration) {
          var remaining = [];
          for (var i2 = 0; i2 < this.eventRegistrations_.length; ++i2) {
            var existing = this.eventRegistrations_[i2];
            if (!existing.matches(eventRegistration)) {
              remaining.push(existing);
            } else if (eventRegistration.hasAnyCallback()) {
              remaining = remaining.concat(this.eventRegistrations_.slice(i2 + 1));
              break;
            }
          }
          this.eventRegistrations_ = remaining;
        } else {
          this.eventRegistrations_ = [];
        }
        return cancelEvents;
      };
      View2.prototype.applyOperation = function(operation, writesCache, completeServerCache) {
        if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
          assert(this.viewCache_.getCompleteServerSnap(), "We should always have a full cache before handling merges");
          assert(this.viewCache_.getCompleteEventSnap(), "Missing event cache, even though we have a server cache");
        }
        var oldViewCache = this.viewCache_;
        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
        this.processor_.assertIndexed(result.viewCache);
        assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), "Once a server snap is complete, it should never go back");
        this.viewCache_ = result.viewCache;
        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
      };
      View2.prototype.getInitialEvents = function(registration) {
        var eventSnap = this.viewCache_.getEventCache();
        var initialChanges = [];
        if (!eventSnap.getNode().isLeafNode()) {
          var eventNode = eventSnap.getNode();
          eventNode.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
            initialChanges.push(Change.childAddedChange(key2, childNode));
          });
        }
        if (eventSnap.isFullyInitialized()) {
          initialChanges.push(Change.valueChange(eventSnap.getNode()));
        }
        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
      };
      View2.prototype.generateEventsForChanges_ = function(changes, eventCache, eventRegistration) {
        var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;
        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
      };
      return View2;
    }();
    var __referenceConstructor$1;
    var SyncPoint = function() {
      function SyncPoint2() {
        this.views = new Map();
      }
      Object.defineProperty(SyncPoint2, "__referenceConstructor", {
        get: function() {
          assert(__referenceConstructor$1, "Reference.ts has not been loaded");
          return __referenceConstructor$1;
        },
        set: function(val) {
          assert(!__referenceConstructor$1, "__referenceConstructor has already been defined");
          __referenceConstructor$1 = val;
        },
        enumerable: false,
        configurable: true
      });
      SyncPoint2.prototype.isEmpty = function() {
        return this.views.size === 0;
      };
      SyncPoint2.prototype.applyOperation = function(operation, writesCache, optCompleteServerCache) {
        var e_1, _a9;
        var queryId = operation.source.queryId;
        if (queryId !== null) {
          var view = this.views.get(queryId);
          assert(view != null, "SyncTree gave us an op for an invalid query.");
          return view.applyOperation(operation, writesCache, optCompleteServerCache);
        } else {
          var events = [];
          try {
            for (var _b = __values(this.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
              var view = _c2.value;
              events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
            }
          } catch (e_1_1) {
            e_1 = {error: e_1_1};
          } finally {
            try {
              if (_c2 && !_c2.done && (_a9 = _b.return))
                _a9.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return events;
        }
      };
      SyncPoint2.prototype.addEventRegistration = function(query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
        var queryId = query.queryIdentifier();
        var view = this.views.get(queryId);
        if (!view) {
          var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
          var eventCacheComplete = false;
          if (eventCache) {
            eventCacheComplete = true;
          } else if (serverCache instanceof ChildrenNode) {
            eventCache = writesCache.calcCompleteEventChildren(serverCache);
            eventCacheComplete = false;
          } else {
            eventCache = ChildrenNode.EMPTY_NODE;
            eventCacheComplete = false;
          }
          var viewCache = new ViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
          view = new View(query, viewCache);
          this.views.set(queryId, view);
        }
        view.addEventRegistration(eventRegistration);
        return view.getInitialEvents(eventRegistration);
      };
      SyncPoint2.prototype.removeEventRegistration = function(query, eventRegistration, cancelError) {
        var e_2, _a9;
        var queryId = query.queryIdentifier();
        var removed = [];
        var cancelEvents = [];
        var hadCompleteView = this.hasCompleteView();
        if (queryId === "default") {
          try {
            for (var _b = __values(this.views.entries()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
              var _d = __read(_c2.value, 2), viewQueryId = _d[0], view = _d[1];
              cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
              if (view.isEmpty()) {
                this.views.delete(viewQueryId);
                if (!view.getQuery().getQueryParams().loadsAllData()) {
                  removed.push(view.getQuery());
                }
              }
            }
          } catch (e_2_1) {
            e_2 = {error: e_2_1};
          } finally {
            try {
              if (_c2 && !_c2.done && (_a9 = _b.return))
                _a9.call(_b);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        } else {
          var view = this.views.get(queryId);
          if (view) {
            cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
            if (view.isEmpty()) {
              this.views.delete(queryId);
              if (!view.getQuery().getQueryParams().loadsAllData()) {
                removed.push(view.getQuery());
              }
            }
          }
        }
        if (hadCompleteView && !this.hasCompleteView()) {
          removed.push(new SyncPoint2.__referenceConstructor(query.repo, query.path));
        }
        return {removed, events: cancelEvents};
      };
      SyncPoint2.prototype.getQueryViews = function() {
        var e_3, _a9;
        var result = [];
        try {
          for (var _b = __values(this.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
            var view = _c2.value;
            if (!view.getQuery().getQueryParams().loadsAllData()) {
              result.push(view);
            }
          }
        } catch (e_3_1) {
          e_3 = {error: e_3_1};
        } finally {
          try {
            if (_c2 && !_c2.done && (_a9 = _b.return))
              _a9.call(_b);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return result;
      };
      SyncPoint2.prototype.getCompleteServerCache = function(path) {
        var e_4, _a9;
        var serverCache = null;
        try {
          for (var _b = __values(this.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
            var view = _c2.value;
            serverCache = serverCache || view.getCompleteServerCache(path);
          }
        } catch (e_4_1) {
          e_4 = {error: e_4_1};
        } finally {
          try {
            if (_c2 && !_c2.done && (_a9 = _b.return))
              _a9.call(_b);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        return serverCache;
      };
      SyncPoint2.prototype.viewForQuery = function(query) {
        var params = query.getQueryParams();
        if (params.loadsAllData()) {
          return this.getCompleteView();
        } else {
          var queryId = query.queryIdentifier();
          return this.views.get(queryId);
        }
      };
      SyncPoint2.prototype.viewExistsForQuery = function(query) {
        return this.viewForQuery(query) != null;
      };
      SyncPoint2.prototype.hasCompleteView = function() {
        return this.getCompleteView() != null;
      };
      SyncPoint2.prototype.getCompleteView = function() {
        var e_5, _a9;
        try {
          for (var _b = __values(this.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
            var view = _c2.value;
            if (view.getQuery().getQueryParams().loadsAllData()) {
              return view;
            }
          }
        } catch (e_5_1) {
          e_5 = {error: e_5_1};
        } finally {
          try {
            if (_c2 && !_c2.done && (_a9 = _b.return))
              _a9.call(_b);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        return null;
      };
      return SyncPoint2;
    }();
    var CompoundWrite = function() {
      function CompoundWrite2(writeTree_) {
        this.writeTree_ = writeTree_;
      }
      CompoundWrite2.prototype.addWrite = function(path, node) {
        if (path.isEmpty()) {
          return new CompoundWrite2(new ImmutableTree(node));
        } else {
          var rootmost = this.writeTree_.findRootMostValueAndPath(path);
          if (rootmost != null) {
            var rootMostPath = rootmost.path;
            var value = rootmost.value;
            var relativePath = Path.relativePath(rootMostPath, path);
            value = value.updateChild(relativePath, node);
            return new CompoundWrite2(this.writeTree_.set(rootMostPath, value));
          } else {
            var subtree = new ImmutableTree(node);
            var newWriteTree = this.writeTree_.setTree(path, subtree);
            return new CompoundWrite2(newWriteTree);
          }
        }
      };
      CompoundWrite2.prototype.addWrites = function(path, updates) {
        var newWrite = this;
        each(updates, function(childKey, node) {
          newWrite = newWrite.addWrite(path.child(childKey), node);
        });
        return newWrite;
      };
      CompoundWrite2.prototype.removeWrite = function(path) {
        if (path.isEmpty()) {
          return CompoundWrite2.Empty;
        } else {
          var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
          return new CompoundWrite2(newWriteTree);
        }
      };
      CompoundWrite2.prototype.hasCompleteWrite = function(path) {
        return this.getCompleteNode(path) != null;
      };
      CompoundWrite2.prototype.getCompleteNode = function(path) {
        var rootmost = this.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
          return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));
        } else {
          return null;
        }
      };
      CompoundWrite2.prototype.getCompleteChildren = function() {
        var children = [];
        var node = this.writeTree_.value;
        if (node != null) {
          if (!node.isLeafNode()) {
            node.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
              children.push(new NamedNode(childName, childNode));
            });
          }
        } else {
          this.writeTree_.children.inorderTraversal(function(childName, childTree) {
            if (childTree.value != null) {
              children.push(new NamedNode(childName, childTree.value));
            }
          });
        }
        return children;
      };
      CompoundWrite2.prototype.childCompoundWrite = function(path) {
        if (path.isEmpty()) {
          return this;
        } else {
          var shadowingNode = this.getCompleteNode(path);
          if (shadowingNode != null) {
            return new CompoundWrite2(new ImmutableTree(shadowingNode));
          } else {
            return new CompoundWrite2(this.writeTree_.subtree(path));
          }
        }
      };
      CompoundWrite2.prototype.isEmpty = function() {
        return this.writeTree_.isEmpty();
      };
      CompoundWrite2.prototype.apply = function(node) {
        return applySubtreeWrite(Path.Empty, this.writeTree_, node);
      };
      CompoundWrite2.Empty = new CompoundWrite2(new ImmutableTree(null));
      return CompoundWrite2;
    }();
    function applySubtreeWrite(relativePath, writeTree, node) {
      if (writeTree.value != null) {
        return node.updateChild(relativePath, writeTree.value);
      } else {
        var priorityWrite_1 = null;
        writeTree.children.inorderTraversal(function(childKey, childTree) {
          if (childKey === ".priority") {
            assert(childTree.value !== null, "Priority writes must always be leaf nodes");
            priorityWrite_1 = childTree.value;
          } else {
            node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
          }
        });
        if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
          node = node.updateChild(relativePath.child(".priority"), priorityWrite_1);
        }
        return node;
      }
    }
    var WriteTree = function() {
      function WriteTree2() {
        this.visibleWrites_ = CompoundWrite.Empty;
        this.allWrites_ = [];
        this.lastWriteId_ = -1;
      }
      WriteTree2.prototype.childWrites = function(path) {
        return new WriteTreeRef(path, this);
      };
      WriteTree2.prototype.addOverwrite = function(path, snap, writeId, visible) {
        assert(writeId > this.lastWriteId_, "Stacking an older write on top of newer ones");
        if (visible === void 0) {
          visible = true;
        }
        this.allWrites_.push({
          path,
          snap,
          writeId,
          visible
        });
        if (visible) {
          this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
        }
        this.lastWriteId_ = writeId;
      };
      WriteTree2.prototype.addMerge = function(path, changedChildren, writeId) {
        assert(writeId > this.lastWriteId_, "Stacking an older merge on top of newer ones");
        this.allWrites_.push({
          path,
          children: changedChildren,
          writeId,
          visible: true
        });
        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
        this.lastWriteId_ = writeId;
      };
      WriteTree2.prototype.getWrite = function(writeId) {
        for (var i2 = 0; i2 < this.allWrites_.length; i2++) {
          var record = this.allWrites_[i2];
          if (record.writeId === writeId) {
            return record;
          }
        }
        return null;
      };
      WriteTree2.prototype.removeWrite = function(writeId) {
        var _this = this;
        var idx = this.allWrites_.findIndex(function(s) {
          return s.writeId === writeId;
        });
        assert(idx >= 0, "removeWrite called with nonexistent writeId.");
        var writeToRemove = this.allWrites_[idx];
        this.allWrites_.splice(idx, 1);
        var removedWriteWasVisible = writeToRemove.visible;
        var removedWriteOverlapsWithOtherWrites = false;
        var i2 = this.allWrites_.length - 1;
        while (removedWriteWasVisible && i2 >= 0) {
          var currentWrite = this.allWrites_[i2];
          if (currentWrite.visible) {
            if (i2 >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {
              removedWriteWasVisible = false;
            } else if (writeToRemove.path.contains(currentWrite.path)) {
              removedWriteOverlapsWithOtherWrites = true;
            }
          }
          i2--;
        }
        if (!removedWriteWasVisible) {
          return false;
        } else if (removedWriteOverlapsWithOtherWrites) {
          this.resetTree_();
          return true;
        } else {
          if (writeToRemove.snap) {
            this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
          } else {
            var children = writeToRemove.children;
            each(children, function(childName) {
              _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
            });
          }
          return true;
        }
      };
      WriteTree2.prototype.getCompleteWriteData = function(path) {
        return this.visibleWrites_.getCompleteNode(path);
      };
      WriteTree2.prototype.calcCompleteEventCache = function(treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        if (!writeIdsToExclude && !includeHiddenWrites) {
          var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
          if (shadowingNode != null) {
            return shadowingNode;
          } else {
            var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
            if (subMerge.isEmpty()) {
              return completeServerCache;
            } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {
              return null;
            } else {
              var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
              return subMerge.apply(layeredCache);
            }
          }
        } else {
          var merge = this.visibleWrites_.childCompoundWrite(treePath);
          if (!includeHiddenWrites && merge.isEmpty()) {
            return completeServerCache;
          } else {
            if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {
              return null;
            } else {
              var filter = function(write) {
                return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));
              };
              var mergeAtPath = WriteTree2.layerTree_(this.allWrites_, filter, treePath);
              var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
              return mergeAtPath.apply(layeredCache);
            }
          }
        }
      };
      WriteTree2.prototype.calcCompleteEventChildren = function(treePath, completeServerChildren) {
        var completeChildren = ChildrenNode.EMPTY_NODE;
        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
        if (topLevelSet) {
          if (!topLevelSet.isLeafNode()) {
            topLevelSet.forEachChild(PRIORITY_INDEX, function(childName, childSnap) {
              completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
            });
          }
          return completeChildren;
        } else if (completeServerChildren) {
          var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
          completeServerChildren.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
            var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);
            completeChildren = completeChildren.updateImmediateChild(childName, node);
          });
          merge_1.getCompleteChildren().forEach(function(namedNode) {
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
        } else {
          var merge = this.visibleWrites_.childCompoundWrite(treePath);
          merge.getCompleteChildren().forEach(function(namedNode) {
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
        }
      };
      WriteTree2.prototype.calcEventCacheAfterServerOverwrite = function(treePath, childPath, existingEventSnap, existingServerSnap) {
        assert(existingEventSnap || existingServerSnap, "Either existingEventSnap or existingServerSnap must exist");
        var path = treePath.child(childPath);
        if (this.visibleWrites_.hasCompleteWrite(path)) {
          return null;
        } else {
          var childMerge = this.visibleWrites_.childCompoundWrite(path);
          if (childMerge.isEmpty()) {
            return existingServerSnap.getChild(childPath);
          } else {
            return childMerge.apply(existingServerSnap.getChild(childPath));
          }
        }
      };
      WriteTree2.prototype.calcCompleteChild = function(treePath, childKey, existingServerSnap) {
        var path = treePath.child(childKey);
        var shadowingNode = this.visibleWrites_.getCompleteNode(path);
        if (shadowingNode != null) {
          return shadowingNode;
        } else {
          if (existingServerSnap.isCompleteForChild(childKey)) {
            var childMerge = this.visibleWrites_.childCompoundWrite(path);
            return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
          } else {
            return null;
          }
        }
      };
      WriteTree2.prototype.shadowingWrite = function(path) {
        return this.visibleWrites_.getCompleteNode(path);
      };
      WriteTree2.prototype.calcIndexedSlice = function(treePath, completeServerData, startPost, count, reverse, index2) {
        var toIterate;
        var merge = this.visibleWrites_.childCompoundWrite(treePath);
        var shadowingNode = merge.getCompleteNode(Path.Empty);
        if (shadowingNode != null) {
          toIterate = shadowingNode;
        } else if (completeServerData != null) {
          toIterate = merge.apply(completeServerData);
        } else {
          return [];
        }
        toIterate = toIterate.withIndex(index2);
        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
          var nodes = [];
          var cmp = index2.getCompare();
          var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index2) : toIterate.getIteratorFrom(startPost, index2);
          var next = iter.getNext();
          while (next && nodes.length < count) {
            if (cmp(next, startPost) !== 0) {
              nodes.push(next);
            }
            next = iter.getNext();
          }
          return nodes;
        } else {
          return [];
        }
      };
      WriteTree2.prototype.recordContainsPath_ = function(writeRecord, path) {
        if (writeRecord.snap) {
          return writeRecord.path.contains(path);
        } else {
          for (var childName in writeRecord.children) {
            if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {
              return true;
            }
          }
          return false;
        }
      };
      WriteTree2.prototype.resetTree_ = function() {
        this.visibleWrites_ = WriteTree2.layerTree_(this.allWrites_, WriteTree2.DefaultFilter_, Path.Empty);
        if (this.allWrites_.length > 0) {
          this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
        } else {
          this.lastWriteId_ = -1;
        }
      };
      WriteTree2.DefaultFilter_ = function(write) {
        return write.visible;
      };
      WriteTree2.layerTree_ = function(writes, filter, treeRoot) {
        var compoundWrite = CompoundWrite.Empty;
        for (var i2 = 0; i2 < writes.length; ++i2) {
          var write = writes[i2];
          if (filter(write)) {
            var writePath = write.path;
            var relativePath = void 0;
            if (write.snap) {
              if (treeRoot.contains(writePath)) {
                relativePath = Path.relativePath(treeRoot, writePath);
                compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
              } else if (writePath.contains(treeRoot)) {
                relativePath = Path.relativePath(writePath, treeRoot);
                compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
              } else
                ;
            } else if (write.children) {
              if (treeRoot.contains(writePath)) {
                relativePath = Path.relativePath(treeRoot, writePath);
                compoundWrite = compoundWrite.addWrites(relativePath, write.children);
              } else if (writePath.contains(treeRoot)) {
                relativePath = Path.relativePath(writePath, treeRoot);
                if (relativePath.isEmpty()) {
                  compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
                } else {
                  var child2 = safeGet(write.children, relativePath.getFront());
                  if (child2) {
                    var deepNode = child2.getChild(relativePath.popFront());
                    compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
                  }
                }
              } else
                ;
            } else {
              throw assertionError("WriteRecord should have .snap or .children");
            }
          }
        }
        return compoundWrite;
      };
      return WriteTree2;
    }();
    var WriteTreeRef = function() {
      function WriteTreeRef2(path, writeTree) {
        this.treePath_ = path;
        this.writeTree_ = writeTree;
      }
      WriteTreeRef2.prototype.calcCompleteEventCache = function(completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
      };
      WriteTreeRef2.prototype.calcCompleteEventChildren = function(completeServerChildren) {
        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
      };
      WriteTreeRef2.prototype.calcEventCacheAfterServerOverwrite = function(path, existingEventSnap, existingServerSnap) {
        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
      };
      WriteTreeRef2.prototype.shadowingWrite = function(path) {
        return this.writeTree_.shadowingWrite(this.treePath_.child(path));
      };
      WriteTreeRef2.prototype.calcIndexedSlice = function(completeServerData, startPost, count, reverse, index2) {
        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index2);
      };
      WriteTreeRef2.prototype.calcCompleteChild = function(childKey, existingServerCache) {
        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
      };
      WriteTreeRef2.prototype.child = function(childName) {
        return new WriteTreeRef2(this.treePath_.child(childName), this.writeTree_);
      };
      return WriteTreeRef2;
    }();
    var SyncTree = function() {
      function SyncTree2(listenProvider_) {
        this.listenProvider_ = listenProvider_;
        this.syncPointTree_ = ImmutableTree.Empty;
        this.pendingWriteTree_ = new WriteTree();
        this.tagToQueryMap = new Map();
        this.queryToTagMap = new Map();
      }
      SyncTree2.prototype.applyUserOverwrite = function(path, newData, writeId, visible) {
        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
        if (!visible) {
          return [];
        } else {
          return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
        }
      };
      SyncTree2.prototype.applyUserMerge = function(path, changedChildren, writeId) {
        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
        var changeTree = ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
      };
      SyncTree2.prototype.ackUserWrite = function(writeId, revert) {
        if (revert === void 0) {
          revert = false;
        }
        var write = this.pendingWriteTree_.getWrite(writeId);
        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
        if (!needToReevaluate) {
          return [];
        } else {
          var affectedTree_1 = ImmutableTree.Empty;
          if (write.snap != null) {
            affectedTree_1 = affectedTree_1.set(Path.Empty, true);
          } else {
            each(write.children, function(pathString, node) {
              affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
            });
          }
          return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
        }
      };
      SyncTree2.prototype.applyServerOverwrite = function(path, newData) {
        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
      };
      SyncTree2.prototype.applyServerMerge = function(path, changedChildren) {
        var changeTree = ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
      };
      SyncTree2.prototype.applyListenComplete = function(path) {
        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
      };
      SyncTree2.prototype.applyTaggedQueryOverwrite = function(path, snap, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey != null) {
          var r2 = SyncTree2.parseQueryKey_(queryKey);
          var queryPath = r2.path, queryId = r2.queryId;
          var relativePath = Path.relativePath(queryPath, path);
          var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
          return this.applyTaggedOperation_(queryPath, op);
        } else {
          return [];
        }
      };
      SyncTree2.prototype.applyTaggedQueryMerge = function(path, changedChildren, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
          var r2 = SyncTree2.parseQueryKey_(queryKey);
          var queryPath = r2.path, queryId = r2.queryId;
          var relativePath = Path.relativePath(queryPath, path);
          var changeTree = ImmutableTree.fromObject(changedChildren);
          var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
          return this.applyTaggedOperation_(queryPath, op);
        } else {
          return [];
        }
      };
      SyncTree2.prototype.applyTaggedListenComplete = function(path, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
          var r2 = SyncTree2.parseQueryKey_(queryKey);
          var queryPath = r2.path, queryId = r2.queryId;
          var relativePath = Path.relativePath(queryPath, path);
          var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
          return this.applyTaggedOperation_(queryPath, op);
        } else {
          return [];
        }
      };
      SyncTree2.prototype.addEventRegistration = function(query, eventRegistration) {
        var path = query.path;
        var serverCache = null;
        var foundAncestorDefaultView = false;
        this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
          var relativePath = Path.relativePath(pathToSyncPoint, path);
          serverCache = serverCache || sp.getCompleteServerCache(relativePath);
          foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();
        });
        var syncPoint = this.syncPointTree_.get(path);
        if (!syncPoint) {
          syncPoint = new SyncPoint();
          this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
        } else {
          foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();
          serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
        }
        var serverCacheComplete;
        if (serverCache != null) {
          serverCacheComplete = true;
        } else {
          serverCacheComplete = false;
          serverCache = ChildrenNode.EMPTY_NODE;
          var subtree = this.syncPointTree_.subtree(path);
          subtree.foreachChild(function(childName, childSyncPoint) {
            var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
            if (completeCache) {
              serverCache = serverCache.updateImmediateChild(childName, completeCache);
            }
          });
        }
        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
          var queryKey = SyncTree2.makeQueryKey_(query);
          assert(!this.queryToTagMap.has(queryKey), "View does not exist, but we have a tag");
          var tag = SyncTree2.getNextQueryTag_();
          this.queryToTagMap.set(queryKey, tag);
          this.tagToQueryMap.set(tag, queryKey);
        }
        var writesCache = this.pendingWriteTree_.childWrites(path);
        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
        if (!viewAlreadyExists && !foundAncestorDefaultView) {
          var view = syncPoint.viewForQuery(query);
          events = events.concat(this.setupListener_(query, view));
        }
        return events;
      };
      SyncTree2.prototype.removeEventRegistration = function(query, eventRegistration, cancelError) {
        var _this = this;
        var path = query.path;
        var maybeSyncPoint = this.syncPointTree_.get(path);
        var cancelEvents = [];
        if (maybeSyncPoint && (query.queryIdentifier() === "default" || maybeSyncPoint.viewExistsForQuery(query))) {
          var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
          if (maybeSyncPoint.isEmpty()) {
            this.syncPointTree_ = this.syncPointTree_.remove(path);
          }
          var removed = removedAndEvents.removed;
          cancelEvents = removedAndEvents.events;
          var removingDefault = -1 !== removed.findIndex(function(query2) {
            return query2.getQueryParams().loadsAllData();
          });
          var covered = this.syncPointTree_.findOnPath(path, function(relativePath, parentSyncPoint) {
            return parentSyncPoint.hasCompleteView();
          });
          if (removingDefault && !covered) {
            var subtree = this.syncPointTree_.subtree(path);
            if (!subtree.isEmpty()) {
              var newViews = this.collectDistinctViewsForSubTree_(subtree);
              for (var i2 = 0; i2 < newViews.length; ++i2) {
                var view = newViews[i2], newQuery = view.getQuery();
                var listener = this.createListenerForView_(view);
                this.listenProvider_.startListening(SyncTree2.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
              }
            }
          }
          if (!covered && removed.length > 0 && !cancelError) {
            if (removingDefault) {
              var defaultTag = null;
              this.listenProvider_.stopListening(SyncTree2.queryForListening_(query), defaultTag);
            } else {
              removed.forEach(function(queryToRemove) {
                var tagToRemove = _this.queryToTagMap.get(SyncTree2.makeQueryKey_(queryToRemove));
                _this.listenProvider_.stopListening(SyncTree2.queryForListening_(queryToRemove), tagToRemove);
              });
            }
          }
          this.removeTags_(removed);
        }
        return cancelEvents;
      };
      SyncTree2.prototype.calcCompleteEventCache = function(path, writeIdsToExclude) {
        var includeHiddenSets = true;
        var writeTree = this.pendingWriteTree_;
        var serverCache = this.syncPointTree_.findOnPath(path, function(pathSoFar, syncPoint) {
          var relativePath = Path.relativePath(pathSoFar, path);
          var serverCache2 = syncPoint.getCompleteServerCache(relativePath);
          if (serverCache2) {
            return serverCache2;
          }
        });
        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
      };
      SyncTree2.prototype.collectDistinctViewsForSubTree_ = function(subtree) {
        return subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
          if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
            var completeView = maybeChildSyncPoint.getCompleteView();
            return [completeView];
          } else {
            var views_1 = [];
            if (maybeChildSyncPoint) {
              views_1 = maybeChildSyncPoint.getQueryViews();
            }
            each(childMap, function(_key, childViews) {
              views_1 = views_1.concat(childViews);
            });
            return views_1;
          }
        });
      };
      SyncTree2.prototype.removeTags_ = function(queries) {
        for (var j2 = 0; j2 < queries.length; ++j2) {
          var removedQuery = queries[j2];
          if (!removedQuery.getQueryParams().loadsAllData()) {
            var removedQueryKey = SyncTree2.makeQueryKey_(removedQuery);
            var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
            this.queryToTagMap.delete(removedQueryKey);
            this.tagToQueryMap.delete(removedQueryTag);
          }
        }
      };
      SyncTree2.queryForListening_ = function(query) {
        if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {
          return query.getRef();
        } else {
          return query;
        }
      };
      SyncTree2.prototype.setupListener_ = function(query, view) {
        var path = query.path;
        var tag = this.tagForQuery_(query);
        var listener = this.createListenerForView_(view);
        var events = this.listenProvider_.startListening(SyncTree2.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
        var subtree = this.syncPointTree_.subtree(path);
        if (tag) {
          assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
        } else {
          var queriesToStop = subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
            if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
              return [maybeChildSyncPoint.getCompleteView().getQuery()];
            } else {
              var queries_1 = [];
              if (maybeChildSyncPoint) {
                queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function(view2) {
                  return view2.getQuery();
                }));
              }
              each(childMap, function(_key, childQueries) {
                queries_1 = queries_1.concat(childQueries);
              });
              return queries_1;
            }
          });
          for (var i2 = 0; i2 < queriesToStop.length; ++i2) {
            var queryToStop = queriesToStop[i2];
            this.listenProvider_.stopListening(SyncTree2.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
          }
        }
        return events;
      };
      SyncTree2.prototype.createListenerForView_ = function(view) {
        var _this = this;
        var query = view.getQuery();
        var tag = this.tagForQuery_(query);
        return {
          hashFn: function() {
            var cache2 = view.getServerCache() || ChildrenNode.EMPTY_NODE;
            return cache2.hash();
          },
          onComplete: function(status) {
            if (status === "ok") {
              if (tag) {
                return _this.applyTaggedListenComplete(query.path, tag);
              } else {
                return _this.applyListenComplete(query.path);
              }
            } else {
              var error2 = errorForServerCode(status, query);
              return _this.removeEventRegistration(query, null, error2);
            }
          }
        };
      };
      SyncTree2.makeQueryKey_ = function(query) {
        return query.path.toString() + "$" + query.queryIdentifier();
      };
      SyncTree2.parseQueryKey_ = function(queryKey) {
        var splitIndex = queryKey.indexOf("$");
        assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, "Bad queryKey.");
        return {
          queryId: queryKey.substr(splitIndex + 1),
          path: new Path(queryKey.substr(0, splitIndex))
        };
      };
      SyncTree2.prototype.queryKeyForTag_ = function(tag) {
        return this.tagToQueryMap.get(tag);
      };
      SyncTree2.prototype.tagForQuery_ = function(query) {
        var queryKey = SyncTree2.makeQueryKey_(query);
        return this.queryToTagMap.get(queryKey);
      };
      SyncTree2.getNextQueryTag_ = function() {
        return SyncTree2.nextQueryTag_++;
      };
      SyncTree2.prototype.applyTaggedOperation_ = function(queryPath, operation) {
        var syncPoint = this.syncPointTree_.get(queryPath);
        assert(syncPoint, "Missing sync point for query tag that we're tracking");
        var writesCache = this.pendingWriteTree_.childWrites(queryPath);
        return syncPoint.applyOperation(operation, writesCache, null);
      };
      SyncTree2.prototype.applyOperationToSyncPoints_ = function(operation) {
        return this.applyOperationHelper_(operation, this.syncPointTree_, null, this.pendingWriteTree_.childWrites(Path.Empty));
      };
      SyncTree2.prototype.applyOperationHelper_ = function(operation, syncPointTree, serverCache, writesCache) {
        if (operation.path.isEmpty()) {
          return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
        } else {
          var syncPoint = syncPointTree.get(Path.Empty);
          if (serverCache == null && syncPoint != null) {
            serverCache = syncPoint.getCompleteServerCache(Path.Empty);
          }
          var events = [];
          var childName = operation.path.getFront();
          var childOperation = operation.operationForChild(childName);
          var childTree = syncPointTree.children.get(childName);
          if (childTree && childOperation) {
            var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
            var childWritesCache = writesCache.child(childName);
            events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
          if (syncPoint) {
            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
          }
          return events;
        }
      };
      SyncTree2.prototype.applyOperationDescendantsHelper_ = function(operation, syncPointTree, serverCache, writesCache) {
        var _this = this;
        var syncPoint = syncPointTree.get(Path.Empty);
        if (serverCache == null && syncPoint != null) {
          serverCache = syncPoint.getCompleteServerCache(Path.Empty);
        }
        var events = [];
        syncPointTree.children.inorderTraversal(function(childName, childTree) {
          var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
          var childWritesCache = writesCache.child(childName);
          var childOperation = operation.operationForChild(childName);
          if (childOperation) {
            events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
        });
        if (syncPoint) {
          events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
        }
        return events;
      };
      SyncTree2.nextQueryTag_ = 1;
      return SyncTree2;
    }();
    var SnapshotHolder = function() {
      function SnapshotHolder2() {
        this.rootNode_ = ChildrenNode.EMPTY_NODE;
      }
      SnapshotHolder2.prototype.getNode = function(path) {
        return this.rootNode_.getChild(path);
      };
      SnapshotHolder2.prototype.updateSnapshot = function(path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
      };
      return SnapshotHolder2;
    }();
    var StatsCollection = function() {
      function StatsCollection2() {
        this.counters_ = {};
      }
      StatsCollection2.prototype.incrementCounter = function(name10, amount) {
        if (amount === void 0) {
          amount = 1;
        }
        if (!contains(this.counters_, name10)) {
          this.counters_[name10] = 0;
        }
        this.counters_[name10] += amount;
      };
      StatsCollection2.prototype.get = function() {
        return deepCopy(this.counters_);
      };
      return StatsCollection2;
    }();
    var StatsManager = function() {
      function StatsManager2() {
      }
      StatsManager2.getCollection = function(repoInfo) {
        var hashString = repoInfo.toString();
        if (!this.collections_[hashString]) {
          this.collections_[hashString] = new StatsCollection();
        }
        return this.collections_[hashString];
      };
      StatsManager2.getOrCreateReporter = function(repoInfo, creatorFunction) {
        var hashString = repoInfo.toString();
        if (!this.reporters_[hashString]) {
          this.reporters_[hashString] = creatorFunction();
        }
        return this.reporters_[hashString];
      };
      StatsManager2.collections_ = {};
      StatsManager2.reporters_ = {};
      return StatsManager2;
    }();
    var StatsListener = function() {
      function StatsListener2(collection_) {
        this.collection_ = collection_;
        this.last_ = null;
      }
      StatsListener2.prototype.get = function() {
        var newStats = this.collection_.get();
        var delta = __assign({}, newStats);
        if (this.last_) {
          each(this.last_, function(stat, value) {
            delta[stat] = delta[stat] - value;
          });
        }
        this.last_ = newStats;
        return delta;
      };
      return StatsListener2;
    }();
    var FIRST_STATS_MIN_TIME = 10 * 1e3;
    var FIRST_STATS_MAX_TIME = 30 * 1e3;
    var REPORT_STATS_INTERVAL = 5 * 60 * 1e3;
    var StatsReporter = function() {
      function StatsReporter2(collection, server_) {
        this.server_ = server_;
        this.statsToReport_ = {};
        this.statsListener_ = new StatsListener(collection);
        var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
      }
      StatsReporter2.prototype.includeStat = function(stat) {
        this.statsToReport_[stat] = true;
      };
      StatsReporter2.prototype.reportStats_ = function() {
        var _this = this;
        var stats2 = this.statsListener_.get();
        var reportedStats = {};
        var haveStatsToReport = false;
        each(stats2, function(stat, value) {
          if (value > 0 && contains(_this.statsToReport_, stat)) {
            reportedStats[stat] = value;
            haveStatsToReport = true;
          }
        });
        if (haveStatsToReport) {
          this.server_.reportStats(reportedStats);
        }
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
      };
      return StatsReporter2;
    }();
    var EventQueue = function() {
      function EventQueue2() {
        this.eventLists_ = [];
        this.recursionDepth_ = 0;
      }
      EventQueue2.prototype.queueEvents = function(eventDataList) {
        var currList = null;
        for (var i2 = 0; i2 < eventDataList.length; i2++) {
          var eventData = eventDataList[i2];
          var eventPath = eventData.getPath();
          if (currList !== null && !eventPath.equals(currList.getPath())) {
            this.eventLists_.push(currList);
            currList = null;
          }
          if (currList === null) {
            currList = new EventList(eventPath);
          }
          currList.add(eventData);
        }
        if (currList) {
          this.eventLists_.push(currList);
        }
      };
      EventQueue2.prototype.raiseEventsAtPath = function(path, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function(eventPath) {
          return eventPath.equals(path);
        });
      };
      EventQueue2.prototype.raiseEventsForChangedPath = function(changedPath, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function(eventPath) {
          return eventPath.contains(changedPath) || changedPath.contains(eventPath);
        });
      };
      EventQueue2.prototype.raiseQueuedEventsMatchingPredicate_ = function(predicate) {
        this.recursionDepth_++;
        var sentAll = true;
        for (var i2 = 0; i2 < this.eventLists_.length; i2++) {
          var eventList = this.eventLists_[i2];
          if (eventList) {
            var eventPath = eventList.getPath();
            if (predicate(eventPath)) {
              this.eventLists_[i2].raise();
              this.eventLists_[i2] = null;
            } else {
              sentAll = false;
            }
          }
        }
        if (sentAll) {
          this.eventLists_ = [];
        }
        this.recursionDepth_--;
      };
      return EventQueue2;
    }();
    var EventList = function() {
      function EventList2(path_) {
        this.path_ = path_;
        this.events_ = [];
      }
      EventList2.prototype.add = function(eventData) {
        this.events_.push(eventData);
      };
      EventList2.prototype.raise = function() {
        for (var i2 = 0; i2 < this.events_.length; i2++) {
          var eventData = this.events_[i2];
          if (eventData !== null) {
            this.events_[i2] = null;
            var eventFn = eventData.getEventRunner();
            if (logger12) {
              log("event: " + eventData.toString());
            }
            exceptionGuard(eventFn);
          }
        }
      };
      EventList2.prototype.getPath = function() {
        return this.path_;
      };
      return EventList2;
    }();
    var EventEmitter = function() {
      function EventEmitter2(allowedEvents_) {
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {};
        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, "Requires a non-empty array");
      }
      EventEmitter2.prototype.trigger = function(eventType) {
        var varArgs = [];
        for (var _i2 = 1; _i2 < arguments.length; _i2++) {
          varArgs[_i2 - 1] = arguments[_i2];
        }
        if (Array.isArray(this.listeners_[eventType])) {
          var listeners = __spread(this.listeners_[eventType]);
          for (var i2 = 0; i2 < listeners.length; i2++) {
            listeners[i2].callback.apply(listeners[i2].context, varArgs);
          }
        }
      };
      EventEmitter2.prototype.on = function(eventType, callback, context2) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({callback, context: context2});
        var eventData = this.getInitialEvent(eventType);
        if (eventData) {
          callback.apply(context2, eventData);
        }
      };
      EventEmitter2.prototype.off = function(eventType, callback, context2) {
        this.validateEventType_(eventType);
        var listeners = this.listeners_[eventType] || [];
        for (var i2 = 0; i2 < listeners.length; i2++) {
          if (listeners[i2].callback === callback && (!context2 || context2 === listeners[i2].context)) {
            listeners.splice(i2, 1);
            return;
          }
        }
      };
      EventEmitter2.prototype.validateEventType_ = function(eventType) {
        assert(this.allowedEvents_.find(function(et2) {
          return et2 === eventType;
        }), "Unknown event: " + eventType);
      };
      return EventEmitter2;
    }();
    var VisibilityMonitor = function(_super) {
      __extends(VisibilityMonitor2, _super);
      function VisibilityMonitor2() {
        var _this = _super.call(this, ["visible"]) || this;
        var hidden;
        var visibilityChange;
        if (typeof document !== "undefined" && typeof document.addEventListener !== "undefined") {
          if (typeof document["hidden"] !== "undefined") {
            visibilityChange = "visibilitychange";
            hidden = "hidden";
          } else if (typeof document["mozHidden"] !== "undefined") {
            visibilityChange = "mozvisibilitychange";
            hidden = "mozHidden";
          } else if (typeof document["msHidden"] !== "undefined") {
            visibilityChange = "msvisibilitychange";
            hidden = "msHidden";
          } else if (typeof document["webkitHidden"] !== "undefined") {
            visibilityChange = "webkitvisibilitychange";
            hidden = "webkitHidden";
          }
        }
        _this.visible_ = true;
        if (visibilityChange) {
          document.addEventListener(visibilityChange, function() {
            var visible = !document[hidden];
            if (visible !== _this.visible_) {
              _this.visible_ = visible;
              _this.trigger("visible", visible);
            }
          }, false);
        }
        return _this;
      }
      VisibilityMonitor2.getInstance = function() {
        return new VisibilityMonitor2();
      };
      VisibilityMonitor2.prototype.getInitialEvent = function(eventType) {
        assert(eventType === "visible", "Unknown event type: " + eventType);
        return [this.visible_];
      };
      return VisibilityMonitor2;
    }(EventEmitter);
    var OnlineMonitor = function(_super) {
      __extends(OnlineMonitor2, _super);
      function OnlineMonitor2() {
        var _this = _super.call(this, ["online"]) || this;
        _this.online_ = true;
        if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined" && !isMobileCordova()) {
          window.addEventListener("online", function() {
            if (!_this.online_) {
              _this.online_ = true;
              _this.trigger("online", true);
            }
          }, false);
          window.addEventListener("offline", function() {
            if (_this.online_) {
              _this.online_ = false;
              _this.trigger("online", false);
            }
          }, false);
        }
        return _this;
      }
      OnlineMonitor2.getInstance = function() {
        return new OnlineMonitor2();
      };
      OnlineMonitor2.prototype.getInitialEvent = function(eventType) {
        assert(eventType === "online", "Unknown event type: " + eventType);
        return [this.online_];
      };
      OnlineMonitor2.prototype.currentlyOnline = function() {
        return this.online_;
      };
      return OnlineMonitor2;
    }(EventEmitter);
    var PacketReceiver = function() {
      function PacketReceiver2(onMessage_) {
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
      }
      PacketReceiver2.prototype.closeAfter = function(responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
          this.onClose();
          this.onClose = null;
        }
      };
      PacketReceiver2.prototype.handleResponse = function(requestNum, data) {
        var _this = this;
        this.pendingResponses[requestNum] = data;
        var _loop_1 = function() {
          var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
          delete this_1.pendingResponses[this_1.currentResponseNum];
          var _loop_2 = function(i3) {
            if (toProcess[i3]) {
              exceptionGuard(function() {
                _this.onMessage_(toProcess[i3]);
              });
            }
          };
          for (var i2 = 0; i2 < toProcess.length; ++i2) {
            _loop_2(i2);
          }
          if (this_1.currentResponseNum === this_1.closeAfterResponse) {
            if (this_1.onClose) {
              this_1.onClose();
              this_1.onClose = null;
            }
            return "break";
          }
          this_1.currentResponseNum++;
        };
        var this_1 = this;
        while (this.pendingResponses[this.currentResponseNum]) {
          var state_1 = _loop_1();
          if (state_1 === "break")
            break;
        }
      };
      return PacketReceiver2;
    }();
    var FIREBASE_LONGPOLL_START_PARAM = "start";
    var FIREBASE_LONGPOLL_CLOSE_COMMAND = "close";
    var FIREBASE_LONGPOLL_COMMAND_CB_NAME = "pLPCommand";
    var FIREBASE_LONGPOLL_DATA_CB_NAME = "pRTLPCB";
    var FIREBASE_LONGPOLL_ID_PARAM = "id";
    var FIREBASE_LONGPOLL_PW_PARAM = "pw";
    var FIREBASE_LONGPOLL_SERIAL_PARAM = "ser";
    var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = "cb";
    var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = "seg";
    var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = "ts";
    var FIREBASE_LONGPOLL_DATA_PARAM = "d";
    var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = "dframe";
    var MAX_URL_DATA_SIZE = 1870;
    var SEG_HEADER_SIZE = 30;
    var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    var KEEPALIVE_REQUEST_INTERVAL = 25e3;
    var LP_CONNECT_TIMEOUT = 3e4;
    var BrowserPollConnection = function() {
      function BrowserPollConnection2(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.applicationId = applicationId;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = logWrapper(connId);
        this.stats_ = StatsManager.getCollection(repoInfo);
        this.urlFn = function(params) {
          return repoInfo.connectionURL(LONG_POLLING, params);
        };
      }
      BrowserPollConnection2.prototype.open = function(onMessage, onDisconnect) {
        var _this = this;
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect;
        this.myPacketOrderer = new PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(function() {
          _this.log_("Timed out trying to connect.");
          _this.onClosed_();
          _this.connectTimeoutTimer_ = null;
        }, Math.floor(LP_CONNECT_TIMEOUT));
        executeWhenDOMReady(function() {
          if (_this.isClosed_) {
            return;
          }
          _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            var _a9 = __read(args, 5), command = _a9[0], arg1 = _a9[1], arg2 = _a9[2], arg3 = _a9[3], arg4 = _a9[4];
            _this.incrementIncomingBytes_(args);
            if (!_this.scriptTagHolder) {
              return;
            }
            if (_this.connectTimeoutTimer_) {
              clearTimeout(_this.connectTimeoutTimer_);
              _this.connectTimeoutTimer_ = null;
            }
            _this.everConnected_ = true;
            if (command === FIREBASE_LONGPOLL_START_PARAM) {
              _this.id = arg1;
              _this.password = arg2;
            } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
              if (arg1) {
                _this.scriptTagHolder.sendNewPolls = false;
                _this.myPacketOrderer.closeAfter(arg1, function() {
                  _this.onClosed_();
                });
              } else {
                _this.onClosed_();
              }
            } else {
              throw new Error("Unrecognized command received: " + command);
            }
          }, function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            var _a9 = __read(args, 2), pN = _a9[0], data = _a9[1];
            _this.incrementIncomingBytes_(args);
            _this.myPacketOrderer.handleResponse(pN, data);
          }, function() {
            _this.onClosed_();
          }, _this.urlFn);
          var urlParams = {};
          urlParams[FIREBASE_LONGPOLL_START_PARAM] = "t";
          urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 1e8);
          if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
            urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
          }
          urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
          if (_this.transportSessionId) {
            urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
          }
          if (_this.lastSessionId) {
            urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
          }
          if (_this.applicationId) {
            urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
          }
          if (typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
            urlParams[REFERER_PARAM] = FORGE_REF;
          }
          var connectURL = _this.urlFn(urlParams);
          _this.log_("Connecting via long-poll to " + connectURL);
          _this.scriptTagHolder.addTag(connectURL, function() {
          });
        });
      };
      BrowserPollConnection2.prototype.start = function() {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
      };
      BrowserPollConnection2.forceAllow = function() {
        BrowserPollConnection2.forceAllow_ = true;
      };
      BrowserPollConnection2.forceDisallow = function() {
        BrowserPollConnection2.forceDisallow_ = true;
      };
      BrowserPollConnection2.isAvailable = function() {
        if (isNodeSdk()) {
          return false;
        } else if (BrowserPollConnection2.forceAllow_) {
          return true;
        } else {
          return !BrowserPollConnection2.forceDisallow_ && typeof document !== "undefined" && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
        }
      };
      BrowserPollConnection2.prototype.markConnectionHealthy = function() {
      };
      BrowserPollConnection2.prototype.shutdown_ = function() {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
          this.scriptTagHolder.close();
          this.scriptTagHolder = null;
        }
        if (this.myDisconnFrame) {
          document.body.removeChild(this.myDisconnFrame);
          this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
          clearTimeout(this.connectTimeoutTimer_);
          this.connectTimeoutTimer_ = null;
        }
      };
      BrowserPollConnection2.prototype.onClosed_ = function() {
        if (!this.isClosed_) {
          this.log_("Longpoll is closing itself");
          this.shutdown_();
          if (this.onDisconnect_) {
            this.onDisconnect_(this.everConnected_);
            this.onDisconnect_ = null;
          }
        }
      };
      BrowserPollConnection2.prototype.close = function() {
        if (!this.isClosed_) {
          this.log_("Longpoll is being closed.");
          this.shutdown_();
        }
      };
      BrowserPollConnection2.prototype.send = function(data) {
        var dataStr = stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter("bytes_sent", dataStr.length);
        var base64data = base64Encode(dataStr);
        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
        for (var i2 = 0; i2 < dataSegs.length; i2++) {
          this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i2]);
          this.curSegmentNum++;
        }
      };
      BrowserPollConnection2.prototype.addDisconnectPingFrame = function(id2, pw) {
        if (isNodeSdk()) {
          return;
        }
        this.myDisconnFrame = document.createElement("iframe");
        var urlParams = {};
        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = "t";
        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id2;
        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = "none";
        document.body.appendChild(this.myDisconnFrame);
      };
      BrowserPollConnection2.prototype.incrementIncomingBytes_ = function(args) {
        var bytesReceived = stringify(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter("bytes_received", bytesReceived);
      };
      return BrowserPollConnection2;
    }();
    var FirebaseIFrameScriptHolder = function() {
      function FirebaseIFrameScriptHolder2(commandCB, onMessageCB, onDisconnect, urlFn) {
        this.onDisconnect = onDisconnect;
        this.urlFn = urlFn;
        this.outstandingRequests = new Set();
        this.pendingSegs = [];
        this.currentSerial = Math.floor(Math.random() * 1e8);
        this.sendNewPolls = true;
        if (!isNodeSdk()) {
          this.uniqueCallbackIdentifier = LUIDGenerator();
          window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
          window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
          this.myIFrame = FirebaseIFrameScriptHolder2.createIFrame_();
          var script = "";
          if (this.myIFrame.src && this.myIFrame.src.substr(0, "javascript:".length) === "javascript:") {
            var currentDomain = document.domain;
            script = '<script>document.domain="' + currentDomain + '";</script>';
          }
          var iframeContents = "<html><body>" + script + "</body></html>";
          try {
            this.myIFrame.doc.open();
            this.myIFrame.doc.write(iframeContents);
            this.myIFrame.doc.close();
          } catch (e) {
            log("frame writing exception");
            if (e.stack) {
              log(e.stack);
            }
            log(e);
          }
        } else {
          this.commandCB = commandCB;
          this.onMessageCB = onMessageCB;
        }
      }
      FirebaseIFrameScriptHolder2.createIFrame_ = function() {
        var iframe = document.createElement("iframe");
        iframe.style.display = "none";
        if (document.body) {
          document.body.appendChild(iframe);
          try {
            var a = iframe.contentWindow.document;
            if (!a) {
              log("No IE domain setting required");
            }
          } catch (e) {
            var domain = document.domain;
            iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
          }
        } else {
          throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
        }
        if (iframe.contentDocument) {
          iframe.doc = iframe.contentDocument;
        } else if (iframe.contentWindow) {
          iframe.doc = iframe.contentWindow.document;
        } else if (iframe.document) {
          iframe.doc = iframe.document;
        }
        return iframe;
      };
      FirebaseIFrameScriptHolder2.prototype.close = function() {
        var _this = this;
        this.alive = false;
        if (this.myIFrame) {
          this.myIFrame.doc.body.innerHTML = "";
          setTimeout(function() {
            if (_this.myIFrame !== null) {
              document.body.removeChild(_this.myIFrame);
              _this.myIFrame = null;
            }
          }, Math.floor(0));
        }
        var onDisconnect = this.onDisconnect;
        if (onDisconnect) {
          this.onDisconnect = null;
          onDisconnect();
        }
      };
      FirebaseIFrameScriptHolder2.prototype.startLongPoll = function(id2, pw) {
        this.myID = id2;
        this.myPW = pw;
        this.alive = true;
        while (this.newRequest_()) {
        }
      };
      FirebaseIFrameScriptHolder2.prototype.newRequest_ = function() {
        if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
          this.currentSerial++;
          var urlParams = {};
          urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
          urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
          urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
          var theURL = this.urlFn(urlParams);
          var curDataString = "";
          var i2 = 0;
          while (this.pendingSegs.length > 0) {
            var nextSeg = this.pendingSegs[0];
            if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
              var theSeg = this.pendingSegs.shift();
              curDataString = curDataString + "&" + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i2 + "=" + theSeg.seg + "&" + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i2 + "=" + theSeg.ts + "&" + FIREBASE_LONGPOLL_DATA_PARAM + i2 + "=" + theSeg.d;
              i2++;
            } else {
              break;
            }
          }
          theURL = theURL + curDataString;
          this.addLongPollTag_(theURL, this.currentSerial);
          return true;
        } else {
          return false;
        }
      };
      FirebaseIFrameScriptHolder2.prototype.enqueueSegment = function(segnum, totalsegs, data) {
        this.pendingSegs.push({seg: segnum, ts: totalsegs, d: data});
        if (this.alive) {
          this.newRequest_();
        }
      };
      FirebaseIFrameScriptHolder2.prototype.addLongPollTag_ = function(url, serial) {
        var _this = this;
        this.outstandingRequests.add(serial);
        var doNewRequest = function() {
          _this.outstandingRequests.delete(serial);
          _this.newRequest_();
        };
        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
        var readyStateCB = function() {
          clearTimeout(keepaliveTimeout);
          doNewRequest();
        };
        this.addTag(url, readyStateCB);
      };
      FirebaseIFrameScriptHolder2.prototype.addTag = function(url, loadCB) {
        var _this = this;
        if (isNodeSdk()) {
          this.doNodeLongPoll(url, loadCB);
        } else {
          setTimeout(function() {
            try {
              if (!_this.sendNewPolls) {
                return;
              }
              var newScript_1 = _this.myIFrame.doc.createElement("script");
              newScript_1.type = "text/javascript";
              newScript_1.async = true;
              newScript_1.src = url;
              newScript_1.onload = newScript_1.onreadystatechange = function() {
                var rstate = newScript_1.readyState;
                if (!rstate || rstate === "loaded" || rstate === "complete") {
                  newScript_1.onload = newScript_1.onreadystatechange = null;
                  if (newScript_1.parentNode) {
                    newScript_1.parentNode.removeChild(newScript_1);
                  }
                  loadCB();
                }
              };
              newScript_1.onerror = function() {
                log("Long-poll script failed to load: " + url);
                _this.sendNewPolls = false;
                _this.close();
              };
              _this.myIFrame.doc.body.appendChild(newScript_1);
            } catch (e) {
            }
          }, Math.floor(1));
        }
      };
      return FirebaseIFrameScriptHolder2;
    }();
    var SDK_VERSION2 = "";
    function setSDKVersion(version10) {
      SDK_VERSION2 = version10;
    }
    var WEBSOCKET_MAX_FRAME_SIZE = 16384;
    var WEBSOCKET_KEEPALIVE_INTERVAL = 45e3;
    var WebSocketImpl = null;
    if (typeof MozWebSocket !== "undefined") {
      WebSocketImpl = MozWebSocket;
    } else if (typeof WebSocket !== "undefined") {
      WebSocketImpl = WebSocket;
    }
    var WebSocketConnection = function() {
      function WebSocketConnection2(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.applicationId = applicationId;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = logWrapper(this.connId);
        this.stats_ = StatsManager.getCollection(repoInfo);
        this.connURL = WebSocketConnection2.connectionURL_(repoInfo, transportSessionId, lastSessionId);
        this.nodeAdmin = repoInfo.nodeAdmin;
      }
      WebSocketConnection2.connectionURL_ = function(repoInfo, transportSessionId, lastSessionId) {
        var urlParams = {};
        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
        if (!isNodeSdk() && typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
          urlParams[REFERER_PARAM] = FORGE_REF;
        }
        if (transportSessionId) {
          urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
        }
        if (lastSessionId) {
          urlParams[LAST_SESSION_PARAM] = lastSessionId;
        }
        return repoInfo.connectionURL(WEBSOCKET, urlParams);
      };
      WebSocketConnection2.prototype.open = function(onMessage, onDisconnect) {
        var _this = this;
        this.onDisconnect = onDisconnect;
        this.onMessage = onMessage;
        this.log_("Websocket connecting to " + this.connURL);
        this.everConnected_ = false;
        PersistentStorage.set("previous_websocket_failure", true);
        try {
          if (isNodeSdk()) {
            var device = this.nodeAdmin ? "AdminNode" : "Node";
            var options = {
              headers: {
                "User-Agent": "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION2 + "/" + process.platform + "/" + device,
                "X-Firebase-GMPID": this.applicationId || ""
              }
            };
            var env = process["env"];
            var proxy = this.connURL.indexOf("wss://") === 0 ? env["HTTPS_PROXY"] || env["https_proxy"] : env["HTTP_PROXY"] || env["http_proxy"];
            if (proxy) {
              options["proxy"] = {origin: proxy};
            }
            this.mySock = new WebSocketImpl(this.connURL, [], options);
          } else {
            var options = {
              headers: {
                "X-Firebase-GMPID": this.applicationId || ""
              }
            };
            this.mySock = new WebSocketImpl(this.connURL, [], options);
          }
        } catch (e) {
          this.log_("Error instantiating WebSocket.");
          var error2 = e.message || e.data;
          if (error2) {
            this.log_(error2);
          }
          this.onClosed_();
          return;
        }
        this.mySock.onopen = function() {
          _this.log_("Websocket connected.");
          _this.everConnected_ = true;
        };
        this.mySock.onclose = function() {
          _this.log_("Websocket connection was disconnected.");
          _this.mySock = null;
          _this.onClosed_();
        };
        this.mySock.onmessage = function(m) {
          _this.handleIncomingFrame(m);
        };
        this.mySock.onerror = function(e) {
          _this.log_("WebSocket error.  Closing connection.");
          var error3 = e.message || e.data;
          if (error3) {
            _this.log_(error3);
          }
          _this.onClosed_();
        };
      };
      WebSocketConnection2.prototype.start = function() {
      };
      WebSocketConnection2.forceDisallow = function() {
        WebSocketConnection2.forceDisallow_ = true;
      };
      WebSocketConnection2.isAvailable = function() {
        var isOldAndroid = false;
        if (typeof navigator !== "undefined" && navigator.userAgent) {
          var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
          var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
          if (oldAndroidMatch && oldAndroidMatch.length > 1) {
            if (parseFloat(oldAndroidMatch[1]) < 4.4) {
              isOldAndroid = true;
            }
          }
        }
        return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection2.forceDisallow_;
      };
      WebSocketConnection2.previouslyFailed = function() {
        return PersistentStorage.isInMemoryStorage || PersistentStorage.get("previous_websocket_failure") === true;
      };
      WebSocketConnection2.prototype.markConnectionHealthy = function() {
        PersistentStorage.remove("previous_websocket_failure");
      };
      WebSocketConnection2.prototype.appendFrame_ = function(data) {
        this.frames.push(data);
        if (this.frames.length === this.totalFrames) {
          var fullMess = this.frames.join("");
          this.frames = null;
          var jsonMess = jsonEval(fullMess);
          this.onMessage(jsonMess);
        }
      };
      WebSocketConnection2.prototype.handleNewFrameCount_ = function(frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
      };
      WebSocketConnection2.prototype.extractFrameCount_ = function(data) {
        assert(this.frames === null, "We already have a frame buffer");
        if (data.length <= 6) {
          var frameCount = Number(data);
          if (!isNaN(frameCount)) {
            this.handleNewFrameCount_(frameCount);
            return null;
          }
        }
        this.handleNewFrameCount_(1);
        return data;
      };
      WebSocketConnection2.prototype.handleIncomingFrame = function(mess) {
        if (this.mySock === null) {
          return;
        }
        var data = mess["data"];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter("bytes_received", data.length);
        this.resetKeepAlive();
        if (this.frames !== null) {
          this.appendFrame_(data);
        } else {
          var remainingData = this.extractFrameCount_(data);
          if (remainingData !== null) {
            this.appendFrame_(remainingData);
          }
        }
      };
      WebSocketConnection2.prototype.send = function(data) {
        this.resetKeepAlive();
        var dataStr = stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter("bytes_sent", dataStr.length);
        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
        if (dataSegs.length > 1) {
          this.sendString_(String(dataSegs.length));
        }
        for (var i2 = 0; i2 < dataSegs.length; i2++) {
          this.sendString_(dataSegs[i2]);
        }
      };
      WebSocketConnection2.prototype.shutdown_ = function() {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
          clearInterval(this.keepaliveTimer);
          this.keepaliveTimer = null;
        }
        if (this.mySock) {
          this.mySock.close();
          this.mySock = null;
        }
      };
      WebSocketConnection2.prototype.onClosed_ = function() {
        if (!this.isClosed_) {
          this.log_("WebSocket is closing itself");
          this.shutdown_();
          if (this.onDisconnect) {
            this.onDisconnect(this.everConnected_);
            this.onDisconnect = null;
          }
        }
      };
      WebSocketConnection2.prototype.close = function() {
        if (!this.isClosed_) {
          this.log_("WebSocket is being closed");
          this.shutdown_();
        }
      };
      WebSocketConnection2.prototype.resetKeepAlive = function() {
        var _this = this;
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(function() {
          if (_this.mySock) {
            _this.sendString_("0");
          }
          _this.resetKeepAlive();
        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
      };
      WebSocketConnection2.prototype.sendString_ = function(str) {
        try {
          this.mySock.send(str);
        } catch (e) {
          this.log_("Exception thrown from WebSocket.send():", e.message || e.data, "Closing connection.");
          setTimeout(this.onClosed_.bind(this), 0);
        }
      };
      WebSocketConnection2.responsesRequiredToBeHealthy = 2;
      WebSocketConnection2.healthyTimeout = 3e4;
      return WebSocketConnection2;
    }();
    var TransportManager = function() {
      function TransportManager2(repoInfo) {
        this.initTransports_(repoInfo);
      }
      Object.defineProperty(TransportManager2, "ALL_TRANSPORTS", {
        get: function() {
          return [BrowserPollConnection, WebSocketConnection];
        },
        enumerable: false,
        configurable: true
      });
      TransportManager2.prototype.initTransports_ = function(repoInfo) {
        var e_1, _a9;
        var isWebSocketsAvailable2 = WebSocketConnection && WebSocketConnection["isAvailable"]();
        var isSkipPollConnection = isWebSocketsAvailable2 && !WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
          if (!isWebSocketsAvailable2) {
            warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
          }
          isSkipPollConnection = true;
        }
        if (isSkipPollConnection) {
          this.transports_ = [WebSocketConnection];
        } else {
          var transports = this.transports_ = [];
          try {
            for (var _b = __values(TransportManager2.ALL_TRANSPORTS), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
              var transport = _c2.value;
              if (transport && transport["isAvailable"]()) {
                transports.push(transport);
              }
            }
          } catch (e_1_1) {
            e_1 = {error: e_1_1};
          } finally {
            try {
              if (_c2 && !_c2.done && (_a9 = _b.return))
                _a9.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      };
      TransportManager2.prototype.initialTransport = function() {
        if (this.transports_.length > 0) {
          return this.transports_[0];
        } else {
          throw new Error("No transports available");
        }
      };
      TransportManager2.prototype.upgradeTransport = function() {
        if (this.transports_.length > 1) {
          return this.transports_[1];
        } else {
          return null;
        }
      };
      return TransportManager2;
    }();
    var UPGRADE_TIMEOUT = 6e4;
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5e3;
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = "t";
    var MESSAGE_DATA = "d";
    var CONTROL_SHUTDOWN = "s";
    var CONTROL_RESET = "r";
    var CONTROL_ERROR = "e";
    var CONTROL_PONG = "o";
    var SWITCH_ACK = "a";
    var END_TRANSMISSION = "n";
    var PING = "p";
    var SERVER_HELLO = "h";
    var Connection = function() {
      function Connection2(id2, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
        this.id = id2;
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0;
        this.log_ = logWrapper("c:" + this.id + ":");
        this.transportManager_ = new TransportManager(repoInfo_);
        this.log_("Connection created");
        this.start_();
      }
      Connection2.prototype.start_ = function() {
        var _this = this;
        var conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, void 0, this.lastSessionId);
        this.primaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
        var onMessageReceived = this.connReceiver_(this.conn_);
        var onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        setTimeout(function() {
          _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        var healthyTimeoutMS = conn["healthyTimeout"] || 0;
        if (healthyTimeoutMS > 0) {
          this.healthyTimeout_ = setTimeoutNonBlocking(function() {
            _this.healthyTimeout_ = null;
            if (!_this.isHealthy_) {
              if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                _this.log_("Connection exceeded healthy timeout but has received " + _this.conn_.bytesReceived + " bytes.  Marking connection healthy.");
                _this.isHealthy_ = true;
                _this.conn_.markConnectionHealthy();
              } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                _this.log_("Connection exceeded healthy timeout but has sent " + _this.conn_.bytesSent + " bytes.  Leaving connection alive.");
              } else {
                _this.log_("Closing unhealthy connection after timeout.");
                _this.close();
              }
            }
          }, Math.floor(healthyTimeoutMS));
        }
      };
      Connection2.prototype.nextTransportId_ = function() {
        return "c:" + this.id + ":" + this.connectionCount++;
      };
      Connection2.prototype.disconnReceiver_ = function(conn) {
        var _this = this;
        return function(everConnected) {
          if (conn === _this.conn_) {
            _this.onConnectionLost_(everConnected);
          } else if (conn === _this.secondaryConn_) {
            _this.log_("Secondary connection lost.");
            _this.onSecondaryConnectionLost_();
          } else {
            _this.log_("closing an old connection");
          }
        };
      };
      Connection2.prototype.connReceiver_ = function(conn) {
        var _this = this;
        return function(message) {
          if (_this.state_ !== 2) {
            if (conn === _this.rx_) {
              _this.onPrimaryMessageReceived_(message);
            } else if (conn === _this.secondaryConn_) {
              _this.onSecondaryMessageReceived_(message);
            } else {
              _this.log_("message on old connection");
            }
          }
        };
      };
      Connection2.prototype.sendRequest = function(dataMsg) {
        var msg = {t: "d", d: dataMsg};
        this.sendData_(msg);
      };
      Connection2.prototype.tryCleanupConnection = function() {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
          this.log_("cleaning up and promoting a connection: " + this.secondaryConn_.connId);
          this.conn_ = this.secondaryConn_;
          this.secondaryConn_ = null;
        }
      };
      Connection2.prototype.onSecondaryControl_ = function(controlData) {
        if (MESSAGE_TYPE in controlData) {
          var cmd = controlData[MESSAGE_TYPE];
          if (cmd === SWITCH_ACK) {
            this.upgradeIfSecondaryHealthy_();
          } else if (cmd === CONTROL_RESET) {
            this.log_("Got a reset on secondary, closing it");
            this.secondaryConn_.close();
            if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
              this.close();
            }
          } else if (cmd === CONTROL_PONG) {
            this.log_("got pong on secondary.");
            this.secondaryResponsesRequired_--;
            this.upgradeIfSecondaryHealthy_();
          }
        }
      };
      Connection2.prototype.onSecondaryMessageReceived_ = function(parsedData) {
        var layer = requireKey("t", parsedData);
        var data = requireKey("d", parsedData);
        if (layer === "c") {
          this.onSecondaryControl_(data);
        } else if (layer === "d") {
          this.pendingDataMessages.push(data);
        } else {
          throw new Error("Unknown protocol layer: " + layer);
        }
      };
      Connection2.prototype.upgradeIfSecondaryHealthy_ = function() {
        if (this.secondaryResponsesRequired_ <= 0) {
          this.log_("Secondary connection is healthy.");
          this.isHealthy_ = true;
          this.secondaryConn_.markConnectionHealthy();
          this.proceedWithUpgrade_();
        } else {
          this.log_("sending ping on secondary.");
          this.secondaryConn_.send({t: "c", d: {t: PING, d: {}}});
        }
      };
      Connection2.prototype.proceedWithUpgrade_ = function() {
        this.secondaryConn_.start();
        this.log_("sending client ack on secondary");
        this.secondaryConn_.send({t: "c", d: {t: SWITCH_ACK, d: {}}});
        this.log_("Ending transmission on primary");
        this.conn_.send({t: "c", d: {t: END_TRANSMISSION, d: {}}});
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
      };
      Connection2.prototype.onPrimaryMessageReceived_ = function(parsedData) {
        var layer = requireKey("t", parsedData);
        var data = requireKey("d", parsedData);
        if (layer === "c") {
          this.onControl_(data);
        } else if (layer === "d") {
          this.onDataMessage_(data);
        }
      };
      Connection2.prototype.onDataMessage_ = function(message) {
        this.onPrimaryResponse_();
        this.onMessage_(message);
      };
      Connection2.prototype.onPrimaryResponse_ = function() {
        if (!this.isHealthy_) {
          this.primaryResponsesRequired_--;
          if (this.primaryResponsesRequired_ <= 0) {
            this.log_("Primary connection is healthy.");
            this.isHealthy_ = true;
            this.conn_.markConnectionHealthy();
          }
        }
      };
      Connection2.prototype.onControl_ = function(controlData) {
        var cmd = requireKey(MESSAGE_TYPE, controlData);
        if (MESSAGE_DATA in controlData) {
          var payload = controlData[MESSAGE_DATA];
          if (cmd === SERVER_HELLO) {
            this.onHandshake_(payload);
          } else if (cmd === END_TRANSMISSION) {
            this.log_("recvd end transmission on primary");
            this.rx_ = this.secondaryConn_;
            for (var i2 = 0; i2 < this.pendingDataMessages.length; ++i2) {
              this.onDataMessage_(this.pendingDataMessages[i2]);
            }
            this.pendingDataMessages = [];
            this.tryCleanupConnection();
          } else if (cmd === CONTROL_SHUTDOWN) {
            this.onConnectionShutdown_(payload);
          } else if (cmd === CONTROL_RESET) {
            this.onReset_(payload);
          } else if (cmd === CONTROL_ERROR) {
            error("Server Error: " + payload);
          } else if (cmd === CONTROL_PONG) {
            this.log_("got pong on primary.");
            this.onPrimaryResponse_();
            this.sendPingOnPrimaryIfNecessary_();
          } else {
            error("Unknown control packet command: " + cmd);
          }
        }
      };
      Connection2.prototype.onHandshake_ = function(handshake) {
        var timestamp = handshake.ts;
        var version10 = handshake.v;
        var host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.updateHost(host);
        if (this.state_ === 0) {
          this.conn_.start();
          this.onConnectionEstablished_(this.conn_, timestamp);
          if (PROTOCOL_VERSION !== version10) {
            warn("Protocol version mismatch detected");
          }
          this.tryStartUpgrade_();
        }
      };
      Connection2.prototype.tryStartUpgrade_ = function() {
        var conn = this.transportManager_.upgradeTransport();
        if (conn) {
          this.startUpgrade_(conn);
        }
      };
      Connection2.prototype.startUpgrade_ = function(conn) {
        var _this = this;
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);
        this.secondaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
        var onMessage = this.connReceiver_(this.secondaryConn_);
        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect);
        setTimeoutNonBlocking(function() {
          if (_this.secondaryConn_) {
            _this.log_("Timed out trying to upgrade.");
            _this.secondaryConn_.close();
          }
        }, Math.floor(UPGRADE_TIMEOUT));
      };
      Connection2.prototype.onReset_ = function(host) {
        this.log_("Reset packet received.  New host: " + host);
        this.repoInfo_.updateHost(host);
        if (this.state_ === 1) {
          this.close();
        } else {
          this.closeConnections_();
          this.start_();
        }
      };
      Connection2.prototype.onConnectionEstablished_ = function(conn, timestamp) {
        var _this = this;
        this.log_("Realtime connection established.");
        this.conn_ = conn;
        this.state_ = 1;
        if (this.onReady_) {
          this.onReady_(timestamp, this.sessionId);
          this.onReady_ = null;
        }
        if (this.primaryResponsesRequired_ === 0) {
          this.log_("Primary connection is healthy.");
          this.isHealthy_ = true;
        } else {
          setTimeoutNonBlocking(function() {
            _this.sendPingOnPrimaryIfNecessary_();
          }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
        }
      };
      Connection2.prototype.sendPingOnPrimaryIfNecessary_ = function() {
        if (!this.isHealthy_ && this.state_ === 1) {
          this.log_("sending ping on primary.");
          this.sendData_({t: "c", d: {t: PING, d: {}}});
        }
      };
      Connection2.prototype.onSecondaryConnectionLost_ = function() {
        var conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) {
          this.close();
        }
      };
      Connection2.prototype.onConnectionLost_ = function(everConnected) {
        this.conn_ = null;
        if (!everConnected && this.state_ === 0) {
          this.log_("Realtime connection failed.");
          if (this.repoInfo_.isCacheableHost()) {
            PersistentStorage.remove("host:" + this.repoInfo_.host);
            this.repoInfo_.internalHost = this.repoInfo_.host;
          }
        } else if (this.state_ === 1) {
          this.log_("Realtime connection lost.");
        }
        this.close();
      };
      Connection2.prototype.onConnectionShutdown_ = function(reason) {
        this.log_("Connection shutdown command received. Shutting down...");
        if (this.onKill_) {
          this.onKill_(reason);
          this.onKill_ = null;
        }
        this.onDisconnect_ = null;
        this.close();
      };
      Connection2.prototype.sendData_ = function(data) {
        if (this.state_ !== 1) {
          throw "Connection is not connected";
        } else {
          this.tx_.send(data);
        }
      };
      Connection2.prototype.close = function() {
        if (this.state_ !== 2) {
          this.log_("Closing realtime connection.");
          this.state_ = 2;
          this.closeConnections_();
          if (this.onDisconnect_) {
            this.onDisconnect_();
            this.onDisconnect_ = null;
          }
        }
      };
      Connection2.prototype.closeConnections_ = function() {
        this.log_("Shutting down all connections");
        if (this.conn_) {
          this.conn_.close();
          this.conn_ = null;
        }
        if (this.secondaryConn_) {
          this.secondaryConn_.close();
          this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
          clearTimeout(this.healthyTimeout_);
          this.healthyTimeout_ = null;
        }
      };
      return Connection2;
    }();
    var ServerActions = function() {
      function ServerActions2() {
      }
      ServerActions2.prototype.put = function(pathString, data, onComplete, hash) {
      };
      ServerActions2.prototype.merge = function(pathString, data, onComplete, hash) {
      };
      ServerActions2.prototype.refreshAuthToken = function(token) {
      };
      ServerActions2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
      };
      ServerActions2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
      };
      ServerActions2.prototype.onDisconnectCancel = function(pathString, onComplete) {
      };
      ServerActions2.prototype.reportStats = function(stats2) {
      };
      return ServerActions2;
    }();
    var RECONNECT_MIN_DELAY = 1e3;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1e3;
    var GET_CONNECT_TIMEOUT = 3 * 1e3;
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1e3;
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 3e4;
    var SERVER_KILL_INTERRUPT_REASON = "server_kill";
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;
    var PersistentConnection = function(_super) {
      __extends(PersistentConnection2, _super);
      function PersistentConnection2(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.applicationId_ = applicationId_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.onConnectStatus_ = onConnectStatus_;
        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.authOverride_ = authOverride_;
        _this.id = PersistentConnection2.nextPersistentConnectionId_++;
        _this.log_ = logWrapper("p:" + _this.id + ":");
        _this.interruptReasons_ = {};
        _this.listens = new Map();
        _this.outstandingPuts_ = [];
        _this.outstandingGets_ = [];
        _this.outstandingPutCount_ = 0;
        _this.outstandingGetCount_ = 0;
        _this.onDisconnectRequestQueue_ = [];
        _this.connected_ = false;
        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
        _this.securityDebugCallback_ = null;
        _this.lastSessionId = null;
        _this.establishConnectionTimer_ = null;
        _this.visible_ = false;
        _this.requestCBHash_ = {};
        _this.requestNumber_ = 0;
        _this.realtime_ = null;
        _this.authToken_ = null;
        _this.forceTokenRefresh_ = false;
        _this.invalidAuthTokenCount_ = 0;
        _this.firstConnection_ = true;
        _this.lastConnectionAttemptTime_ = null;
        _this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && !isNodeSdk()) {
          throw new Error("Auth override specified in options, but not supported on non Node.js platforms");
        }
        _this.scheduleConnect_(0);
        VisibilityMonitor.getInstance().on("visible", _this.onVisible_, _this);
        if (repoInfo_.host.indexOf("fblocal") === -1) {
          OnlineMonitor.getInstance().on("online", _this.onOnline_, _this);
        }
        return _this;
      }
      PersistentConnection2.prototype.sendRequest = function(action, body, onResponse) {
        var curReqNum = ++this.requestNumber_;
        var msg = {r: curReqNum, a: action, b: body};
        this.log_(stringify(msg));
        assert(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) {
          this.requestCBHash_[curReqNum] = onResponse;
        }
      };
      PersistentConnection2.prototype.get = function(query) {
        var _this = this;
        var deferred = new Deferred();
        var request = {
          p: query.path.toString(),
          q: query.queryObject()
        };
        var outstandingGet = {
          action: "g",
          request,
          onComplete: function(message) {
            var payload = message["d"];
            if (message["s"] === "ok") {
              _this.onDataUpdate_(request["p"], payload, false, null);
              deferred.resolve(payload);
            } else {
              deferred.reject(payload);
            }
          }
        };
        this.outstandingGets_.push(outstandingGet);
        this.outstandingGetCount_++;
        var index2 = this.outstandingGets_.length - 1;
        if (!this.connected_) {
          setTimeout(function() {
            var get = _this.outstandingGets_[index2];
            if (get === void 0 || outstandingGet !== get) {
              return;
            }
            delete _this.outstandingGets_[index2];
            _this.outstandingGetCount_--;
            if (_this.outstandingGetCount_ === 0) {
              _this.outstandingGets_ = [];
            }
            _this.log_("get " + index2 + " timed out on connection");
            deferred.reject(new Error("Client is offline."));
          }, GET_CONNECT_TIMEOUT);
        }
        if (this.connected_) {
          this.sendGet_(index2);
        }
        return deferred.promise;
      };
      PersistentConnection2.prototype.listen = function(query, currentHashFn, tag, onComplete) {
        var queryId = query.queryIdentifier();
        var pathString = query.path.toString();
        this.log_("Listen called for " + pathString + " " + queryId);
        if (!this.listens.has(pathString)) {
          this.listens.set(pathString, new Map());
        }
        assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), "listen() called for non-default but complete query");
        assert(!this.listens.get(pathString).has(queryId), "listen() called twice for same path/queryId.");
        var listenSpec = {
          onComplete,
          hashFn: currentHashFn,
          query,
          tag
        };
        this.listens.get(pathString).set(queryId, listenSpec);
        if (this.connected_) {
          this.sendListen_(listenSpec);
        }
      };
      PersistentConnection2.prototype.sendGet_ = function(index2) {
        var _this = this;
        var get = this.outstandingGets_[index2];
        this.sendRequest("g", get.request, function(message) {
          delete _this.outstandingGets_[index2];
          _this.outstandingGetCount_--;
          if (_this.outstandingGetCount_ === 0) {
            _this.outstandingGets_ = [];
          }
          if (get.onComplete) {
            get.onComplete(message);
          }
        });
      };
      PersistentConnection2.prototype.sendListen_ = function(listenSpec) {
        var _this = this;
        var query = listenSpec.query;
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_("Listen on " + pathString + " for " + queryId);
        var req = {p: pathString};
        var action = "q";
        if (listenSpec.tag) {
          req["q"] = query.queryObject();
          req["t"] = listenSpec.tag;
        }
        req["h"] = listenSpec.hashFn();
        this.sendRequest(action, req, function(message) {
          var payload = message["d"];
          var status = message["s"];
          PersistentConnection2.warnOnListenWarnings_(payload, query);
          var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);
          if (currentListenSpec === listenSpec) {
            _this.log_("listen response", message);
            if (status !== "ok") {
              _this.removeListen_(pathString, queryId);
            }
            if (listenSpec.onComplete) {
              listenSpec.onComplete(status, payload);
            }
          }
        });
      };
      PersistentConnection2.warnOnListenWarnings_ = function(payload, query) {
        if (payload && typeof payload === "object" && contains(payload, "w")) {
          var warnings = safeGet(payload, "w");
          if (Array.isArray(warnings) && ~warnings.indexOf("no_index")) {
            var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
            var indexPath = query.path.toString();
            warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
          }
        }
      };
      PersistentConnection2.prototype.refreshAuthToken = function(token) {
        this.authToken_ = token;
        this.log_("Auth token refreshed");
        if (this.authToken_) {
          this.tryAuth();
        } else {
          if (this.connected_) {
            this.sendRequest("unauth", {}, function() {
            });
          }
        }
        this.reduceReconnectDelayIfAdminCredential_(token);
      };
      PersistentConnection2.prototype.reduceReconnectDelayIfAdminCredential_ = function(credential) {
        var isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || isAdmin(credential)) {
          this.log_("Admin auth credential detected.  Reducing max reconnect time.");
          this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
      };
      PersistentConnection2.prototype.tryAuth = function() {
        var _this = this;
        if (this.connected_ && this.authToken_) {
          var token_1 = this.authToken_;
          var authMethod = isValidFormat(token_1) ? "auth" : "gauth";
          var requestData = {cred: token_1};
          if (this.authOverride_ === null) {
            requestData["noauth"] = true;
          } else if (typeof this.authOverride_ === "object") {
            requestData["authvar"] = this.authOverride_;
          }
          this.sendRequest(authMethod, requestData, function(res) {
            var status = res["s"];
            var data = res["d"] || "error";
            if (_this.authToken_ === token_1) {
              if (status === "ok") {
                _this.invalidAuthTokenCount_ = 0;
              } else {
                _this.onAuthRevoked_(status, data);
              }
            }
          });
        }
      };
      PersistentConnection2.prototype.unlisten = function(query, tag) {
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_("Unlisten called for " + pathString + " " + queryId);
        assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), "unlisten() called for non-default but complete query");
        var listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) {
          this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
        }
      };
      PersistentConnection2.prototype.sendUnlisten_ = function(pathString, queryId, queryObj, tag) {
        this.log_("Unlisten on " + pathString + " for " + queryId);
        var req = {p: pathString};
        var action = "n";
        if (tag) {
          req["q"] = queryObj;
          req["t"] = tag;
        }
        this.sendRequest(action, req);
      };
      PersistentConnection2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
        if (this.connected_) {
          this.sendOnDisconnect_("o", pathString, data, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "o",
            data,
            onComplete
          });
        }
      };
      PersistentConnection2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
        if (this.connected_) {
          this.sendOnDisconnect_("om", pathString, data, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "om",
            data,
            onComplete
          });
        }
      };
      PersistentConnection2.prototype.onDisconnectCancel = function(pathString, onComplete) {
        if (this.connected_) {
          this.sendOnDisconnect_("oc", pathString, null, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "oc",
            data: null,
            onComplete
          });
        }
      };
      PersistentConnection2.prototype.sendOnDisconnect_ = function(action, pathString, data, onComplete) {
        var request = {p: pathString, d: data};
        this.log_("onDisconnect " + action, request);
        this.sendRequest(action, request, function(response) {
          if (onComplete) {
            setTimeout(function() {
              onComplete(response["s"], response["d"]);
            }, Math.floor(0));
          }
        });
      };
      PersistentConnection2.prototype.put = function(pathString, data, onComplete, hash) {
        this.putInternal("p", pathString, data, onComplete, hash);
      };
      PersistentConnection2.prototype.merge = function(pathString, data, onComplete, hash) {
        this.putInternal("m", pathString, data, onComplete, hash);
      };
      PersistentConnection2.prototype.putInternal = function(action, pathString, data, onComplete, hash) {
        var request = {
          p: pathString,
          d: data
        };
        if (hash !== void 0) {
          request["h"] = hash;
        }
        this.outstandingPuts_.push({
          action,
          request,
          onComplete
        });
        this.outstandingPutCount_++;
        var index2 = this.outstandingPuts_.length - 1;
        if (this.connected_) {
          this.sendPut_(index2);
        } else {
          this.log_("Buffering put: " + pathString);
        }
      };
      PersistentConnection2.prototype.sendPut_ = function(index2) {
        var _this = this;
        var action = this.outstandingPuts_[index2].action;
        var request = this.outstandingPuts_[index2].request;
        var onComplete = this.outstandingPuts_[index2].onComplete;
        this.outstandingPuts_[index2].queued = this.connected_;
        this.sendRequest(action, request, function(message) {
          _this.log_(action + " response", message);
          delete _this.outstandingPuts_[index2];
          _this.outstandingPutCount_--;
          if (_this.outstandingPutCount_ === 0) {
            _this.outstandingPuts_ = [];
          }
          if (onComplete) {
            onComplete(message["s"], message["d"]);
          }
        });
      };
      PersistentConnection2.prototype.reportStats = function(stats2) {
        var _this = this;
        if (this.connected_) {
          var request = {c: stats2};
          this.log_("reportStats", request);
          this.sendRequest("s", request, function(result) {
            var status = result["s"];
            if (status !== "ok") {
              var errorReason = result["d"];
              _this.log_("reportStats", "Error sending stats: " + errorReason);
            }
          });
        }
      };
      PersistentConnection2.prototype.onDataMessage_ = function(message) {
        if ("r" in message) {
          this.log_("from server: " + stringify(message));
          var reqNum = message["r"];
          var onResponse = this.requestCBHash_[reqNum];
          if (onResponse) {
            delete this.requestCBHash_[reqNum];
            onResponse(message["b"]);
          }
        } else if ("error" in message) {
          throw "A server-side error has occurred: " + message["error"];
        } else if ("a" in message) {
          this.onDataPush_(message["a"], message["b"]);
        }
      };
      PersistentConnection2.prototype.onDataPush_ = function(action, body) {
        this.log_("handleServerMessage", action, body);
        if (action === "d") {
          this.onDataUpdate_(body["p"], body["d"], false, body["t"]);
        } else if (action === "m") {
          this.onDataUpdate_(body["p"], body["d"], true, body["t"]);
        } else if (action === "c") {
          this.onListenRevoked_(body["p"], body["q"]);
        } else if (action === "ac") {
          this.onAuthRevoked_(body["s"], body["d"]);
        } else if (action === "sd") {
          this.onSecurityDebugPacket_(body);
        } else {
          error("Unrecognized action received from server: " + stringify(action) + "\nAre you using the latest client?");
        }
      };
      PersistentConnection2.prototype.onReady_ = function(timestamp, sessionId) {
        this.log_("connection ready");
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = new Date().getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) {
          this.sendConnectStats_();
        }
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
      };
      PersistentConnection2.prototype.scheduleConnect_ = function(timeout) {
        var _this = this;
        assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) {
          clearTimeout(this.establishConnectionTimer_);
        }
        this.establishConnectionTimer_ = setTimeout(function() {
          _this.establishConnectionTimer_ = null;
          _this.establishConnection_();
        }, Math.floor(timeout));
      };
      PersistentConnection2.prototype.onVisible_ = function(visible) {
        if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
          this.log_("Window became visible.  Reducing delay.");
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        }
        this.visible_ = visible;
      };
      PersistentConnection2.prototype.onOnline_ = function(online) {
        if (online) {
          this.log_("Browser went online.");
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        } else {
          this.log_("Browser went offline.  Killing connection.");
          if (this.realtime_) {
            this.realtime_.close();
          }
        }
      };
      PersistentConnection2.prototype.onRealtimeDisconnect_ = function() {
        this.log_("data client disconnected");
        this.connected_ = false;
        this.realtime_ = null;
        this.cancelSentTransactions_();
        this.requestCBHash_ = {};
        if (this.shouldReconnect_()) {
          if (!this.visible_) {
            this.log_("Window isn't visible.  Delaying reconnect.");
            this.reconnectDelay_ = this.maxReconnectDelay_;
            this.lastConnectionAttemptTime_ = new Date().getTime();
          } else if (this.lastConnectionEstablishedTime_) {
            var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
            if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            }
            this.lastConnectionEstablishedTime_ = null;
          }
          var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
          var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
          reconnectDelay = Math.random() * reconnectDelay;
          this.log_("Trying to reconnect in " + reconnectDelay + "ms");
          this.scheduleConnect_(reconnectDelay);
          this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
      };
      PersistentConnection2.prototype.establishConnection_ = function() {
        var _this = this;
        if (this.shouldReconnect_()) {
          this.log_("Making a connection attempt");
          this.lastConnectionAttemptTime_ = new Date().getTime();
          this.lastConnectionEstablishedTime_ = null;
          var onDataMessage_1 = this.onDataMessage_.bind(this);
          var onReady_1 = this.onReady_.bind(this);
          var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
          var connId_1 = this.id + ":" + PersistentConnection2.nextConnectionId_++;
          var self_1 = this;
          var lastSessionId_1 = this.lastSessionId;
          var canceled_1 = false;
          var connection_1 = null;
          var closeFn_1 = function() {
            if (connection_1) {
              connection_1.close();
            } else {
              canceled_1 = true;
              onDisconnect_1();
            }
          };
          var sendRequestFn = function(msg) {
            assert(connection_1, "sendRequest call when we're not connected not allowed.");
            connection_1.sendRequest(msg);
          };
          this.realtime_ = {
            close: closeFn_1,
            sendRequest: sendRequestFn
          };
          var forceRefresh = this.forceTokenRefresh_;
          this.forceTokenRefresh_ = false;
          this.authTokenProvider_.getToken(forceRefresh).then(function(result) {
            if (!canceled_1) {
              log("getToken() completed. Creating connection.");
              self_1.authToken_ = result && result.accessToken;
              connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, function(reason) {
                warn(reason + " (" + self_1.repoInfo_.toString() + ")");
                self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
              }, lastSessionId_1);
            } else {
              log("getToken() completed but was canceled");
            }
          }).then(null, function(error2) {
            self_1.log_("Failed to get token: " + error2);
            if (!canceled_1) {
              if (_this.repoInfo_.nodeAdmin) {
                warn(error2);
              }
              closeFn_1();
            }
          });
        }
      };
      PersistentConnection2.prototype.interrupt = function(reason) {
        log("Interrupting connection for reason: " + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) {
          this.realtime_.close();
        } else {
          if (this.establishConnectionTimer_) {
            clearTimeout(this.establishConnectionTimer_);
            this.establishConnectionTimer_ = null;
          }
          if (this.connected_) {
            this.onRealtimeDisconnect_();
          }
        }
      };
      PersistentConnection2.prototype.resume = function(reason) {
        log("Resuming connection for reason: " + reason);
        delete this.interruptReasons_[reason];
        if (isEmpty(this.interruptReasons_)) {
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        }
      };
      PersistentConnection2.prototype.handleTimestamp_ = function(timestamp) {
        var delta = timestamp - new Date().getTime();
        this.onServerInfoUpdate_({serverTimeOffset: delta});
      };
      PersistentConnection2.prototype.cancelSentTransactions_ = function() {
        for (var i2 = 0; i2 < this.outstandingPuts_.length; i2++) {
          var put = this.outstandingPuts_[i2];
          if (put && "h" in put.request && put.queued) {
            if (put.onComplete) {
              put.onComplete("disconnect");
            }
            delete this.outstandingPuts_[i2];
            this.outstandingPutCount_--;
          }
        }
        if (this.outstandingPutCount_ === 0) {
          this.outstandingPuts_ = [];
        }
      };
      PersistentConnection2.prototype.onListenRevoked_ = function(pathString, query) {
        var queryId;
        if (!query) {
          queryId = "default";
        } else {
          queryId = query.map(function(q3) {
            return ObjectToUniqueKey(q3);
          }).join("$");
        }
        var listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete) {
          listen.onComplete("permission_denied");
        }
      };
      PersistentConnection2.prototype.removeListen_ = function(pathString, queryId) {
        var normalizedPathString = new Path(pathString).toString();
        var listen;
        if (this.listens.has(normalizedPathString)) {
          var map2 = this.listens.get(normalizedPathString);
          listen = map2.get(queryId);
          map2.delete(queryId);
          if (map2.size === 0) {
            this.listens.delete(normalizedPathString);
          }
        } else {
          listen = void 0;
        }
        return listen;
      };
      PersistentConnection2.prototype.onAuthRevoked_ = function(statusCode, explanation) {
        log("Auth token revoked: " + statusCode + "/" + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === "invalid_token" || statusCode === "permission_denied") {
          this.invalidAuthTokenCount_++;
          if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
            this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            this.authTokenProvider_.notifyForInvalidToken();
          }
        }
      };
      PersistentConnection2.prototype.onSecurityDebugPacket_ = function(body) {
        if (this.securityDebugCallback_) {
          this.securityDebugCallback_(body);
        } else {
          if ("msg" in body) {
            console.log("FIREBASE: " + body["msg"].replace("\n", "\nFIREBASE: "));
          }
        }
      };
      PersistentConnection2.prototype.restoreState_ = function() {
        var e_1, _a9, e_2, _b;
        this.tryAuth();
        try {
          for (var _c2 = __values(this.listens.values()), _d = _c2.next(); !_d.done; _d = _c2.next()) {
            var queries = _d.value;
            try {
              for (var _e2 = (e_2 = void 0, __values(queries.values())), _f = _e2.next(); !_f.done; _f = _e2.next()) {
                var listenSpec = _f.value;
                this.sendListen_(listenSpec);
              }
            } catch (e_2_1) {
              e_2 = {error: e_2_1};
            } finally {
              try {
                if (_f && !_f.done && (_b = _e2.return))
                  _b.call(_e2);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
        } catch (e_1_1) {
          e_1 = {error: e_1_1};
        } finally {
          try {
            if (_d && !_d.done && (_a9 = _c2.return))
              _a9.call(_c2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        for (var i2 = 0; i2 < this.outstandingPuts_.length; i2++) {
          if (this.outstandingPuts_[i2]) {
            this.sendPut_(i2);
          }
        }
        while (this.onDisconnectRequestQueue_.length) {
          var request = this.onDisconnectRequestQueue_.shift();
          this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
        for (var i2 = 0; i2 < this.outstandingGets_.length; i2++) {
          if (this.outstandingGets_[i2]) {
            this.sendGet_(i2);
          }
        }
      };
      PersistentConnection2.prototype.sendConnectStats_ = function() {
        var stats2 = {};
        var clientName = "js";
        if (isNodeSdk()) {
          if (this.repoInfo_.nodeAdmin) {
            clientName = "admin_node";
          } else {
            clientName = "node";
          }
        }
        stats2["sdk." + clientName + "." + SDK_VERSION2.replace(/\./g, "-")] = 1;
        if (isMobileCordova()) {
          stats2["framework.cordova"] = 1;
        } else if (isReactNative()) {
          stats2["framework.reactnative"] = 1;
        }
        this.reportStats(stats2);
      };
      PersistentConnection2.prototype.shouldReconnect_ = function() {
        var online = OnlineMonitor.getInstance().currentlyOnline();
        return isEmpty(this.interruptReasons_) && online;
      };
      PersistentConnection2.nextPersistentConnectionId_ = 0;
      PersistentConnection2.nextConnectionId_ = 0;
      return PersistentConnection2;
    }(ServerActions);
    var ReadonlyRestClient = function(_super) {
      __extends(ReadonlyRestClient2, _super);
      function ReadonlyRestClient2(repoInfo_, onDataUpdate_, authTokenProvider_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.log_ = logWrapper("p:rest:");
        _this.listens_ = {};
        return _this;
      }
      ReadonlyRestClient2.prototype.reportStats = function(stats2) {
        throw new Error("Method not implemented.");
      };
      ReadonlyRestClient2.getListenId_ = function(query, tag) {
        if (tag !== void 0) {
          return "tag$" + tag;
        } else {
          assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
          return query.path.toString();
        }
      };
      ReadonlyRestClient2.prototype.listen = function(query, currentHashFn, tag, onComplete) {
        var _this = this;
        var pathString = query.path.toString();
        this.log_("Listen called for " + pathString + " " + query.queryIdentifier());
        var listenId = ReadonlyRestClient2.getListenId_(query, tag);
        var thisListen = {};
        this.listens_[listenId] = thisListen;
        var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();
        this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
          var data = result;
          if (error2 === 404) {
            data = null;
            error2 = null;
          }
          if (error2 === null) {
            _this.onDataUpdate_(pathString, data, false, tag);
          }
          if (safeGet(_this.listens_, listenId) === thisListen) {
            var status_1;
            if (!error2) {
              status_1 = "ok";
            } else if (error2 === 401) {
              status_1 = "permission_denied";
            } else {
              status_1 = "rest_error:" + error2;
            }
            onComplete(status_1, null);
          }
        });
      };
      ReadonlyRestClient2.prototype.unlisten = function(query, tag) {
        var listenId = ReadonlyRestClient2.getListenId_(query, tag);
        delete this.listens_[listenId];
      };
      ReadonlyRestClient2.prototype.get = function(query) {
        var _this = this;
        var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();
        var pathString = query.path.toString();
        var deferred = new Deferred();
        this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
          var data = result;
          if (error2 === 404) {
            data = null;
            error2 = null;
          }
          if (error2 === null) {
            _this.onDataUpdate_(pathString, data, false, null);
            deferred.resolve(data);
          } else {
            deferred.reject(new Error(data));
          }
        });
        return deferred.promise;
      };
      ReadonlyRestClient2.prototype.refreshAuthToken = function(token) {
      };
      ReadonlyRestClient2.prototype.restRequest_ = function(pathString, queryStringParameters, callback) {
        var _this = this;
        if (queryStringParameters === void 0) {
          queryStringParameters = {};
        }
        queryStringParameters["format"] = "export";
        this.authTokenProvider_.getToken(false).then(function(authTokenData) {
          var authToken = authTokenData && authTokenData.accessToken;
          if (authToken) {
            queryStringParameters["auth"] = authToken;
          }
          var url = (_this.repoInfo_.secure ? "https://" : "http://") + _this.repoInfo_.host + pathString + "?ns=" + _this.repoInfo_.namespace + querystring(queryStringParameters);
          _this.log_("Sending REST request for " + url);
          var xhr = new XMLHttpRequest();
          xhr.onreadystatechange = function() {
            if (callback && xhr.readyState === 4) {
              _this.log_("REST Response for " + url + " received. status:", xhr.status, "response:", xhr.responseText);
              var res = null;
              if (xhr.status >= 200 && xhr.status < 300) {
                try {
                  res = jsonEval(xhr.responseText);
                } catch (e) {
                  warn("Failed to parse JSON response for " + url + ": " + xhr.responseText);
                }
                callback(null, res);
              } else {
                if (xhr.status !== 401 && xhr.status !== 404) {
                  warn("Got unsuccessful REST response for " + url + " Status: " + xhr.status);
                }
                callback(xhr.status);
              }
              callback = null;
            }
          };
          xhr.open("GET", url, true);
          xhr.send();
        });
      };
      return ReadonlyRestClient2;
    }(ServerActions);
    var INTERRUPT_REASON = "repo_interrupt";
    var Repo = function() {
      function Repo2(repoInfo_, forceRestClient_, app13, authTokenProvider_) {
        this.repoInfo_ = repoInfo_;
        this.forceRestClient_ = forceRestClient_;
        this.app = app13;
        this.authTokenProvider_ = authTokenProvider_;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        this.onDisconnect_ = new SparseSnapshotTree();
        this.persistentConnection_ = null;
        this.key = this.repoInfo_.toURLString();
      }
      Repo2.prototype.start = function() {
        var _this = this;
        this.stats_ = StatsManager.getCollection(this.repoInfo_);
        if (this.forceRestClient_ || beingCrawled()) {
          this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), this.authTokenProvider_);
          setTimeout(this.onConnectStatus_.bind(this, true), 0);
        } else {
          var authOverride = this.app.options["databaseAuthVariableOverride"];
          if (typeof authOverride !== "undefined" && authOverride !== null) {
            if (typeof authOverride !== "object") {
              throw new Error("Only objects are supported for option databaseAuthVariableOverride");
            }
            try {
              stringify(authOverride);
            } catch (e) {
              throw new Error("Invalid authOverride provided: " + e);
            }
          }
          this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), this.authTokenProvider_, authOverride);
          this.server_ = this.persistentConnection_;
        }
        this.authTokenProvider_.addTokenChangeListener(function(token) {
          _this.server_.refreshAuthToken(token);
        });
        this.statsReporter_ = StatsManager.getOrCreateReporter(this.repoInfo_, function() {
          return new StatsReporter(_this.stats_, _this.server_);
        });
        this.transactionsInit_();
        this.infoData_ = new SnapshotHolder();
        this.infoSyncTree_ = new SyncTree({
          startListening: function(query, tag, currentHashFn, onComplete) {
            var infoEvents = [];
            var node = _this.infoData_.getNode(query.path);
            if (!node.isEmpty()) {
              infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
              setTimeout(function() {
                onComplete("ok");
              }, 0);
            }
            return infoEvents;
          },
          stopListening: function() {
          }
        });
        this.updateInfo_("connected", false);
        this.serverSyncTree_ = new SyncTree({
          startListening: function(query, tag, currentHashFn, onComplete) {
            _this.server_.listen(query, currentHashFn, tag, function(status, data) {
              var events = onComplete(status, data);
              _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
            });
            return [];
          },
          stopListening: function(query, tag) {
            _this.server_.unlisten(query, tag);
          }
        });
      };
      Repo2.prototype.toString = function() {
        return (this.repoInfo_.secure ? "https://" : "http://") + this.repoInfo_.host;
      };
      Repo2.prototype.name = function() {
        return this.repoInfo_.namespace;
      };
      Repo2.prototype.serverTime = function() {
        var offsetNode = this.infoData_.getNode(new Path(".info/serverTimeOffset"));
        var offset = offsetNode.val() || 0;
        return new Date().getTime() + offset;
      };
      Repo2.prototype.generateServerValues = function() {
        return generateWithValues({
          timestamp: this.serverTime()
        });
      };
      Repo2.prototype.onDataUpdate_ = function(pathString, data, isMerge, tag) {
        this.dataUpdateCount++;
        var path = new Path(pathString);
        data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;
        var events = [];
        if (tag) {
          if (isMerge) {
            var taggedChildren = map(data, function(raw) {
              return nodeFromJSON$1(raw);
            });
            events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
          } else {
            var taggedSnap = nodeFromJSON$1(data);
            events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
          }
        } else if (isMerge) {
          var changedChildren = map(data, function(raw) {
            return nodeFromJSON$1(raw);
          });
          events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
        } else {
          var snap = nodeFromJSON$1(data);
          events = this.serverSyncTree_.applyServerOverwrite(path, snap);
        }
        var affectedPath = path;
        if (events.length > 0) {
          affectedPath = this.rerunTransactions_(path);
        }
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
      };
      Repo2.prototype.interceptServerData_ = function(callback) {
        this.interceptServerDataCallback_ = callback;
      };
      Repo2.prototype.onConnectStatus_ = function(connectStatus) {
        this.updateInfo_("connected", connectStatus);
        if (connectStatus === false) {
          this.runOnDisconnectEvents_();
        }
      };
      Repo2.prototype.onServerInfoUpdate_ = function(updates) {
        var _this = this;
        each(updates, function(key2, value) {
          _this.updateInfo_(key2, value);
        });
      };
      Repo2.prototype.updateInfo_ = function(pathString, value) {
        var path = new Path("/.info/" + pathString);
        var newNode = nodeFromJSON$1(value);
        this.infoData_.updateSnapshot(path, newNode);
        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
      };
      Repo2.prototype.getNextWriteId_ = function() {
        return this.nextWriteId_++;
      };
      Repo2.prototype.getValue = function(query) {
        var _this = this;
        return this.server_.get(query).then(function(payload) {
          var node = nodeFromJSON$1(payload);
          var events = _this.serverSyncTree_.applyServerOverwrite(query.path, node);
          _this.eventQueue_.raiseEventsAtPath(query.path, events);
          return Promise.resolve(new DataSnapshot(node, query.getRef(), query.getQueryParams().getIndex()));
        }, function(err) {
          _this.log_("get for query " + stringify(query) + " falling back to cache after error: " + err);
          var cached = _this.serverSyncTree_.calcCompleteEventCache(query.path);
          if (!cached.isEmpty()) {
            return Promise.resolve(new DataSnapshot(cached, query.getRef(), query.getQueryParams().getIndex()));
          }
          return Promise.reject(new Error(err));
        });
      };
      Repo2.prototype.setWithPriority = function(path, newVal, newPriority, onComplete) {
        var _this = this;
        this.log_("set", {
          path: path.toString(),
          value: newVal,
          priority: newPriority
        });
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
        var existing = this.serverSyncTree_.calcCompleteEventCache(path);
        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
        var writeId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
        this.eventQueue_.queueEvents(events);
        this.server_.put(path.toString(), newNodeUnresolved.val(true), function(status, errorReason) {
          var success = status === "ok";
          if (!success) {
            warn("set at " + path + " failed: " + status);
          }
          var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
          _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
          _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
        var affectedPath = this.abortTransactions_(path);
        this.rerunTransactions_(affectedPath);
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
      };
      Repo2.prototype.update = function(path, childrenToMerge, onComplete) {
        var _this = this;
        this.log_("update", {path: path.toString(), value: childrenToMerge});
        var empty = true;
        var serverValues = this.generateServerValues();
        var changedChildren = {};
        each(childrenToMerge, function(changedKey, changedValue) {
          empty = false;
          changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);
        });
        if (!empty) {
          var writeId_1 = this.getNextWriteId_();
          var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
          this.eventQueue_.queueEvents(events);
          this.server_.merge(path.toString(), childrenToMerge, function(status, errorReason) {
            var success = status === "ok";
            if (!success) {
              warn("update at " + path + " failed: " + status);
            }
            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
            var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
            _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
            _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
          each(childrenToMerge, function(changedPath) {
            var affectedPath = _this.abortTransactions_(path.child(changedPath));
            _this.rerunTransactions_(affectedPath);
          });
          this.eventQueue_.raiseEventsForChangedPath(path, []);
        } else {
          log("update() called with empty data.  Don't do anything.");
          this.callOnCompleteCallback(onComplete, "ok");
        }
      };
      Repo2.prototype.runOnDisconnectEvents_ = function() {
        var _this = this;
        this.log_("onDisconnectEvents");
        var serverValues = this.generateServerValues();
        var resolvedOnDisconnectTree = new SparseSnapshotTree();
        this.onDisconnect_.forEachTree(Path.Empty, function(path, node) {
          var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);
          resolvedOnDisconnectTree.remember(path, resolved);
        });
        var events = [];
        resolvedOnDisconnectTree.forEachTree(Path.Empty, function(path, snap) {
          events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
          var affectedPath = _this.abortTransactions_(path);
          _this.rerunTransactions_(affectedPath);
        });
        this.onDisconnect_ = new SparseSnapshotTree();
        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
      };
      Repo2.prototype.onDisconnectCancel = function(path, onComplete) {
        var _this = this;
        this.server_.onDisconnectCancel(path.toString(), function(status, errorReason) {
          if (status === "ok") {
            _this.onDisconnect_.forget(path);
          }
          _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
      };
      Repo2.prototype.onDisconnectSet = function(path, value, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON$1(value);
        this.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
          if (status === "ok") {
            _this.onDisconnect_.remember(path, newNode);
          }
          _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
      };
      Repo2.prototype.onDisconnectSetWithPriority = function(path, value, priority, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON$1(value, priority);
        this.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
          if (status === "ok") {
            _this.onDisconnect_.remember(path, newNode);
          }
          _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
      };
      Repo2.prototype.onDisconnectUpdate = function(path, childrenToMerge, onComplete) {
        var _this = this;
        if (isEmpty(childrenToMerge)) {
          log("onDisconnect().update() called with empty data.  Don't do anything.");
          this.callOnCompleteCallback(onComplete, "ok");
          return;
        }
        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function(status, errorReason) {
          if (status === "ok") {
            each(childrenToMerge, function(childName, childNode) {
              var newChildNode = nodeFromJSON$1(childNode);
              _this.onDisconnect_.remember(path.child(childName), newChildNode);
            });
          }
          _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
      };
      Repo2.prototype.addEventCallbackForQuery = function(query, eventRegistration) {
        var events;
        if (query.path.getFront() === ".info") {
          events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
        } else {
          events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
      };
      Repo2.prototype.removeEventCallbackForQuery = function(query, eventRegistration) {
        var events;
        if (query.path.getFront() === ".info") {
          events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
        } else {
          events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
      };
      Repo2.prototype.interrupt = function() {
        if (this.persistentConnection_) {
          this.persistentConnection_.interrupt(INTERRUPT_REASON);
        }
      };
      Repo2.prototype.resume = function() {
        if (this.persistentConnection_) {
          this.persistentConnection_.resume(INTERRUPT_REASON);
        }
      };
      Repo2.prototype.stats = function(showDelta) {
        if (showDelta === void 0) {
          showDelta = false;
        }
        if (typeof console === "undefined") {
          return;
        }
        var stats2;
        if (showDelta) {
          if (!this.statsListener_) {
            this.statsListener_ = new StatsListener(this.stats_);
          }
          stats2 = this.statsListener_.get();
        } else {
          stats2 = this.stats_.get();
        }
        var longestName = Object.keys(stats2).reduce(function(previousValue, currentValue) {
          return Math.max(currentValue.length, previousValue);
        }, 0);
        each(stats2, function(stat, value) {
          var paddedStat = stat;
          for (var i2 = stat.length; i2 < longestName + 2; i2++) {
            paddedStat += " ";
          }
          console.log(paddedStat + value);
        });
      };
      Repo2.prototype.statsIncrementCounter = function(metric) {
        this.stats_.incrementCounter(metric);
        this.statsReporter_.includeStat(metric);
      };
      Repo2.prototype.log_ = function() {
        var varArgs = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          varArgs[_i2] = arguments[_i2];
        }
        var prefix2 = "";
        if (this.persistentConnection_) {
          prefix2 = this.persistentConnection_.id + ":";
        }
        log.apply(void 0, __spread([prefix2], varArgs));
      };
      Repo2.prototype.callOnCompleteCallback = function(callback, status, errorReason) {
        if (callback) {
          exceptionGuard(function() {
            if (status === "ok") {
              callback(null);
            } else {
              var code = (status || "error").toUpperCase();
              var message = code;
              if (errorReason) {
                message += ": " + errorReason;
              }
              var error2 = new Error(message);
              error2.code = code;
              callback(error2);
            }
          });
        }
      };
      Object.defineProperty(Repo2.prototype, "database", {
        get: function() {
          return this.__database || (this.__database = new Database(this));
        },
        enumerable: false,
        configurable: true
      });
      return Repo2;
    }();
    var RangedFilter = function() {
      function RangedFilter2(params) {
        this.indexedFilter_ = new IndexedFilter(params.getIndex());
        this.index_ = params.getIndex();
        this.startPost_ = RangedFilter2.getStartPost_(params);
        this.endPost_ = RangedFilter2.getEndPost_(params);
      }
      RangedFilter2.prototype.getStartPost = function() {
        return this.startPost_;
      };
      RangedFilter2.prototype.getEndPost = function() {
        return this.endPost_;
      };
      RangedFilter2.prototype.matches = function(node) {
        return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
      };
      RangedFilter2.prototype.updateChild = function(snap, key2, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.matches(new NamedNode(key2, newChild))) {
          newChild = ChildrenNode.EMPTY_NODE;
        }
        return this.indexedFilter_.updateChild(snap, key2, newChild, affectedPath, source, optChangeAccumulator);
      };
      RangedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        if (newSnap.isLeafNode()) {
          newSnap = ChildrenNode.EMPTY_NODE;
        }
        var filtered = newSnap.withIndex(this.index_);
        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
        var self2 = this;
        newSnap.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
          if (!self2.matches(new NamedNode(key2, childNode))) {
            filtered = filtered.updateImmediateChild(key2, ChildrenNode.EMPTY_NODE);
          }
        });
        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      RangedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
        return oldSnap;
      };
      RangedFilter2.prototype.filtersNodes = function() {
        return true;
      };
      RangedFilter2.prototype.getIndexedFilter = function() {
        return this.indexedFilter_;
      };
      RangedFilter2.prototype.getIndex = function() {
        return this.index_;
      };
      RangedFilter2.getStartPost_ = function(params) {
        if (params.hasStart()) {
          var startName = params.getIndexStartName();
          return params.getIndex().makePost(params.getIndexStartValue(), startName);
        } else {
          return params.getIndex().minPost();
        }
      };
      RangedFilter2.getEndPost_ = function(params) {
        if (params.hasEnd()) {
          var endName = params.getIndexEndName();
          return params.getIndex().makePost(params.getIndexEndValue(), endName);
        } else {
          return params.getIndex().maxPost();
        }
      };
      return RangedFilter2;
    }();
    var LimitedFilter = function() {
      function LimitedFilter2(params) {
        this.rangedFilter_ = new RangedFilter(params);
        this.index_ = params.getIndex();
        this.limit_ = params.getLimit();
        this.reverse_ = !params.isViewFromLeft();
      }
      LimitedFilter2.prototype.updateChild = function(snap, key2, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.rangedFilter_.matches(new NamedNode(key2, newChild))) {
          newChild = ChildrenNode.EMPTY_NODE;
        }
        if (snap.getImmediateChild(key2).equals(newChild)) {
          return snap;
        } else if (snap.numChildren() < this.limit_) {
          return this.rangedFilter_.getIndexedFilter().updateChild(snap, key2, newChild, affectedPath, source, optChangeAccumulator);
        } else {
          return this.fullLimitUpdateChild_(snap, key2, newChild, source, optChangeAccumulator);
        }
      };
      LimitedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
        var filtered;
        if (newSnap.isLeafNode() || newSnap.isEmpty()) {
          filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        } else {
          if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            var iterator = void 0;
            if (this.reverse_) {
              iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
            } else {
              iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
            }
            var count = 0;
            while (iterator.hasNext() && count < this.limit_) {
              var next = iterator.getNext();
              var inRange = void 0;
              if (this.reverse_) {
                inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
              } else {
                inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
              }
              if (inRange) {
                filtered = filtered.updateImmediateChild(next.name, next.node);
                count++;
              } else {
                break;
              }
            }
          } else {
            filtered = newSnap.withIndex(this.index_);
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            var startPost = void 0;
            var endPost = void 0;
            var cmp = void 0;
            var iterator = void 0;
            if (this.reverse_) {
              iterator = filtered.getReverseIterator(this.index_);
              startPost = this.rangedFilter_.getEndPost();
              endPost = this.rangedFilter_.getStartPost();
              var indexCompare_1 = this.index_.getCompare();
              cmp = function(a, b) {
                return indexCompare_1(b, a);
              };
            } else {
              iterator = filtered.getIterator(this.index_);
              startPost = this.rangedFilter_.getStartPost();
              endPost = this.rangedFilter_.getEndPost();
              cmp = this.index_.getCompare();
            }
            var count = 0;
            var foundStartPost = false;
            while (iterator.hasNext()) {
              var next = iterator.getNext();
              if (!foundStartPost && cmp(startPost, next) <= 0) {
                foundStartPost = true;
              }
              var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
              if (inRange) {
                count++;
              } else {
                filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
              }
            }
          }
        }
        return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      LimitedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
        return oldSnap;
      };
      LimitedFilter2.prototype.filtersNodes = function() {
        return true;
      };
      LimitedFilter2.prototype.getIndexedFilter = function() {
        return this.rangedFilter_.getIndexedFilter();
      };
      LimitedFilter2.prototype.getIndex = function() {
        return this.index_;
      };
      LimitedFilter2.prototype.fullLimitUpdateChild_ = function(snap, childKey, childSnap, source, changeAccumulator) {
        var cmp;
        if (this.reverse_) {
          var indexCmp_1 = this.index_.getCompare();
          cmp = function(a, b) {
            return indexCmp_1(b, a);
          };
        } else {
          cmp = this.index_.getCompare();
        }
        var oldEventCache = snap;
        assert(oldEventCache.numChildren() === this.limit_, "");
        var newChildNamedNode = new NamedNode(childKey, childSnap);
        var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
        var inRange = this.rangedFilter_.matches(newChildNamedNode);
        if (oldEventCache.hasChild(childKey)) {
          var oldChildSnap = oldEventCache.getImmediateChild(childKey);
          var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
          while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
            nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
          }
          var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
          var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
          if (remainsInWindow) {
            if (changeAccumulator != null) {
              changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
            }
            return oldEventCache.updateImmediateChild(childKey, childSnap);
          } else {
            if (changeAccumulator != null) {
              changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
            }
            var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
            var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
            if (nextChildInRange) {
              if (changeAccumulator != null) {
                changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
              }
              return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
            } else {
              return newEventCache;
            }
          }
        } else if (childSnap.isEmpty()) {
          return snap;
        } else if (inRange) {
          if (cmp(windowBoundary, newChildNamedNode) >= 0) {
            if (changeAccumulator != null) {
              changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
              changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
            }
            return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
          } else {
            return snap;
          }
        } else {
          return snap;
        }
      };
      return LimitedFilter2;
    }();
    var QueryParams = function() {
      function QueryParams2() {
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.startAfterSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.endBeforeSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = "";
        this.indexStartValue_ = null;
        this.indexStartName_ = "";
        this.indexEndValue_ = null;
        this.indexEndName_ = "";
        this.index_ = PRIORITY_INDEX;
      }
      QueryParams2.prototype.hasStart = function() {
        return this.startSet_;
      };
      QueryParams2.prototype.hasStartAfter = function() {
        return this.startAfterSet_;
      };
      QueryParams2.prototype.hasEndBefore = function() {
        return this.endBeforeSet_;
      };
      QueryParams2.prototype.isViewFromLeft = function() {
        if (this.viewFrom_ === "") {
          return this.startSet_;
        } else {
          return this.viewFrom_ === QueryParams2.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
        }
      };
      QueryParams2.prototype.getIndexStartValue = function() {
        assert(this.startSet_, "Only valid if start has been set");
        return this.indexStartValue_;
      };
      QueryParams2.prototype.getIndexStartName = function() {
        assert(this.startSet_, "Only valid if start has been set");
        if (this.startNameSet_) {
          return this.indexStartName_;
        } else {
          return MIN_NAME;
        }
      };
      QueryParams2.prototype.hasEnd = function() {
        return this.endSet_;
      };
      QueryParams2.prototype.getIndexEndValue = function() {
        assert(this.endSet_, "Only valid if end has been set");
        return this.indexEndValue_;
      };
      QueryParams2.prototype.getIndexEndName = function() {
        assert(this.endSet_, "Only valid if end has been set");
        if (this.endNameSet_) {
          return this.indexEndName_;
        } else {
          return MAX_NAME;
        }
      };
      QueryParams2.prototype.hasLimit = function() {
        return this.limitSet_;
      };
      QueryParams2.prototype.hasAnchoredLimit = function() {
        return this.limitSet_ && this.viewFrom_ !== "";
      };
      QueryParams2.prototype.getLimit = function() {
        assert(this.limitSet_, "Only valid if limit has been set");
        return this.limit_;
      };
      QueryParams2.prototype.getIndex = function() {
        return this.index_;
      };
      QueryParams2.prototype.copy_ = function() {
        var copy = new QueryParams2();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
      };
      QueryParams2.prototype.limit = function(newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = "";
        return newParams;
      };
      QueryParams2.prototype.limitToFirst = function(newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams2.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
        return newParams;
      };
      QueryParams2.prototype.limitToLast = function(newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams2.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
        return newParams;
      };
      QueryParams2.prototype.startAt = function(indexValue, key2) {
        var newParams = this.copy_();
        newParams.startSet_ = true;
        if (indexValue === void 0) {
          indexValue = null;
        }
        newParams.indexStartValue_ = indexValue;
        if (key2 != null) {
          newParams.startNameSet_ = true;
          newParams.indexStartName_ = key2;
        } else {
          newParams.startNameSet_ = false;
          newParams.indexStartName_ = "";
        }
        return newParams;
      };
      QueryParams2.prototype.startAfter = function(indexValue, key2) {
        var childKey;
        if (key2 == null) {
          childKey = MAX_NAME;
        } else {
          childKey = successor(key2);
        }
        var params = this.startAt(indexValue, childKey);
        params.startAfterSet_ = true;
        return params;
      };
      QueryParams2.prototype.endAt = function(indexValue, key2) {
        var newParams = this.copy_();
        newParams.endSet_ = true;
        if (indexValue === void 0) {
          indexValue = null;
        }
        newParams.indexEndValue_ = indexValue;
        if (key2 !== void 0) {
          newParams.endNameSet_ = true;
          newParams.indexEndName_ = key2;
        } else {
          newParams.endNameSet_ = false;
          newParams.indexEndName_ = "";
        }
        return newParams;
      };
      QueryParams2.prototype.endBefore = function(indexValue, key2) {
        var childKey;
        if (key2 == null) {
          childKey = MIN_NAME;
        } else {
          childKey = predecessor(key2);
        }
        var params = this.endAt(indexValue, childKey);
        params.endBeforeSet_ = true;
        return params;
      };
      QueryParams2.prototype.orderBy = function(index2) {
        var newParams = this.copy_();
        newParams.index_ = index2;
        return newParams;
      };
      QueryParams2.prototype.getQueryObject = function() {
        var WIRE_PROTOCOL_CONSTANTS = QueryParams2.WIRE_PROTOCOL_CONSTANTS_;
        var obj = {};
        if (this.startSet_) {
          obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
          if (this.startNameSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
          }
        }
        if (this.endSet_) {
          obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
          if (this.endNameSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
          }
        }
        if (this.limitSet_) {
          obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
          var viewFrom = this.viewFrom_;
          if (viewFrom === "") {
            if (this.isViewFromLeft()) {
              viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
            } else {
              viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
            }
          }
          obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
        }
        if (this.index_ !== PRIORITY_INDEX) {
          obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
        }
        return obj;
      };
      QueryParams2.prototype.loadsAllData = function() {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
      };
      QueryParams2.prototype.isDefault = function() {
        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
      };
      QueryParams2.prototype.getNodeFilter = function() {
        if (this.loadsAllData()) {
          return new IndexedFilter(this.getIndex());
        } else if (this.hasLimit()) {
          return new LimitedFilter(this);
        } else {
          return new RangedFilter(this);
        }
      };
      QueryParams2.prototype.toRestQueryStringParameters = function() {
        var REST_CONSTANTS = QueryParams2.REST_QUERY_CONSTANTS_;
        var qs2 = {};
        if (this.isDefault()) {
          return qs2;
        }
        var orderBy;
        if (this.index_ === PRIORITY_INDEX) {
          orderBy = REST_CONSTANTS.PRIORITY_INDEX;
        } else if (this.index_ === VALUE_INDEX) {
          orderBy = REST_CONSTANTS.VALUE_INDEX;
        } else if (this.index_ === KEY_INDEX) {
          orderBy = REST_CONSTANTS.KEY_INDEX;
        } else {
          assert(this.index_ instanceof PathIndex, "Unrecognized index type!");
          orderBy = this.index_.toString();
        }
        qs2[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);
        if (this.startSet_) {
          qs2[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);
          if (this.startNameSet_) {
            qs2[REST_CONSTANTS.START_AT] += "," + stringify(this.indexStartName_);
          }
        }
        if (this.endSet_) {
          qs2[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);
          if (this.endNameSet_) {
            qs2[REST_CONSTANTS.END_AT] += "," + stringify(this.indexEndName_);
          }
        }
        if (this.limitSet_) {
          if (this.isViewFromLeft()) {
            qs2[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
          } else {
            qs2[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
          }
        }
        return qs2;
      };
      QueryParams2.WIRE_PROTOCOL_CONSTANTS_ = {
        INDEX_START_VALUE: "sp",
        INDEX_START_NAME: "sn",
        INDEX_END_VALUE: "ep",
        INDEX_END_NAME: "en",
        LIMIT: "l",
        VIEW_FROM: "vf",
        VIEW_FROM_LEFT: "l",
        VIEW_FROM_RIGHT: "r",
        INDEX: "i"
      };
      QueryParams2.REST_QUERY_CONSTANTS_ = {
        ORDER_BY: "orderBy",
        PRIORITY_INDEX: "$priority",
        VALUE_INDEX: "$value",
        KEY_INDEX: "$key",
        START_AT: "startAt",
        END_AT: "endAt",
        LIMIT_TO_FIRST: "limitToFirst",
        LIMIT_TO_LAST: "limitToLast"
      };
      QueryParams2.DEFAULT = new QueryParams2();
      return QueryParams2;
    }();
    var Reference2 = function(_super) {
      __extends(Reference3, _super);
      function Reference3(repo, path) {
        var _this = this;
        if (!(repo instanceof Repo)) {
          throw new Error("new Reference() no longer supported - use app.database().");
        }
        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
        return _this;
      }
      Reference3.prototype.getKey = function() {
        validateArgCount("Reference.key", 0, 0, arguments.length);
        if (this.path.isEmpty()) {
          return null;
        } else {
          return this.path.getBack();
        }
      };
      Reference3.prototype.child = function(pathString) {
        validateArgCount("Reference.child", 1, 1, arguments.length);
        if (typeof pathString === "number") {
          pathString = String(pathString);
        } else if (!(pathString instanceof Path)) {
          if (this.path.getFront() === null) {
            validateRootPathString("Reference.child", 1, pathString, false);
          } else {
            validatePathString("Reference.child", 1, pathString, false);
          }
        }
        return new Reference3(this.repo, this.path.child(pathString));
      };
      Reference3.prototype.getParent = function() {
        validateArgCount("Reference.parent", 0, 0, arguments.length);
        var parentPath = this.path.parent();
        return parentPath === null ? null : new Reference3(this.repo, parentPath);
      };
      Reference3.prototype.getRoot = function() {
        validateArgCount("Reference.root", 0, 0, arguments.length);
        var ref2 = this;
        while (ref2.getParent() !== null) {
          ref2 = ref2.getParent();
        }
        return ref2;
      };
      Reference3.prototype.databaseProp = function() {
        return this.repo.database;
      };
      Reference3.prototype.set = function(newVal, onComplete) {
        validateArgCount("Reference.set", 1, 2, arguments.length);
        validateWritablePath("Reference.set", this.path);
        validateFirebaseDataArg("Reference.set", 1, newVal, this.path, false);
        validateCallback("Reference.set", 2, onComplete, true);
        var deferred = new Deferred();
        this.repo.setWithPriority(this.path, newVal, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      Reference3.prototype.update = function(objectToMerge, onComplete) {
        validateArgCount("Reference.update", 1, 2, arguments.length);
        validateWritablePath("Reference.update", this.path);
        if (Array.isArray(objectToMerge)) {
          var newObjectToMerge = {};
          for (var i2 = 0; i2 < objectToMerge.length; ++i2) {
            newObjectToMerge["" + i2] = objectToMerge[i2];
          }
          objectToMerge = newObjectToMerge;
          warn("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }
        validateFirebaseMergeDataArg("Reference.update", 1, objectToMerge, this.path, false);
        validateCallback("Reference.update", 2, onComplete, true);
        var deferred = new Deferred();
        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      Reference3.prototype.setWithPriority = function(newVal, newPriority, onComplete) {
        validateArgCount("Reference.setWithPriority", 2, 3, arguments.length);
        validateWritablePath("Reference.setWithPriority", this.path);
        validateFirebaseDataArg("Reference.setWithPriority", 1, newVal, this.path, false);
        validatePriority("Reference.setWithPriority", 2, newPriority, false);
        validateCallback("Reference.setWithPriority", 3, onComplete, true);
        if (this.getKey() === ".length" || this.getKey() === ".keys") {
          throw "Reference.setWithPriority failed: " + this.getKey() + " is a read-only object.";
        }
        var deferred = new Deferred();
        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      Reference3.prototype.remove = function(onComplete) {
        validateArgCount("Reference.remove", 0, 1, arguments.length);
        validateWritablePath("Reference.remove", this.path);
        validateCallback("Reference.remove", 1, onComplete, true);
        return this.set(null, onComplete);
      };
      Reference3.prototype.transaction = function(transactionUpdate, onComplete, applyLocally) {
        validateArgCount("Reference.transaction", 1, 3, arguments.length);
        validateWritablePath("Reference.transaction", this.path);
        validateCallback("Reference.transaction", 1, transactionUpdate, false);
        validateCallback("Reference.transaction", 2, onComplete, true);
        validateBoolean("Reference.transaction", 3, applyLocally, true);
        if (this.getKey() === ".length" || this.getKey() === ".keys") {
          throw "Reference.transaction failed: " + this.getKey() + " is a read-only object.";
        }
        if (applyLocally === void 0) {
          applyLocally = true;
        }
        var deferred = new Deferred();
        if (typeof onComplete === "function") {
          deferred.promise.catch(function() {
          });
        }
        var promiseComplete = function(error2, committed, snapshot) {
          if (error2) {
            deferred.reject(error2);
          } else {
            deferred.resolve(new TransactionResult(committed, snapshot));
          }
          if (typeof onComplete === "function") {
            onComplete(error2, committed, snapshot);
          }
        };
        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
        return deferred.promise;
      };
      Reference3.prototype.setPriority = function(priority, onComplete) {
        validateArgCount("Reference.setPriority", 1, 2, arguments.length);
        validateWritablePath("Reference.setPriority", this.path);
        validatePriority("Reference.setPriority", 1, priority, false);
        validateCallback("Reference.setPriority", 2, onComplete, true);
        var deferred = new Deferred();
        this.repo.setWithPriority(this.path.child(".priority"), priority, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
      };
      Reference3.prototype.push = function(value, onComplete) {
        validateArgCount("Reference.push", 0, 2, arguments.length);
        validateWritablePath("Reference.push", this.path);
        validateFirebaseDataArg("Reference.push", 1, value, this.path, true);
        validateCallback("Reference.push", 2, onComplete, true);
        var now = this.repo.serverTime();
        var name10 = nextPushId(now);
        var thennablePushRef = this.child(name10);
        var pushRef = this.child(name10);
        var promise;
        if (value != null) {
          promise = thennablePushRef.set(value, onComplete).then(function() {
            return pushRef;
          });
        } else {
          promise = Promise.resolve(pushRef);
        }
        thennablePushRef.then = promise.then.bind(promise);
        thennablePushRef.catch = promise.then.bind(promise, void 0);
        if (typeof onComplete === "function") {
          promise.catch(function() {
          });
        }
        return thennablePushRef;
      };
      Reference3.prototype.onDisconnect = function() {
        validateWritablePath("Reference.onDisconnect", this.path);
        return new OnDisconnect(this.repo, this.path);
      };
      Object.defineProperty(Reference3.prototype, "database", {
        get: function() {
          return this.databaseProp();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Reference3.prototype, "key", {
        get: function() {
          return this.getKey();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Reference3.prototype, "parent", {
        get: function() {
          return this.getParent();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Reference3.prototype, "root", {
        get: function() {
          return this.getRoot();
        },
        enumerable: false,
        configurable: true
      });
      return Reference3;
    }(Query);
    Query.__referenceConstructor = Reference2;
    SyncPoint.__referenceConstructor = Reference2;
    var TreeNode = function() {
      function TreeNode2() {
        this.children = {};
        this.childCount = 0;
        this.value = null;
      }
      return TreeNode2;
    }();
    var Tree = function() {
      function Tree2(name_, parent_, node_) {
        if (name_ === void 0) {
          name_ = "";
        }
        if (parent_ === void 0) {
          parent_ = null;
        }
        if (node_ === void 0) {
          node_ = new TreeNode();
        }
        this.name_ = name_;
        this.parent_ = parent_;
        this.node_ = node_;
      }
      Tree2.prototype.subTree = function(pathObj) {
        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
        var child2 = this, next = path.getFront();
        while (next !== null) {
          var childNode = safeGet(child2.node_.children, next) || new TreeNode();
          child2 = new Tree2(next, child2, childNode);
          path = path.popFront();
          next = path.getFront();
        }
        return child2;
      };
      Tree2.prototype.getValue = function() {
        return this.node_.value;
      };
      Tree2.prototype.setValue = function(value) {
        assert(typeof value !== "undefined", "Cannot set value to undefined");
        this.node_.value = value;
        this.updateParents_();
      };
      Tree2.prototype.clear = function() {
        this.node_.value = null;
        this.node_.children = {};
        this.node_.childCount = 0;
        this.updateParents_();
      };
      Tree2.prototype.hasChildren = function() {
        return this.node_.childCount > 0;
      };
      Tree2.prototype.isEmpty = function() {
        return this.getValue() === null && !this.hasChildren();
      };
      Tree2.prototype.forEachChild = function(action) {
        var _this = this;
        each(this.node_.children, function(child2, childTree) {
          action(new Tree2(child2, _this, childTree));
        });
      };
      Tree2.prototype.forEachDescendant = function(action, includeSelf, childrenFirst) {
        if (includeSelf && !childrenFirst) {
          action(this);
        }
        this.forEachChild(function(child2) {
          child2.forEachDescendant(action, true, childrenFirst);
        });
        if (includeSelf && childrenFirst) {
          action(this);
        }
      };
      Tree2.prototype.forEachAncestor = function(action, includeSelf) {
        var node = includeSelf ? this : this.parent();
        while (node !== null) {
          if (action(node)) {
            return true;
          }
          node = node.parent();
        }
        return false;
      };
      Tree2.prototype.forEachImmediateDescendantWithValue = function(action) {
        this.forEachChild(function(child2) {
          if (child2.getValue() !== null) {
            action(child2);
          } else {
            child2.forEachImmediateDescendantWithValue(action);
          }
        });
      };
      Tree2.prototype.path = function() {
        return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + "/" + this.name_);
      };
      Tree2.prototype.name = function() {
        return this.name_;
      };
      Tree2.prototype.parent = function() {
        return this.parent_;
      };
      Tree2.prototype.updateParents_ = function() {
        if (this.parent_ !== null) {
          this.parent_.updateChild_(this.name_, this);
        }
      };
      Tree2.prototype.updateChild_ = function(childName, child2) {
        var childEmpty = child2.isEmpty();
        var childExists = contains(this.node_.children, childName);
        if (childEmpty && childExists) {
          delete this.node_.children[childName];
          this.node_.childCount--;
          this.updateParents_();
        } else if (!childEmpty && !childExists) {
          this.node_.children[childName] = child2.node_;
          this.node_.childCount++;
          this.updateParents_();
        }
      };
      return Tree2;
    }();
    var TransactionStatus;
    (function(TransactionStatus2) {
      TransactionStatus2[TransactionStatus2["RUN"] = 0] = "RUN";
      TransactionStatus2[TransactionStatus2["SENT"] = 1] = "SENT";
      TransactionStatus2[TransactionStatus2["COMPLETED"] = 2] = "COMPLETED";
      TransactionStatus2[TransactionStatus2["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
      TransactionStatus2[TransactionStatus2["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
    })(TransactionStatus || (TransactionStatus = {}));
    Repo.MAX_TRANSACTION_RETRIES_ = 25;
    Repo.prototype.transactionsInit_ = function() {
      this.transactionQueueTree_ = new Tree();
    };
    Repo.prototype.startTransaction = function(path, transactionUpdate, onComplete, applyLocally) {
      this.log_("transaction on " + path);
      var valueCallback = function() {
      };
      var watchRef = new Reference2(this, path);
      watchRef.on("value", valueCallback);
      var unwatcher = function() {
        watchRef.off("value", valueCallback);
      };
      var transaction = {
        path,
        update: transactionUpdate,
        onComplete,
        status: null,
        order: LUIDGenerator(),
        applyLocally,
        retryCount: 0,
        unwatcher,
        abortReason: null,
        currentWriteId: null,
        currentInputSnapshot: null,
        currentOutputSnapshotRaw: null,
        currentOutputSnapshotResolved: null
      };
      var currentState = this.getLatestState_(path);
      transaction.currentInputSnapshot = currentState;
      var newVal = transaction.update(currentState.val());
      if (newVal === void 0) {
        transaction.unwatcher();
        transaction.currentOutputSnapshotRaw = null;
        transaction.currentOutputSnapshotResolved = null;
        if (transaction.onComplete) {
          var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference2(this, transaction.path), PRIORITY_INDEX);
          transaction.onComplete(null, false, snapshot);
        }
      } else {
        validateFirebaseData("transaction failed: Data returned ", newVal, transaction.path);
        transaction.status = TransactionStatus.RUN;
        var queueNode = this.transactionQueueTree_.subTree(path);
        var nodeQueue = queueNode.getValue() || [];
        nodeQueue.push(transaction);
        queueNode.setValue(nodeQueue);
        var priorityForNode = void 0;
        if (typeof newVal === "object" && newVal !== null && contains(newVal, ".priority")) {
          priorityForNode = safeGet(newVal, ".priority");
          assert(isValidPriority(priorityForNode), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");
        } else {
          var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;
          priorityForNode = currentNode.getPriority().val();
        }
        priorityForNode = priorityForNode;
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
        transaction.currentOutputSnapshotResolved = newNode;
        transaction.currentWriteId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        this.sendReadyTransactions_();
      }
    };
    Repo.prototype.getLatestState_ = function(path, excludeSets) {
      return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;
    };
    Repo.prototype.sendReadyTransactions_ = function(node) {
      var _this = this;
      if (node === void 0) {
        node = this.transactionQueueTree_;
      }
      if (!node) {
        this.pruneCompletedTransactionsBelowNode_(node);
      }
      if (node.getValue() !== null) {
        var queue2 = this.buildTransactionQueue_(node);
        assert(queue2.length > 0, "Sending zero length transaction queue");
        var allRun = queue2.every(function(transaction) {
          return transaction.status === TransactionStatus.RUN;
        });
        if (allRun) {
          this.sendTransactionQueue_(node.path(), queue2);
        }
      } else if (node.hasChildren()) {
        node.forEachChild(function(childNode) {
          _this.sendReadyTransactions_(childNode);
        });
      }
    };
    Repo.prototype.sendTransactionQueue_ = function(path, queue2) {
      var _this = this;
      var setsToIgnore = queue2.map(function(txn2) {
        return txn2.currentWriteId;
      });
      var latestState = this.getLatestState_(path, setsToIgnore);
      var snapToSend = latestState;
      var latestHash = latestState.hash();
      for (var i2 = 0; i2 < queue2.length; i2++) {
        var txn = queue2[i2];
        assert(txn.status === TransactionStatus.RUN, "tryToSendTransactionQueue_: items in queue should all be run.");
        txn.status = TransactionStatus.SENT;
        txn.retryCount++;
        var relativePath = Path.relativePath(path, txn.path);
        snapToSend = snapToSend.updateChild(relativePath, txn.currentOutputSnapshotRaw);
      }
      var dataToSend = snapToSend.val(true);
      var pathToSend = path;
      this.server_.put(pathToSend.toString(), dataToSend, function(status) {
        _this.log_("transaction put response", {
          path: pathToSend.toString(),
          status
        });
        var events = [];
        if (status === "ok") {
          var callbacks = [];
          for (var i3 = 0; i3 < queue2.length; i3++) {
            queue2[i3].status = TransactionStatus.COMPLETED;
            events = events.concat(_this.serverSyncTree_.ackUserWrite(queue2[i3].currentWriteId));
            if (queue2[i3].onComplete) {
              var node = queue2[i3].currentOutputSnapshotResolved;
              var ref2 = new Reference2(_this, queue2[i3].path);
              var snapshot = new DataSnapshot(node, ref2, PRIORITY_INDEX);
              callbacks.push(queue2[i3].onComplete.bind(null, null, true, snapshot));
            }
            queue2[i3].unwatcher();
          }
          _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
          _this.sendReadyTransactions_();
          _this.eventQueue_.raiseEventsForChangedPath(path, events);
          for (var i3 = 0; i3 < callbacks.length; i3++) {
            exceptionGuard(callbacks[i3]);
          }
        } else {
          if (status === "datastale") {
            for (var i3 = 0; i3 < queue2.length; i3++) {
              if (queue2[i3].status === TransactionStatus.SENT_NEEDS_ABORT) {
                queue2[i3].status = TransactionStatus.NEEDS_ABORT;
              } else {
                queue2[i3].status = TransactionStatus.RUN;
              }
            }
          } else {
            warn("transaction at " + pathToSend.toString() + " failed: " + status);
            for (var i3 = 0; i3 < queue2.length; i3++) {
              queue2[i3].status = TransactionStatus.NEEDS_ABORT;
              queue2[i3].abortReason = status;
            }
          }
          _this.rerunTransactions_(path);
        }
      }, latestHash);
    };
    Repo.prototype.rerunTransactions_ = function(changedPath) {
      var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
      var path = rootMostTransactionNode.path();
      var queue2 = this.buildTransactionQueue_(rootMostTransactionNode);
      this.rerunTransactionQueue_(queue2, path);
      return path;
    };
    Repo.prototype.rerunTransactionQueue_ = function(queue2, path) {
      if (queue2.length === 0) {
        return;
      }
      var callbacks = [];
      var events = [];
      var txnsToRerun = queue2.filter(function(q3) {
        return q3.status === TransactionStatus.RUN;
      });
      var setsToIgnore = txnsToRerun.map(function(q3) {
        return q3.currentWriteId;
      });
      for (var i2 = 0; i2 < queue2.length; i2++) {
        var transaction = queue2[i2];
        var relativePath = Path.relativePath(path, transaction.path);
        var abortTransaction = false, abortReason = void 0;
        assert(relativePath !== null, "rerunTransactionsUnderNode_: relativePath should not be null.");
        if (transaction.status === TransactionStatus.NEEDS_ABORT) {
          abortTransaction = true;
          abortReason = transaction.abortReason;
          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
        } else if (transaction.status === TransactionStatus.RUN) {
          if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
            abortTransaction = true;
            abortReason = "maxretry";
            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
          } else {
            var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
            transaction.currentInputSnapshot = currentNode;
            var newData = queue2[i2].update(currentNode.val());
            if (newData !== void 0) {
              validateFirebaseData("transaction failed: Data returned ", newData, transaction.path);
              var newDataNode = nodeFromJSON$1(newData);
              var hasExplicitPriority = typeof newData === "object" && newData != null && contains(newData, ".priority");
              if (!hasExplicitPriority) {
                newDataNode = newDataNode.updatePriority(currentNode.getPriority());
              }
              var oldWriteId = transaction.currentWriteId;
              var serverValues = this.generateServerValues();
              var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
              transaction.currentOutputSnapshotRaw = newDataNode;
              transaction.currentOutputSnapshotResolved = newNodeResolved;
              transaction.currentWriteId = this.getNextWriteId_();
              setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
              events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
              events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
            } else {
              abortTransaction = true;
              abortReason = "nodata";
              events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            }
          }
        }
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        events = [];
        if (abortTransaction) {
          queue2[i2].status = TransactionStatus.COMPLETED;
          (function(unwatcher) {
            setTimeout(unwatcher, Math.floor(0));
          })(queue2[i2].unwatcher);
          if (queue2[i2].onComplete) {
            if (abortReason === "nodata") {
              var ref2 = new Reference2(this, queue2[i2].path);
              var lastInput = queue2[i2].currentInputSnapshot;
              var snapshot = new DataSnapshot(lastInput, ref2, PRIORITY_INDEX);
              callbacks.push(queue2[i2].onComplete.bind(null, null, false, snapshot));
            } else {
              callbacks.push(queue2[i2].onComplete.bind(null, new Error(abortReason), false, null));
            }
          }
        }
      }
      this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
      for (var i2 = 0; i2 < callbacks.length; i2++) {
        exceptionGuard(callbacks[i2]);
      }
      this.sendReadyTransactions_();
    };
    Repo.prototype.getAncestorTransactionNode_ = function(path) {
      var front;
      var transactionNode = this.transactionQueueTree_;
      front = path.getFront();
      while (front !== null && transactionNode.getValue() === null) {
        transactionNode = transactionNode.subTree(front);
        path = path.popFront();
        front = path.getFront();
      }
      return transactionNode;
    };
    Repo.prototype.buildTransactionQueue_ = function(transactionNode) {
      var transactionQueue = [];
      this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
      transactionQueue.sort(function(a, b) {
        return a.order - b.order;
      });
      return transactionQueue;
    };
    Repo.prototype.aggregateTransactionQueuesForNode_ = function(node, queue2) {
      var _this = this;
      var nodeQueue = node.getValue();
      if (nodeQueue !== null) {
        for (var i2 = 0; i2 < nodeQueue.length; i2++) {
          queue2.push(nodeQueue[i2]);
        }
      }
      node.forEachChild(function(child2) {
        _this.aggregateTransactionQueuesForNode_(child2, queue2);
      });
    };
    Repo.prototype.pruneCompletedTransactionsBelowNode_ = function(node) {
      var _this = this;
      var queue2 = node.getValue();
      if (queue2) {
        var to2 = 0;
        for (var from = 0; from < queue2.length; from++) {
          if (queue2[from].status !== TransactionStatus.COMPLETED) {
            queue2[to2] = queue2[from];
            to2++;
          }
        }
        queue2.length = to2;
        node.setValue(queue2.length > 0 ? queue2 : null);
      }
      node.forEachChild(function(childNode) {
        _this.pruneCompletedTransactionsBelowNode_(childNode);
      });
    };
    Repo.prototype.abortTransactions_ = function(path) {
      var _this = this;
      var affectedPath = this.getAncestorTransactionNode_(path).path();
      var transactionNode = this.transactionQueueTree_.subTree(path);
      transactionNode.forEachAncestor(function(node) {
        _this.abortTransactionsOnNode_(node);
      });
      this.abortTransactionsOnNode_(transactionNode);
      transactionNode.forEachDescendant(function(node) {
        _this.abortTransactionsOnNode_(node);
      });
      return affectedPath;
    };
    Repo.prototype.abortTransactionsOnNode_ = function(node) {
      var queue2 = node.getValue();
      if (queue2 !== null) {
        var callbacks = [];
        var events = [];
        var lastSent = -1;
        for (var i2 = 0; i2 < queue2.length; i2++) {
          if (queue2[i2].status === TransactionStatus.SENT_NEEDS_ABORT)
            ;
          else if (queue2[i2].status === TransactionStatus.SENT) {
            assert(lastSent === i2 - 1, "All SENT items should be at beginning of queue.");
            lastSent = i2;
            queue2[i2].status = TransactionStatus.SENT_NEEDS_ABORT;
            queue2[i2].abortReason = "set";
          } else {
            assert(queue2[i2].status === TransactionStatus.RUN, "Unexpected transaction status in abort");
            queue2[i2].unwatcher();
            events = events.concat(this.serverSyncTree_.ackUserWrite(queue2[i2].currentWriteId, true));
            if (queue2[i2].onComplete) {
              var snapshot = null;
              callbacks.push(queue2[i2].onComplete.bind(null, new Error("set"), false, snapshot));
            }
          }
        }
        if (lastSent === -1) {
          node.setValue(null);
        } else {
          queue2.length = lastSent + 1;
        }
        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
        for (var i2 = 0; i2 < callbacks.length; i2++) {
          exceptionGuard(callbacks[i2]);
        }
      }
    };
    var FirebaseAuthTokenProvider = function() {
      function FirebaseAuthTokenProvider2(app_, authProvider_) {
        var _this = this;
        this.app_ = app_;
        this.authProvider_ = authProvider_;
        this.auth_ = null;
        this.auth_ = authProvider_.getImmediate({optional: true});
        if (!this.auth_) {
          authProvider_.get().then(function(auth2) {
            return _this.auth_ = auth2;
          });
        }
      }
      FirebaseAuthTokenProvider2.prototype.getToken = function(forceRefresh) {
        if (!this.auth_) {
          return Promise.resolve(null);
        }
        return this.auth_.getToken(forceRefresh).catch(function(error2) {
          if (error2 && error2.code === "auth/token-not-initialized") {
            log("Got auth/token-not-initialized error.  Treating as null token.");
            return null;
          } else {
            return Promise.reject(error2);
          }
        });
      };
      FirebaseAuthTokenProvider2.prototype.addTokenChangeListener = function(listener) {
        if (this.auth_) {
          this.auth_.addAuthTokenListener(listener);
        } else {
          setTimeout(function() {
            return listener(null);
          }, 0);
          this.authProvider_.get().then(function(auth2) {
            return auth2.addAuthTokenListener(listener);
          });
        }
      };
      FirebaseAuthTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
        this.authProvider_.get().then(function(auth2) {
          return auth2.removeAuthTokenListener(listener);
        });
      };
      FirebaseAuthTokenProvider2.prototype.notifyForInvalidToken = function() {
        var errorMessage = 'Provided authentication credentials for the app named "' + this.app_.name + '" are invalid. This usually indicates your app was not initialized correctly. ';
        if ("credential" in this.app_.options) {
          errorMessage += 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        } else if ("serviceAccount" in this.app_.options) {
          errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        } else {
          errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.';
        }
        warn(errorMessage);
      };
      return FirebaseAuthTokenProvider2;
    }();
    var EmulatorAdminTokenProvider = function() {
      function EmulatorAdminTokenProvider2() {
      }
      EmulatorAdminTokenProvider2.prototype.getToken = function(forceRefresh) {
        return Promise.resolve({
          accessToken: EmulatorAdminTokenProvider2.EMULATOR_AUTH_TOKEN
        });
      };
      EmulatorAdminTokenProvider2.prototype.addTokenChangeListener = function(listener) {
        listener(EmulatorAdminTokenProvider2.EMULATOR_AUTH_TOKEN);
      };
      EmulatorAdminTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
      };
      EmulatorAdminTokenProvider2.prototype.notifyForInvalidToken = function() {
      };
      EmulatorAdminTokenProvider2.EMULATOR_AUTH_TOKEN = "owner";
      return EmulatorAdminTokenProvider2;
    }();
    var FIREBASE_DATABASE_EMULATOR_HOST_VAR = "FIREBASE_DATABASE_EMULATOR_HOST";
    var _staticInstance;
    var RepoManager = function() {
      function RepoManager2() {
        this.repos_ = {};
        this.useRestClient_ = false;
      }
      RepoManager2.getInstance = function() {
        if (!_staticInstance) {
          _staticInstance = new RepoManager2();
        }
        return _staticInstance;
      };
      RepoManager2.prototype.interrupt = function() {
        var e_1, _a9, e_2, _b;
        try {
          for (var _c2 = __values(Object.keys(this.repos_)), _d = _c2.next(); !_d.done; _d = _c2.next()) {
            var appName = _d.value;
            try {
              for (var _e2 = (e_2 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e2.next(); !_f.done; _f = _e2.next()) {
                var dbUrl = _f.value;
                this.repos_[appName][dbUrl].interrupt();
              }
            } catch (e_2_1) {
              e_2 = {error: e_2_1};
            } finally {
              try {
                if (_f && !_f.done && (_b = _e2.return))
                  _b.call(_e2);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
        } catch (e_1_1) {
          e_1 = {error: e_1_1};
        } finally {
          try {
            if (_d && !_d.done && (_a9 = _c2.return))
              _a9.call(_c2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      RepoManager2.prototype.resume = function() {
        var e_3, _a9, e_4, _b;
        try {
          for (var _c2 = __values(Object.keys(this.repos_)), _d = _c2.next(); !_d.done; _d = _c2.next()) {
            var appName = _d.value;
            try {
              for (var _e2 = (e_4 = void 0, __values(Object.keys(this.repos_[appName]))), _f = _e2.next(); !_f.done; _f = _e2.next()) {
                var dbUrl = _f.value;
                this.repos_[appName][dbUrl].resume();
              }
            } catch (e_4_1) {
              e_4 = {error: e_4_1};
            } finally {
              try {
                if (_f && !_f.done && (_b = _e2.return))
                  _b.call(_e2);
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = {error: e_3_1};
        } finally {
          try {
            if (_d && !_d.done && (_a9 = _c2.return))
              _a9.call(_c2);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      };
      RepoManager2.prototype.applyEmulatorSettings = function(repo, host, port) {
        repo.repoInfo_ = new RepoInfo(host + ":" + port, false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
        if (repo.repoInfo_.nodeAdmin) {
          repo.authTokenProvider_ = new EmulatorAdminTokenProvider();
        }
      };
      RepoManager2.prototype.databaseFromApp = function(app13, authProvider, url, nodeAdmin) {
        var dbUrl = url || app13.options.databaseURL;
        if (dbUrl === void 0) {
          if (!app13.options.projectId) {
            fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
          }
          log("Using default host for project ", app13.options.projectId);
          dbUrl = app13.options.projectId + "-default-rtdb.firebaseio.com";
        }
        var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
        var repoInfo = parsedUrl.repoInfo;
        var isEmulator;
        var dbEmulatorHost = void 0;
        if (typeof process !== "undefined") {
          dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
        }
        if (dbEmulatorHost) {
          isEmulator = true;
          dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
          parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
          repoInfo = parsedUrl.repoInfo;
        } else {
          isEmulator = !parsedUrl.repoInfo.secure;
        }
        var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorAdminTokenProvider() : new FirebaseAuthTokenProvider(app13, authProvider);
        validateUrl("Invalid Firebase Database URL", 1, parsedUrl);
        if (!parsedUrl.path.isEmpty()) {
          fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
        }
        var repo = this.createRepo(repoInfo, app13, authTokenProvider);
        return repo.database;
      };
      RepoManager2.prototype.deleteRepo = function(repo) {
        var appRepos = safeGet(this.repos_, repo.app.name);
        if (!appRepos || safeGet(appRepos, repo.key) !== repo) {
          fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
        }
        repo.interrupt();
        delete appRepos[repo.key];
      };
      RepoManager2.prototype.createRepo = function(repoInfo, app13, authTokenProvider) {
        var appRepos = safeGet(this.repos_, app13.name);
        if (!appRepos) {
          appRepos = {};
          this.repos_[app13.name] = appRepos;
        }
        var repo = safeGet(appRepos, repoInfo.toURLString());
        if (repo) {
          fatal("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");
        }
        repo = new Repo(repoInfo, this.useRestClient_, app13, authTokenProvider);
        appRepos[repoInfo.toURLString()] = repo;
        return repo;
      };
      RepoManager2.prototype.forceRestClient = function(forceRestClient2) {
        this.useRestClient_ = forceRestClient2;
      };
      return RepoManager2;
    }();
    var Database = function() {
      function Database2(repoInternal_) {
        var _this = this;
        this.repoInternal_ = repoInternal_;
        this.instanceStarted_ = false;
        this.INTERNAL = {
          delete: function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a9) {
                this.checkDeleted_("delete");
                RepoManager.getInstance().deleteRepo(this.repo_);
                this.repoInternal_ = null;
                this.rootInternal_ = null;
                return [2];
              });
            });
          }
        };
        if (!(repoInternal_ instanceof Repo)) {
          fatal("Don't call new Database() directly - please use firebase.database().");
        }
      }
      Object.defineProperty(Database2.prototype, "repo_", {
        get: function() {
          if (!this.instanceStarted_) {
            this.repoInternal_.start();
            this.instanceStarted_ = true;
          }
          return this.repoInternal_;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Database2.prototype, "root_", {
        get: function() {
          if (!this.rootInternal_) {
            this.rootInternal_ = new Reference2(this.repo_, Path.Empty);
          }
          return this.rootInternal_;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Database2.prototype, "app", {
        get: function() {
          return this.repo_.app;
        },
        enumerable: false,
        configurable: true
      });
      Database2.prototype.useEmulator = function(host, port) {
        this.checkDeleted_("useEmulator");
        if (this.instanceStarted_) {
          fatal("Cannot call useEmulator() after instance has already been initialized.");
          return;
        }
        RepoManager.getInstance().applyEmulatorSettings(this.repoInternal_, host, port);
      };
      Database2.prototype.ref = function(path) {
        this.checkDeleted_("ref");
        validateArgCount("database.ref", 0, 1, arguments.length);
        if (path instanceof Reference2) {
          return this.refFromURL(path.toString());
        }
        return path !== void 0 ? this.root_.child(path) : this.root_;
      };
      Database2.prototype.refFromURL = function(url) {
        var apiName = "database.refFromURL";
        this.checkDeleted_(apiName);
        validateArgCount(apiName, 1, 1, arguments.length);
        var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);
        validateUrl(apiName, 1, parsedURL);
        var repoInfo = parsedURL.repoInfo;
        if (!this.repo_.repoInfo_.isCustomHost() && repoInfo.host !== this.repo_.repoInfo_.host) {
          fatal(apiName + ": Host name does not match the current database: (found " + repoInfo.host + " but expected " + this.repo_.repoInfo_.host + ")");
        }
        return this.ref(parsedURL.path.toString());
      };
      Database2.prototype.checkDeleted_ = function(apiName) {
        if (this.repoInternal_ === null) {
          fatal("Cannot call " + apiName + " on a deleted database.");
        }
      };
      Database2.prototype.goOffline = function() {
        validateArgCount("database.goOffline", 0, 0, arguments.length);
        this.checkDeleted_("goOffline");
        this.repo_.interrupt();
      };
      Database2.prototype.goOnline = function() {
        validateArgCount("database.goOnline", 0, 0, arguments.length);
        this.checkDeleted_("goOnline");
        this.repo_.resume();
      };
      Database2.ServerValue = {
        TIMESTAMP: {
          ".sv": "timestamp"
        },
        increment: function(delta) {
          return {
            ".sv": {
              increment: delta
            }
          };
        }
      };
      return Database2;
    }();
    var forceLongPolling = function() {
      WebSocketConnection.forceDisallow();
      BrowserPollConnection.forceAllow();
    };
    var forceWebSockets = function() {
      BrowserPollConnection.forceDisallow();
    };
    var isWebSocketsAvailable = function() {
      return WebSocketConnection["isAvailable"]();
    };
    var setSecurityDebugCallback = function(ref2, callback) {
      ref2.repo.persistentConnection_.securityDebugCallback_ = callback;
    };
    var stats = function(ref2, showDelta) {
      ref2.repo.stats(showDelta);
    };
    var statsIncrementCounter = function(ref2, metric) {
      ref2.repo.statsIncrementCounter(metric);
    };
    var dataUpdateCount = function(ref2) {
      return ref2.repo.dataUpdateCount;
    };
    var interceptServerData = function(ref2, callback) {
      return ref2.repo.interceptServerData_(callback);
    };
    function initStandalone(_a9) {
      var app13 = _a9.app, url = _a9.url, version10 = _a9.version, customAuthImpl = _a9.customAuthImpl, namespace = _a9.namespace, _b = _a9.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
      setSDKVersion(version10);
      var authProvider = new Provider("auth-internal", new ComponentContainer("database-standalone"));
      authProvider.setComponent(new Component("auth-internal", function() {
        return customAuthImpl;
      }, "PRIVATE"));
      return {
        instance: RepoManager.getInstance().databaseFromApp(app13, authProvider, url, nodeAdmin),
        namespace
      };
    }
    var INTERNAL = Object.freeze({
      __proto__: null,
      forceLongPolling,
      forceWebSockets,
      isWebSocketsAvailable,
      setSecurityDebugCallback,
      stats,
      statsIncrementCounter,
      dataUpdateCount,
      interceptServerData,
      initStandalone
    });
    var DataConnection = PersistentConnection;
    PersistentConnection.prototype.simpleListen = function(pathString, onComplete) {
      this.sendRequest("q", {p: pathString}, onComplete);
    };
    PersistentConnection.prototype.echo = function(data, onEcho) {
      this.sendRequest("echo", {d: data}, onEcho);
    };
    var RealTimeConnection = Connection;
    var hijackHash = function(newHash) {
      var oldPut = PersistentConnection.prototype.put;
      PersistentConnection.prototype.put = function(pathString, data, onComplete, hash) {
        if (hash !== void 0) {
          hash = newHash();
        }
        oldPut.call(this, pathString, data, onComplete, hash);
      };
      return function() {
        PersistentConnection.prototype.put = oldPut;
      };
    };
    var ConnectionTarget = RepoInfo;
    var queryIdentifier = function(query) {
      return query.queryIdentifier();
    };
    var forceRestClient = function(forceRestClient2) {
      RepoManager.getInstance().forceRestClient(forceRestClient2);
    };
    var TEST_ACCESS = Object.freeze({
      __proto__: null,
      DataConnection,
      RealTimeConnection,
      hijackHash,
      ConnectionTarget,
      queryIdentifier,
      forceRestClient
    });
    var name9 = "@firebase/database";
    var version9 = "0.9.0";
    var ServerValue = Database.ServerValue;
    function registerDatabase(instance) {
      setSDKVersion(instance.SDK_VERSION);
      var namespace = instance.INTERNAL.registerComponent(new Component("database", function(container, url) {
        var app13 = container.getProvider("app").getImmediate();
        var authProvider = container.getProvider("auth-internal");
        return RepoManager.getInstance().databaseFromApp(app13, authProvider, url);
      }, "PUBLIC").setServiceProps({
        Reference: Reference2,
        Query,
        Database,
        DataSnapshot,
        enableLogging,
        INTERNAL,
        ServerValue,
        TEST_ACCESS
      }).setMultipleInstances(true));
      instance.registerVersion(name9, version9);
      if (isNodeSdk()) {
        module.exports = namespace;
      }
    }
    registerDatabase(index_esm_default);
  });

  // node_modules/idb/build/idb.js
  var require_idb = __commonJS((exports, module) => {
    (function(global3, factory3) {
      typeof exports === "object" && typeof module !== "undefined" ? factory3(exports) : typeof define === "function" && define.amd ? define(["exports"], factory3) : (global3 = global3 || self, factory3(global3.idb = {}));
    })(exports, function(exports2) {
      "use strict";
      function toArray(arr) {
        return Array.prototype.slice.call(arr);
      }
      function promisifyRequest(request) {
        return new Promise(function(resolve, reject) {
          request.onsuccess = function() {
            resolve(request.result);
          };
          request.onerror = function() {
            reject(request.error);
          };
        });
      }
      function promisifyRequestCall(obj, method, args) {
        var request;
        var p2 = new Promise(function(resolve, reject) {
          request = obj[method].apply(obj, args);
          promisifyRequest(request).then(resolve, reject);
        });
        p2.request = request;
        return p2;
      }
      function promisifyCursorRequestCall(obj, method, args) {
        var p2 = promisifyRequestCall(obj, method, args);
        return p2.then(function(value) {
          if (!value)
            return;
          return new Cursor(value, p2.request);
        });
      }
      function proxyProperties(ProxyClass, targetProp, properties) {
        properties.forEach(function(prop) {
          Object.defineProperty(ProxyClass.prototype, prop, {
            get: function() {
              return this[targetProp][prop];
            },
            set: function(val) {
              this[targetProp][prop] = val;
            }
          });
        });
      }
      function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return promisifyRequestCall(this[targetProp], prop, arguments);
          };
        });
      }
      function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return this[targetProp][prop].apply(this[targetProp], arguments);
          };
        });
      }
      function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return promisifyCursorRequestCall(this[targetProp], prop, arguments);
          };
        });
      }
      function Index(index2) {
        this._index = index2;
      }
      proxyProperties(Index, "_index", [
        "name",
        "keyPath",
        "multiEntry",
        "unique"
      ]);
      proxyRequestMethods(Index, "_index", IDBIndex, [
        "get",
        "getKey",
        "getAll",
        "getAllKeys",
        "count"
      ]);
      proxyCursorRequestMethods(Index, "_index", IDBIndex, [
        "openCursor",
        "openKeyCursor"
      ]);
      function Cursor(cursor, request) {
        this._cursor = cursor;
        this._request = request;
      }
      proxyProperties(Cursor, "_cursor", [
        "direction",
        "key",
        "primaryKey",
        "value"
      ]);
      proxyRequestMethods(Cursor, "_cursor", IDBCursor, [
        "update",
        "delete"
      ]);
      ["advance", "continue", "continuePrimaryKey"].forEach(function(methodName) {
        if (!(methodName in IDBCursor.prototype))
          return;
        Cursor.prototype[methodName] = function() {
          var cursor = this;
          var args = arguments;
          return Promise.resolve().then(function() {
            cursor._cursor[methodName].apply(cursor._cursor, args);
            return promisifyRequest(cursor._request).then(function(value) {
              if (!value)
                return;
              return new Cursor(value, cursor._request);
            });
          });
        };
      });
      function ObjectStore(store) {
        this._store = store;
      }
      ObjectStore.prototype.createIndex = function() {
        return new Index(this._store.createIndex.apply(this._store, arguments));
      };
      ObjectStore.prototype.index = function() {
        return new Index(this._store.index.apply(this._store, arguments));
      };
      proxyProperties(ObjectStore, "_store", [
        "name",
        "keyPath",
        "indexNames",
        "autoIncrement"
      ]);
      proxyRequestMethods(ObjectStore, "_store", IDBObjectStore, [
        "put",
        "add",
        "delete",
        "clear",
        "get",
        "getAll",
        "getKey",
        "getAllKeys",
        "count"
      ]);
      proxyCursorRequestMethods(ObjectStore, "_store", IDBObjectStore, [
        "openCursor",
        "openKeyCursor"
      ]);
      proxyMethods(ObjectStore, "_store", IDBObjectStore, [
        "deleteIndex"
      ]);
      function Transaction(idbTransaction) {
        this._tx = idbTransaction;
        this.complete = new Promise(function(resolve, reject) {
          idbTransaction.oncomplete = function() {
            resolve();
          };
          idbTransaction.onerror = function() {
            reject(idbTransaction.error);
          };
          idbTransaction.onabort = function() {
            reject(idbTransaction.error);
          };
        });
      }
      Transaction.prototype.objectStore = function() {
        return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
      };
      proxyProperties(Transaction, "_tx", [
        "objectStoreNames",
        "mode"
      ]);
      proxyMethods(Transaction, "_tx", IDBTransaction, [
        "abort"
      ]);
      function UpgradeDB(db2, oldVersion, transaction) {
        this._db = db2;
        this.oldVersion = oldVersion;
        this.transaction = new Transaction(transaction);
      }
      UpgradeDB.prototype.createObjectStore = function() {
        return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
      };
      proxyProperties(UpgradeDB, "_db", [
        "name",
        "version",
        "objectStoreNames"
      ]);
      proxyMethods(UpgradeDB, "_db", IDBDatabase, [
        "deleteObjectStore",
        "close"
      ]);
      function DB(db2) {
        this._db = db2;
      }
      DB.prototype.transaction = function() {
        return new Transaction(this._db.transaction.apply(this._db, arguments));
      };
      proxyProperties(DB, "_db", [
        "name",
        "version",
        "objectStoreNames"
      ]);
      proxyMethods(DB, "_db", IDBDatabase, [
        "close"
      ]);
      ["openCursor", "openKeyCursor"].forEach(function(funcName) {
        [ObjectStore, Index].forEach(function(Constructor) {
          if (!(funcName in Constructor.prototype))
            return;
          Constructor.prototype[funcName.replace("open", "iterate")] = function() {
            var args = toArray(arguments);
            var callback = args[args.length - 1];
            var nativeObject = this._store || this._index;
            var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
            request.onsuccess = function() {
              callback(request.result);
            };
          };
        });
      });
      [Index, ObjectStore].forEach(function(Constructor) {
        if (Constructor.prototype.getAll)
          return;
        Constructor.prototype.getAll = function(query, count) {
          var instance = this;
          var items = [];
          return new Promise(function(resolve) {
            instance.iterateCursor(query, function(cursor) {
              if (!cursor) {
                resolve(items);
                return;
              }
              items.push(cursor.value);
              if (count !== void 0 && items.length == count) {
                resolve(items);
                return;
              }
              cursor.continue();
            });
          });
        };
      });
      function openDb3(name9, version9, upgradeCallback) {
        var p2 = promisifyRequestCall(indexedDB, "open", [name9, version9]);
        var request = p2.request;
        if (request) {
          request.onupgradeneeded = function(event) {
            if (upgradeCallback) {
              upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
            }
          };
        }
        return p2.then(function(db2) {
          return new DB(db2);
        });
      }
      function deleteDb2(name9) {
        return promisifyRequestCall(indexedDB, "deleteDatabase", [name9]);
      }
      exports2.openDb = openDb3;
      exports2.deleteDb = deleteDb2;
      Object.defineProperty(exports2, "__esModule", {value: true});
    });
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var shouldYieldToHost;
        var requestPaint;
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          var initialTime = Date.now();
          exports.unstable_now = function() {
            return Date.now() - initialTime;
          };
          requestHostCallback = function(cb2) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb2);
            } else {
              _callback = cb2;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb2, ms2) {
            _timeoutID = setTimeout(cb2, ms2);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          shouldYieldToHost = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var performance3 = window.performance;
          var _Date = window.Date;
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          if (typeof performance3 === "object" && typeof performance3.now === "function") {
            exports.unstable_now = function() {
              return performance3.now();
            };
          } else {
            var _initialTime = _Date.now();
            exports.unstable_now = function() {
              return _Date.now() - _initialTime;
            };
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            shouldYieldToHost = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms2) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms2);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index2 = heap.length;
          heap.push(node);
          siftUp(heap, node, index2);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i2) {
          var index2 = i2;
          while (true) {
            var parentIndex = index2 - 1 >>> 1;
            var parent2 = heap[parentIndex];
            if (parent2 !== void 0 && compare(parent2, node) > 0) {
              heap[parentIndex] = node;
              heap[index2] = parent2;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index2 = i2;
          var length = heap.length;
          while (index2 < length) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                heap[index2] = left;
                heap[leftIndex] = node;
                index2 = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent2(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms2) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent2([TaskStartEvent, ms2 * 1e3, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent2([TaskCompleteEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms2) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent2([TaskCancelEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent2([TaskErrorEvent, ms2 * 1e3, task.id]);
            }
          }
        }
        function markTaskRun(task, ms2) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent2([TaskRunEvent, ms2 * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms2) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent2([TaskYieldEvent, ms2 * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms2) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent2([SchedulerSuspendEvent, ms2 * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms2) {
          {
            if (eventLog !== null) {
              logEvent2([SchedulerResumeEvent, ms2 * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (callback !== null) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function timeoutForPriorityLevel(priorityLevel) {
          switch (priorityLevel) {
            case ImmediatePriority:
              return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
              return USER_BLOCKING_PRIORITY;
            case IdlePriority:
              return IDLE_PRIORITY;
            case LowPriority:
              return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
              return NORMAL_PRIORITY_TIMEOUT;
          }
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          var timeout;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
            timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
          } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        function unstable_shouldYield() {
          var currentTime = exports.unstable_now();
          advanceTimers(currentTime);
          var firstTask = peek(taskQueue);
          return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = unstable_shouldYield;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name9, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name9,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React8 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var checkPropTypes = require_checkPropTypes();
        var tracing = require_tracing();
        var ReactSharedInternals = React8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x3) {
            }
          }
        }
        if (!React8) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var invokeGuardedCallbackImpl = function(name9, func, context2, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context2, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name9, func, context2, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context2, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name9 ? name9 : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name9, func, context2, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name9, func, context2, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
          getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
          getInstanceFromNode = getInstanceFromNodeImpl;
          getNodeFromInstance = getNodeFromInstanceImpl;
          {
            if (!getNodeFromInstance || !getInstanceFromNode) {
              error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
              error("EventPluginUtils: Invalid `event`.");
            }
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i2 = 0; i2 < dispatchListeners.length; i2++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i2], dispatchInstances[i2]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider2 = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
              }
            }
            if (plugins[pluginIndex]) {
              continue;
            }
            if (!pluginModule.extractEvents) {
              {
                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
              }
            }
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                }
              }
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
            }
          }
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          if (!!registrationNameModules[registrationName]) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
            }
          }
          registrationNameModules[registrationName] = pluginModule;
          registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var plugins = [];
        var eventNameDispatchConfigs = {};
        var registrationNameModules = {};
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function injectEventPluginOrder(injectedEventPluginOrder) {
          if (!!eventPluginOrder) {
            {
              throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
            }
          }
          eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
          recomputePluginOrdering();
        }
        function injectEventPluginsByName(injectedNamesToPlugins) {
          var isOrderingDirty = false;
          for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
              continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                }
              }
              namesToPlugins[pluginName] = pluginModule;
              isOrderingDirty = true;
            }
          }
          if (isOrderingDirty) {
            recomputePluginOrdering();
          }
        }
        var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var PLUGIN_EVENT_SYSTEM = 1;
        var IS_REPLAYED = 1 << 5;
        var IS_FIRST_ANCESTOR = 1 << 6;
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i2 = 0; i2 < queuedTargets.length; i2++) {
              restoreStateOfTarget(queuedTargets[i2]);
            }
          }
        }
        var enableProfilerTimer = true;
        var enableDeprecatedFlareAPI = false;
        var enableFundamentalAPI = false;
        var warnAboutStringRefs = false;
        var batchedUpdatesImpl = function(fn2, bookkeeping) {
          return fn2(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn2, a, b, c, d) {
          return fn2(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn2, bookkeeping) {
          if (isInsideEventHandler) {
            return fn2(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn2, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn2, a, b) {
          if (isBatchingEventUpdates) {
            return fn2(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn2, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn2, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn2, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
            flushDiscreteUpdatesImpl();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name9, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name9.length > 2 && (name9[0] === "o" || name9[0] === "O") && (name9[1] === "n" || name9[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name9, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name9.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name9, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name9, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name9) {
          return properties.hasOwnProperty(name9) ? properties[name9] : null;
        }
        function PropertyInfoRecord(name9, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name9;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, RESERVED, false, name9, null, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name9 = _ref[0], attributeName = _ref[1];
          properties[name9] = new PropertyInfoRecord(name9, STRING, false, attributeName, null, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, BOOLEANISH_STRING, false, name9.toLowerCase(), null, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, BOOLEANISH_STRING, false, name9, null, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, BOOLEAN, false, name9.toLowerCase(), null, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, BOOLEAN, true, name9, null, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, OVERLOADED_BOOLEAN, false, name9, null, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, POSITIVE_NUMERIC, false, name9, null, false);
        });
        ["rowSpan", "start"].forEach(function(name9) {
          properties[name9] = new PropertyInfoRecord(name9, NUMERIC, false, name9.toLowerCase(), null, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name9 = attributeName.replace(CAMELIZE, capitalize);
          properties[name9] = new PropertyInfoRecord(name9, STRING, false, attributeName, null, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name9 = attributeName.replace(CAMELIZE, capitalize);
          properties[name9] = new PropertyInfoRecord(name9, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name9 = attributeName.replace(CAMELIZE, capitalize);
          properties[name9] = new PropertyInfoRecord(name9, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
        });
        var ReactDebugCurrentFrame = null;
        {
          ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name9, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name9, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name9, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name9, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name9, expected) {
          {
            if (!isAttributeNameSafe(name9)) {
              return;
            }
            if (!node.hasAttribute(name9)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name9);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name9, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name9);
          if (shouldIgnoreAttribute(name9, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name9, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name9)) {
              var _attributeName = name9;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name9, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name9 || "Unknown") + sourceInfo;
        }
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error2) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error2;
              }
            });
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider2:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name9 = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name9, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var ReactDebugCurrentFrame$2 = null;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes = {
            value: function(props, propName, componentName) {
              if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          };
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
            checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
          };
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set3.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name9 = node.name;
          if (name9 !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name9 !== "") {
            node.name = name9;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name9 = props.name;
          if (props.type === "radio" && name9 != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name9) + '][type="radio"]');
            for (var i2 = 0; i2 < group.length; i2++) {
              var otherNode = group[i2];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || node.ownerDocument.activeElement !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React8.Children.forEach(children, function(child2) {
            if (child2 == null) {
              return;
            }
            content += child2;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React8.Children.forEach(props.children, function(child2) {
                if (child2 == null) {
                  return;
                }
                if (typeof child2 === "string" || typeof child2 === "number") {
                  return;
                }
                if (typeof child2.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("select", props);
            for (var i2 = 0; i2 < valuePropNames.length; i2++) {
              var propName = valuePropNames[i2];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i2 = 0; i2 < selectedValues.length; i2++) {
              selectedValue["$" + selectedValues[i2]] = true;
            }
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i2].value);
              if (options[_i2].selected !== selected) {
                options[_i2].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options[_i2].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i22 = 0; _i22 < options.length; _i22++) {
              if (options[_i22].value === _selectedValue) {
                options[_i22].selected = true;
                if (setDefaultSelected) {
                  options[_i22].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options[_i22].disabled) {
                defaultSelected = options[_i22];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            ReactControlledValuePropTypes.checkPropTypes("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        function unsafeCastStringToDOMTopLevelType(topLevelType) {
          return topLevelType;
        }
        function unsafeCastDOMTopLevelTypeToString(topLevelType) {
          return topLevelType;
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM2) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
        var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
        var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
        var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
        var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
        var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
        var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
        var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
        var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
        var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
        var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
        var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
        var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
        var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
        var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
        var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
        var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
        var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
        var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
        var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
        var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
        var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
        var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
        var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
        var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
        var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
        var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
        var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
        var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
        var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
        var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
        var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
        var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
        var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
        var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
        var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
        var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
        var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
        var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
        var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
        var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
        var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
        var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
        var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
        var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
        var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
        var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
        var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
        var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
        var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
        var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
        var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
        var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
        var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
        var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
        var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
        var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
        var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
        var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
        var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
        var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
        var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
        var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
        var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
        var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
        var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
        var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
        var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
        var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
        var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
        var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
        var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
        var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
        var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
        var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
        var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
        var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
        var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
        var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
        var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
        var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
        function getRawEventName(topLevelType) {
          return unsafeCastDOMTopLevelTypeToString(topLevelType);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var elementListenerMap = new PossiblyWeakMap();
        function getListenerMapForElement(element) {
          var listenerMap = elementListenerMap.get(element);
          if (listenerMap === void 0) {
            listenerMap = new Map();
            elementListenerMap.set(element, listenerMap);
          }
          return listenerMap;
        }
        function get(key2) {
          return key2._reactInternalFiber;
        }
        function has(key2) {
          return key2._reactInternalFiber !== void 0;
        }
        function set2(key2, value) {
          key2._reactInternalFiber = value;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component10) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component10);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child2 = parentA.child;
              while (child2) {
                if (child2 === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child2 === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child2 = child2.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function accumulateInto(current2, next) {
          if (!(next != null)) {
            {
              throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
            }
          }
          if (current2 == null) {
            return next;
          }
          if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
              current2.push.apply(current2, next);
              return current2;
            }
            current2.push(next);
            return current2;
          }
          if (Array.isArray(next)) {
            return [current2].concat(next);
          }
          return [current2, next];
        }
        function forEachAccumulated(arr, cb2, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb2, scope);
          } else if (arr) {
            cb2.call(scope, arr);
          }
        }
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e);
        };
        function runEventsInBatch(events) {
          if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
          }
          var processingEventQueue = eventQueue;
          eventQueue = null;
          if (!processingEventQueue) {
            return;
          }
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
          if (!!eventQueue) {
            {
              throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            }
          }
          rethrowCaughtError();
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM2) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported3 = eventName in document;
          if (!isSupported3) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported3 = typeof element[eventName] === "function";
          }
          return isSupported3;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function findRootContainerNode(inst) {
          if (inst.tag === HostRoot) {
            return inst.stateNode.containerInfo;
          }
          while (inst.return) {
            inst = inst.return;
          }
          if (inst.tag !== HostRoot) {
            return null;
          }
          return inst.stateNode.containerInfo;
        }
        function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = null;
          for (var i2 = 0; i2 < plugins.length; i2++) {
            var possiblePlugin = plugins[i2];
            if (possiblePlugin) {
              var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              if (extractedEvents) {
                events = accumulateInto(events, extractedEvents);
              }
            }
          }
          return events;
        }
        function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          runEventsInBatch(events);
        }
        function handleTopLevel(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              var ancestors = bookKeeping.ancestors;
              ancestors.push(ancestor);
              break;
            }
            var root2 = findRootContainerNode(ancestor);
            if (!root2) {
              break;
            }
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) {
              bookKeeping.ancestors.push(ancestor);
            }
            ancestor = getClosestInstanceFromNode(root2);
          } while (ancestor);
          for (var i2 = 0; i2 < bookKeeping.ancestors.length; i2++) {
            targetInst = bookKeeping.ancestors[i2];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags;
            if (i2 === 0) {
              eventSystemFlags |= IS_FIRST_ANCESTOR;
            }
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
          }
        }
        function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
          var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
          try {
            batchedEventUpdates(handleTopLevel, bookKeeping);
          } finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
          }
        }
        function legacyListenToEvent(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            var dependency = dependencies[i2];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
          }
        }
        function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
          if (!listenerMap.has(topLevelType)) {
            switch (topLevelType) {
              case TOP_SCROLL:
                trapCapturedEvent(TOP_SCROLL, mountAt);
                break;
              case TOP_FOCUS:
              case TOP_BLUR:
                trapCapturedEvent(TOP_FOCUS, mountAt);
                trapCapturedEvent(TOP_BLUR, mountAt);
                listenerMap.set(TOP_BLUR, null);
                listenerMap.set(TOP_FOCUS, null);
                break;
              case TOP_CANCEL:
              case TOP_CLOSE:
                if (isEventSupported(getRawEventName(topLevelType))) {
                  trapCapturedEvent(topLevelType, mountAt);
                }
                break;
              case TOP_INVALID:
              case TOP_SUBMIT:
              case TOP_RESET:
                break;
              default:
                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                if (!isMediaEvent) {
                  trapBubbledEvent(topLevelType, mountAt);
                }
                break;
            }
            listenerMap.set(topLevelType, null);
          }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            var dependency = dependencies[i2];
            if (!listenerMap.has(dependency)) {
              return false;
            }
          }
          return true;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn2) {
          attemptUserBlockingHydration = fn2;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn2) {
          attemptContinuousHydration = fn2;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn2) {
          attemptHydrationAtCurrentPriority = fn2;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
        var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
          legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
        }
        function eagerlyTrapReplayableEvents(container, document2) {
          var listenerMapForDoc = getListenerMapForElement(document2);
          discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
          continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
        }
        function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          return {
            blockedOn,
            topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            container
          };
        }
        function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS:
            case TOP_BLUR:
              queuedFocus = null;
              break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
              queuedDrag = null;
              break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
              queuedMouse = null;
              break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT: {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE: {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode$1(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS: {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
              return true;
            }
            case TOP_DRAG_ENTER: {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
              return true;
            }
            case TOP_MOUSE_OVER: {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
              return true;
            }
            case TOP_POINTER_OVER: {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
              return true;
            }
            case TOP_GOT_POINTER_CAPTURE: {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key2, map2) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map2.delete(key2);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
            } else {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
              var queuedEvent = queuedDiscreteEvents[i2];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i2];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        function addEventBubbleListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, false);
        }
        function addEventCaptureListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, true);
        }
        var simpleEventPluginEventTypes = {};
        var topLevelEventsToDispatchConfig = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
        var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
        var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
        var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
        function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
          for (var i2 = 0; i2 < eventTypes2.length; i2 += 2) {
            var topEvent = eventTypes2[i2];
            var event = eventTypes2[i2 + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = "on" + capitalizedEvent;
            var config2 = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + "Capture"
              },
              dependencies: [topEvent],
              eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config2);
            simpleEventPluginEventTypes[event] = config2;
          }
        }
        function processTopEventPairsByPriority(eventTypes2, priority) {
          for (var i2 = 0; i2 < eventTypes2.length; i2++) {
            eventPriorities.set(eventTypes2[i2], priority);
          }
        }
        processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
        function getEventPriorityForPluginSystem(topLevelType) {
          var priority = eventPriorities.get(topLevelType);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function trapBubbledEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, false);
        }
        function trapCapturedEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, true);
        }
        function trapEventForPluginEventSystem(container, topLevelType, capture) {
          var listener;
          switch (getEventPriorityForPluginSystem(topLevelType)) {
            case DiscreteEvent:
              listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case UserBlockingEvent:
              listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case ContinuousEvent:
            default:
              listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
          }
          var rawEventName = getRawEventName(topLevelType);
          if (capture) {
            addEventCaptureListener(container, rawEventName, listener);
          } else {
            addEventBubbleListener(container, rawEventName, listener);
          }
        }
        function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          if (!_enabled) {
            return;
          }
          if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
          if (blockedOn === null) {
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
          }
          if (isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(topLevelType, nativeEvent);
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
          }
        }
        function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
          }
          return null;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key2) {
          return prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name9, value, isCustomProperty) {
          var isEmpty2 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name9) && isUnitlessNumber[name9])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name9) {
          return name9.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name9) {
            if (warnedStyleNames.hasOwnProperty(name9) && warnedStyleNames[name9]) {
              return;
            }
            warnedStyleNames[name9] = true;
            error("Unsupported style property %s. Did you mean %s?", name9, camelize(name9.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name9) {
            if (warnedStyleNames.hasOwnProperty(name9) && warnedStyleNames[name9]) {
              return;
            }
            warnedStyleNames[name9] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name9, name9.charAt(0).toUpperCase() + name9.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name9, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name9, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name9, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name9);
          };
          var warnStyleValueIsInfinity = function(name9, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name9);
          };
          warnValidStyle = function(name9, value) {
            if (name9.indexOf("-") > -1) {
              warnHyphenatedStyleName(name9);
            } else if (badVendoredStyleNamePattern.test(name9)) {
              warnBadVendoredStyleName(name9);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name9, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name9, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name9, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key2 in styles) {
            var longhands = shorthandToLonghand[key2] || [key2];
            for (var i2 = 0; i2 < longhands.length; i2++) {
              expanded[longhands[i2]] = key2;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key2 in expandedUpdates) {
              var originalKey = expandedUpdates[key2];
              var correctOriginalKey = expandedStyles[key2];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        var ReactDebugCurrentFrame$3 = null;
        {
          ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name9) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name9) && warnedProperties[name9]) {
              return true;
            }
            if (rARIACamel.test(name9)) {
              var ariaName = "aria-" + name9.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name9);
                warnedProperties[name9] = true;
                return true;
              }
              if (name9 !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name9, correctName);
                warnedProperties[name9] = true;
                return true;
              }
            }
            if (rARIA.test(name9)) {
              var lowerCasedName = name9.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name9] = true;
                return false;
              }
              if (name9 !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name9, standardName);
                warnedProperties[name9] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key2 in props) {
              var isValid = validateProperty(type, key2);
              if (!isValid) {
                invalidProps.push(key2);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name9, value, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name9) && warnedProperties$1[name9]) {
              return true;
            }
            var lowerCasedName = name9.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name9] = true;
              return true;
            }
            if (canUseEventSystem) {
              if (registrationNameModules.hasOwnProperty(name9)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name9, registrationName);
                warnedProperties$1[name9] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name9)) {
                error("Unknown event handler property `%s`. It will be ignored.", name9);
                warnedProperties$1[name9] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name9)) {
              if (INVALID_EVENT_NAME_REGEX.test(name9)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name9);
              }
              warnedProperties$1[name9] = true;
              return true;
            }
            if (rARIA$1.test(name9) || rARIACamel$1.test(name9)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name9] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name9] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name9] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name9);
              warnedProperties$1[name9] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name9);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name9) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name9, standardName);
                warnedProperties$1[name9] = true;
                return true;
              }
            } else if (!isReserved && name9 !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name9, lowerCasedName);
              warnedProperties$1[name9] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name9, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name9, name9, value, name9);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name9, name9, value, name9, name9, name9);
              }
              warnedProperties$1[name9] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name9, value, propertyInfo, false)) {
              warnedProperties$1[name9] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name9, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name9, value);
              warnedProperties$1[name9] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, canUseEventSystem) {
          {
            var unknownProps = [];
            for (var key2 in props) {
              var isValid = validateProperty$1(type, key2, props[key2], canUseEventSystem);
              if (!isValid) {
                unknownProps.push(key2);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, canUseEventSystem);
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            time: true,
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, true);
          };
          canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name9) {
              names.push(name9);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent2, html) {
            var testElement = parent2.namespaceURI === HTML_NAMESPACE$1 ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          legacyListenToEvent(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop3() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop3;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
            var propKey = updatePayload[i2];
            var propValue = updatePayload[i2 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                trapBubbledEvent(mediaEventTypes[i2], domElement);
              }
              props = rawProps;
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              props = rawProps;
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                trapBubbledEvent(mediaEventTypes[i2], domElement);
              }
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i2 = 0; _i2 < attributes.length; _i2++) {
              var name9 = attributes[_i2].name.toLowerCase();
              switch (name9) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i2].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child2) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child2.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child2) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child2.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start2 = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start2 = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start2 === -1 || end === -1) {
            return null;
          }
          return {
            start: start2,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start2 = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length);
          if (!selection.extend && start2 > end) {
            var temp = end;
            end = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start2);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            activeElementDetached: null,
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i2 = 0; i2 < ancestors.length; i2++) {
              var info = ancestors[i2];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start2 = offsets.start, end = offsets.end;
          if (end === void 0) {
            end = start2;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start2;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          setEnabled(false);
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child2) {
          parentInstance.appendChild(child2);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function shouldDeprioritizeSubtree(type, props) {
          return !!props.hidden;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child2) {
          parentInstance.appendChild(child2);
        }
        function appendChildToContainer(container, child2) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child2, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child2);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child2, beforeChild) {
          parentInstance.insertBefore(child2, beforeChild);
        }
        function insertInContainerBefore(container, child2, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child2, beforeChild);
          } else {
            container.insertBefore(child2, beforeChild);
          }
        }
        function removeChild(parentInstance, child2) {
          parentInstance.removeChild(child2);
        }
        function removeChildFromContainer(container, child2) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child2);
          } else {
            container.removeChild(child2);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        var internalContainerInstanceKey = "__reactContainere$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode$1(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance$1(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode$1(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalEventHandlersKey] = props;
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function traverseTwoPhase(inst, fn2, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i2;
          for (i2 = path.length; i2-- > 0; ) {
            fn2(path[i2], "captured", arg);
          }
          for (i2 = 0; i2 < path.length; i2++) {
            fn2(path[i2], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from, to2, fn2, argFrom, argTo) {
          var common = from && to2 ? getLowestCommonAncestor(from, to2) : null;
          var pathFrom = [];
          while (true) {
            if (!from) {
              break;
            }
            if (from === common) {
              break;
            }
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) {
              break;
            }
            pathFrom.push(from);
            from = getParent(from);
          }
          var pathTo = [];
          while (true) {
            if (!to2) {
              break;
            }
            if (to2 === common) {
              break;
            }
            var _alternate = to2.alternate;
            if (_alternate !== null && _alternate === common) {
              break;
            }
            pathTo.push(to2);
            to2 = getParent(to2);
          }
          for (var i2 = 0; i2 < pathFrom.length; i2++) {
            fn2(pathFrom[i2], "bubbled", argFrom);
          }
          for (var _i2 = pathTo.length; _i2-- > 0; ) {
            fn2(pathTo[_i2], "captured", argTo);
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name9, type, props) {
          switch (name9) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var listener;
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to2) {
          traverseEnterLeave(from, to2, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        var EVENT_POOL_SIZE = 10;
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: function() {
            return null;
          },
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = functionThatReturnsTrue;
          },
          isPersistent: functionThatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
              Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
              }));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
              }));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.extend = function(Interface) {
          var Super = this;
          var E3 = function() {
          };
          E3.prototype = Super.prototype;
          var prototype = new E3();
          function Class() {
            return Super.apply(this, arguments);
          }
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.extend = Super.extend;
          addEventPoolingTo(Class);
          return Class;
        };
        addEventPoolingTo(SyntheticEvent);
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction2 = typeof getVal === "function";
          return {
            configurable: true,
            set: set3,
            get: get2
          };
          function set3(val) {
            var action = isFunction2 ? "setting the method" : "setting the property";
            warn2(action, "This is effectively a no-op");
            return val;
          }
          function get2() {
            var action = isFunction2 ? "accessing the method" : "accessing the property";
            var result = isFunction2 ? "This is a no-op function" : "This is set to null";
            warn2(action, result);
            return getVal;
          }
          function warn2(action, result) {
            {
              error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
            }
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          if (!(event instanceof EventConstructor)) {
            {
              throw Error("Trying to release an event instance into a pool of a different type.");
            }
          }
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var SyntheticCompositionEvent = SyntheticEvent.extend({
          data: null
        });
        var SyntheticInputEvent = SyntheticEvent.extend({
          data: null
        });
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM2 && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case TOP_COMPOSITION_START:
              return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
              return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_KEY_UP:
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
              return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_COMPOSITION_END:
              return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case TOP_PASTE:
              return null;
            case TOP_KEY_PRESS:
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case TOP_COMPOSITION_END:
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
              return beforeInput;
            }
            if (beforeInput === null) {
              return composition;
            }
            return [composition, beforeInput];
          }
        };
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          enqueueStateRestore(target);
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          runEventsInBatch(event);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance$1(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CHANGE) {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM2) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === TOP_FOCUS) {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === TOP_BLUR) {
              handleControlledInputBlur(targetNode);
            }
          }
        };
        var SyntheticUIEvent = SyntheticEvent.extend({
          view: null,
          detail: null
        });
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var previousScreenX = 0;
        var previousScreenY = 0;
        var isMovementXSet = false;
        var isMovementYSet = false;
        var SyntheticMouseEvent = SyntheticUIEvent.extend({
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
              isMovementXSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenX - screenX : 0;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
              isMovementYSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenY - screenY : 0;
          }
        });
        var SyntheticPointerEvent = SyntheticMouseEvent.extend({
          pointerId: null,
          width: null,
          height: null,
          pressure: null,
          tangentialPressure: null,
          tiltX: null,
          tiltY: null,
          twist: null,
          pointerType: null,
          isPrimary: null
        });
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          pointerEnter: {
            registrationName: "onPointerEnter",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          },
          pointerLeave: {
            registrationName: "onPointerLeave",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (!isOutEvent && !isOverEvent) {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to2;
            if (isOutEvent) {
              from = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to2 = related ? getClosestInstanceFromNode(related) : null;
              if (to2 !== null) {
                var nearestMounted = getNearestMountedFiber(to2);
                if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                  to2 = null;
                }
              }
            } else {
              from = null;
              to2 = targetInst;
            }
            if (from === to2) {
              return null;
            }
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
              eventInterface = SyntheticMouseEvent;
              leaveEventType = eventTypes$2.mouseLeave;
              enterEventType = eventTypes$2.mouseEnter;
              eventTypePrefix = "mouse";
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
              eventInterface = SyntheticPointerEvent;
              leaveEventType = eventTypes$2.pointerLeave;
              enterEventType = eventTypes$2.pointerEnter;
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to2 == null ? win : getNodeFromInstance$1(to2);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + "leave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to2, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + "enter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to2);
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
              return [leave];
            }
            return [leave, enter];
          }
        };
        function is2(x3, y2) {
          return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
        }
        var objectIs2 = typeof Object.is === "function" ? Object.is : is2;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs2(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            if (!hasOwnProperty$2.call(objB, keysA[i2]) || !objectIs2(objA[keysA[i2]], objB[keysA[i2]])) {
              return false;
            }
          }
          return true;
        }
        var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
            if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
              return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
              case TOP_FOCUS:
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case TOP_BLUR:
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case TOP_MOUSE_DOWN:
                mouseDown = true;
                break;
              case TOP_CONTEXT_MENU:
              case TOP_MOUSE_UP:
              case TOP_DRAG_END:
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case TOP_SELECTION_CHANGE:
                if (skipSelectionChangeEvent) {
                  break;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SyntheticAnimationEvent = SyntheticEvent.extend({
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticClipboardEvent = SyntheticEvent.extend({
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticFocusEvent = SyntheticUIEvent.extend({
          relatedTarget: null
        });
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key2 = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key2 !== "Unidentified") {
              return key2;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
          key: getEventKey,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticDragEvent = SyntheticMouseEvent.extend({
          dataTransfer: null
        });
        var SyntheticTouchEvent = SyntheticUIEvent.extend({
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState
        });
        var SyntheticTransitionEvent = SyntheticEvent.extend({
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticWheelEvent = SyntheticMouseEvent.extend({
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        });
        var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
        var SimpleEventPlugin = {
          eventTypes: simpleEventPluginEventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case TOP_KEY_PRESS:
                if (getEventCharCode(nativeEvent) === 0) {
                  return null;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                EventConstructor = SyntheticKeyboardEvent;
                break;
              case TOP_BLUR:
              case TOP_FOCUS:
                EventConstructor = SyntheticFocusEvent;
                break;
              case TOP_CLICK:
                if (nativeEvent.button === 2) {
                  return null;
                }
              case TOP_AUX_CLICK:
              case TOP_DOUBLE_CLICK:
              case TOP_MOUSE_DOWN:
              case TOP_MOUSE_MOVE:
              case TOP_MOUSE_UP:
              case TOP_MOUSE_OUT:
              case TOP_MOUSE_OVER:
              case TOP_CONTEXT_MENU:
                EventConstructor = SyntheticMouseEvent;
                break;
              case TOP_DRAG:
              case TOP_DRAG_END:
              case TOP_DRAG_ENTER:
              case TOP_DRAG_EXIT:
              case TOP_DRAG_LEAVE:
              case TOP_DRAG_OVER:
              case TOP_DRAG_START:
              case TOP_DROP:
                EventConstructor = SyntheticDragEvent;
                break;
              case TOP_TOUCH_CANCEL:
              case TOP_TOUCH_END:
              case TOP_TOUCH_MOVE:
              case TOP_TOUCH_START:
                EventConstructor = SyntheticTouchEvent;
                break;
              case TOP_ANIMATION_END:
              case TOP_ANIMATION_ITERATION:
              case TOP_ANIMATION_START:
                EventConstructor = SyntheticAnimationEvent;
                break;
              case TOP_TRANSITION_END:
                EventConstructor = SyntheticTransitionEvent;
                break;
              case TOP_SCROLL:
                EventConstructor = SyntheticUIEvent;
                break;
              case TOP_WHEEL:
                EventConstructor = SyntheticWheelEvent;
                break;
              case TOP_COPY:
              case TOP_CUT:
              case TOP_PASTE:
                EventConstructor = SyntheticClipboardEvent;
                break;
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE:
              case TOP_POINTER_CANCEL:
              case TOP_POINTER_DOWN:
              case TOP_POINTER_MOVE:
              case TOP_POINTER_OUT:
              case TOP_POINTER_OVER:
              case TOP_POINTER_UP:
                EventConstructor = SyntheticPointerEvent;
                break;
              default:
                {
                  if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                    error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                  }
                }
                EventConstructor = SyntheticEvent;
                break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        injectEventPluginOrder(DOMEventPluginOrder);
        setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
        injectEventPluginsByName({
          SimpleEventPlugin,
          EnterLeaveEventPlugin,
          ChangeEventPlugin,
          SelectEventPlugin,
          BeforeInputEventPlugin
        });
        var reactEmoji = "⚛";
        var warningEmoji = "⛔";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning2) {
          var prefix2 = warning2 ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning2 ? " Warning: " + warning2 : "";
          return "" + prefix2 + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning2) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning2);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase) {
          if (phase === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase;
          }
        };
        var beginFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase, warning2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning2);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider2:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning2 = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning2);
          }
        }
        function startPhaseTimer(fiber, phase) {
          {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
          }
        }
        function stopPhaseTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning2);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning2 = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning2 = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning2 = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning2);
          }
        }
        function startCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning2 = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning2 = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning2);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index2 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index2 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index2]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index2];
          valueStack[index2] = null;
          {
            fiberStack[index2] = null;
          }
          index2--;
        }
        function push(cursor, value, fiber) {
          index2++;
          valueStack[index2] = cursor.current;
          {
            fiberStack[index2] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component4, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component4)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context2 = {};
            for (var key2 in contextTypes) {
              context2[key2] = unmaskedContext[key2];
            }
            {
              var name9 = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context2, "context", name9, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return context2;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context2, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context2, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name9 = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name9, getCurrentFiberStackInDev);
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component4 = node.type;
                  if (isContextProvider(Component4)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now = initialTimeMs < 1e4 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn2);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            try {
              var _isSync = true;
              var queue2 = syncQueue;
              runWithPriority$1(ImmediatePriority, function() {
                for (; i2 < queue2.length; i2++) {
                  var callback = queue2[i2];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT2 = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT2;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms2) {
          return MAGIC_NUMBER_OFFSET - (ms2 / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5e3;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority$1;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array = [];
            set3.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update2) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child2 = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child2 !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child2, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child2 = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child2 !== null) {
                findHostInstancesForMatchingFibersRecursively(child2, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component4, baseProps) {
          if (Component4 && Component4.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component4.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context2 = providerFiber.type._context;
          {
            push(valueCursor, context2._currentValue, providerFiber);
            context2._currentValue = nextValue;
            {
              if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context2._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context2 = providerFiber.type._context;
          {
            context2._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context2, newValue, oldValue) {
          if (objectIs2(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT2;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT2) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent2, renderExpirationTime2) {
          var node = parent2;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list2 = fiber.dependencies;
            if (list2 !== null) {
              nextFiber = fiber.child;
              var dependency = list2.firstContext;
              while (dependency !== null) {
                if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update2 = createUpdate(renderExpirationTime2, null);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(fiber, update2);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list2.expirationTime < renderExpirationTime2) {
                    list2.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider2) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context2, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context2)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT2) {
              lastContextWithAllBitsObserved = context2;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT2;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context: context2,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context2._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue2 = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue2;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue2 = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue2 === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              baseQueue: currentQueue.baseQueue,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update2 = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          update2.next = update2;
          {
            update2.priority = getCurrentPriorityLevel();
          }
          return update2;
        }
        function enqueueUpdate(fiber, update2) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update2.next = update2;
          } else {
            update2.next = pending.next;
            pending.next = update2;
          }
          sharedQueue.pending = update2;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update2) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            cloneUpdateQueue(current2, workInProgress2);
          }
          var queue2 = workInProgress2.updateQueue;
          var last = queue2.baseQueue;
          if (last === null) {
            queue2.baseQueue = update2.next = update2;
            update2.next = update2;
          } else {
            update2.next = last.next;
            last.next = update2;
          }
        }
        function getStateFromUpdate(workInProgress2, queue2, update2, prevState, nextProps, instance) {
          switch (update2.tag) {
            case ReplaceState: {
              var payload = update2.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update2.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
          var queue2 = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue2.shared;
          }
          var baseQueue = queue2.baseQueue;
          var pendingQueue = queue2.shared.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue2.shared.pending = null;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (currentQueue !== null) {
                currentQueue.baseQueue = pendingQueue;
              }
            }
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = queue2.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
              var update2 = first;
              do {
                var updateExpirationTime = update2.expirationTime;
                if (updateExpirationTime < renderExpirationTime2) {
                  var clone = {
                    expirationTime: update2.expirationTime,
                    suspenseConfig: update2.suspenseConfig,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > newExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update2.suspenseConfig,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update2.suspenseConfig);
                  newState = getStateFromUpdate(workInProgress2, queue2, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null) {
                    workInProgress2.effectTag |= Callback;
                    var effects = queue2.effects;
                    if (effects === null) {
                      queue2.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null || update2 === first) {
                  pendingQueue = queue2.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    update2 = baseQueue.next = pendingQueue.next;
                    pendingQueue.next = first;
                    queue2.baseQueue = baseQueue = pendingQueue;
                    queue2.shared.pending = null;
                  }
                }
              } while (true);
            }
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            queue2.baseState = newBaseState;
            queue2.baseQueue = newBaseQueueLast;
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress2.expirationTime = newExpirationTime;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context2) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context2);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect = effects[i2];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React8.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key2 = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key2)) {
              didWarnOnInvalidCallback.add(key2);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.expirationTime === NoWork) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update2 = createUpdate(expirationTime, suspenseConfig);
            update2.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update2.callback = callback;
            }
            enqueueUpdate(fiber, update2);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update2 = createUpdate(expirationTime, suspenseConfig);
            update2.tag = ReplaceState;
            update2.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update2.callback = callback;
            }
            enqueueUpdate(fiber, update2);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update2 = createUpdate(expirationTime, suspenseConfig);
            update2.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update2.callback = callback;
            }
            enqueueUpdate(fiber, update2);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              }
            }
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name9 = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name9);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name9);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name9);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name9);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name9);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name9);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name9);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name9);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name9);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name9);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name9);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name9);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name9);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name9, name9);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name9, name9);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name9);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name9);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name9);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name9);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name9);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context2 = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context2 = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              new ctor(props, context2);
            }
          }
          var instance = new ctor(props, context2);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context2);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child2) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child2) {
            if (child2 === null || typeof child2 !== "object") {
              return;
            }
            if (!child2._store || child2._store.validated || child2.key != null) {
              return;
            }
            if (!(typeof child2._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child2._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref2 = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref2._stringRef = stringRef;
              return ref2;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          {
            var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, expirationTime) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, expirationTime) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, expirationTime) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, expirationTime, key2) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key2);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key2 = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key2 !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key2) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key2);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key2) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key2 !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child2, knownKeys) {
            {
              if (typeof child2 !== "object" || child2 === null) {
                return knownKeys;
              }
              switch (child2.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child2);
                  var key2 = child2.key;
                  if (typeof key2 !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key2);
                    break;
                  }
                  if (!knownKeys.has(key2)) {
                    knownKeys.add(key2);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key2);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child2 = newChildren[i2];
                knownKeys = warnOnInvalidKey(child2, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child3) {
                return deleteChild(returnFiber, child3);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child2 = _step.value;
                  knownKeys = warnOnInvalidKey(child2, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child3) {
                return deleteChild(returnFiber, child3);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key2 = element.key;
            var child2 = currentFirstChild;
            while (child2 !== null) {
              if (child2.key === key2) {
                switch (child2.tag) {
                  case Fragment: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child2.sibling);
                      var existing = useFiber(child2, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child2.elementType === element.type || isCompatibleFamilyForHotReloading(child2, element)) {
                      deleteRemainingChildren(returnFiber, child2.sibling);
                      var _existing3 = useFiber(child2, element.props);
                      _existing3.ref = coerceRef(returnFiber, child2, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child2);
                break;
              } else {
                deleteChild(returnFiber, child2);
              }
              child2 = child2.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key2 = portal.key;
            var child2 = currentFirstChild;
            while (child2 !== null) {
              if (child2.key === key2) {
                if (child2.tag === HostPortal && child2.stateNode.containerInfo === portal.containerInfo && child2.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child2.sibling);
                  var existing = useFiber(child2, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child2);
                  break;
                }
              } else {
                deleteChild(returnFiber, child2);
              }
              child2 = child2.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component4 = returnFiber.type;
                  {
                    {
                      throw Error((Component4.displayName || Component4.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child2 = workInProgress2.child;
          while (child2 !== null) {
            resetWorkInProgress(child2, renderExpirationTime2);
            child2 = child2.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context2 = requiredContext(contextStackCursor$1.current);
          return context2;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context2 = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context2, fiber.type);
          if (context2 === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function createDeprecatedResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderExpirationTime = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs2(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component4, props, secondArg, nextRenderExpirationTime) {
          renderExpirationTime = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.expirationTime = NoWork;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component4(props, secondArg);
          if (workInProgress2.expirationTime === renderExpirationTime) {
            var numberOfReRenders = 0;
            do {
              workInProgress2.expirationTime = NoWork;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
              children = Component4(props, secondArg);
            } while (workInProgress2.expirationTime === renderExpirationTime);
          }
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue2 = hook.queue;
              if (queue2 !== null) {
                queue2.pending = null;
              }
              hook = hook.next;
            }
          }
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue2 = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue2.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue2);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue2 = hook.queue;
          if (!(queue2 !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue2.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue2.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue2.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update2 = first;
            do {
              var updateExpirationTime = update2.expirationTime;
              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update2.expirationTime,
                  suspenseConfig: update2.suspenseConfig,
                  action: update2.action,
                  eagerReducer: update2.eagerReducer,
                  eagerState: update2.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                  currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(updateExpirationTime);
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update2.suspenseConfig,
                    action: update2.action,
                    eagerReducer: update2.eagerReducer,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                markRenderEventTimeAndConfig(updateExpirationTime, update2.suspenseConfig);
                if (update2.eagerReducer === reducer) {
                  newState = update2.eagerState;
                } else {
                  var action = update2.action;
                  newState = reducer(newState, action);
                }
              }
              update2 = update2.next;
            } while (update2 !== null && update2 !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue2.lastRenderedState = newState;
          }
          var dispatch = queue2.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue2 = hook.queue;
          if (!(queue2 !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue2.lastRenderedReducer = reducer;
          var dispatch = queue2.dispatch;
          var lastRenderPhaseUpdate = queue2.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue2.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update2 = firstRenderPhaseUpdate;
            do {
              var action = update2.action;
              newState = reducer(newState, action);
              update2 = update2.next;
            } while (update2 !== firstRenderPhaseUpdate);
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue2.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue2 = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue2.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue2);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref2 = {
            current: initialValue
          };
          {
            Object.seal(ref2);
          }
          hook.memoizedState = ref2;
          return ref2;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookEffectTag, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref2) {
          if (typeof ref2 === "function") {
            var refCallback = ref2;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref2 !== null && ref2 !== void 0) {
            var refObject = ref2;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref2, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref2), effectDeps);
        }
        function updateImperativeHandle(ref2, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref2), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value, config2) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config2]);
          return prevValue;
        }
        function updateDeferredValue(value, config2) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config2]);
          return prevValue;
        }
        function rerenderDeferredValue(value, config2) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config2]);
          return prevValue;
        }
        function startTransition(setPending, config2, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }
        function mountTransition(config2) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start2 = mountCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start2, isPending];
        }
        function updateTransition(config2) {
          var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
          var start2 = updateCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start2, isPending];
        }
        function rerenderTransition(config2) {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
          var start2 = updateCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start2, isPending];
        }
        function dispatchAction(fiber, queue2, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update2 = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update2.priority = getCurrentPriorityLevel();
          }
          var pending = queue2.pending;
          if (pending === null) {
            update2.next = update2;
          } else {
            update2.next = pending.next;
            pending.next = update2;
          }
          queue2.pending = update2;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            update2.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
          } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue2.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue2.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update2.eagerReducer = lastRenderedReducer;
                  update2.eagerState = eagerState;
                  if (objectIs2(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config2);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config2);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config2);
            }
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref2, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition(config2);
            }
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
            parent2 = parent2.return;
          }
          hydrationParentFiber = parent2;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component4.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component4), getCurrentFiberStackInDev);
              }
            }
          }
          var render2 = Component4.render;
          var ref2 = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref2, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref2, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component4, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current2 === null) {
            var type = Component4.type;
            if (isSimpleFunctionComponent(type) && Component4.compare === null && Component4.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
              }
            }
            var child2 = createFiberFromTypeAndProps(Component4.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child2.ref = workInProgress2.ref;
            child2.return = workInProgress2;
            workInProgress2.child = child2;
            return child2;
          }
          {
            var _type = Component4.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
            }
          }
          var currentChild = current2.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component4.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                workInProgress2.expirationTime = current2.expirationTime;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderExpirationTime2);
        }
        function updateFragment(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
          {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref2 = workInProgress2.ref;
          if (current2 === null && ref2 !== null || current2 !== null && current2.ref !== ref2) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component4.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component4), getCurrentFiberStackInDev);
              }
            }
          }
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, true);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component4.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component4), getCurrentFiberStackInDev);
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component4)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component4, nextProps);
            mountClassInstance(workInProgress2, Component4, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component4, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component4, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component4, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component4.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setIsRendering(false);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component4, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            var child2 = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child2;
            var node = child2;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current2, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component4 = readLazyComponentType(elementType);
          workInProgress2.type = Component4;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component4);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component4, props);
          var child2;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component4);
                workInProgress2.type = Component4 = resolveFunctionForHotReloading(Component4);
              }
              child2 = updateFunctionComponent(null, workInProgress2, Component4, resolvedProps, renderExpirationTime2);
              return child2;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component4 = resolveClassForHotReloading(Component4);
              }
              child2 = updateClassComponent(null, workInProgress2, Component4, resolvedProps, renderExpirationTime2);
              return child2;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component4 = resolveForwardRefForHotReloading(Component4);
              }
              child2 = updateForwardRef(null, workInProgress2, Component4, resolvedProps, renderExpirationTime2);
              return child2;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component4.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component4), getCurrentFiberStackInDev);
                  }
                }
              }
              child2 = updateMemoComponent(null, workInProgress2, Component4, resolveDefaultProps(Component4.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
              return child2;
            }
          }
          var hint = "";
          {
            if (Component4 !== null && typeof Component4 === "object" && Component4.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component4 + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component4, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component4)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component4, nextProps);
          mountClassInstance(workInProgress2, Component4, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component4, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, false);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value;
          {
            if (Component4.prototype && typeof Component4.prototype.render === "function") {
              var componentName = getComponentName(Component4) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderExpirationTime2);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component4) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component4.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component4, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component4, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component4);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component4) {
          {
            if (Component4) {
              if (Component4.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component4.getDerivedStateFromProps === "function") {
              var _componentName2 = getComponentName(Component4) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
              }
            }
            if (typeof Component4.contextType === "object" && Component4.contextType !== null) {
              var _componentName3 = getComponentName(Component4) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support contextType.", _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var currentPrimaryChildFragment = current2.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current2.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index3) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i2 = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i2)) {
                        return;
                      }
                      _i2++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context2 = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context2, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
          var context2 = workInProgress2.type;
          {
            if (context2._context === void 0) {
              if (context2 !== context2.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context2 = context2._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context2, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component4 = workInProgress2.type;
                  if (isContextProvider(Component4)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider2: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child2 = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                      if (child2 !== null) {
                        return child2.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current2, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderExpirationTime2);
            case ContextProvider2:
              return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent2, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component4 = workInProgress2.type;
              if (isContextProvider(Component4)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              return null;
            case ContextProvider2:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component4 = workInProgress2.type;
              if (isContextProvider(Component4)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider2:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider2:
              popProvider(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function logCapturedError(capturedError) {
          var error2 = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error2 != null && error2._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console["error"](error2);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          startPhaseTimer(current2, "componentWillUnmount");
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref2 = current2.ref;
          if (ref2 !== null) {
            if (typeof ref2 === "function") {
              {
                invokeGuardedCallback(null, ref2, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref2.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
              }
            }
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current2 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref2 = finishedWork.ref;
          if (ref2 !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref2 === "function") {
              ref2(instanceToUse);
            } else {
              {
                if (!ref2.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref2.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority$1(priorityLevel, function() {
                      var effect = firstEffect;
                      do {
                        var _destroy = effect.destroy;
                        if (_destroy !== void 0) {
                          safelyCallDestroy(current2, _destroy);
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current2) {
          var alternate = current2.alternate;
          current2.return = null;
          current2.child = null;
          current2.memoizedState = null;
          current2.updateQueue = null;
          current2.dependencies = null;
          current2.alternate = null;
          current2.firstEffect = null;
          current2.lastEffect = null;
          current2.pendingProps = null;
          current2.memoizedProps = null;
          current2.stateNode = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function getHostParentFiber(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null) {
            if (isHostParent(parent2)) {
              return parent2;
            }
            parent2 = parent2.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent2;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent2 = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent2);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent2);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent2);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent2, stateNode, before);
            } else {
              appendChildToContainer(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child2 = node.child;
            if (child2 !== null) {
              insertOrAppendPlacementNodeIntoContainer(child2, before, parent2);
              var sibling = child2.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent2, stateNode, before);
            } else {
              appendChild(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child2 = node.child;
            if (child2 !== null) {
              insertOrAppendPlacementNode(child2, before, parent2);
              var sibling = child2.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent2 = node.return;
              findParent:
                while (true) {
                  if (!(parent2 !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent2.stateNode;
                  switch (parent2.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent2 = parent2.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
          }
          detachFiber(current2);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update2 = createUpdate(expirationTime, null);
          update2.tag = CaptureUpdate;
          update2.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update2.callback = function() {
            onUncaughtError(error2);
            logError(fiber, errorInfo);
          };
          return update2;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update2 = createUpdate(expirationTime, null);
          update2.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update2.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update2.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (fiber.expirationTime !== Sync) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update2.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update2;
        }
        function attachPingListener(root2, renderExpirationTime2, thenable) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var thenable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.expirationTime = currentSource.expirationTime;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update2 = createUpdate(Sync, null);
                      update2.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update2);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root2, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime$1 = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime$1;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority$1:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, expirationTime);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Map([[root2, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root2 = null;
          if (node === null && fiber.tag === HostRoot) {
            root2 = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root2 = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root2 !== null) {
            if (workInProgressRoot === root2) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root2, renderExpirationTime$1);
              }
            }
            markRootUpdatedAtTime(root2, expirationTime);
          }
          return root2;
        }
        function getNextRootExpirationTimeToWorkOn(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root2.firstPendingTime;
          if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root2.lastPingedTime;
          var nextKnownPendingLevel = root2.nextKnownPendingLevel;
          var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
          if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
            return NoWork;
          }
          return nextLevel;
        }
        function ensureRootIsScheduled(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root2.callbackExpirationTime = Sync;
            root2.callbackPriority = ImmediatePriority;
            root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          var existingCallbackNode = root2.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root2.callbackNode = null;
              root2.callbackExpirationTime = NoWork;
              root2.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            var existingCallbackExpirationTime = root2.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root2.callbackExpirationTime = expirationTime;
          root2.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
              timeout: expirationTimeToMs(expirationTime) - now()
            });
          }
          root2.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root2, currentTime);
            ensureRootIsScheduled(root2);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root2.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root2);
              if (root2.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root2);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root2, expirationTime);
              var lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root2.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root2, expirationTime);
              var _lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              if (!IsThisRendererActing.current) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root2.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root2.lastPingedTime = expirationTime;
                    prepareFreshStack(root2, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root2.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root2, expirationTime);
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root2, expirationTime);
            startWorkOnPendingInteractions(root2, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root2);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root2, expirationTime);
              markRootSuspendedAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root2.finishedWork = root2.current.alternate;
              root2.finishedExpirationTime = expirationTime;
              finishSyncRender(root2);
            }
            ensureRootIsScheduled(root2);
          }
          return null;
        }
        function finishSyncRender(root2) {
          workInProgressRoot = null;
          commitRoot(root2);
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function syncUpdates(fn2, a, b, c) {
          return runWithPriority$1(ImmediatePriority, fn2.bind(null, a, b, c));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root2) {
              markRootExpiredAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates$1(fn2, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn2(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn2, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn2(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn2, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$1, fn2.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn2, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn2(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn2, a) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority$1(ImmediatePriority, fn2.bind(null, a));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function prepareFreshStack(root2, expirationTime) {
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          renderExpirationTime$1 = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root2) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$2.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current2 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if ((workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress);
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child2 = workInProgress.child;
                while (child2 !== null) {
                  actualDuration += child2.actualDuration;
                  child2 = child2.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child2 = completedWork.child;
            while (child2 !== null) {
              var childUpdateExpirationTime = child2.expirationTime;
              var childChildExpirationTime = child2.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child2.actualDuration;
              }
              treeBaseDuration += child2.treeBaseDuration;
              child2 = child2.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var expirationTime = root2.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          root2.callbackExpirationTime = NoWork;
          root2.callbackPriority = NoPriority;
          root2.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root2.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime = root2.firstPendingTime;
          if (remainingExpirationTime !== NoWork) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                  scheduleInteractions(root2, expirationTimes[i2], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingExpirationTime);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, expirationTime);
            }
          }
          if (remainingExpirationTime === Sync) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root2);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current2 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          {
            var _effect2 = root2.current.firstEffect;
            while (_effect2 !== null) {
              {
                setCurrentFiber(_effect2);
                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                if (hasCaughtError()) {
                  if (!(_effect2 !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error5 = clearCaughtError();
                  captureCommitPhaseError(_effect2, _error5);
                }
                resetCurrentFiber();
              }
              var nextNextEffect = _effect2.nextEffect;
              _effect2.nextEffect = null;
              _effect2 = nextNextEffect;
            }
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update2 = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update2);
          var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update2 = createClassErrorUpdate(fiber, errorInfo, Sync);
                enqueueUpdate(fiber, update2);
                var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root2 !== null) {
                  ensureRootIsScheduled(root2);
                  schedulePendingInteractions(root2, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, thenable, suspendedTime) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, renderExpirationTime$1);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root2, suspendedTime)) {
            return;
          }
          var lastPingedTime = root2.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root2.lastPingedTime = suspendedTime;
          ensureRootIsScheduled(root2);
          schedulePendingInteractions(root2, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, retryTime);
          }
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, expirationTime) {
          return expirationTime * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root2, expirationTime, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, expirationTime) {
          scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, expirationTime) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedExpirationTime) {
          var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedExpirationTime);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onScheduleFiberRoot = null;
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            if (true) {
              if (typeof hook.onScheduleFiberRoot === "function") {
                onScheduleFiberRoot = function(root2, children) {
                  try {
                    hook.onScheduleFiberRoot(rendererID, root2, children);
                  } catch (err) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                };
              }
            }
            onCommitFiberRoot = function(root2, expirationTime) {
              try {
                var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          if (typeof onScheduleFiberRoot === "function") {
            onScheduleFiberRoot(root2, children);
          }
        }
        function onCommitRoot(root2, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root2, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key2, mode) {
          this.tag = tag;
          this.key = key2;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key2, mode) {
          return new FiberNode(tag, pendingProps, key2, mode);
        };
        function shouldConstruct(Component4) {
          var prototype = Component4.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component4) {
          if (typeof Component4 === "function") {
            return shouldConstruct(Component4) ? ClassComponent : FunctionComponent;
          } else if (Component4 !== void 0 && Component4 !== null) {
            var $$typeof = Component4.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              {
                workInProgress2._debugID = current2._debugID;
              }
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key2);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key2);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key2);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key2);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider2;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key2, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key2 = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key2) {
          var fiber = createFiber(Fragment, elements, key2, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key2) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              error('Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key2) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key2) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          {
            target._debugID = source._debugID;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function isRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root2.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root2.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (expirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root2, expirationTime) {
          var firstPendingTime = root2.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root2.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root2.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root2.lastSuspendedTime) {
              root2.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root2.nextKnownPendingLevel) {
              root2.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
          root2.firstPendingTime = remainingExpirationTime;
          if (finishedExpirationTime <= root2.lastSuspendedTime) {
            root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
            root2.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root2, expirationTime) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root2.lastExpiredTime = expirationTime;
          }
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component4 = fiber.type;
            if (isContextProvider(Component4)) {
              return processChildContext(fiber, Component4, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component10, methodName) {
          {
            var fiber = get(component10);
            if (fiber === void 0) {
              if (typeof component10.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component10));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
          var context2 = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context2;
          } else {
            container.pendingContext = context2;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update2 = createUpdate(expirationTime, suspenseConfig);
          update2.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update2.callback = callback;
          }
          enqueueUpdate(current$1, update2);
          scheduleWork(current$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          scheduleWork(fiber, ContinuousHydration);
          markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value) {
            if (idx >= path.length) {
              return value;
            }
            var key2 = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key2] = copyWithSetImpl(obj[key2], path, idx + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          overrideHookState = function(fiber, id2, path, value) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id2 > 0) {
              currentHook2 = currentHook2.next;
              id2--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }
        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options) {
          var hydrate2 = options != null && options.hydrate === true;
          var hydrationCallbacks = options != null && options.hydrationOptions || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          if (hydrate2 && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
          }
          return root2;
        }
        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key2 == null ? null : "" + key2,
            children,
            containerInfo,
            implementation
          };
        }
        var ReactVersion = "16.13.1";
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key2);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key2);
        }
        var Internals = {
          Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM2 && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/resolve-pathname/esm/resolve-pathname.js
  function isAbsolute(pathname) {
    return pathname.charAt(0) === "/";
  }
  function spliceOne(list2, index2) {
    for (var i2 = index2, k3 = i2 + 1, n2 = list2.length; k3 < n2; i2 += 1, k3 += 1) {
      list2[i2] = list2[k3];
    }
    list2.pop();
  }
  function resolvePathname(to2, from) {
    if (from === void 0)
      from = "";
    var toParts = to2 && to2.split("/") || [];
    var fromParts = from && from.split("/") || [];
    var isToAbs = to2 && isAbsolute(to2);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to2 && isAbsolute(to2)) {
      fromParts = toParts;
    } else if (toParts.length) {
      fromParts.pop();
      fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length)
      return "/";
    var hasTrailingSlash;
    if (fromParts.length) {
      var last = fromParts[fromParts.length - 1];
      hasTrailingSlash = last === "." || last === ".." || last === "";
    } else {
      hasTrailingSlash = false;
    }
    var up = 0;
    for (var i2 = fromParts.length; i2 >= 0; i2--) {
      var part = fromParts[i2];
      if (part === ".") {
        spliceOne(fromParts, i2);
      } else if (part === "..") {
        spliceOne(fromParts, i2);
        up++;
      } else if (up) {
        spliceOne(fromParts, i2);
        up--;
      }
    }
    if (!mustEndAbs)
      for (; up--; up)
        fromParts.unshift("..");
    if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
      fromParts.unshift("");
    var result = fromParts.join("/");
    if (hasTrailingSlash && result.substr(-1) !== "/")
      result += "/";
    return result;
  }
  const resolve_pathname_default = resolvePathname;

  // node_modules/value-equal/esm/value-equal.js
  function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
  }
  function valueEqual(a, b) {
    if (a === b)
      return true;
    if (a == null || b == null)
      return false;
    if (Array.isArray(a)) {
      return Array.isArray(b) && a.length === b.length && a.every(function(item, index2) {
        return valueEqual(item, b[index2]);
      });
    }
    if (typeof a === "object" || typeof b === "object") {
      var aValue = valueOf(a);
      var bValue = valueOf(b);
      if (aValue !== a || bValue !== b)
        return valueEqual(aValue, bValue);
      return Object.keys(Object.assign({}, a, b)).every(function(key2) {
        return valueEqual(a[key2], b[key2]);
      });
    }
    return false;
  }
  const value_equal_default = valueEqual;

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction2 = false;
  function warning(condition, message) {
    if (!isProduction2) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x3) {
      }
    }
  }
  const tiny_warning_esm_default = warning;

  // node_modules/tiny-invariant/dist/tiny-invariant.esm.js
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  const tiny_invariant_esm_default = invariant;

  // node_modules/history/esm/history.js
  function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function stripLeadingSlash(path) {
    return path.charAt(0) === "/" ? path.substr(1) : path;
  }
  function hasBasename(path, prefix2) {
    return path.toLowerCase().indexOf(prefix2.toLowerCase()) === 0 && "/?#".indexOf(path.charAt(prefix2.length)) !== -1;
  }
  function stripBasename(path, prefix2) {
    return hasBasename(path, prefix2) ? path.substr(prefix2.length) : path;
  }
  function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === "/" ? path.slice(0, -1) : path;
  }
  function parsePath(path) {
    var pathname = path || "/";
    var search = "";
    var hash = "";
    var hashIndex = pathname.indexOf("#");
    if (hashIndex !== -1) {
      hash = pathname.substr(hashIndex);
      pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf("?");
    if (searchIndex !== -1) {
      search = pathname.substr(searchIndex);
      pathname = pathname.substr(0, searchIndex);
    }
    return {
      pathname,
      search: search === "?" ? "" : search,
      hash: hash === "#" ? "" : hash
    };
  }
  function createPath(location2) {
    var pathname = location2.pathname, search = location2.search, hash = location2.hash;
    var path = pathname || "/";
    if (search && search !== "?")
      path += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      path += hash.charAt(0) === "#" ? hash : "#" + hash;
    return path;
  }
  function createLocation(path, state, key2, currentLocation) {
    var location2;
    if (typeof path === "string") {
      location2 = parsePath(path);
      location2.state = state;
    } else {
      location2 = _extends({}, path);
      if (location2.pathname === void 0)
        location2.pathname = "";
      if (location2.search) {
        if (location2.search.charAt(0) !== "?")
          location2.search = "?" + location2.search;
      } else {
        location2.search = "";
      }
      if (location2.hash) {
        if (location2.hash.charAt(0) !== "#")
          location2.hash = "#" + location2.hash;
      } else {
        location2.hash = "";
      }
      if (state !== void 0 && location2.state === void 0)
        location2.state = state;
    }
    try {
      location2.pathname = decodeURI(location2.pathname);
    } catch (e) {
      if (e instanceof URIError) {
        throw new URIError('Pathname "' + location2.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
      } else {
        throw e;
      }
    }
    if (key2)
      location2.key = key2;
    if (currentLocation) {
      if (!location2.pathname) {
        location2.pathname = currentLocation.pathname;
      } else if (location2.pathname.charAt(0) !== "/") {
        location2.pathname = resolve_pathname_default(location2.pathname, currentLocation.pathname);
      }
    } else {
      if (!location2.pathname) {
        location2.pathname = "/";
      }
    }
    return location2;
  }
  function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && value_equal_default(a.state, b.state);
  }
  function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
      tiny_warning_esm_default(prompt == null, "A history supports only one prompt at a time");
      prompt = nextPrompt;
      return function() {
        if (prompt === nextPrompt)
          prompt = null;
      };
    }
    function confirmTransitionTo(location2, action, getUserConfirmation, callback) {
      if (prompt != null) {
        var result = typeof prompt === "function" ? prompt(location2, action) : prompt;
        if (typeof result === "string") {
          if (typeof getUserConfirmation === "function") {
            getUserConfirmation(result, callback);
          } else {
            tiny_warning_esm_default(false, "A history needs a getUserConfirmation function in order to use a prompt message");
            callback(true);
          }
        } else {
          callback(result !== false);
        }
      } else {
        callback(true);
      }
    }
    var listeners = [];
    function appendListener(fn2) {
      var isActive = true;
      function listener() {
        if (isActive)
          fn2.apply(void 0, arguments);
      }
      listeners.push(listener);
      return function() {
        isActive = false;
        listeners = listeners.filter(function(item) {
          return item !== listener;
        });
      };
    }
    function notifyListeners() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      listeners.forEach(function(listener) {
        return listener.apply(void 0, args);
      });
    }
    return {
      setPrompt,
      confirmTransitionTo,
      appendListener,
      notifyListeners
    };
  }
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  function getConfirmation(message, callback) {
    callback(window.confirm(message));
  }
  function supportsHistory() {
    var ua3 = window.navigator.userAgent;
    if ((ua3.indexOf("Android 2.") !== -1 || ua3.indexOf("Android 4.0") !== -1) && ua3.indexOf("Mobile Safari") !== -1 && ua3.indexOf("Chrome") === -1 && ua3.indexOf("Windows Phone") === -1)
      return false;
    return window.history && "pushState" in window.history;
  }
  function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf("Trident") === -1;
  }
  function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf("Firefox") === -1;
  }
  function isExtraneousPopstateEvent(event) {
    return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
  }
  var PopStateEvent = "popstate";
  var HashChangeEvent = "hashchange";
  function getHistoryState() {
    try {
      return window.history.state || {};
    } catch (e) {
      return {};
    }
  }
  function createBrowserHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Browser history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    function getDOMLocation(historyState) {
      var _ref = historyState || {}, key2 = _ref.key, state = _ref.state;
      var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
      var path = pathname + search + hash;
      tiny_warning_esm_default(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
      if (basename)
        path = stripBasename(path, basename);
      return createLocation(path, state, key2);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function handlePopState(event) {
      if (isExtraneousPopstateEvent(event))
        return;
      handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location2) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location2
            });
          } else {
            revertPop(location2);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allKeys.indexOf(toLocation.key);
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allKeys.indexOf(fromLocation.key);
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go2(delta);
      }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    function createHref(location2) {
      return basename + createPath(location2);
    }
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location2 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location2);
        var key2 = location2.key, state2 = location2.state;
        if (canUseHistory) {
          globalHistory.pushState({
            key: key2,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            var nextKeys = allKeys.slice(0, prevIndex + 1);
            nextKeys.push(location2.key);
            allKeys = nextKeys;
            setState({
              action,
              location: location2
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history");
          window.location.href = href;
        }
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location2 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location2);
        var key2 = location2.key, state2 = location2.state;
        if (canUseHistory) {
          globalHistory.replaceState({
            key: key2,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            if (prevIndex !== -1)
              allKeys[prevIndex] = location2.key;
            setState({
              action,
              location: location2
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history");
          window.location.replace(href);
        }
      });
    }
    function go2(n2) {
      globalHistory.go(n2);
    }
    function goBack() {
      go2(-1);
    }
    function goForward() {
      go2(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.addEventListener(HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.removeEventListener(HashChangeEvent, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go: go2,
      goBack,
      goForward,
      block,
      listen
    };
    return history3;
  }
  var HashChangeEvent$1 = "hashchange";
  var HashPathCoders = {
    hashbang: {
      encodePath: function encodePath(path) {
        return path.charAt(0) === "!" ? path : "!/" + stripLeadingSlash(path);
      },
      decodePath: function decodePath(path) {
        return path.charAt(0) === "!" ? path.substr(1) : path;
      }
    },
    noslash: {
      encodePath: stripLeadingSlash,
      decodePath: addLeadingSlash
    },
    slash: {
      encodePath: addLeadingSlash,
      decodePath: addLeadingSlash
    }
  };
  function stripHash(url) {
    var hashIndex = url.indexOf("#");
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
  }
  function getHashPath() {
    var href = window.location.href;
    var hashIndex = href.indexOf("#");
    return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
  }
  function pushHashPath(path) {
    window.location.hash = path;
  }
  function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + "#" + path);
  }
  function createHashHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Hash history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
      var path2 = decodePath(getHashPath());
      tiny_warning_esm_default(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".');
      if (basename)
        path2 = stripBasename(path2, basename);
      return createLocation(path2);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }
    function handleHashChange() {
      var path2 = getHashPath();
      var encodedPath2 = encodePath(path2);
      if (path2 !== encodedPath2) {
        replaceHashPath(encodedPath2);
      } else {
        var location2 = getDOMLocation();
        var prevLocation = history3.location;
        if (!forceNextPop && locationsAreEqual$$1(prevLocation, location2))
          return;
        if (ignorePath === createPath(location2))
          return;
        ignorePath = null;
        handlePop(location2);
      }
    }
    function handlePop(location2) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location2
            });
          } else {
            revertPop(location2);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allPaths.lastIndexOf(createPath(toLocation));
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go2(delta);
      }
    }
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath)
      replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [createPath(initialLocation)];
    function createHref(location2) {
      var baseTag = document.querySelector("base");
      var href = "";
      if (baseTag && baseTag.getAttribute("href")) {
        href = stripHash(window.location.href);
      }
      return href + "#" + encodePath(basename + createPath(location2));
    }
    function push(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot push state; it is ignored");
      var action = "PUSH";
      var location2 = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location2);
        var encodedPath2 = encodePath(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          pushHashPath(encodedPath2);
          var prevIndex = allPaths.lastIndexOf(createPath(history3.location));
          var nextPaths = allPaths.slice(0, prevIndex + 1);
          nextPaths.push(path3);
          allPaths = nextPaths;
          setState({
            action,
            location: location2
          });
        } else {
          tiny_warning_esm_default(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
          setState();
        }
      });
    }
    function replace(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot replace state; it is ignored");
      var action = "REPLACE";
      var location2 = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location2);
        var encodedPath2 = encodePath(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          replaceHashPath(encodedPath2);
        }
        var prevIndex = allPaths.indexOf(createPath(history3.location));
        if (prevIndex !== -1)
          allPaths[prevIndex] = path3;
        setState({
          action,
          location: location2
        });
      });
    }
    function go2(n2) {
      tiny_warning_esm_default(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser");
      globalHistory.go(n2);
    }
    function goBack() {
      go2(-1);
    }
    function goForward() {
      go2(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(HashChangeEvent$1, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(HashChangeEvent$1, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go: go2,
      goBack,
      goForward,
      block,
      listen
    };
    return history3;
  }
  function clamp(n2, lowerBound, upperBound) {
    return Math.min(Math.max(n2, lowerBound), upperBound);
  }
  function createMemoryHistory(props) {
    if (props === void 0) {
      props = {};
    }
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = history3.entries.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var index2 = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
      return typeof entry === "string" ? createLocation(entry, void 0, createKey()) : createLocation(entry, void 0, entry.key || createKey());
    });
    var createHref = createPath;
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location2 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var prevIndex = history3.index;
        var nextIndex = prevIndex + 1;
        var nextEntries = history3.entries.slice(0);
        if (nextEntries.length > nextIndex) {
          nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location2);
        } else {
          nextEntries.push(location2);
        }
        setState({
          action,
          location: location2,
          index: nextIndex,
          entries: nextEntries
        });
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location2 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        history3.entries[history3.index] = location2;
        setState({
          action,
          location: location2
        });
      });
    }
    function go2(n2) {
      var nextIndex = clamp(history3.index + n2, 0, history3.entries.length - 1);
      var action = "POP";
      var location2 = history3.entries[nextIndex];
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location: location2,
            index: nextIndex
          });
        } else {
          setState();
        }
      });
    }
    function goBack() {
      go2(-1);
    }
    function goForward() {
      go2(1);
    }
    function canGo(n2) {
      var nextIndex = history3.index + n2;
      return nextIndex >= 0 && nextIndex < history3.entries.length;
    }
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
      return transitionManager.appendListener(listener);
    }
    var history3 = {
      length: entries.length,
      action: "POP",
      location: entries[index2],
      index: index2,
      entries,
      createHref,
      push,
      replace,
      go: go2,
      goBack,
      goForward,
      canGo,
      block,
      listen
    };
    return history3;
  }

  // node_modules/mini-create-react-context/dist/esm/index.js
  const react = __toModule(require_react());
  const prop_types = __toModule(require_prop_types());
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var commonjsGlobal2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  function getUniqueId() {
    var key2 = "__global_unique_id__";
    return commonjsGlobal2[key2] = (commonjsGlobal2[key2] || 0) + 1;
  }
  function objectIs(x3, y2) {
    if (x3 === y2) {
      return x3 !== 0 || 1 / x3 === 1 / y2;
    } else {
      return x3 !== x3 && y2 !== y2;
    }
  }
  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on2(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function(h2) {
          return h2 !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set2(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function(handler) {
          return handler(value, changedBits);
        });
      }
    };
  }
  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }
  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = "__create-react-context-" + getUniqueId() + "__";
    var Provider2 = function(_Component) {
      _inheritsLoose(Provider3, _Component);
      function Provider3() {
        var _this;
        _this = _Component.apply(this, arguments) || this;
        _this.emitter = createEventEmitter(_this.props.value);
        return _this;
      }
      var _proto = Provider3.prototype;
      _proto.getChildContext = function getChildContext() {
        var _ref;
        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };
      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits;
          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if (true) {
              tiny_warning_esm_default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
            }
            changedBits |= 0;
            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };
      _proto.render = function render() {
        return this.props.children;
      };
      return Provider3;
    }(react.Component);
    Provider2.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types.default.object.isRequired, _Provider$childContex);
    var Consumer = function(_Component2) {
      _inheritsLoose(Consumer2, _Component2);
      function Consumer2() {
        var _this2;
        _this2 = _Component2.apply(this, arguments) || this;
        _this2.state = {
          value: _this2.getValue()
        };
        _this2.onUpdate = function(newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        };
        return _this2;
      }
      var _proto2 = Consumer2.prototype;
      _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };
      _proto2.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };
      _proto2.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };
      return Consumer2;
    }(react.Component);
    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types.default.object, _Consumer$contextType);
    return {
      Provider: Provider2,
      Consumer
    };
  }
  var index = react.default.createContext || createReactContext;
  const esm_default = index;

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key2, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key2 = sourceKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      target[key2] = source[key2];
    }
    return target;
  }

  // node_modules/react-router/esm/react-router.js
  const react3 = __toModule(require_react());
  const prop_types3 = __toModule(require_prop_types());
  const path_to_regexp = __toModule(require_path_to_regexp());
  const react_is = __toModule(require_react_is());
  const hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  var createNamedContext = function createNamedContext2(name9) {
    var context2 = esm_default();
    context2.displayName = name9;
    return context2;
  };
  var historyContext = createNamedContext("Router-History");
  var createNamedContext$1 = function createNamedContext2(name9) {
    var context2 = esm_default();
    context2.displayName = name9;
    return context2;
  };
  var context = createNamedContext$1("Router");
  var Router = function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
      return {
        path: "/",
        url: "/",
        params: {},
        isExact: pathname === "/"
      };
    };
    function Router2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {
        location: props.history.location
      };
      _this._isMounted = false;
      _this._pendingLocation = null;
      if (!props.staticContext) {
        _this.unlisten = props.history.listen(function(location2) {
          if (_this._isMounted) {
            _this.setState({
              location: location2
            });
          } else {
            _this._pendingLocation = location2;
          }
        });
      }
      return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;
      if (this._pendingLocation) {
        this.setState({
          location: this._pendingLocation
        });
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unlisten)
        this.unlisten();
    };
    _proto.render = function render() {
      return react3.default.createElement(context.Provider, {
        value: {
          history: this.props.history,
          location: this.state.location,
          match: Router2.computeRootMatch(this.state.location.pathname),
          staticContext: this.props.staticContext
        }
      }, react3.default.createElement(historyContext.Provider, {
        children: this.props.children || null,
        value: this.props.history
      }));
    };
    return Router2;
  }(react3.default.Component);
  if (true) {
    Router.propTypes = {
      children: prop_types3.default.node,
      history: prop_types3.default.object.isRequired,
      staticContext: prop_types3.default.object
    };
    Router.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(prevProps.history === this.props.history, "You cannot change <Router history>");
    };
  }
  var MemoryRouter = function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createMemoryHistory(_this.props);
      return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
      return react3.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return MemoryRouter2;
  }(react3.default.Component);
  if (true) {
    MemoryRouter.propTypes = {
      initialEntries: prop_types3.default.array,
      initialIndex: prop_types3.default.number,
      getUserConfirmation: prop_types3.default.func,
      keyLength: prop_types3.default.number,
      children: prop_types3.default.node
    };
    MemoryRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
    };
  }
  var Lifecycle = function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      if (this.props.onMount)
        this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.onUpdate)
        this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.props.onUnmount)
        this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
      return null;
    };
    return Lifecycle2;
  }(react3.default.Component);
  function Prompt(_ref) {
    var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
    return react3.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Prompt> outside a <Router>") : void 0;
      if (!when || context2.staticContext)
        return null;
      var method = context2.history.block;
      return react3.default.createElement(Lifecycle, {
        onMount: function onMount(self2) {
          self2.release = method(message);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          if (prevProps.message !== message) {
            self2.release();
            self2.release = method(message);
          }
        },
        onUnmount: function onUnmount(self2) {
          self2.release();
        },
        message
      });
    });
  }
  if (true) {
    var messageType = prop_types3.default.oneOfType([prop_types3.default.func, prop_types3.default.string]);
    Prompt.propTypes = {
      when: prop_types3.default.bool,
      message: messageType.isRequired
    };
  }
  var cache = {};
  var cacheLimit = 1e4;
  var cacheCount = 0;
  function compilePath(path) {
    if (cache[path])
      return cache[path];
    var generator = path_to_regexp.default.compile(path);
    if (cacheCount < cacheLimit) {
      cache[path] = generator;
      cacheCount++;
    }
    return generator;
  }
  function generatePath(path, params) {
    if (path === void 0) {
      path = "/";
    }
    if (params === void 0) {
      params = {};
    }
    return path === "/" ? path : compilePath(path)(params, {
      pretty: true
    });
  }
  function Redirect(_ref) {
    var computedMatch = _ref.computedMatch, to2 = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
    return react3.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Redirect> outside a <Router>") : void 0;
      var history3 = context2.history, staticContext = context2.staticContext;
      var method = push ? history3.push : history3.replace;
      var location2 = createLocation(computedMatch ? typeof to2 === "string" ? generatePath(to2, computedMatch.params) : _extends({}, to2, {
        pathname: generatePath(to2.pathname, computedMatch.params)
      }) : to2);
      if (staticContext) {
        method(location2);
        return null;
      }
      return react3.default.createElement(Lifecycle, {
        onMount: function onMount() {
          method(location2);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          var prevLocation = createLocation(prevProps.to);
          if (!locationsAreEqual(prevLocation, _extends({}, location2, {
            key: prevLocation.key
          }))) {
            method(location2);
          }
        },
        to: to2
      });
    });
  }
  if (true) {
    Redirect.propTypes = {
      push: prop_types3.default.bool,
      from: prop_types3.default.string,
      to: prop_types3.default.oneOfType([prop_types3.default.string, prop_types3.default.object]).isRequired
    };
  }
  var cache$1 = {};
  var cacheLimit$1 = 1e4;
  var cacheCount$1 = 0;
  function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
    if (pathCache[path])
      return pathCache[path];
    var keys = [];
    var regexp = path_to_regexp.default(path, keys, options);
    var result = {
      regexp,
      keys
    };
    if (cacheCount$1 < cacheLimit$1) {
      pathCache[path] = result;
      cacheCount$1++;
    }
    return result;
  }
  function matchPath(pathname, options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof options === "string" || Array.isArray(options)) {
      options = {
        path: options
      };
    }
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path2) {
      if (!path2 && path2 !== "")
        return null;
      if (matched)
        return matched;
      var _compilePath = compilePath$1(path2, {
        end: exact,
        strict,
        sensitive
      }), regexp = _compilePath.regexp, keys = _compilePath.keys;
      var match = regexp.exec(pathname);
      if (!match)
        return null;
      var url = match[0], values = match.slice(1);
      var isExact = pathname === url;
      if (exact && !isExact)
        return null;
      return {
        path: path2,
        url: path2 === "/" && url === "" ? "/" : url,
        isExact,
        params: keys.reduce(function(memo, key2, index2) {
          memo[key2.name] = values[index2];
          return memo;
        }, {})
      };
    }, null);
  }
  function isEmptyChildren(children) {
    return react3.default.Children.count(children) === 0;
  }
  function evalChildrenDev(children, props, path) {
    var value = children(props);
    tiny_warning_esm_default(value !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? ' path="' + path + '"' : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
  }
  var Route = function(_React$Component) {
    _inheritsLoose(Route2, _React$Component);
    function Route2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
      var _this = this;
      return react3.default.createElement(context.Consumer, null, function(context$1) {
        !context$1 ? tiny_invariant_esm_default(false, "You should not use <Route> outside a <Router>") : void 0;
        var location2 = _this.props.location || context$1.location;
        var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location2.pathname, _this.props) : context$1.match;
        var props = _extends({}, context$1, {
          location: location2,
          match
        });
        var _this$props = _this.props, children = _this$props.children, component10 = _this$props.component, render2 = _this$props.render;
        if (Array.isArray(children) && children.length === 0) {
          children = null;
        }
        return react3.default.createElement(context.Provider, {
          value: props
        }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component10 ? react3.default.createElement(component10, props) : render2 ? render2(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
      });
    };
    return Route2;
  }(react3.default.Component);
  if (true) {
    Route.propTypes = {
      children: prop_types3.default.oneOfType([prop_types3.default.func, prop_types3.default.node]),
      component: function component10(props, propName) {
        if (props[propName] && !react_is.isValidElementType(props[propName])) {
          return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
        }
      },
      exact: prop_types3.default.bool,
      location: prop_types3.default.object,
      path: prop_types3.default.oneOfType([prop_types3.default.string, prop_types3.default.arrayOf(prop_types3.default.string)]),
      render: prop_types3.default.func,
      sensitive: prop_types3.default.bool,
      strict: prop_types3.default.bool
    };
    Route.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
      tiny_warning_esm_default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
    };
    Route.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  function addLeadingSlash2(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function addBasename(basename, location2) {
    if (!basename)
      return location2;
    return _extends({}, location2, {
      pathname: addLeadingSlash2(basename) + location2.pathname
    });
  }
  function stripBasename2(basename, location2) {
    if (!basename)
      return location2;
    var base = addLeadingSlash2(basename);
    if (location2.pathname.indexOf(base) !== 0)
      return location2;
    return _extends({}, location2, {
      pathname: location2.pathname.substr(base.length)
    });
  }
  function createURL(location2) {
    return typeof location2 === "string" ? location2 : createPath(location2);
  }
  function staticHandler(methodName) {
    return function() {
      tiny_invariant_esm_default(false, "You cannot %s with <StaticRouter>", methodName);
    };
  }
  function noop2() {
  }
  var StaticRouter = function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlePush = function(location2) {
        return _this.navigateTo(location2, "PUSH");
      };
      _this.handleReplace = function(location2) {
        return _this.navigateTo(location2, "REPLACE");
      };
      _this.handleListen = function() {
        return noop2;
      };
      _this.handleBlock = function() {
        return noop2;
      };
      return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location2, action) {
      var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context2 = _this$props$context === void 0 ? {} : _this$props$context;
      context2.action = action;
      context2.location = addBasename(basename, createLocation(location2));
      context2.url = createURL(context2.location);
    };
    _proto.render = function render() {
      var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context2 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location2 = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);
      var history3 = {
        createHref: function createHref(path) {
          return addLeadingSlash2(basename + createURL(path));
        },
        action: "POP",
        location: stripBasename2(basename, createLocation(location2)),
        push: this.handlePush,
        replace: this.handleReplace,
        go: staticHandler("go"),
        goBack: staticHandler("goBack"),
        goForward: staticHandler("goForward"),
        listen: this.handleListen,
        block: this.handleBlock
      };
      return react3.default.createElement(Router, _extends({}, rest, {
        history: history3,
        staticContext: context2
      }));
    };
    return StaticRouter2;
  }(react3.default.Component);
  if (true) {
    StaticRouter.propTypes = {
      basename: prop_types3.default.string,
      context: prop_types3.default.object,
      location: prop_types3.default.oneOfType([prop_types3.default.string, prop_types3.default.object])
    };
    StaticRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
    };
  }
  var Switch = function(_React$Component) {
    _inheritsLoose(Switch2, _React$Component);
    function Switch2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
      var _this = this;
      return react3.default.createElement(context.Consumer, null, function(context2) {
        !context2 ? tiny_invariant_esm_default(false, "You should not use <Switch> outside a <Router>") : void 0;
        var location2 = _this.props.location || context2.location;
        var element, match;
        react3.default.Children.forEach(_this.props.children, function(child2) {
          if (match == null && react3.default.isValidElement(child2)) {
            element = child2;
            var path = child2.props.path || child2.props.from;
            match = path ? matchPath(location2.pathname, _extends({}, child2.props, {
              path
            })) : context2.match;
          }
        });
        return match ? react3.default.cloneElement(element, {
          location: location2,
          computedMatch: match
        }) : null;
      });
    };
    return Switch2;
  }(react3.default.Component);
  if (true) {
    Switch.propTypes = {
      children: prop_types3.default.node,
      location: prop_types3.default.object
    };
    Switch.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  var useContext = react3.default.useContext;
  if (true) {
    if (typeof window !== "undefined") {
      var global2 = window;
      var key = "__react_router_build__";
      var buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
      };
      if (global2[key] && global2[key] !== "esm") {
        var initialBuildName = buildNames[global2[key]];
        var secondaryBuildName = buildNames["esm"];
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
      }
      global2[key] = "esm";
    }
  }

  // node_modules/react-router-dom/esm/react-router-dom.js
  const react2 = __toModule(require_react());
  const prop_types2 = __toModule(require_prop_types());
  var BrowserRouter = function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createBrowserHistory(_this.props);
      return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
      return react2.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return BrowserRouter2;
  }(react2.default.Component);
  if (true) {
    BrowserRouter.propTypes = {
      basename: prop_types2.default.string,
      children: prop_types2.default.node,
      forceRefresh: prop_types2.default.bool,
      getUserConfirmation: prop_types2.default.func,
      keyLength: prop_types2.default.number
    };
    BrowserRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
    };
  }
  var HashRouter = function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createHashHistory(_this.props);
      return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
      return react2.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return HashRouter2;
  }(react2.default.Component);
  if (true) {
    HashRouter.propTypes = {
      basename: prop_types2.default.string,
      children: prop_types2.default.node,
      getUserConfirmation: prop_types2.default.func,
      hashType: prop_types2.default.oneOf(["hashbang", "noslash", "slash"])
    };
    HashRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
    };
  }
  var resolveToLocation = function resolveToLocation2(to2, currentLocation) {
    return typeof to2 === "function" ? to2(currentLocation) : to2;
  };
  var normalizeToLocation = function normalizeToLocation2(to2, currentLocation) {
    return typeof to2 === "string" ? createLocation(to2, null, null, currentLocation) : to2;
  };
  var forwardRefShim = function forwardRefShim2(C2) {
    return C2;
  };
  var forwardRef = react2.default.forwardRef;
  if (typeof forwardRef === "undefined") {
    forwardRef = forwardRefShim;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  var LinkAnchor = forwardRef(function(_ref, forwardedRef) {
    var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);
    var target = rest.target;
    var props = _extends({}, rest, {
      onClick: function onClick(event) {
        try {
          if (_onClick)
            _onClick(event);
        } catch (ex) {
          event.preventDefault();
          throw ex;
        }
        if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
          event.preventDefault();
          navigate();
        }
      }
    });
    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.ref = innerRef;
    }
    return react2.default.createElement("a", props);
  });
  if (true) {
    LinkAnchor.displayName = "LinkAnchor";
  }
  var Link = forwardRef(function(_ref2, forwardedRef) {
    var _ref2$component = _ref2.component, component10 = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to2 = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);
    return react2.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <Link> outside a <Router>") : void 0;
      var history3 = context2.history;
      var location2 = normalizeToLocation(resolveToLocation(to2, context2.location), context2.location);
      var href = location2 ? history3.createHref(location2) : "";
      var props = _extends({}, rest, {
        href,
        navigate: function navigate() {
          var location3 = resolveToLocation(to2, context2.location);
          var method = replace ? history3.replace : history3.push;
          method(location3);
        }
      });
      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react2.default.createElement(component10, props);
    });
  });
  if (true) {
    var toType = prop_types2.default.oneOfType([prop_types2.default.string, prop_types2.default.object, prop_types2.default.func]);
    var refType = prop_types2.default.oneOfType([prop_types2.default.string, prop_types2.default.func, prop_types2.default.shape({
      current: prop_types2.default.any
    })]);
    Link.displayName = "Link";
    Link.propTypes = {
      innerRef: refType,
      onClick: prop_types2.default.func,
      replace: prop_types2.default.bool,
      target: prop_types2.default.string,
      to: toType.isRequired
    };
  }
  var forwardRefShim$1 = function forwardRefShim2(C2) {
    return C2;
  };
  var forwardRef$1 = react2.default.forwardRef;
  if (typeof forwardRef$1 === "undefined") {
    forwardRef$1 = forwardRefShim$1;
  }
  function joinClassnames() {
    for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
      classnames[_key] = arguments[_key];
    }
    return classnames.filter(function(i2) {
      return i2;
    }).join(" ");
  }
  var NavLink = forwardRef$1(function(_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to2 = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
    return react2.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? tiny_invariant_esm_default(false, "You should not use <NavLink> outside a <Router>") : void 0;
      var currentLocation = locationProp || context2.location;
      var toLocation = normalizeToLocation(resolveToLocation(to2, currentLocation), currentLocation);
      var path = toLocation.pathname;
      var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
      var match = escapedPath ? matchPath(currentLocation.pathname, {
        path: escapedPath,
        exact,
        sensitive,
        strict
      }) : null;
      var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
      var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
      var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;
      var props = _extends({
        "aria-current": isActive && ariaCurrent || null,
        className,
        style,
        to: toLocation
      }, rest);
      if (forwardRefShim$1 !== forwardRef$1) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react2.default.createElement(Link, props);
    });
  });
  if (true) {
    NavLink.displayName = "NavLink";
    var ariaCurrentType = prop_types2.default.oneOf(["page", "step", "location", "date", "time", "true"]);
    NavLink.propTypes = _extends({}, Link.propTypes, {
      "aria-current": ariaCurrentType,
      activeClassName: prop_types2.default.string,
      activeStyle: prop_types2.default.object,
      className: prop_types2.default.string,
      exact: prop_types2.default.bool,
      isActive: prop_types2.default.func,
      location: prop_types2.default.object,
      sensitive: prop_types2.default.bool,
      strict: prop_types2.default.bool,
      style: prop_types2.default.object
    });
  }

  // src/components/MyInfo.js
  const react5 = __toModule(require_react());
  function MyInfo2() {
    return react5.default.createElement("div", null, react5.default.createElement("h1", null));
  }
  const MyInfo_default = MyInfo2;

  // node_modules/tslib/tslib.es6.js
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  function __extends(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign3(t2) {
      for (var s, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s = arguments[i2];
        for (var p2 in s)
          if (Object.prototype.hasOwnProperty.call(s, p2))
            t2[p2] = s[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __awaiter(thisArg, _arguments, P4, generator) {
    function adopt(value) {
      return value instanceof P4 ? value : new P4(function(resolve) {
        resolve(value);
      });
    }
    return new (P4 || (P4 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _2 = {label: 0, sent: function() {
      if (t2[0] & 1)
        throw t2[1];
      return t2[1];
    }, trys: [], ops: []}, f, y2, t2, g;
    return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_2)
        try {
          if (f = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _2.label++;
              return {value: op[1], done: false};
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t2[1]) {
                _2.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _2.label < t2[2]) {
                _2.label = t2[2];
                _2.ops.push(op);
                break;
              }
              if (t2[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e) {
          op = [6, e];
          y2 = 0;
        } finally {
          f = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return {value: op[0] ? op[1] : void 0, done: true};
    }
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i2 = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i2 >= o.length)
            o = void 0;
          return {value: o && o[i2++], done: !o};
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n2) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i2 = m.call(o), r2, ar2 = [], e;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
        ar2.push(r2.value);
    } catch (error) {
      e = {error};
    } finally {
      try {
        if (r2 && !r2.done && (m = i2["return"]))
          m.call(i2);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar2;
  }
  function __spread() {
    for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
      ar2 = ar2.concat(__read(arguments[i2]));
    return ar2;
  }
  function __spreadArrays() {
    for (var s = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
      s += arguments[i2].length;
    for (var r2 = Array(s), k3 = 0, i2 = 0; i2 < il; i2++)
      for (var a = arguments[i2], j2 = 0, jl = a.length; j2 < jl; j2++, k3++)
        r2[k3] = a[j2];
    return r2;
  }

  // node_modules/@firebase/util/dist/index.esm.js
  var CONSTANTS = {
    NODE_CLIENT: false,
    NODE_ADMIN: false,
    SDK_VERSION: "${JSCORE_VERSION}"
  };
  var assert = function(assertion, message) {
    if (!assertion) {
      throw assertionError(message);
    }
  };
  var assertionError = function(message) {
    return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
  };
  var stringToByteArray = function(str) {
    var out = [];
    var p2 = 0;
    for (var i2 = 0; i2 < str.length; i2++) {
      var c = str.charCodeAt(i2);
      if (c < 128) {
        out[p2++] = c;
      } else if (c < 2048) {
        out[p2++] = c >> 6 | 192;
        out[p2++] = c & 63 | 128;
      } else if ((c & 64512) === 55296 && i2 + 1 < str.length && (str.charCodeAt(i2 + 1) & 64512) === 56320) {
        c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i2) & 1023);
        out[p2++] = c >> 18 | 240;
        out[p2++] = c >> 12 & 63 | 128;
        out[p2++] = c >> 6 & 63 | 128;
        out[p2++] = c & 63 | 128;
      } else {
        out[p2++] = c >> 12 | 224;
        out[p2++] = c >> 6 & 63 | 128;
        out[p2++] = c & 63 | 128;
      }
    }
    return out;
  };
  var byteArrayToString = function(bytes) {
    var out = [];
    var pos = 0, c = 0;
    while (pos < bytes.length) {
      var c1 = bytes[pos++];
      if (c1 < 128) {
        out[c++] = String.fromCharCode(c1);
      } else if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else if (c1 > 239 && c1 < 365) {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        var c4 = bytes[pos++];
        var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
        out[c++] = String.fromCharCode(55296 + (u >> 10));
        out[c++] = String.fromCharCode(56320 + (u & 1023));
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
    return out.join("");
  };
  var base64 = {
    byteToCharMap_: null,
    charToByteMap_: null,
    byteToCharMapWebSafe_: null,
    charToByteMapWebSafe_: null,
    ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    get ENCODED_VALS() {
      return this.ENCODED_VALS_BASE + "+/=";
    },
    get ENCODED_VALS_WEBSAFE() {
      return this.ENCODED_VALS_BASE + "-_.";
    },
    HAS_NATIVE_SUPPORT: typeof atob === "function",
    encodeByteArray: function(input, webSafe) {
      if (!Array.isArray(input)) {
        throw Error("encodeByteArray takes an array as a parameter");
      }
      this.init_();
      var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
      var output = [];
      for (var i2 = 0; i2 < input.length; i2 += 3) {
        var byte1 = input[i2];
        var haveByte2 = i2 + 1 < input.length;
        var byte2 = haveByte2 ? input[i2 + 1] : 0;
        var haveByte3 = i2 + 2 < input.length;
        var byte3 = haveByte3 ? input[i2 + 2] : 0;
        var outByte1 = byte1 >> 2;
        var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
        var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
        var outByte4 = byte3 & 63;
        if (!haveByte3) {
          outByte4 = 64;
          if (!haveByte2) {
            outByte3 = 64;
          }
        }
        output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
      }
      return output.join("");
    },
    encodeString: function(input, webSafe) {
      if (this.HAS_NATIVE_SUPPORT && !webSafe) {
        return btoa(input);
      }
      return this.encodeByteArray(stringToByteArray(input), webSafe);
    },
    decodeString: function(input, webSafe) {
      if (this.HAS_NATIVE_SUPPORT && !webSafe) {
        return atob(input);
      }
      return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    decodeStringToByteArray: function(input, webSafe) {
      this.init_();
      var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
      var output = [];
      for (var i2 = 0; i2 < input.length; ) {
        var byte1 = charToByteMap[input.charAt(i2++)];
        var haveByte2 = i2 < input.length;
        var byte2 = haveByte2 ? charToByteMap[input.charAt(i2)] : 0;
        ++i2;
        var haveByte3 = i2 < input.length;
        var byte3 = haveByte3 ? charToByteMap[input.charAt(i2)] : 64;
        ++i2;
        var haveByte4 = i2 < input.length;
        var byte4 = haveByte4 ? charToByteMap[input.charAt(i2)] : 64;
        ++i2;
        if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
          throw Error();
        }
        var outByte1 = byte1 << 2 | byte2 >> 4;
        output.push(outByte1);
        if (byte3 !== 64) {
          var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
          output.push(outByte2);
          if (byte4 !== 64) {
            var outByte3 = byte3 << 6 & 192 | byte4;
            output.push(outByte3);
          }
        }
      }
      return output;
    },
    init_: function() {
      if (!this.byteToCharMap_) {
        this.byteToCharMap_ = {};
        this.charToByteMap_ = {};
        this.byteToCharMapWebSafe_ = {};
        this.charToByteMapWebSafe_ = {};
        for (var i2 = 0; i2 < this.ENCODED_VALS.length; i2++) {
          this.byteToCharMap_[i2] = this.ENCODED_VALS.charAt(i2);
          this.charToByteMap_[this.byteToCharMap_[i2]] = i2;
          this.byteToCharMapWebSafe_[i2] = this.ENCODED_VALS_WEBSAFE.charAt(i2);
          this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i2]] = i2;
          if (i2 >= this.ENCODED_VALS_BASE.length) {
            this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i2)] = i2;
            this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i2)] = i2;
          }
        }
      }
    }
  };
  var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
  };
  var base64Decode = function(str) {
    try {
      return base64.decodeString(str, true);
    } catch (e) {
      console.error("base64Decode failed: ", e);
    }
    return null;
  };
  function deepCopy(value) {
    return deepExtend(void 0, value);
  }
  function deepExtend(target, source) {
    if (!(source instanceof Object)) {
      return source;
    }
    switch (source.constructor) {
      case Date:
        var dateValue = source;
        return new Date(dateValue.getTime());
      case Object:
        if (target === void 0) {
          target = {};
        }
        break;
      case Array:
        target = [];
        break;
      default:
        return source;
    }
    for (var prop in source) {
      if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
        continue;
      }
      target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
  }
  function isValidKey(key2) {
    return key2 !== "__proto__";
  }
  var Deferred = function() {
    function Deferred2() {
      var _this = this;
      this.reject = function() {
      };
      this.resolve = function() {
      };
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
    }
    Deferred2.prototype.wrapCallback = function(callback) {
      var _this = this;
      return function(error, value) {
        if (error) {
          _this.reject(error);
        } else {
          _this.resolve(value);
        }
        if (typeof callback === "function") {
          _this.promise.catch(function() {
          });
          if (callback.length === 1) {
            callback(error);
          } else {
            callback(error, value);
          }
        }
      };
    };
    return Deferred2;
  }();
  function getUA() {
    if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
      return navigator["userAgent"];
    } else {
      return "";
    }
  }
  function isMobileCordova() {
    return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
  }
  function isNode() {
    try {
      return Object.prototype.toString.call(global.process) === "[object process]";
    } catch (e) {
      return false;
    }
  }
  function isBrowser() {
    return typeof self === "object" && self.self === self;
  }
  function isBrowserExtension() {
    var runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
    return typeof runtime === "object" && runtime.id !== void 0;
  }
  function isReactNative() {
    return typeof navigator === "object" && navigator["product"] === "ReactNative";
  }
  function isElectron() {
    return getUA().indexOf("Electron/") >= 0;
  }
  function isIE() {
    var ua3 = getUA();
    return ua3.indexOf("MSIE ") >= 0 || ua3.indexOf("Trident/") >= 0;
  }
  function isUWP() {
    return getUA().indexOf("MSAppHost/") >= 0;
  }
  function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
  }
  function isIndexedDBAvailable() {
    return "indexedDB" in self && indexedDB != null;
  }
  function validateIndexedDBOpenable() {
    return new Promise(function(resolve, reject) {
      try {
        var preExist_1 = true;
        var DB_CHECK_NAME_1 = "validate-browser-context-for-indexeddb-analytics-module";
        var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
        request_1.onsuccess = function() {
          request_1.result.close();
          if (!preExist_1) {
            window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
          }
          resolve(true);
        };
        request_1.onupgradeneeded = function() {
          preExist_1 = false;
        };
        request_1.onerror = function() {
          var _a9;
          reject(((_a9 = request_1.error) === null || _a9 === void 0 ? void 0 : _a9.message) || "");
        };
      } catch (error) {
        reject(error);
      }
    });
  }
  function areCookiesEnabled() {
    if (!navigator || !navigator.cookieEnabled) {
      return false;
    }
    return true;
  }
  var ERROR_NAME = "FirebaseError";
  var FirebaseError = function(_super) {
    __extends(FirebaseError2, _super);
    function FirebaseError2(code, message, customData) {
      var _this = _super.call(this, message) || this;
      _this.code = code;
      _this.customData = customData;
      _this.name = ERROR_NAME;
      Object.setPrototypeOf(_this, FirebaseError2.prototype);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, ErrorFactory.prototype.create);
      }
      return _this;
    }
    return FirebaseError2;
  }(Error);
  var ErrorFactory = function() {
    function ErrorFactory2(service, serviceName, errors) {
      this.service = service;
      this.serviceName = serviceName;
      this.errors = errors;
    }
    ErrorFactory2.prototype.create = function(code) {
      var data = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        data[_i2 - 1] = arguments[_i2];
      }
      var customData = data[0] || {};
      var fullCode = this.service + "/" + code;
      var template = this.errors[code];
      var message = template ? replaceTemplate(template, customData) : "Error";
      var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
      var error = new FirebaseError(fullCode, fullMessage, customData);
      return error;
    };
    return ErrorFactory2;
  }();
  function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_2, key2) {
      var value = data[key2];
      return value != null ? String(value) : "<" + key2 + "?>";
    });
  }
  var PATTERN = /\{\$([^}]+)}/g;
  function jsonEval(str) {
    return JSON.parse(str);
  }
  function stringify(data) {
    return JSON.stringify(data);
  }
  var decode = function(token) {
    var header = {}, claims = {}, data = {}, signature = "";
    try {
      var parts = token.split(".");
      header = jsonEval(base64Decode(parts[0]) || "");
      claims = jsonEval(base64Decode(parts[1]) || "");
      signature = parts[2];
      data = claims["d"] || {};
      delete claims["d"];
    } catch (e) {
    }
    return {
      header,
      claims,
      data,
      signature
    };
  };
  var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
  };
  var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === "object" && claims["admin"] === true;
  };
  function contains(obj, key2) {
    return Object.prototype.hasOwnProperty.call(obj, key2);
  }
  function safeGet(obj, key2) {
    if (Object.prototype.hasOwnProperty.call(obj, key2)) {
      return obj[key2];
    } else {
      return void 0;
    }
  }
  function isEmpty(obj) {
    for (var key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2)) {
        return false;
      }
    }
    return true;
  }
  function map(obj, fn2, contextObj) {
    var res = {};
    for (var key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2)) {
        res[key2] = fn2.call(contextObj, obj[key2], key2, obj);
      }
    }
    return res;
  }
  function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key3, value2) {
      if (Array.isArray(value2)) {
        value2.forEach(function(arrayVal) {
          params.push(encodeURIComponent(key3) + "=" + encodeURIComponent(arrayVal));
        });
      } else {
        params.push(encodeURIComponent(key3) + "=" + encodeURIComponent(value2));
      }
    };
    for (var _i2 = 0, _a9 = Object.entries(querystringParams); _i2 < _a9.length; _i2++) {
      var _b = _a9[_i2], key2 = _b[0], value = _b[1];
      _loop_1(key2, value);
    }
    return params.length ? "&" + params.join("&") : "";
  }
  var Sha1 = function() {
    function Sha12() {
      this.chain_ = [];
      this.buf_ = [];
      this.W_ = [];
      this.pad_ = [];
      this.inbuf_ = 0;
      this.total_ = 0;
      this.blockSize = 512 / 8;
      this.pad_[0] = 128;
      for (var i2 = 1; i2 < this.blockSize; ++i2) {
        this.pad_[i2] = 0;
      }
      this.reset();
    }
    Sha12.prototype.reset = function() {
      this.chain_[0] = 1732584193;
      this.chain_[1] = 4023233417;
      this.chain_[2] = 2562383102;
      this.chain_[3] = 271733878;
      this.chain_[4] = 3285377520;
      this.inbuf_ = 0;
      this.total_ = 0;
    };
    Sha12.prototype.compress_ = function(buf, offset) {
      if (!offset) {
        offset = 0;
      }
      var W3 = this.W_;
      if (typeof buf === "string") {
        for (var i2 = 0; i2 < 16; i2++) {
          W3[i2] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
          offset += 4;
        }
      } else {
        for (var i2 = 0; i2 < 16; i2++) {
          W3[i2] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
          offset += 4;
        }
      }
      for (var i2 = 16; i2 < 80; i2++) {
        var t2 = W3[i2 - 3] ^ W3[i2 - 8] ^ W3[i2 - 14] ^ W3[i2 - 16];
        W3[i2] = (t2 << 1 | t2 >>> 31) & 4294967295;
      }
      var a = this.chain_[0];
      var b = this.chain_[1];
      var c = this.chain_[2];
      var d = this.chain_[3];
      var e = this.chain_[4];
      var f, k3;
      for (var i2 = 0; i2 < 80; i2++) {
        if (i2 < 40) {
          if (i2 < 20) {
            f = d ^ b & (c ^ d);
            k3 = 1518500249;
          } else {
            f = b ^ c ^ d;
            k3 = 1859775393;
          }
        } else {
          if (i2 < 60) {
            f = b & c | d & (b | c);
            k3 = 2400959708;
          } else {
            f = b ^ c ^ d;
            k3 = 3395469782;
          }
        }
        var t2 = (a << 5 | a >>> 27) + f + e + k3 + W3[i2] & 4294967295;
        e = d;
        d = c;
        c = (b << 30 | b >>> 2) & 4294967295;
        b = a;
        a = t2;
      }
      this.chain_[0] = this.chain_[0] + a & 4294967295;
      this.chain_[1] = this.chain_[1] + b & 4294967295;
      this.chain_[2] = this.chain_[2] + c & 4294967295;
      this.chain_[3] = this.chain_[3] + d & 4294967295;
      this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha12.prototype.update = function(bytes, length) {
      if (bytes == null) {
        return;
      }
      if (length === void 0) {
        length = bytes.length;
      }
      var lengthMinusBlock = length - this.blockSize;
      var n2 = 0;
      var buf = this.buf_;
      var inbuf = this.inbuf_;
      while (n2 < length) {
        if (inbuf === 0) {
          while (n2 <= lengthMinusBlock) {
            this.compress_(bytes, n2);
            n2 += this.blockSize;
          }
        }
        if (typeof bytes === "string") {
          while (n2 < length) {
            buf[inbuf] = bytes.charCodeAt(n2);
            ++inbuf;
            ++n2;
            if (inbuf === this.blockSize) {
              this.compress_(buf);
              inbuf = 0;
              break;
            }
          }
        } else {
          while (n2 < length) {
            buf[inbuf] = bytes[n2];
            ++inbuf;
            ++n2;
            if (inbuf === this.blockSize) {
              this.compress_(buf);
              inbuf = 0;
              break;
            }
          }
        }
      }
      this.inbuf_ = inbuf;
      this.total_ += length;
    };
    Sha12.prototype.digest = function() {
      var digest = [];
      var totalBits = this.total_ * 8;
      if (this.inbuf_ < 56) {
        this.update(this.pad_, 56 - this.inbuf_);
      } else {
        this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
      }
      for (var i2 = this.blockSize - 1; i2 >= 56; i2--) {
        this.buf_[i2] = totalBits & 255;
        totalBits /= 256;
      }
      this.compress_(this.buf_);
      var n2 = 0;
      for (var i2 = 0; i2 < 5; i2++) {
        for (var j2 = 24; j2 >= 0; j2 -= 8) {
          digest[n2] = this.chain_[i2] >> j2 & 255;
          ++n2;
        }
      }
      return digest;
    };
    return Sha12;
  }();
  function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
  }
  var ObserverProxy = function() {
    function ObserverProxy2(executor, onNoObservers) {
      var _this = this;
      this.observers = [];
      this.unsubscribes = [];
      this.observerCount = 0;
      this.task = Promise.resolve();
      this.finalized = false;
      this.onNoObservers = onNoObservers;
      this.task.then(function() {
        executor(_this);
      }).catch(function(e) {
        _this.error(e);
      });
    }
    ObserverProxy2.prototype.next = function(value) {
      this.forEachObserver(function(observer) {
        observer.next(value);
      });
    };
    ObserverProxy2.prototype.error = function(error) {
      this.forEachObserver(function(observer) {
        observer.error(error);
      });
      this.close(error);
    };
    ObserverProxy2.prototype.complete = function() {
      this.forEachObserver(function(observer) {
        observer.complete();
      });
      this.close();
    };
    ObserverProxy2.prototype.subscribe = function(nextOrObserver, error, complete) {
      var _this = this;
      var observer;
      if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {
        throw new Error("Missing Observer.");
      }
      if (implementsAnyMethods(nextOrObserver, [
        "next",
        "error",
        "complete"
      ])) {
        observer = nextOrObserver;
      } else {
        observer = {
          next: nextOrObserver,
          error,
          complete
        };
      }
      if (observer.next === void 0) {
        observer.next = noop;
      }
      if (observer.error === void 0) {
        observer.error = noop;
      }
      if (observer.complete === void 0) {
        observer.complete = noop;
      }
      var unsub = this.unsubscribeOne.bind(this, this.observers.length);
      if (this.finalized) {
        this.task.then(function() {
          try {
            if (_this.finalError) {
              observer.error(_this.finalError);
            } else {
              observer.complete();
            }
          } catch (e) {
          }
          return;
        });
      }
      this.observers.push(observer);
      return unsub;
    };
    ObserverProxy2.prototype.unsubscribeOne = function(i2) {
      if (this.observers === void 0 || this.observers[i2] === void 0) {
        return;
      }
      delete this.observers[i2];
      this.observerCount -= 1;
      if (this.observerCount === 0 && this.onNoObservers !== void 0) {
        this.onNoObservers(this);
      }
    };
    ObserverProxy2.prototype.forEachObserver = function(fn2) {
      if (this.finalized) {
        return;
      }
      for (var i2 = 0; i2 < this.observers.length; i2++) {
        this.sendOne(i2, fn2);
      }
    };
    ObserverProxy2.prototype.sendOne = function(i2, fn2) {
      var _this = this;
      this.task.then(function() {
        if (_this.observers !== void 0 && _this.observers[i2] !== void 0) {
          try {
            fn2(_this.observers[i2]);
          } catch (e) {
            if (typeof console !== "undefined" && console.error) {
              console.error(e);
            }
          }
        }
      });
    };
    ObserverProxy2.prototype.close = function(err) {
      var _this = this;
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      if (err !== void 0) {
        this.finalError = err;
      }
      this.task.then(function() {
        _this.observers = void 0;
        _this.onNoObservers = void 0;
      });
    };
    return ObserverProxy2;
  }();
  function implementsAnyMethods(obj, methods) {
    if (typeof obj !== "object" || obj === null) {
      return false;
    }
    for (var _i2 = 0, methods_1 = methods; _i2 < methods_1.length; _i2++) {
      var method = methods_1[_i2];
      if (method in obj && typeof obj[method] === "function") {
        return true;
      }
    }
    return false;
  }
  function noop() {
  }
  var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) {
      argError = "at least " + minCount;
    } else if (argCount > maxCount) {
      argError = maxCount === 0 ? "none" : "no more than " + maxCount;
    }
    if (argError) {
      var error = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
      throw new Error(error);
    }
  };
  function errorPrefix(fnName, argumentNumber, optional) {
    var argName = "";
    switch (argumentNumber) {
      case 1:
        argName = optional ? "first" : "First";
        break;
      case 2:
        argName = optional ? "second" : "Second";
        break;
      case 3:
        argName = optional ? "third" : "Third";
        break;
      case 4:
        argName = optional ? "fourth" : "Fourth";
        break;
      default:
        throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?");
    }
    var error = fnName + " failed: ";
    error += argName + " argument ";
    return error;
  }
  function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback) {
      return;
    }
    if (typeof callback !== "function") {
      throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid function.");
    }
  }
  function validateContextObject(fnName, argumentNumber, context2, optional) {
    if (optional && !context2) {
      return;
    }
    if (typeof context2 !== "object" || context2 === null) {
      throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid context object.");
    }
  }
  var stringToByteArray$1 = function(str) {
    var out = [];
    var p2 = 0;
    for (var i2 = 0; i2 < str.length; i2++) {
      var c = str.charCodeAt(i2);
      if (c >= 55296 && c <= 56319) {
        var high = c - 55296;
        i2++;
        assert(i2 < str.length, "Surrogate pair missing trail surrogate.");
        var low = str.charCodeAt(i2) - 56320;
        c = 65536 + (high << 10) + low;
      }
      if (c < 128) {
        out[p2++] = c;
      } else if (c < 2048) {
        out[p2++] = c >> 6 | 192;
        out[p2++] = c & 63 | 128;
      } else if (c < 65536) {
        out[p2++] = c >> 12 | 224;
        out[p2++] = c >> 6 & 63 | 128;
        out[p2++] = c & 63 | 128;
      } else {
        out[p2++] = c >> 18 | 240;
        out[p2++] = c >> 12 & 63 | 128;
        out[p2++] = c >> 6 & 63 | 128;
        out[p2++] = c & 63 | 128;
      }
    }
    return out;
  };
  var stringLength = function(str) {
    var p2 = 0;
    for (var i2 = 0; i2 < str.length; i2++) {
      var c = str.charCodeAt(i2);
      if (c < 128) {
        p2++;
      } else if (c < 2048) {
        p2 += 2;
      } else if (c >= 55296 && c <= 56319) {
        p2 += 4;
        i2++;
      } else {
        p2 += 3;
      }
    }
    return p2;
  };
  var DEFAULT_INTERVAL_MILLIS = 1e3;
  var DEFAULT_BACKOFF_FACTOR = 2;
  var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
  var RANDOM_FACTOR = 0.5;
  function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
    if (intervalMillis === void 0) {
      intervalMillis = DEFAULT_INTERVAL_MILLIS;
    }
    if (backoffFactor === void 0) {
      backoffFactor = DEFAULT_BACKOFF_FACTOR;
    }
    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    var randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
  }

  // node_modules/@firebase/component/dist/index.esm.js
  var Component = function() {
    function Component4(name9, instanceFactory, type) {
      this.name = name9;
      this.instanceFactory = instanceFactory;
      this.type = type;
      this.multipleInstances = false;
      this.serviceProps = {};
      this.instantiationMode = "LAZY";
    }
    Component4.prototype.setInstantiationMode = function(mode) {
      this.instantiationMode = mode;
      return this;
    };
    Component4.prototype.setMultipleInstances = function(multipleInstances) {
      this.multipleInstances = multipleInstances;
      return this;
    };
    Component4.prototype.setServiceProps = function(props) {
      this.serviceProps = props;
      return this;
    };
    return Component4;
  }();
  var DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
  var Provider = function() {
    function Provider2(name9, container) {
      this.name = name9;
      this.container = container;
      this.component = null;
      this.instances = new Map();
      this.instancesDeferred = new Map();
    }
    Provider2.prototype.get = function(identifier) {
      if (identifier === void 0) {
        identifier = DEFAULT_ENTRY_NAME2;
      }
      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
      if (!this.instancesDeferred.has(normalizedIdentifier)) {
        var deferred = new Deferred();
        this.instancesDeferred.set(normalizedIdentifier, deferred);
        try {
          var instance = this.getOrInitializeService(normalizedIdentifier);
          if (instance) {
            deferred.resolve(instance);
          }
        } catch (e) {
        }
      }
      return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider2.prototype.getImmediate = function(options) {
      var _a9 = __assign({identifier: DEFAULT_ENTRY_NAME2, optional: false}, options), identifier = _a9.identifier, optional = _a9.optional;
      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
      try {
        var instance = this.getOrInitializeService(normalizedIdentifier);
        if (!instance) {
          if (optional) {
            return null;
          }
          throw Error("Service " + this.name + " is not available");
        }
        return instance;
      } catch (e) {
        if (optional) {
          return null;
        } else {
          throw e;
        }
      }
    };
    Provider2.prototype.getComponent = function() {
      return this.component;
    };
    Provider2.prototype.setComponent = function(component10) {
      var e_1, _a9;
      if (component10.name !== this.name) {
        throw Error("Mismatching Component " + component10.name + " for Provider " + this.name + ".");
      }
      if (this.component) {
        throw Error("Component for " + this.name + " has already been provided");
      }
      this.component = component10;
      if (isComponentEager(component10)) {
        try {
          this.getOrInitializeService(DEFAULT_ENTRY_NAME2);
        } catch (e) {
        }
      }
      try {
        for (var _b = __values(this.instancesDeferred.entries()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var _d = __read(_c2.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
          var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            instanceDeferred.resolve(instance);
          } catch (e) {
          }
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    Provider2.prototype.clearInstance = function(identifier) {
      if (identifier === void 0) {
        identifier = DEFAULT_ENTRY_NAME2;
      }
      this.instancesDeferred.delete(identifier);
      this.instances.delete(identifier);
    };
    Provider2.prototype.delete = function() {
      return __awaiter(this, void 0, void 0, function() {
        var services;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              services = Array.from(this.instances.values());
              return [4, Promise.all(__spread(services.filter(function(service) {
                return "INTERNAL" in service;
              }).map(function(service) {
                return service.INTERNAL.delete();
              }), services.filter(function(service) {
                return "_delete" in service;
              }).map(function(service) {
                return service._delete();
              })))];
            case 1:
              _a9.sent();
              return [2];
          }
        });
      });
    };
    Provider2.prototype.isComponentSet = function() {
      return this.component != null;
    };
    Provider2.prototype.getOrInitializeService = function(identifier) {
      var instance = this.instances.get(identifier);
      if (!instance && this.component) {
        instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
        this.instances.set(identifier, instance);
      }
      return instance || null;
    };
    Provider2.prototype.normalizeInstanceIdentifier = function(identifier) {
      if (this.component) {
        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME2;
      } else {
        return identifier;
      }
    };
    return Provider2;
  }();
  function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME2 ? void 0 : identifier;
  }
  function isComponentEager(component10) {
    return component10.instantiationMode === "EAGER";
  }
  var ComponentContainer = function() {
    function ComponentContainer2(name9) {
      this.name = name9;
      this.providers = new Map();
    }
    ComponentContainer2.prototype.addComponent = function(component10) {
      var provider = this.getProvider(component10.name);
      if (provider.isComponentSet()) {
        throw new Error("Component " + component10.name + " has already been registered with " + this.name);
      }
      provider.setComponent(component10);
    };
    ComponentContainer2.prototype.addOrOverwriteComponent = function(component10) {
      var provider = this.getProvider(component10.name);
      if (provider.isComponentSet()) {
        this.providers.delete(component10.name);
      }
      this.addComponent(component10);
    };
    ComponentContainer2.prototype.getProvider = function(name9) {
      if (this.providers.has(name9)) {
        return this.providers.get(name9);
      }
      var provider = new Provider(name9, this);
      this.providers.set(name9, provider);
      return provider;
    };
    ComponentContainer2.prototype.getProviders = function() {
      return Array.from(this.providers.values());
    };
    return ComponentContainer2;
  }();

  // node_modules/@firebase/logger/dist/index.esm.js
  function __spreadArrays2() {
    for (var s = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
      s += arguments[i2].length;
    for (var r2 = Array(s), k3 = 0, i2 = 0; i2 < il; i2++)
      for (var a = arguments[i2], j2 = 0, jl = a.length; j2 < jl; j2++, k3++)
        r2[k3] = a[j2];
    return r2;
  }
  var _a5;
  var instances = [];
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
    LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
    LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
    LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
    LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
    LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
  })(LogLevel || (LogLevel = {}));
  var levelStringToEnum = {
    debug: LogLevel.DEBUG,
    verbose: LogLevel.VERBOSE,
    info: LogLevel.INFO,
    warn: LogLevel.WARN,
    error: LogLevel.ERROR,
    silent: LogLevel.SILENT
  };
  var defaultLogLevel = LogLevel.INFO;
  var ConsoleMethod = (_a5 = {}, _a5[LogLevel.DEBUG] = "log", _a5[LogLevel.VERBOSE] = "log", _a5[LogLevel.INFO] = "info", _a5[LogLevel.WARN] = "warn", _a5[LogLevel.ERROR] = "error", _a5);
  var defaultLogHandler = function(instance, logType) {
    var args = [];
    for (var _i2 = 2; _i2 < arguments.length; _i2++) {
      args[_i2 - 2] = arguments[_i2];
    }
    if (logType < instance.logLevel) {
      return;
    }
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) {
      console[method].apply(console, __spreadArrays2(["[" + now + "]  " + instance.name + ":"], args));
    } else {
      throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
  };
  var Logger = function() {
    function Logger2(name9) {
      this.name = name9;
      this._logLevel = defaultLogLevel;
      this._logHandler = defaultLogHandler;
      this._userLogHandler = null;
      instances.push(this);
    }
    Object.defineProperty(Logger2.prototype, "logLevel", {
      get: function() {
        return this._logLevel;
      },
      set: function(val) {
        if (!(val in LogLevel)) {
          throw new TypeError('Invalid value "' + val + '" assigned to `logLevel`');
        }
        this._logLevel = val;
      },
      enumerable: false,
      configurable: true
    });
    Logger2.prototype.setLogLevel = function(val) {
      this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger2.prototype, "logHandler", {
      get: function() {
        return this._logHandler;
      },
      set: function(val) {
        if (typeof val !== "function") {
          throw new TypeError("Value assigned to `logHandler` must be a function");
        }
        this._logHandler = val;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Logger2.prototype, "userLogHandler", {
      get: function() {
        return this._userLogHandler;
      },
      set: function(val) {
        this._userLogHandler = val;
      },
      enumerable: false,
      configurable: true
    });
    Logger2.prototype.debug = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays2([this, LogLevel.DEBUG], args));
      this._logHandler.apply(this, __spreadArrays2([this, LogLevel.DEBUG], args));
    };
    Logger2.prototype.log = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays2([this, LogLevel.VERBOSE], args));
      this._logHandler.apply(this, __spreadArrays2([this, LogLevel.VERBOSE], args));
    };
    Logger2.prototype.info = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays2([this, LogLevel.INFO], args));
      this._logHandler.apply(this, __spreadArrays2([this, LogLevel.INFO], args));
    };
    Logger2.prototype.warn = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays2([this, LogLevel.WARN], args));
      this._logHandler.apply(this, __spreadArrays2([this, LogLevel.WARN], args));
    };
    Logger2.prototype.error = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays2([this, LogLevel.ERROR], args));
      this._logHandler.apply(this, __spreadArrays2([this, LogLevel.ERROR], args));
    };
    return Logger2;
  }();
  function setLogLevel(level) {
    instances.forEach(function(inst) {
      inst.setLogLevel(level);
    });
  }
  function setUserLogHandler(logCallback, options) {
    var _loop_1 = function(instance2) {
      var customLogLevel = null;
      if (options && options.level) {
        customLogLevel = levelStringToEnum[options.level];
      }
      if (logCallback === null) {
        instance2.userLogHandler = null;
      } else {
        instance2.userLogHandler = function(instance3, level) {
          var args = [];
          for (var _i3 = 2; _i3 < arguments.length; _i3++) {
            args[_i3 - 2] = arguments[_i3];
          }
          var message = args.map(function(arg) {
            if (arg == null) {
              return null;
            } else if (typeof arg === "string") {
              return arg;
            } else if (typeof arg === "number" || typeof arg === "boolean") {
              return arg.toString();
            } else if (arg instanceof Error) {
              return arg.message;
            } else {
              try {
                return JSON.stringify(arg);
              } catch (ignored) {
                return null;
              }
            }
          }).filter(function(arg) {
            return arg;
          }).join(" ");
          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance3.logLevel)) {
            logCallback({
              level: LogLevel[level].toLowerCase(),
              message,
              args,
              type: instance3.name
            });
          }
        };
      }
    };
    for (var _i2 = 0, instances_1 = instances; _i2 < instances_1.length; _i2++) {
      var instance = instances_1[_i2];
      _loop_1(instance);
    }
  }

  // node_modules/@firebase/app/dist/index.esm.js
  var _a2;
  var ERRORS2 = (_a2 = {}, _a2["no-app"] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a2["bad-app-name"] = "Illegal App name: '{$appName}", _a2["duplicate-app"] = "Firebase App named '{$appName}' already exists", _a2["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a2["invalid-app-argument"] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a2["invalid-log-argument"] = "First argument to `onLog` must be null or a function.", _a2);
  var ERROR_FACTORY2 = new ErrorFactory("app", "Firebase", ERRORS2);
  var name$1 = "@firebase/app";
  var version2 = "0.6.13";
  var name$2 = "@firebase/analytics";
  var name$3 = "@firebase/auth";
  var name$4 = "@firebase/database";
  var name$5 = "@firebase/functions";
  var name$6 = "@firebase/installations";
  var name$7 = "@firebase/messaging";
  var name$8 = "@firebase/performance";
  var name$9 = "@firebase/remote-config";
  var name$a = "@firebase/storage";
  var name$b = "@firebase/firestore";
  var name$c = "firebase-wrapper";
  var _a$1;
  var DEFAULT_ENTRY_NAME = "[DEFAULT]";
  var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$1] = "fire-core", _a$1[name$2] = "fire-analytics", _a$1[name$3] = "fire-auth", _a$1[name$4] = "fire-rtdb", _a$1[name$5] = "fire-fn", _a$1[name$6] = "fire-iid", _a$1[name$7] = "fire-fcm", _a$1[name$8] = "fire-perf", _a$1[name$9] = "fire-rc", _a$1[name$a] = "fire-gcs", _a$1[name$b] = "fire-fst", _a$1["fire-js"] = "fire-js", _a$1[name$c] = "fire-js-all", _a$1);
  var logger4 = new Logger("@firebase/app");
  var FirebaseAppImpl = function() {
    function FirebaseAppImpl2(options, config2, firebase_) {
      var e_1, _a9;
      var _this = this;
      this.firebase_ = firebase_;
      this.isDeleted_ = false;
      this.name_ = config2.name;
      this.automaticDataCollectionEnabled_ = config2.automaticDataCollectionEnabled || false;
      this.options_ = deepCopy(options);
      this.container = new ComponentContainer(config2.name);
      this._addComponent(new Component("app", function() {
        return _this;
      }, "PUBLIC"));
      try {
        for (var _b = __values(this.firebase_.INTERNAL.components.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var component10 = _c2.value;
          this._addComponent(component10);
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
    Object.defineProperty(FirebaseAppImpl2.prototype, "automaticDataCollectionEnabled", {
      get: function() {
        this.checkDestroyed_();
        return this.automaticDataCollectionEnabled_;
      },
      set: function(val) {
        this.checkDestroyed_();
        this.automaticDataCollectionEnabled_ = val;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FirebaseAppImpl2.prototype, "name", {
      get: function() {
        this.checkDestroyed_();
        return this.name_;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FirebaseAppImpl2.prototype, "options", {
      get: function() {
        this.checkDestroyed_();
        return this.options_;
      },
      enumerable: false,
      configurable: true
    });
    FirebaseAppImpl2.prototype.delete = function() {
      var _this = this;
      return new Promise(function(resolve) {
        _this.checkDestroyed_();
        resolve();
      }).then(function() {
        _this.firebase_.INTERNAL.removeApp(_this.name_);
        return Promise.all(_this.container.getProviders().map(function(provider) {
          return provider.delete();
        }));
      }).then(function() {
        _this.isDeleted_ = true;
      });
    };
    FirebaseAppImpl2.prototype._getService = function(name9, instanceIdentifier) {
      if (instanceIdentifier === void 0) {
        instanceIdentifier = DEFAULT_ENTRY_NAME;
      }
      this.checkDestroyed_();
      return this.container.getProvider(name9).getImmediate({
        identifier: instanceIdentifier
      });
    };
    FirebaseAppImpl2.prototype._removeServiceInstance = function(name9, instanceIdentifier) {
      if (instanceIdentifier === void 0) {
        instanceIdentifier = DEFAULT_ENTRY_NAME;
      }
      this.container.getProvider(name9).clearInstance(instanceIdentifier);
    };
    FirebaseAppImpl2.prototype._addComponent = function(component10) {
      try {
        this.container.addComponent(component10);
      } catch (e) {
        logger4.debug("Component " + component10.name + " failed to register with FirebaseApp " + this.name, e);
      }
    };
    FirebaseAppImpl2.prototype._addOrOverwriteComponent = function(component10) {
      this.container.addOrOverwriteComponent(component10);
    };
    FirebaseAppImpl2.prototype.checkDestroyed_ = function() {
      if (this.isDeleted_) {
        throw ERROR_FACTORY2.create("app-deleted", {appName: this.name_});
      }
    };
    return FirebaseAppImpl2;
  }();
  FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log("dc");
  var version$1 = "8.0.1";
  function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {};
    var components = new Map();
    var namespace = {
      __esModule: true,
      initializeApp: initializeApp2,
      app: app12,
      registerVersion,
      setLogLevel,
      onLog,
      apps: null,
      SDK_VERSION: version$1,
      INTERNAL: {
        registerComponent,
        removeApp,
        components,
        useAsService
      }
    };
    namespace["default"] = namespace;
    Object.defineProperty(namespace, "apps", {
      get: getApps
    });
    function removeApp(name9) {
      delete apps[name9];
    }
    function app12(name9) {
      name9 = name9 || DEFAULT_ENTRY_NAME;
      if (!contains(apps, name9)) {
        throw ERROR_FACTORY2.create("no-app", {appName: name9});
      }
      return apps[name9];
    }
    app12["App"] = firebaseAppImpl;
    function initializeApp2(options, rawConfig) {
      if (rawConfig === void 0) {
        rawConfig = {};
      }
      if (typeof rawConfig !== "object" || rawConfig === null) {
        var name_1 = rawConfig;
        rawConfig = {name: name_1};
      }
      var config2 = rawConfig;
      if (config2.name === void 0) {
        config2.name = DEFAULT_ENTRY_NAME;
      }
      var name9 = config2.name;
      if (typeof name9 !== "string" || !name9) {
        throw ERROR_FACTORY2.create("bad-app-name", {
          appName: String(name9)
        });
      }
      if (contains(apps, name9)) {
        throw ERROR_FACTORY2.create("duplicate-app", {appName: name9});
      }
      var app13 = new firebaseAppImpl(options, config2, namespace);
      apps[name9] = app13;
      return app13;
    }
    function getApps() {
      return Object.keys(apps).map(function(name9) {
        return apps[name9];
      });
    }
    function registerComponent(component10) {
      var e_1, _a9;
      var componentName = component10.name;
      if (components.has(componentName)) {
        logger4.debug("There were multiple attempts to register component " + componentName + ".");
        return component10.type === "PUBLIC" ? namespace[componentName] : null;
      }
      components.set(componentName, component10);
      if (component10.type === "PUBLIC") {
        var serviceNamespace = function(appArg) {
          if (appArg === void 0) {
            appArg = app12();
          }
          if (typeof appArg[componentName] !== "function") {
            throw ERROR_FACTORY2.create("invalid-app-argument", {
              appName: componentName
            });
          }
          return appArg[componentName]();
        };
        if (component10.serviceProps !== void 0) {
          deepExtend(serviceNamespace, component10.serviceProps);
        }
        namespace[componentName] = serviceNamespace;
        firebaseAppImpl.prototype[componentName] = function() {
          var args = [];
          for (var _i2 = 0; _i2 < arguments.length; _i2++) {
            args[_i2] = arguments[_i2];
          }
          var serviceFxn = this._getService.bind(this, componentName);
          return serviceFxn.apply(this, component10.multipleInstances ? args : []);
        };
      }
      try {
        for (var _b = __values(Object.keys(apps)), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var appName = _c2.value;
          apps[appName]._addComponent(component10);
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return component10.type === "PUBLIC" ? namespace[componentName] : null;
    }
    function registerVersion(libraryKeyOrName, version9, variant) {
      var _a9;
      var library = (_a9 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a9 !== void 0 ? _a9 : libraryKeyOrName;
      if (variant) {
        library += "-" + variant;
      }
      var libraryMismatch = library.match(/\s|\//);
      var versionMismatch = version9.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        var warning2 = [
          'Unable to register library "' + library + '" with version "' + version9 + '":'
        ];
        if (libraryMismatch) {
          warning2.push('library name "' + library + '" contains illegal characters (whitespace or "/")');
        }
        if (libraryMismatch && versionMismatch) {
          warning2.push("and");
        }
        if (versionMismatch) {
          warning2.push('version name "' + version9 + '" contains illegal characters (whitespace or "/")');
        }
        logger4.warn(warning2.join(" "));
        return;
      }
      registerComponent(new Component(library + "-version", function() {
        return {library, version: version9};
      }, "VERSION"));
    }
    function onLog(logCallback, options) {
      if (logCallback !== null && typeof logCallback !== "function") {
        throw ERROR_FACTORY2.create("invalid-log-argument", {
          appName: name
        });
      }
      setUserLogHandler(logCallback, options);
    }
    function useAsService(app13, name9) {
      if (name9 === "serverAuth") {
        return null;
      }
      var useService = name9;
      return useService;
    }
    return namespace;
  }
  function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = __assign(__assign({}, namespace.INTERNAL), {
      createFirebaseNamespace,
      extendNamespace,
      createSubscribe,
      ErrorFactory,
      deepExtend
    });
    function extendNamespace(props) {
      deepExtend(namespace, props);
    }
    return namespace;
  }
  var firebase = createFirebaseNamespace();
  var PlatformLoggerService = function() {
    function PlatformLoggerService2(container) {
      this.container = container;
    }
    PlatformLoggerService2.prototype.getPlatformInfoString = function() {
      var providers = this.container.getProviders();
      return providers.map(function(provider) {
        if (isVersionServiceProvider(provider)) {
          var service = provider.getImmediate();
          return service.library + "/" + service.version;
        } else {
          return null;
        }
      }).filter(function(logString) {
        return logString;
      }).join(" ");
    };
    return PlatformLoggerService2;
  }();
  function isVersionServiceProvider(provider) {
    var component10 = provider.getComponent();
    return (component10 === null || component10 === void 0 ? void 0 : component10.type) === "VERSION";
  }
  function registerCoreComponents(firebase3, variant) {
    firebase3.INTERNAL.registerComponent(new Component("platform-logger", function(container) {
      return new PlatformLoggerService(container);
    }, "PRIVATE"));
    firebase3.registerVersion(name$1, version2, variant);
    firebase3.registerVersion("fire-js", "");
  }
  if (isBrowser() && self.firebase !== void 0) {
    logger4.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf("LITE") >= 0) {
      logger4.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
    }
  }
  var initializeApp = firebase.initializeApp;
  firebase.initializeApp = function() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    if (isNode()) {
      logger4.warn(`
      Warning: This is a browser-targeted Firebase bundle but it appears it is being
      run in a Node environment.  If running in a Node environment, make sure you
      are using the bundle specified by the "main" field in package.json.
      
      If you are using Webpack, you can specify "main" as the first item in
      "resolve.mainFields":
      https://webpack.js.org/configuration/resolve/#resolvemainfields
      
      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"
      as the first item in "mainFields", e.g. ['main', 'module'].
      https://github.com/rollup/@rollup/plugin-node-resolve
      `);
    }
    return initializeApp.apply(void 0, args);
  };
  var firebase$1 = firebase;
  registerCoreComponents(firebase$1);
  const index_esm_default = firebase$1;

  // node_modules/@firebase/auth/dist/auth.esm.js
  (function() {
    var k3, aa3 = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
      a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    };
    function ba3(a) {
      a = ["object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global, a];
      for (var b = 0; b < a.length; ++b) {
        var c = a[b];
        if (c && c.Math == Math)
          return c;
      }
      return globalThis;
    }
    var ca3 = ba3(this);
    function da3(a, b) {
      if (b) {
        var c = ca3;
        a = a.split(".");
        for (var d = 0; d < a.length - 1; d++) {
          var e = a[d];
          e in c || (c[e] = {});
          c = c[e];
        }
        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d && null != b && aa3(c, a, {configurable: true, writable: true, value: b});
      }
    }
    function ea3(a) {
      var b = 0;
      return function() {
        return b < a.length ? {done: false, value: a[b++]} : {done: true};
      };
    }
    function fa3(a) {
      var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
      return b ? b.call(a) : {next: ea3(a)};
    }
    da3("Promise", function(a) {
      function b(g) {
        this.b = 0;
        this.c = void 0;
        this.a = [];
        var h2 = this.f();
        try {
          g(h2.resolve, h2.reject);
        } catch (n2) {
          h2.reject(n2);
        }
      }
      function c() {
        this.a = null;
      }
      function d(g) {
        return g instanceof b ? g : new b(function(h2) {
          h2(g);
        });
      }
      if (a)
        return a;
      c.prototype.b = function(g) {
        if (null == this.a) {
          this.a = [];
          var h2 = this;
          this.c(function() {
            h2.g();
          });
        }
        this.a.push(g);
      };
      var e = ca3.setTimeout;
      c.prototype.c = function(g) {
        e(g, 0);
      };
      c.prototype.g = function() {
        for (; this.a && this.a.length; ) {
          var g = this.a;
          this.a = [];
          for (var h2 = 0; h2 < g.length; ++h2) {
            var n2 = g[h2];
            g[h2] = null;
            try {
              n2();
            } catch (p2) {
              this.f(p2);
            }
          }
        }
        this.a = null;
      };
      c.prototype.f = function(g) {
        this.c(function() {
          throw g;
        });
      };
      b.prototype.f = function() {
        function g(p2) {
          return function(v2) {
            n2 || (n2 = true, p2.call(h2, v2));
          };
        }
        var h2 = this, n2 = false;
        return {resolve: g(this.m), reject: g(this.g)};
      };
      b.prototype.m = function(g) {
        if (g === this)
          this.g(new TypeError("A Promise cannot resolve to itself"));
        else if (g instanceof b)
          this.s(g);
        else {
          a:
            switch (typeof g) {
              case "object":
                var h2 = null != g;
                break a;
              case "function":
                h2 = true;
                break a;
              default:
                h2 = false;
            }
          h2 ? this.v(g) : this.h(g);
        }
      };
      b.prototype.v = function(g) {
        var h2 = void 0;
        try {
          h2 = g.then;
        } catch (n2) {
          this.g(n2);
          return;
        }
        "function" == typeof h2 ? this.u(h2, g) : this.h(g);
      };
      b.prototype.g = function(g) {
        this.i(2, g);
      };
      b.prototype.h = function(g) {
        this.i(1, g);
      };
      b.prototype.i = function(g, h2) {
        if (0 != this.b)
          throw Error("Cannot settle(" + g + ", " + h2 + "): Promise already settled in state" + this.b);
        this.b = g;
        this.c = h2;
        this.l();
      };
      b.prototype.l = function() {
        if (null != this.a) {
          for (var g = 0; g < this.a.length; ++g)
            f.b(this.a[g]);
          this.a = null;
        }
      };
      var f = new c();
      b.prototype.s = function(g) {
        var h2 = this.f();
        g.Qa(h2.resolve, h2.reject);
      };
      b.prototype.u = function(g, h2) {
        var n2 = this.f();
        try {
          g.call(h2, n2.resolve, n2.reject);
        } catch (p2) {
          n2.reject(p2);
        }
      };
      b.prototype.then = function(g, h2) {
        function n2(A3, Q3) {
          return "function" == typeof A3 ? function(ya2) {
            try {
              p2(A3(ya2));
            } catch (Ad2) {
              v2(Ad2);
            }
          } : Q3;
        }
        var p2, v2, B2 = new b(function(A3, Q3) {
          p2 = A3;
          v2 = Q3;
        });
        this.Qa(n2(g, p2), n2(h2, v2));
        return B2;
      };
      b.prototype.catch = function(g) {
        return this.then(void 0, g);
      };
      b.prototype.Qa = function(g, h2) {
        function n2() {
          switch (p2.b) {
            case 1:
              g(p2.c);
              break;
            case 2:
              h2(p2.c);
              break;
            default:
              throw Error("Unexpected state: " + p2.b);
          }
        }
        var p2 = this;
        null == this.a ? f.b(n2) : this.a.push(n2);
      };
      b.resolve = d;
      b.reject = function(g) {
        return new b(function(h2, n2) {
          n2(g);
        });
      };
      b.race = function(g) {
        return new b(function(h2, n2) {
          for (var p2 = fa3(g), v2 = p2.next(); !v2.done; v2 = p2.next())
            d(v2.value).Qa(h2, n2);
        });
      };
      b.all = function(g) {
        var h2 = fa3(g), n2 = h2.next();
        return n2.done ? d([]) : new b(function(p2, v2) {
          function B2(ya2) {
            return function(Ad2) {
              A3[ya2] = Ad2;
              Q3--;
              0 == Q3 && p2(A3);
            };
          }
          var A3 = [], Q3 = 0;
          do
            A3.push(void 0), Q3++, d(n2.value).Qa(B2(A3.length - 1), v2), n2 = h2.next();
          while (!n2.done);
        });
      };
      return b;
    });
    var ha3 = ha3 || {}, l = this || self, ia2 = /^[\w+/_-]+[=]{0,2}$/, ja3 = null;
    function ka3(a) {
      return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && ia2.test(a) ? a : "";
    }
    function la2() {
    }
    function ma3(a) {
      var b = typeof a;
      return "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    }
    function na3(a) {
      var b = ma3(a);
      return "array" == b || "object" == b && "number" == typeof a.length;
    }
    function oa3(a) {
      return "function" == ma3(a);
    }
    function m(a) {
      var b = typeof a;
      return "object" == b && null != a || "function" == b;
    }
    function pa3(a) {
      return Object.prototype.hasOwnProperty.call(a, qa3) && a[qa3] || (a[qa3] = ++ra3);
    }
    var qa3 = "closure_uid_" + (1e9 * Math.random() >>> 0), ra3 = 0;
    function sa3(a, b, c) {
      return a.call.apply(a.bind, arguments);
    }
    function ta3(a, b, c) {
      if (!a)
        throw Error();
      if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
          var e = Array.prototype.slice.call(arguments);
          Array.prototype.unshift.apply(e, d);
          return a.apply(b, e);
        };
      }
      return function() {
        return a.apply(b, arguments);
      };
    }
    function q3(a, b, c) {
      Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q3 = sa3 : q3 = ta3;
      return q3.apply(null, arguments);
    }
    function ua3(a, b) {
      var c = Array.prototype.slice.call(arguments, 1);
      return function() {
        var d = c.slice();
        d.push.apply(d, arguments);
        return a.apply(this, d);
      };
    }
    var va3 = Date.now;
    function r2(a, b) {
      function c() {
      }
      c.prototype = b.prototype;
      a.ab = b.prototype;
      a.prototype = new c();
      a.prototype.constructor = a;
    }
    function wa3(a) {
      return a;
    }
    ;
    function t2(a, b, c) {
      this.code = xa2 + a;
      this.message = b || za3[a] || "";
      this.a = c || null;
    }
    r2(t2, Error);
    t2.prototype.w = function() {
      var a = {code: this.code, message: this.message};
      this.a && (a.serverResponse = this.a);
      return a;
    };
    t2.prototype.toJSON = function() {
      return this.w();
    };
    function Aa3(a) {
      var b = a && a.code;
      return b ? new t2(b.substring(xa2.length), a.message, a.serverResponse) : null;
    }
    var xa2 = "auth/", za3 = {
      "admin-restricted-operation": "This operation is restricted to administrators only.",
      "argument-error": "",
      "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
      "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
      "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
      "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
      "cordova-not-ready": "Cordova framework is not ready.",
      "cors-unsupported": "This browser is not supported.",
      "credential-already-in-use": "This credential is already associated with a different user account.",
      "custom-token-mismatch": "The custom token corresponds to a different audience.",
      "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
      "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
      "email-change-needs-verification": "Multi-factor users must always have a verified email.",
      "email-already-in-use": "The email address is already in use by another account.",
      "expired-action-code": "The action code has expired. ",
      "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
      "internal-error": "An internal error has occurred.",
      "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
      "invalid-app-id": "The mobile app identifier is not registed for the current project.",
      "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
      "invalid-auth-event": "An internal error has occurred.",
      "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
      "invalid-continue-uri": "The continue URL provided in the request is invalid.",
      "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
      "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
      "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
      "invalid-email": "The email address is badly formatted.",
      "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
      "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
      "invalid-credential": "The supplied auth credential is malformed or has expired.",
      "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
      "invalid-multi-factor-session": "The request does not contain a valid proof of first factor successful sign-in.",
      "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
      "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
      "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
      "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
      "wrong-password": "The password is invalid or the user does not have a password.",
      "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
      "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
      "invalid-provider-id": "The specified provider ID is invalid.",
      "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
      "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
      "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
      "invalid-tenant-id": "The Auth instance's tenant ID is invalid.",
      "multi-factor-info-not-found": "The user does not have a second factor matching the identifier provided.",
      "multi-factor-auth-required": "Proof of ownership of a second factor is required to complete sign-in.",
      "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
      "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
      "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
      "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
      "missing-continue-uri": "A continue URL must be provided in the request.",
      "missing-iframe-start": "An internal error has occurred.",
      "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
      "missing-multi-factor-info": "No second factor identifier is provided.",
      "missing-multi-factor-session": "The request is missing proof of first factor successful sign-in.",
      "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
      "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
      "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
      "app-deleted": "This instance of FirebaseApp has been deleted.",
      "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
      "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
      "no-auth-event": "An internal error has occurred.",
      "no-such-provider": "User was not linked to an account with the given provider.",
      "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
      "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
      "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
      "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
      "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
      "provider-already-linked": "User can only be linked to one identity for the given provider.",
      "quota-exceeded": "The project's quota for this operation has been exceeded.",
      "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
      "redirect-operation-pending": "A redirect sign-in operation is already pending.",
      "rejected-credential": "The request contains malformed or mismatching credentials.",
      "second-factor-already-in-use": "The second factor is already enrolled on this account.",
      "maximum-second-factor-count-exceeded": "The maximum allowed number of second factors on a user has been exceeded.",
      "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance's tenant ID",
      timeout: "The operation has timed out.",
      "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
      "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
      "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
      "unsupported-first-factor": "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
      "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
      "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",
      "unverified-email": "The operation requires a verified email.",
      "user-cancelled": "The user did not grant your application the permissions it requested.",
      "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
      "user-disabled": "The user account has been disabled by an administrator.",
      "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
      "user-signed-out": "",
      "weak-password": "The password must be 6 characters long or more.",
      "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
    };
    var Ba3 = {ld: {Ta: "https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/", Za: "https://staging-securetoken.sandbox.googleapis.com/v1/token", Wa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/", id: "b"}, sd: {Ta: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/", Za: "https://securetoken.googleapis.com/v1/token", Wa: "https://identitytoolkit.googleapis.com/v2/", id: "p"}, ud: {
      Ta: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      Za: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      Wa: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",
      id: "s"
    }, vd: {Ta: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/", Za: "https://test-securetoken.sandbox.googleapis.com/v1/token", Wa: "https://test-identitytoolkit.sandbox.googleapis.com/v2/", id: "t"}};
    function Ca3(a) {
      for (var b in Ba3)
        if (Ba3[b].id === a)
          return a = Ba3[b], {firebaseEndpoint: a.Ta, secureTokenEndpoint: a.Za, identityPlatformEndpoint: a.Wa};
      return null;
    }
    var Da3;
    Da3 = Ca3("__EID__") ? "__EID__" : void 0;
    function Ea3(a) {
      if (!a)
        return false;
      try {
        return !!a.$goog_Thenable;
      } catch (b) {
        return false;
      }
    }
    ;
    function u(a) {
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, u);
      else {
        var b = Error().stack;
        b && (this.stack = b);
      }
      a && (this.message = String(a));
    }
    r2(u, Error);
    u.prototype.name = "CustomError";
    function Fa3(a, b) {
      a = a.split("%s");
      for (var c = "", d = a.length - 1, e = 0; e < d; e++)
        c += a[e] + (e < b.length ? b[e] : "%s");
      u.call(this, c + a[d]);
    }
    r2(Fa3, u);
    Fa3.prototype.name = "AssertionError";
    function Ga3(a, b) {
      throw new Fa3("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
    }
    ;
    function Ha3(a, b) {
      this.c = a;
      this.f = b;
      this.b = 0;
      this.a = null;
    }
    Ha3.prototype.get = function() {
      if (0 < this.b) {
        this.b--;
        var a = this.a;
        this.a = a.next;
        a.next = null;
      } else
        a = this.c();
      return a;
    };
    function Ia3(a, b) {
      a.f(b);
      100 > a.b && (a.b++, b.next = a.a, a.a = b);
    }
    ;
    function Ja3() {
      this.b = this.a = null;
    }
    var La3 = new Ha3(function() {
      return new Ka3();
    }, function(a) {
      a.reset();
    });
    Ja3.prototype.add = function(a, b) {
      var c = La3.get();
      c.set(a, b);
      this.b ? this.b.next = c : this.a = c;
      this.b = c;
    };
    function Ma3() {
      var a = Na3, b = null;
      a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
      return b;
    }
    function Ka3() {
      this.next = this.b = this.a = null;
    }
    Ka3.prototype.set = function(a, b) {
      this.a = a;
      this.b = b;
      this.next = null;
    };
    Ka3.prototype.reset = function() {
      this.next = this.b = this.a = null;
    };
    var Oa3 = Array.prototype.indexOf ? function(a, b) {
      return Array.prototype.indexOf.call(a, b, void 0);
    } : function(a, b) {
      if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
      for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
          return c;
      return -1;
    }, w2 = Array.prototype.forEach ? function(a, b, c) {
      Array.prototype.forEach.call(a, b, c);
    } : function(a, b, c) {
      for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a);
    };
    function Pa3(a, b) {
      for (var c = "string" === typeof a ? a.split("") : a, d = a.length - 1; 0 <= d; --d)
        d in c && b.call(void 0, c[d], d, a);
    }
    var Qa3 = Array.prototype.filter ? function(a, b) {
      return Array.prototype.filter.call(a, b, void 0);
    } : function(a, b) {
      for (var c = a.length, d = [], e = 0, f = "string" === typeof a ? a.split("") : a, g = 0; g < c; g++)
        if (g in f) {
          var h2 = f[g];
          b.call(void 0, h2, g, a) && (d[e++] = h2);
        }
      return d;
    }, Ra3 = Array.prototype.map ? function(a, b) {
      return Array.prototype.map.call(a, b, void 0);
    } : function(a, b) {
      for (var c = a.length, d = Array(c), e = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++)
        f in e && (d[f] = b.call(void 0, e[f], f, a));
      return d;
    }, Sa3 = Array.prototype.some ? function(a, b) {
      return Array.prototype.some.call(a, b, void 0);
    } : function(a, b) {
      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
        if (e in d && b.call(void 0, d[e], e, a))
          return true;
      return false;
    };
    function Ta3(a) {
      a: {
        var b = Ua3;
        for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
          if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
          }
        b = -1;
      }
      return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
    }
    function Va3(a, b) {
      return 0 <= Oa3(a, b);
    }
    function Wa3(a, b) {
      b = Oa3(a, b);
      var c;
      (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
      return c;
    }
    function Xa3(a, b) {
      var c = 0;
      Pa3(a, function(d, e) {
        b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
      });
    }
    function Ya3(a) {
      return Array.prototype.concat.apply([], arguments);
    }
    function Za3(a) {
      var b = a.length;
      if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++)
          c[d] = a[d];
        return c;
      }
      return [];
    }
    ;
    var $a3 = String.prototype.trim ? function(a) {
      return a.trim();
    } : function(a) {
      return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
    }, ab2 = /&/g, bb2 = /</g, cb2 = />/g, db2 = /"/g, eb2 = /'/g, fb = /\x00/g, gb2 = /[\x00&<>"']/;
    function x3(a, b) {
      return -1 != a.indexOf(b);
    }
    function hb2(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    ;
    var ib2;
    a: {
      var jb2 = l.navigator;
      if (jb2) {
        var kb2 = jb2.userAgent;
        if (kb2) {
          ib2 = kb2;
          break a;
        }
      }
      ib2 = "";
    }
    function y2(a) {
      return x3(ib2, a);
    }
    ;
    function lb2(a, b) {
      for (var c in a)
        b.call(void 0, a[c], c, a);
    }
    function mb2(a) {
      for (var b in a)
        return false;
      return true;
    }
    function nb2(a) {
      var b = {}, c;
      for (c in a)
        b[c] = a[c];
      return b;
    }
    var ob2 = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function z3(a, b) {
      for (var c, d, e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
          a[c] = d[c];
        for (var f = 0; f < ob2.length; f++)
          c = ob2[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
      }
    }
    ;
    function pb2(a, b) {
      a: {
        try {
          var c = a && a.ownerDocument, d = c && (c.defaultView || c.parentWindow);
          d = d || l;
          if (d.Element && d.Location) {
            var e = d;
            break a;
          }
        } catch (g) {
        }
        e = null;
      }
      if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {
        if (m(a))
          try {
            var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
          } catch (g) {
            f = "<object could not be stringified>";
          }
        else
          f = void 0 === a ? "undefined" : null === a ? "null" : typeof a;
        Ga3("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);
      }
    }
    ;
    function qb2(a, b) {
      this.a = a === rb && b || "";
      this.b = sb2;
    }
    qb2.prototype.sa = true;
    qb2.prototype.ra = function() {
      return this.a;
    };
    qb2.prototype.toString = function() {
      return "Const{" + this.a + "}";
    };
    function tb2(a) {
      if (a instanceof qb2 && a.constructor === qb2 && a.b === sb2)
        return a.a;
      Ga3("expected object of type Const, got '" + a + "'");
      return "type_error:Const";
    }
    var sb2 = {}, rb = {};
    var ub2;
    function vb2() {
      if (void 0 === ub2) {
        var a = null, b = l.trustedTypes;
        if (b && b.createPolicy) {
          try {
            a = b.createPolicy("goog#html", {createHTML: wa3, createScript: wa3, createScriptURL: wa3});
          } catch (c) {
            l.console && l.console.error(c.message);
          }
          ub2 = a;
        } else
          ub2 = a;
      }
      return ub2;
    }
    ;
    function wb2(a, b) {
      this.a = b === xb2 ? a : "";
    }
    wb2.prototype.sa = true;
    wb2.prototype.ra = function() {
      return this.a.toString();
    };
    wb2.prototype.toString = function() {
      return "TrustedResourceUrl{" + this.a + "}";
    };
    function yb2(a) {
      if (a instanceof wb2 && a.constructor === wb2)
        return a.a;
      Ga3("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ma3(a));
      return "type_error:TrustedResourceUrl";
    }
    function zb2(a, b) {
      var c = tb2(a);
      if (!Ab2.test(c))
        throw Error("Invalid TrustedResourceUrl format: " + c);
      a = c.replace(Bb2, function(d, e) {
        if (!Object.prototype.hasOwnProperty.call(b, e))
          throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
        d = b[e];
        return d instanceof qb2 ? tb2(d) : encodeURIComponent(String(d));
      });
      return Cb2(a);
    }
    var Bb2 = /%{(\w+)}/g, Ab2 = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i, xb2 = {};
    function Cb2(a) {
      var b = vb2();
      a = b ? b.createScriptURL(a) : a;
      return new wb2(a, xb2);
    }
    ;
    function C2(a, b) {
      this.a = b === Db2 ? a : "";
    }
    C2.prototype.sa = true;
    C2.prototype.ra = function() {
      return this.a.toString();
    };
    C2.prototype.toString = function() {
      return "SafeUrl{" + this.a + "}";
    };
    function Eb2(a) {
      if (a instanceof C2 && a.constructor === C2)
        return a.a;
      Ga3("expected object of type SafeUrl, got '" + a + "' of type " + ma3(a));
      return "type_error:SafeUrl";
    }
    var Fb2 = /^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i, Gb2 = /^data:(.*);base64,[a-z0-9+\/]+=*$/i, Hb2 = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    function Ib2(a) {
      if (a instanceof C2)
        return a;
      a = "object" == typeof a && a.sa ? a.ra() : String(a);
      if (Hb2.test(a))
        a = new C2(a, Db2);
      else {
        a = String(a);
        a = a.replace(/(%0A|%0D)/g, "");
        var b = a.match(Gb2);
        a = b && Fb2.test(b[1]) ? new C2(a, Db2) : null;
      }
      return a;
    }
    function Jb2(a) {
      if (a instanceof C2)
        return a;
      a = "object" == typeof a && a.sa ? a.ra() : String(a);
      Hb2.test(a) || (a = "about:invalid#zClosurez");
      return new C2(a, Db2);
    }
    var Db2 = {}, Kb2 = new C2("about:invalid#zClosurez", Db2);
    function Lb2(a, b, c) {
      this.a = c === Mb2 ? a : "";
    }
    Lb2.prototype.sa = true;
    Lb2.prototype.ra = function() {
      return this.a.toString();
    };
    Lb2.prototype.toString = function() {
      return "SafeHtml{" + this.a + "}";
    };
    function Nb2(a) {
      if (a instanceof Lb2 && a.constructor === Lb2)
        return a.a;
      Ga3("expected object of type SafeHtml, got '" + a + "' of type " + ma3(a));
      return "type_error:SafeHtml";
    }
    var Mb2 = {};
    function Ob2(a, b) {
      pb2(a, "HTMLScriptElement");
      a.src = yb2(b);
      (b = a.ownerDocument && a.ownerDocument.defaultView) && b != l ? b = ka3(b.document) : (null === ja3 && (ja3 = ka3(l.document)), b = ja3);
      b && a.setAttribute("nonce", b);
    }
    function Pb2(a, b, c, d) {
      a = a instanceof C2 ? a : Jb2(a);
      b = b || l;
      c = c instanceof qb2 ? tb2(c) : c || "";
      return b.open(Eb2(a), c, d, void 0);
    }
    ;
    function Qb2(a, b) {
      for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length; )
        d += c.shift() + e.shift();
      return d + c.join("%s");
    }
    function Rb2(a) {
      gb2.test(a) && (-1 != a.indexOf("&") && (a = a.replace(ab2, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(bb2, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(cb2, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(db2, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(eb2, "&#39;")), -1 != a.indexOf("\0") && (a = a.replace(fb, "&#0;")));
      return a;
    }
    ;
    function Sb2(a) {
      Sb2[" "](a);
      return a;
    }
    Sb2[" "] = la2;
    function Tb2(a, b) {
      var c = Ub2;
      return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    }
    ;
    var Vb2 = y2("Opera"), Wb2 = y2("Trident") || y2("MSIE"), Xb2 = y2("Edge"), Yb2 = Xb2 || Wb2, Zb2 = y2("Gecko") && !(x3(ib2.toLowerCase(), "webkit") && !y2("Edge")) && !(y2("Trident") || y2("MSIE")) && !y2("Edge"), $b2 = x3(ib2.toLowerCase(), "webkit") && !y2("Edge");
    function ac3() {
      var a = l.document;
      return a ? a.documentMode : void 0;
    }
    var bc3;
    a: {
      var cc3 = "", dc3 = function() {
        var a = ib2;
        if (Zb2)
          return /rv:([^\);]+)(\)|;)/.exec(a);
        if (Xb2)
          return /Edge\/([\d\.]+)/.exec(a);
        if (Wb2)
          return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
        if ($b2)
          return /WebKit\/(\S+)/.exec(a);
        if (Vb2)
          return /(?:Version)[ \/]?(\S+)/.exec(a);
      }();
      dc3 && (cc3 = dc3 ? dc3[1] : "");
      if (Wb2) {
        var ec3 = ac3();
        if (null != ec3 && ec3 > parseFloat(cc3)) {
          bc3 = String(ec3);
          break a;
        }
      }
      bc3 = cc3;
    }
    var Ub2 = {};
    function fc3(a) {
      return Tb2(a, function() {
        for (var b = 0, c = $a3(String(bc3)).split("."), d = $a3(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
          var g = c[f] || "", h2 = d[f] || "";
          do {
            g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
            h2 = /(\d*)(\D*)(.*)/.exec(h2) || ["", "", "", ""];
            if (0 == g[0].length && 0 == h2[0].length)
              break;
            b = hb2(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h2[1].length ? 0 : parseInt(h2[1], 10)) || hb2(0 == g[2].length, 0 == h2[2].length) || hb2(g[2], h2[2]);
            g = g[3];
            h2 = h2[3];
          } while (0 == b);
        }
        return 0 <= b;
      });
    }
    var gc3;
    if (l.document && Wb2) {
      var hc3 = ac3();
      gc3 = hc3 ? hc3 : parseInt(bc3, 10) || void 0;
    } else
      gc3 = void 0;
    var ic3 = gc3;
    try {
      new self.OffscreenCanvas(0, 0).getContext("2d");
    } catch (a) {
    }
    var jc3 = !Wb2 || 9 <= Number(ic3);
    function kc3(a) {
      var b = document;
      return "string" === typeof a ? b.getElementById(a) : a;
    }
    function lc3(a, b) {
      lb2(b, function(c, d) {
        c && "object" == typeof c && c.sa && (c = c.ra());
        "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : mc3.hasOwnProperty(d) ? a.setAttribute(mc3[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
      });
    }
    var mc3 = {cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", frameborder: "frameBorder", height: "height", maxlength: "maxLength", nonce: "nonce", role: "role", rowspan: "rowSpan", type: "type", usemap: "useMap", valign: "vAlign", width: "width"};
    function nc3(a, b, c) {
      var d = arguments, e = document, f = String(d[0]), g = d[1];
      if (!jc3 && g && (g.name || g.type)) {
        f = ["<", f];
        g.name && f.push(' name="', Rb2(g.name), '"');
        if (g.type) {
          f.push(' type="', Rb2(g.type), '"');
          var h2 = {};
          z3(h2, g);
          delete h2.type;
          g = h2;
        }
        f.push(">");
        f = f.join("");
      }
      f = oc3(e, f);
      g && ("string" === typeof g ? f.className = g : Array.isArray(g) ? f.className = g.join(" ") : lc3(f, g));
      2 < d.length && pc3(e, f, d);
      return f;
    }
    function pc3(a, b, c) {
      function d(h2) {
        h2 && b.appendChild("string" === typeof h2 ? a.createTextNode(h2) : h2);
      }
      for (var e = 2; e < c.length; e++) {
        var f = c[e];
        if (!na3(f) || m(f) && 0 < f.nodeType)
          d(f);
        else {
          a: {
            if (f && "number" == typeof f.length) {
              if (m(f)) {
                var g = "function" == typeof f.item || "string" == typeof f.item;
                break a;
              }
              if (oa3(f)) {
                g = "function" == typeof f.item;
                break a;
              }
            }
            g = false;
          }
          w2(g ? Za3(f) : f, d);
        }
      }
    }
    function oc3(a, b) {
      b = String(b);
      "application/xhtml+xml" === a.contentType && (b = b.toLowerCase());
      return a.createElement(b);
    }
    ;
    function qc3(a) {
      l.setTimeout(function() {
        throw a;
      }, 0);
    }
    var rc3;
    function sc3() {
      var a = l.MessageChannel;
      "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y2("Presto") && (a = function() {
        var e = oc3(document, "IFRAME");
        e.style.display = "none";
        document.documentElement.appendChild(e);
        var f = e.contentWindow;
        e = f.document;
        e.open();
        e.close();
        var g = "callImmediate" + Math.random(), h2 = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
        e = q3(function(n2) {
          if (("*" == h2 || n2.origin == h2) && n2.data == g)
            this.port1.onmessage();
        }, this);
        f.addEventListener("message", e, false);
        this.port1 = {};
        this.port2 = {postMessage: function() {
          f.postMessage(g, h2);
        }};
      });
      if ("undefined" !== typeof a && !y2("Trident") && !y2("MSIE")) {
        var b = new a(), c = {}, d = c;
        b.port1.onmessage = function() {
          if (void 0 !== c.next) {
            c = c.next;
            var e = c.Gb;
            c.Gb = null;
            e();
          }
        };
        return function(e) {
          d.next = {Gb: e};
          d = d.next;
          b.port2.postMessage(0);
        };
      }
      return function(e) {
        l.setTimeout(e, 0);
      };
    }
    ;
    function tc2(a, b) {
      uc3 || vc3();
      wc3 || (uc3(), wc3 = true);
      Na3.add(a, b);
    }
    var uc3;
    function vc3() {
      if (l.Promise && l.Promise.resolve) {
        var a = l.Promise.resolve(void 0);
        uc3 = function() {
          a.then(xc2);
        };
      } else
        uc3 = function() {
          var b = xc2;
          !oa3(l.setImmediate) || l.Window && l.Window.prototype && !y2("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (rc3 || (rc3 = sc3()), rc3(b)) : l.setImmediate(b);
        };
    }
    var wc3 = false, Na3 = new Ja3();
    function xc2() {
      for (var a; a = Ma3(); ) {
        try {
          a.a.call(a.b);
        } catch (b) {
          qc3(b);
        }
        Ia3(La3, a);
      }
      wc3 = false;
    }
    ;
    function D3(a, b) {
      this.a = yc3;
      this.i = void 0;
      this.f = this.b = this.c = null;
      this.g = this.h = false;
      if (a != la2)
        try {
          var c = this;
          a.call(b, function(d) {
            zc3(c, Ac3, d);
          }, function(d) {
            if (!(d instanceof Bc3))
              try {
                if (d instanceof Error)
                  throw d;
                throw Error("Promise rejected.");
              } catch (e) {
              }
            zc3(c, Cc3, d);
          });
        } catch (d) {
          zc3(this, Cc3, d);
        }
    }
    var yc3 = 0, Ac3 = 2, Cc3 = 3;
    function Dc3() {
      this.next = this.f = this.b = this.g = this.a = null;
      this.c = false;
    }
    Dc3.prototype.reset = function() {
      this.f = this.b = this.g = this.a = null;
      this.c = false;
    };
    var Ec3 = new Ha3(function() {
      return new Dc3();
    }, function(a) {
      a.reset();
    });
    function Fc3(a, b, c) {
      var d = Ec3.get();
      d.g = a;
      d.b = b;
      d.f = c;
      return d;
    }
    function E3(a) {
      if (a instanceof D3)
        return a;
      var b = new D3(la2);
      zc3(b, Ac3, a);
      return b;
    }
    function F3(a) {
      return new D3(function(b, c) {
        c(a);
      });
    }
    function Gc3(a, b, c) {
      Hc2(a, b, c, null) || tc2(ua3(b, a));
    }
    function Ic3(a) {
      return new D3(function(b, c) {
        var d = a.length, e = [];
        if (d)
          for (var f = function(p2, v2) {
            d--;
            e[p2] = v2;
            0 == d && b(e);
          }, g = function(p2) {
            c(p2);
          }, h2 = 0, n2; h2 < a.length; h2++)
            n2 = a[h2], Gc3(n2, ua3(f, h2), g);
        else
          b(e);
      });
    }
    function Jc2(a) {
      return new D3(function(b) {
        var c = a.length, d = [];
        if (c)
          for (var e = function(h2, n2, p2) {
            c--;
            d[h2] = n2 ? {Pb: true, value: p2} : {Pb: false, reason: p2};
            0 == c && b(d);
          }, f = 0, g; f < a.length; f++)
            g = a[f], Gc3(g, ua3(e, f, true), ua3(e, f, false));
        else
          b(d);
      });
    }
    D3.prototype.then = function(a, b, c) {
      return Kc3(this, oa3(a) ? a : null, oa3(b) ? b : null, c);
    };
    D3.prototype.$goog_Thenable = true;
    k3 = D3.prototype;
    k3.oa = function(a, b) {
      a = Fc3(a, a, b);
      a.c = true;
      Lc3(this, a);
      return this;
    };
    k3.o = function(a, b) {
      return Kc3(this, null, a, b);
    };
    k3.cancel = function(a) {
      if (this.a == yc3) {
        var b = new Bc3(a);
        tc2(function() {
          Mc3(this, b);
        }, this);
      }
    };
    function Mc3(a, b) {
      if (a.a == yc3)
        if (a.c) {
          var c = a.c;
          if (c.b) {
            for (var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next)
              e || (f = g);
            e && (c.a == yc3 && 1 == d ? Mc3(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Nc3(c), Oc3(c, e, Cc3, b)));
          }
          a.c = null;
        } else
          zc3(a, Cc3, b);
    }
    function Lc3(a, b) {
      a.b || a.a != Ac3 && a.a != Cc3 || Pc3(a);
      a.f ? a.f.next = b : a.b = b;
      a.f = b;
    }
    function Kc3(a, b, c, d) {
      var e = Fc3(null, null, null);
      e.a = new D3(function(f, g) {
        e.g = b ? function(h2) {
          try {
            var n2 = b.call(d, h2);
            f(n2);
          } catch (p2) {
            g(p2);
          }
        } : f;
        e.b = c ? function(h2) {
          try {
            var n2 = c.call(d, h2);
            void 0 === n2 && h2 instanceof Bc3 ? g(h2) : f(n2);
          } catch (p2) {
            g(p2);
          }
        } : g;
      });
      e.a.c = a;
      Lc3(a, e);
      return e.a;
    }
    k3.$c = function(a) {
      this.a = yc3;
      zc3(this, Ac3, a);
    };
    k3.ad = function(a) {
      this.a = yc3;
      zc3(this, Cc3, a);
    };
    function zc3(a, b, c) {
      a.a == yc3 && (a === c && (b = Cc3, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, Hc2(c, a.$c, a.ad, a) || (a.i = c, a.a = b, a.c = null, Pc3(a), b != Cc3 || c instanceof Bc3 || Qc2(a, c)));
    }
    function Hc2(a, b, c, d) {
      if (a instanceof D3)
        return Lc3(a, Fc3(b || la2, c || null, d)), true;
      if (Ea3(a))
        return a.then(b, c, d), true;
      if (m(a))
        try {
          var e = a.then;
          if (oa3(e))
            return Rc3(a, e, b, c, d), true;
        } catch (f) {
          return c.call(d, f), true;
        }
      return false;
    }
    function Rc3(a, b, c, d, e) {
      function f(n2) {
        h2 || (h2 = true, d.call(e, n2));
      }
      function g(n2) {
        h2 || (h2 = true, c.call(e, n2));
      }
      var h2 = false;
      try {
        b.call(a, g, f);
      } catch (n2) {
        f(n2);
      }
    }
    function Pc3(a) {
      a.h || (a.h = true, tc2(a.gc, a));
    }
    function Nc3(a) {
      var b = null;
      a.b && (b = a.b, a.b = b.next, b.next = null);
      a.b || (a.f = null);
      return b;
    }
    k3.gc = function() {
      for (var a; a = Nc3(this); )
        Oc3(this, a, this.a, this.i);
      this.h = false;
    };
    function Oc3(a, b, c, d) {
      if (c == Cc3 && b.b && !b.c)
        for (; a && a.g; a = a.c)
          a.g = false;
      if (b.a)
        b.a.c = null, Sc3(b, c, d);
      else
        try {
          b.c ? b.g.call(b.f) : Sc3(b, c, d);
        } catch (e) {
          Tc3.call(null, e);
        }
      Ia3(Ec3, b);
    }
    function Sc3(a, b, c) {
      b == Ac3 ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
    }
    function Qc2(a, b) {
      a.g = true;
      tc2(function() {
        a.g && Tc3.call(null, b);
      });
    }
    var Tc3 = qc3;
    function Bc3(a) {
      u.call(this, a);
    }
    r2(Bc3, u);
    Bc3.prototype.name = "cancel";
    function Uc3() {
      0 != Vc3 && (Wc2[pa3(this)] = this);
      this.xa = this.xa;
      this.pa = this.pa;
    }
    var Vc3 = 0, Wc2 = {};
    Uc3.prototype.xa = false;
    function Xc2(a) {
      if (!a.xa && (a.xa = true, a.Da(), 0 != Vc3)) {
        var b = pa3(a);
        if (0 != Vc3 && a.pa && 0 < a.pa.length)
          throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
        delete Wc2[b];
      }
    }
    Uc3.prototype.Da = function() {
      if (this.pa)
        for (; this.pa.length; )
          this.pa.shift()();
    };
    var Yc2 = Object.freeze || function(a) {
      return a;
    };
    var Zc2 = !Wb2 || 9 <= Number(ic3), $c2 = Wb2 && !fc3("9"), ad2 = function() {
      if (!l.addEventListener || !Object.defineProperty)
        return false;
      var a = false, b = Object.defineProperty({}, "passive", {get: function() {
        a = true;
      }});
      try {
        l.addEventListener("test", la2, b), l.removeEventListener("test", la2, b);
      } catch (c) {
      }
      return a;
    }();
    function G3(a, b) {
      this.type = a;
      this.b = this.target = b;
      this.defaultPrevented = false;
    }
    G3.prototype.preventDefault = function() {
      this.defaultPrevented = true;
    };
    function bd2(a, b) {
      G3.call(this, a ? a.type : "");
      this.relatedTarget = this.b = this.target = null;
      this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
      this.key = "";
      this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
      this.pointerId = 0;
      this.pointerType = "";
      this.a = null;
      if (a) {
        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.b = b;
        if (b = a.relatedTarget) {
          if (Zb2) {
            a: {
              try {
                Sb2(b.nodeName);
                var e = true;
                break a;
              } catch (f) {
              }
              e = false;
            }
            e || (b = null);
          }
        } else
          "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
        this.relatedTarget = b;
        d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey = a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = "string" === typeof a.pointerType ? a.pointerType : cd2[a.pointerType] || "";
        this.a = a;
        a.defaultPrevented && this.preventDefault();
      }
    }
    r2(bd2, G3);
    var cd2 = Yc2({2: "touch", 3: "pen", 4: "mouse"});
    bd2.prototype.preventDefault = function() {
      bd2.ab.preventDefault.call(this);
      var a = this.a;
      if (a.preventDefault)
        a.preventDefault();
      else if (a.returnValue = false, $c2)
        try {
          if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
            a.keyCode = -1;
        } catch (b) {
        }
    };
    bd2.prototype.g = function() {
      return this.a;
    };
    var dd2 = "closure_listenable_" + (1e6 * Math.random() | 0), ed2 = 0;
    function fd2(a, b, c, d, e) {
      this.listener = a;
      this.proxy = null;
      this.src = b;
      this.type = c;
      this.capture = !!d;
      this.Va = e;
      this.key = ++ed2;
      this.va = this.Pa = false;
    }
    function gd2(a) {
      a.va = true;
      a.listener = null;
      a.proxy = null;
      a.src = null;
      a.Va = null;
    }
    ;
    function hd2(a) {
      this.src = a;
      this.a = {};
      this.b = 0;
    }
    hd2.prototype.add = function(a, b, c, d, e) {
      var f = a.toString();
      a = this.a[f];
      a || (a = this.a[f] = [], this.b++);
      var g = id2(a, b, d, e);
      -1 < g ? (b = a[g], c || (b.Pa = false)) : (b = new fd2(b, this.src, f, !!d, e), b.Pa = c, a.push(b));
      return b;
    };
    function jd2(a, b) {
      var c = b.type;
      c in a.a && Wa3(a.a[c], b) && (gd2(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
    function id2(a, b, c, d) {
      for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.va && f.listener == b && f.capture == !!c && f.Va == d)
          return e;
      }
      return -1;
    }
    ;
    var kd2 = "closure_lm_" + (1e6 * Math.random() | 0), ld2 = {}, md2 = 0;
    function nd2(a, b, c, d, e) {
      if (d && d.once)
        od2(a, b, c, d, e);
      else if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
          nd2(a, b[f], c, d, e);
      else
        c = pd2(c), a && a[dd2] ? qd2(a, b, c, m(d) ? !!d.capture : !!d, e) : rd2(a, b, c, false, d, e);
    }
    function rd2(a, b, c, d, e, f) {
      if (!b)
        throw Error("Invalid event type");
      var g = m(e) ? !!e.capture : !!e, h2 = sd2(a);
      h2 || (a[kd2] = h2 = new hd2(a));
      c = h2.add(b, c, d, g, f);
      if (!c.proxy) {
        d = td2();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
          ad2 || (e = g), void 0 === e && (e = false), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
          a.attachEvent(ud2(b.toString()), d);
        else if (a.addListener && a.removeListener)
          a.addListener(d);
        else
          throw Error("addEventListener and attachEvent are unavailable.");
        md2++;
      }
    }
    function td2() {
      var a = vd2, b = Zc2 ? function(c) {
        return a.call(b.src, b.listener, c);
      } : function(c) {
        c = a.call(b.src, b.listener, c);
        if (!c)
          return c;
      };
      return b;
    }
    function od2(a, b, c, d, e) {
      if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
          od2(a, b[f], c, d, e);
      else
        c = pd2(c), a && a[dd2] ? wd2(a, b, c, m(d) ? !!d.capture : !!d, e) : rd2(a, b, c, true, d, e);
    }
    function xd2(a, b, c, d, e) {
      if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
          xd2(a, b[f], c, d, e);
      else
        (d = m(d) ? !!d.capture : !!d, c = pd2(c), a && a[dd2]) ? (a = a.v, b = String(b).toString(), b in a.a && (f = a.a[b], c = id2(f, c, d, e), -1 < c && (gd2(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = sd2(a)) && (b = a.a[b.toString()], a = -1, b && (a = id2(b, c, d, e)), (c = -1 < a ? b[a] : null) && yd2(c));
    }
    function yd2(a) {
      if ("number" !== typeof a && a && !a.va) {
        var b = a.src;
        if (b && b[dd2])
          jd2(b.v, a);
        else {
          var c = a.type, d = a.proxy;
          b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(ud2(c), d) : b.addListener && b.removeListener && b.removeListener(d);
          md2--;
          (c = sd2(b)) ? (jd2(c, a), 0 == c.b && (c.src = null, b[kd2] = null)) : gd2(a);
        }
      }
    }
    function ud2(a) {
      return a in ld2 ? ld2[a] : ld2[a] = "on" + a;
    }
    function zd2(a, b, c, d) {
      var e = true;
      if (a = sd2(a)) {
        if (b = a.a[b.toString()])
          for (b = b.concat(), a = 0; a < b.length; a++) {
            var f = b[a];
            f && f.capture == c && !f.va && (f = Bd2(f, d), e = e && false !== f);
          }
      }
      return e;
    }
    function Bd2(a, b) {
      var c = a.listener, d = a.Va || a.src;
      a.Pa && yd2(a);
      return c.call(d, b);
    }
    function vd2(a, b) {
      if (a.va)
        return true;
      if (!Zc2) {
        if (!b)
          a: {
            b = ["window", "event"];
            for (var c = l, d = 0; d < b.length; d++)
              if (c = c[b[d]], null == c) {
                b = null;
                break a;
              }
            b = c;
          }
        d = b;
        b = new bd2(d, this);
        c = true;
        if (!(0 > d.keyCode || void 0 != d.returnValue)) {
          a: {
            var e = false;
            if (0 == d.keyCode)
              try {
                d.keyCode = -1;
                break a;
              } catch (g) {
                e = true;
              }
            if (e || void 0 == d.returnValue)
              d.returnValue = true;
          }
          d = [];
          for (e = b.b; e; e = e.parentNode)
            d.push(e);
          a = a.type;
          for (e = d.length - 1; 0 <= e; e--) {
            b.b = d[e];
            var f = zd2(d[e], a, true, b);
            c = c && f;
          }
          for (e = 0; e < d.length; e++)
            b.b = d[e], f = zd2(d[e], a, false, b), c = c && f;
        }
        return c;
      }
      return Bd2(a, new bd2(b, this));
    }
    function sd2(a) {
      a = a[kd2];
      return a instanceof hd2 ? a : null;
    }
    var Cd2 = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
    function pd2(a) {
      if (oa3(a))
        return a;
      a[Cd2] || (a[Cd2] = function(b) {
        return a.handleEvent(b);
      });
      return a[Cd2];
    }
    ;
    function H3() {
      Uc3.call(this);
      this.v = new hd2(this);
      this.ac = this;
      this.gb = null;
    }
    r2(H3, Uc3);
    H3.prototype[dd2] = true;
    H3.prototype.addEventListener = function(a, b, c, d) {
      nd2(this, a, b, c, d);
    };
    H3.prototype.removeEventListener = function(a, b, c, d) {
      xd2(this, a, b, c, d);
    };
    H3.prototype.dispatchEvent = function(a) {
      var b, c = this.gb;
      if (c)
        for (b = []; c; c = c.gb)
          b.push(c);
      c = this.ac;
      var d = a.type || a;
      if ("string" === typeof a)
        a = new G3(a, c);
      else if (a instanceof G3)
        a.target = a.target || c;
      else {
        var e = a;
        a = new G3(d, c);
        z3(a, e);
      }
      e = true;
      if (b)
        for (var f = b.length - 1; 0 <= f; f--) {
          var g = a.b = b[f];
          e = Dd2(g, d, true, a) && e;
        }
      g = a.b = c;
      e = Dd2(g, d, true, a) && e;
      e = Dd2(g, d, false, a) && e;
      if (b)
        for (f = 0; f < b.length; f++)
          g = a.b = b[f], e = Dd2(g, d, false, a) && e;
      return e;
    };
    H3.prototype.Da = function() {
      H3.ab.Da.call(this);
      if (this.v) {
        var a = this.v, b = 0, c;
        for (c in a.a) {
          for (var d = a.a[c], e = 0; e < d.length; e++)
            ++b, gd2(d[e]);
          delete a.a[c];
          a.b--;
        }
      }
      this.gb = null;
    };
    function qd2(a, b, c, d, e) {
      a.v.add(String(b), c, false, d, e);
    }
    function wd2(a, b, c, d, e) {
      a.v.add(String(b), c, true, d, e);
    }
    function Dd2(a, b, c, d) {
      b = a.v.a[String(b)];
      if (!b)
        return true;
      b = b.concat();
      for (var e = true, f = 0; f < b.length; ++f) {
        var g = b[f];
        if (g && !g.va && g.capture == c) {
          var h2 = g.listener, n2 = g.Va || g.src;
          g.Pa && jd2(a.v, g);
          e = false !== h2.call(n2, d) && e;
        }
      }
      return e && !d.defaultPrevented;
    }
    ;
    function Ed2(a, b, c) {
      if (oa3(a))
        c && (a = q3(a, c));
      else if (a && "function" == typeof a.handleEvent)
        a = q3(a.handleEvent, a);
      else
        throw Error("Invalid listener argument");
      return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
    }
    function Fd2(a) {
      var b = null;
      return new D3(function(c, d) {
        b = Ed2(function() {
          c(void 0);
        }, a);
        -1 == b && d(Error("Failed to schedule timer."));
      }).o(function(c) {
        l.clearTimeout(b);
        throw c;
      });
    }
    ;
    function Gd2(a) {
      if (a.W && "function" == typeof a.W)
        return a.W();
      if ("string" === typeof a)
        return a.split("");
      if (na3(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
          b.push(a[d]);
        return b;
      }
      b = [];
      c = 0;
      for (d in a)
        b[c++] = a[d];
      return b;
    }
    function Hd2(a) {
      if (a.Y && "function" == typeof a.Y)
        return a.Y();
      if (!a.W || "function" != typeof a.W) {
        if (na3(a) || "string" === typeof a) {
          var b = [];
          a = a.length;
          for (var c = 0; c < a; c++)
            b.push(c);
          return b;
        }
        b = [];
        c = 0;
        for (var d in a)
          b[c++] = d;
        return b;
      }
    }
    function Id2(a, b) {
      if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
      else if (na3(a) || "string" === typeof a)
        w2(a, b, void 0);
      else
        for (var c = Hd2(a), d = Gd2(a), e = d.length, f = 0; f < e; f++)
          b.call(void 0, d[f], c && c[f], a);
    }
    ;
    function Jd2(a, b) {
      this.b = {};
      this.a = [];
      this.c = 0;
      var c = arguments.length;
      if (1 < c) {
        if (c % 2)
          throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
          this.set(arguments[d], arguments[d + 1]);
      } else if (a)
        if (a instanceof Jd2)
          for (c = a.Y(), d = 0; d < c.length; d++)
            this.set(c[d], a.get(c[d]));
        else
          for (d in a)
            this.set(d, a[d]);
    }
    k3 = Jd2.prototype;
    k3.W = function() {
      Kd2(this);
      for (var a = [], b = 0; b < this.a.length; b++)
        a.push(this.b[this.a[b]]);
      return a;
    };
    k3.Y = function() {
      Kd2(this);
      return this.a.concat();
    };
    k3.clear = function() {
      this.b = {};
      this.c = this.a.length = 0;
    };
    function Kd2(a) {
      if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length; ) {
          var d = a.a[b];
          Ld2(a.b, d) && (a.a[c++] = d);
          b++;
        }
        a.a.length = c;
      }
      if (a.c != a.a.length) {
        var e = {};
        for (c = b = 0; b < a.a.length; )
          d = a.a[b], Ld2(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
      }
    }
    k3.get = function(a, b) {
      return Ld2(this.b, a) ? this.b[a] : b;
    };
    k3.set = function(a, b) {
      Ld2(this.b, a) || (this.c++, this.a.push(a));
      this.b[a] = b;
    };
    k3.forEach = function(a, b) {
      for (var c = this.Y(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
      }
    };
    function Ld2(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    ;
    var Md2 = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Nd2(a, b) {
      if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
          var d = a[c].indexOf("="), e = null;
          if (0 <= d) {
            var f = a[c].substring(0, d);
            e = a[c].substring(d + 1);
          } else
            f = a[c];
          b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
      }
    }
    ;
    function Od2(a, b) {
      this.a = this.l = this.c = "";
      this.g = null;
      this.h = this.f = "";
      this.i = false;
      var c;
      a instanceof Od2 ? (this.i = void 0 !== b ? b : a.i, Pd2(this, a.c), this.l = a.l, this.a = a.a, Qd2(this, a.g), this.f = a.f, Rd(this, Sd(a.b)), this.h = a.h) : a && (c = String(a).match(Md2)) ? (this.i = !!b, Pd2(this, c[1] || "", true), this.l = Td(c[2] || ""), this.a = Td(c[3] || "", true), Qd2(this, c[4]), this.f = Td(c[5] || "", true), Rd(this, c[6] || "", true), this.h = Td(c[7] || "")) : (this.i = !!b, this.b = new Ud(null, this.i));
    }
    Od2.prototype.toString = function() {
      var a = [], b = this.c;
      b && a.push(Vd(b, Wd, true), ":");
      var c = this.a;
      if (c || "file" == b)
        a.push("//"), (b = this.l) && a.push(Vd(b, Wd, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.g, null != c && a.push(":", String(c));
      if (c = this.f)
        this.a && "/" != c.charAt(0) && a.push("/"), a.push(Vd(c, "/" == c.charAt(0) ? Xd : Yd, true));
      (c = this.b.toString()) && a.push("?", c);
      (c = this.h) && a.push("#", Vd(c, Zd));
      return a.join("");
    };
    Od2.prototype.resolve = function(a) {
      var b = new Od2(this), c = !!a.c;
      c ? Pd2(b, a.c) : c = !!a.l;
      c ? b.l = a.l : c = !!a.a;
      c ? b.a = a.a : c = null != a.g;
      var d = a.f;
      if (c)
        Qd2(b, a.g);
      else if (c = !!a.f) {
        if ("/" != d.charAt(0))
          if (this.a && !this.f)
            d = "/" + d;
          else {
            var e = b.f.lastIndexOf("/");
            -1 != e && (d = b.f.substr(0, e + 1) + d);
          }
        e = d;
        if (".." == e || "." == e)
          d = "";
        else if (x3(e, "./") || x3(e, "/.")) {
          d = 0 == e.lastIndexOf("/", 0);
          e = e.split("/");
          for (var f = [], g = 0; g < e.length; ) {
            var h2 = e[g++];
            "." == h2 ? d && g == e.length && f.push("") : ".." == h2 ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h2), d = true);
          }
          d = f.join("/");
        } else
          d = e;
      }
      c ? b.f = d : c = "" !== a.b.toString();
      c ? Rd(b, Sd(a.b)) : c = !!a.h;
      c && (b.h = a.h);
      return b;
    };
    function Pd2(a, b, c) {
      a.c = c ? Td(b, true) : b;
      a.c && (a.c = a.c.replace(/:$/, ""));
    }
    function Qd2(a, b) {
      if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
          throw Error("Bad port number " + b);
        a.g = b;
      } else
        a.g = null;
    }
    function Rd(a, b, c) {
      b instanceof Ud ? (a.b = b, $d(a.b, a.i)) : (c || (b = Vd(b, ae2)), a.b = new Ud(b, a.i));
    }
    function I4(a, b, c) {
      a.b.set(b, c);
    }
    function be2(a, b) {
      return a.b.get(b);
    }
    function J3(a) {
      return a instanceof Od2 ? new Od2(a) : new Od2(a, void 0);
    }
    function ce2(a, b, c, d) {
      var e = new Od2(null, void 0);
      a && Pd2(e, a);
      b && (e.a = b);
      c && Qd2(e, c);
      d && (e.f = d);
      return e;
    }
    function Td(a, b) {
      return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    }
    function Vd(a, b, c) {
      return "string" === typeof a ? (a = encodeURI(a).replace(b, de2), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    }
    function de2(a) {
      a = a.charCodeAt(0);
      return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    }
    var Wd = /[#\/\?@]/g, Yd = /[#\?:]/g, Xd = /[#\?]/g, ae2 = /[#\?@]/g, Zd = /#/g;
    function Ud(a, b) {
      this.b = this.a = null;
      this.c = a || null;
      this.f = !!b;
    }
    function ee2(a) {
      a.a || (a.a = new Jd2(), a.b = 0, a.c && Nd2(a.c, function(b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
      }));
    }
    function fe2(a) {
      var b = Hd2(a);
      if ("undefined" == typeof b)
        throw Error("Keys are undefined");
      var c = new Ud(null, void 0);
      a = Gd2(a);
      for (var d = 0; d < b.length; d++) {
        var e = b[d], f = a[d];
        Array.isArray(f) ? ge2(c, e, f) : c.add(e, f);
      }
      return c;
    }
    k3 = Ud.prototype;
    k3.add = function(a, b) {
      ee2(this);
      this.c = null;
      a = he2(this, a);
      var c = this.a.get(a);
      c || this.a.set(a, c = []);
      c.push(b);
      this.b += 1;
      return this;
    };
    function ie2(a, b) {
      ee2(a);
      b = he2(a, b);
      Ld2(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Ld2(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Kd2(a)));
    }
    k3.clear = function() {
      this.a = this.c = null;
      this.b = 0;
    };
    function je2(a, b) {
      ee2(a);
      b = he2(a, b);
      return Ld2(a.a.b, b);
    }
    k3.forEach = function(a, b) {
      ee2(this);
      this.a.forEach(function(c, d) {
        w2(c, function(e) {
          a.call(b, e, d, this);
        }, this);
      }, this);
    };
    k3.Y = function() {
      ee2(this);
      for (var a = this.a.W(), b = this.a.Y(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
          c.push(b[d]);
      return c;
    };
    k3.W = function(a) {
      ee2(this);
      var b = [];
      if ("string" === typeof a)
        je2(this, a) && (b = Ya3(b, this.a.get(he2(this, a))));
      else {
        a = this.a.W();
        for (var c = 0; c < a.length; c++)
          b = Ya3(b, a[c]);
      }
      return b;
    };
    k3.set = function(a, b) {
      ee2(this);
      this.c = null;
      a = he2(this, a);
      je2(this, a) && (this.b -= this.a.get(a).length);
      this.a.set(a, [b]);
      this.b += 1;
      return this;
    };
    k3.get = function(a, b) {
      if (!a)
        return b;
      a = this.W(a);
      return 0 < a.length ? String(a[0]) : b;
    };
    function ge2(a, b, c) {
      ie2(a, b);
      0 < c.length && (a.c = null, a.a.set(he2(a, b), Za3(c)), a.b += c.length);
    }
    k3.toString = function() {
      if (this.c)
        return this.c;
      if (!this.a)
        return "";
      for (var a = [], b = this.a.Y(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.W(d);
        for (var f = 0; f < d.length; f++) {
          var g = e;
          "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
          a.push(g);
        }
      }
      return this.c = a.join("&");
    };
    function Sd(a) {
      var b = new Ud();
      b.c = a.c;
      a.a && (b.a = new Jd2(a.a), b.b = a.b);
      return b;
    }
    function he2(a, b) {
      b = String(b);
      a.f && (b = b.toLowerCase());
      return b;
    }
    function $d(a, b) {
      b && !a.f && (ee2(a), a.c = null, a.a.forEach(function(c, d) {
        var e = d.toLowerCase();
        d != e && (ie2(this, d), ge2(this, e, c));
      }, a));
      a.f = b;
    }
    ;
    function ke2(a) {
      var b = [];
      le2(new me2(), a, b);
      return b.join("");
    }
    function me2() {
    }
    function le2(a, b, c) {
      if (null == b)
        c.push("null");
      else {
        if ("object" == typeof b) {
          if (Array.isArray(b)) {
            var d = b;
            b = d.length;
            c.push("[");
            for (var e = "", f = 0; f < b; f++)
              c.push(e), le2(a, d[f], c), e = ",";
            c.push("]");
            return;
          }
          if (b instanceof String || b instanceof Number || b instanceof Boolean)
            b = b.valueOf();
          else {
            c.push("{");
            e = "";
            for (d in b)
              Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ne2(d, c), c.push(":"), le2(a, f, c), e = ","));
            c.push("}");
            return;
          }
        }
        switch (typeof b) {
          case "string":
            ne2(b, c);
            break;
          case "number":
            c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
            break;
          case "boolean":
            c.push(String(b));
            break;
          case "function":
            c.push("null");
            break;
          default:
            throw Error("Unknown type: " + typeof b);
        }
      }
    }
    var oe2 = {'"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\u000b"}, pe2 = /\uffff/.test("￿") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
    function ne2(a, b) {
      b.push('"', a.replace(pe2, function(c) {
        var d = oe2[c];
        d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), oe2[c] = d);
        return d;
      }), '"');
    }
    ;
    function qe2() {
      var a = K3();
      return Wb2 && !!ic3 && 11 == ic3 || /Edge\/\d+/.test(a);
    }
    function re2() {
      return l.window && l.window.location.href || self && self.location && self.location.href || "";
    }
    function se2(a, b) {
      b = b || l.window;
      var c = "about:blank";
      a && (c = Eb2(Ib2(a) || Kb2));
      b.location.href = c;
    }
    function te2(a, b) {
      var c = [], d;
      for (d in a)
        d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < te2(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
      for (d in b)
        d in a || c.push(d);
      return c;
    }
    function ue2() {
      var a = K3();
      a = ve2(a) != we2 ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
      return a && 30 > a ? false : !Wb2 || !ic3 || 9 < ic3;
    }
    function xe2(a) {
      a = (a || K3()).toLowerCase();
      return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? true : false;
    }
    function ye2(a) {
      a = a || l.window;
      try {
        a.close();
      } catch (b) {
      }
    }
    function ze2(a, b, c) {
      var d = Math.floor(1e9 * Math.random()).toString();
      b = b || 500;
      c = c || 600;
      var e = (window.screen.availHeight - c) / 2, f = (window.screen.availWidth - b) / 2;
      b = {width: b, height: c, top: 0 < e ? e : 0, left: 0 < f ? f : 0, location: true, resizable: true, statusbar: true, toolbar: false};
      c = K3().toLowerCase();
      d && (b.target = d, x3(c, "crios/") && (b.target = "_blank"));
      ve2(K3()) == Ae2 && (a = a || "http://localhost", b.scrollbars = true);
      c = a || "";
      (a = b) || (a = {});
      d = window;
      b = c instanceof C2 ? c : Ib2("undefined" != typeof c.href ? c.href : String(c)) || Kb2;
      c = a.target || c.target;
      e = [];
      for (g in a)
        switch (g) {
          case "width":
          case "height":
          case "top":
          case "left":
            e.push(g + "=" + a[g]);
            break;
          case "target":
          case "noopener":
          case "noreferrer":
            break;
          default:
            e.push(g + "=" + (a[g] ? 1 : 0));
        }
      var g = e.join(",");
      if ((y2("iPhone") && !y2("iPod") && !y2("iPad") || y2("iPad") || y2("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c)
        g = oc3(document, "A"), pb2(g, "HTMLAnchorElement"), b = b instanceof C2 ? b : Jb2(b), g.href = Eb2(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", true, true, d, 1), g.dispatchEvent(a), g = {};
      else if (a.noreferrer) {
        if (g = Pb2("", d, c, g), a = Eb2(b), g && (Yb2 && x3(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = '<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Rb2(a) + '">', a = (d = vb2()) ? d.createHTML(a) : a, a = new Lb2(a, null, Mb2), d = g.document))
          d.write(Nb2(a)), d.close();
      } else
        (g = Pb2(b, d, c, g)) && a.noopener && (g.opener = null);
      if (g)
        try {
          g.focus();
        } catch (h2) {
        }
      return g;
    }
    function Be2(a) {
      return new D3(function(b) {
        function c() {
          Fd2(2e3).then(function() {
            if (!a || a.closed)
              b();
            else
              return c();
          });
        }
        return c();
      });
    }
    var Ce2 = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, De2 = /^[^@]+@[^@]+$/;
    function Ee2() {
      var a = null;
      return new D3(function(b) {
        "complete" == l.document.readyState ? b() : (a = function() {
          b();
        }, od2(window, "load", a));
      }).o(function(b) {
        xd2(window, "load", a);
        throw b;
      });
    }
    function Fe2() {
      return Ge2(void 0) ? Ee2().then(function() {
        return new D3(function(a, b) {
          var c = l.document, d = setTimeout(function() {
            b(Error("Cordova framework is not ready."));
          }, 1e3);
          c.addEventListener("deviceready", function() {
            clearTimeout(d);
            a();
          }, false);
        });
      }) : F3(Error("Cordova must run in an Android or iOS file scheme."));
    }
    function Ge2(a) {
      a = a || K3();
      return !("file:" !== He2() && "ionic:" !== He2() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
    }
    function Ie2() {
      var a = l.window;
      try {
        return !(!a || a == a.top);
      } catch (b) {
        return false;
      }
    }
    function Je2() {
      return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
    }
    function Ke2() {
      return index_esm_default.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : index_esm_default.INTERNAL.hasOwnProperty("node") ? "Node" : Je2() ? "Worker" : "Browser";
    }
    function Le2() {
      var a = Ke2();
      return "ReactNative" === a || "Node" === a;
    }
    function Me2() {
      for (var a = 50, b = []; 0 < a; )
        b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
      return b.join("");
    }
    var Ae2 = "Firefox", we2 = "Chrome";
    function ve2(a) {
      var b = a.toLowerCase();
      if (x3(b, "opera/") || x3(b, "opr/") || x3(b, "opios/"))
        return "Opera";
      if (x3(b, "iemobile"))
        return "IEMobile";
      if (x3(b, "msie") || x3(b, "trident/"))
        return "IE";
      if (x3(b, "edge/"))
        return "Edge";
      if (x3(b, "firefox/"))
        return Ae2;
      if (x3(b, "silk/"))
        return "Silk";
      if (x3(b, "blackberry"))
        return "Blackberry";
      if (x3(b, "webos"))
        return "Webos";
      if (!x3(b, "safari/") || x3(b, "chrome/") || x3(b, "crios/") || x3(b, "android"))
        if (!x3(b, "chrome/") && !x3(b, "crios/") || x3(b, "edge/")) {
          if (x3(b, "android"))
            return "Android";
          if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length)
            return a[1];
        } else
          return we2;
      else
        return "Safari";
      return "Other";
    }
    var Ne2 = {md: "FirebaseCore-web", od: "FirebaseUI-web"};
    function Oe2(a, b) {
      b = b || [];
      var c = [], d = {}, e;
      for (e in Ne2)
        d[Ne2[e]] = true;
      for (e = 0; e < b.length; e++)
        "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
      c.sort();
      b = c;
      b.length || (b = ["FirebaseCore-web"]);
      c = Ke2();
      "Browser" === c ? (d = K3(), c = ve2(d)) : "Worker" === c && (d = K3(), c = ve2(d) + "-" + c);
      return c + "/JsCore/" + a + "/" + b.join(",");
    }
    function K3() {
      return l.navigator && l.navigator.userAgent || "";
    }
    function L3(a, b) {
      a = a.split(".");
      b = b || l;
      for (var c = 0; c < a.length && "object" == typeof b && null != b; c++)
        b = b[a[c]];
      c != a.length && (b = void 0);
      return b;
    }
    function Pe2() {
      try {
        var a = l.localStorage, b = Qe2();
        if (a)
          return a.setItem(b, "1"), a.removeItem(b), qe2() ? !!l.indexedDB : true;
      } catch (c) {
        return Je2() && !!l.indexedDB;
      }
      return false;
    }
    function Re2() {
      return (Se2() || "chrome-extension:" === He2() || Ge2()) && !Le2() && Pe2() && !Je2();
    }
    function Se2() {
      return "http:" === He2() || "https:" === He2();
    }
    function He2() {
      return l.location && l.location.protocol || null;
    }
    function Te2(a) {
      a = a || K3();
      return xe2(a) || ve2(a) == Ae2 ? false : true;
    }
    function Ue2(a) {
      return "undefined" === typeof a ? null : ke2(a);
    }
    function Ve2(a) {
      var b = {}, c;
      for (c in a)
        a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);
      return b;
    }
    function We2(a) {
      if (null !== a)
        return JSON.parse(a);
    }
    function Qe2(a) {
      return a ? a : Math.floor(1e9 * Math.random()).toString();
    }
    function Xe2(a) {
      a = a || K3();
      return "Safari" == ve2(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? false : true;
    }
    function Ye2() {
      var a = l.___jsl;
      if (a && a.H) {
        for (var b in a.H)
          if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP)
            for (var c = 0; c < a.CP.length; c++)
              a.CP[c] = null;
      }
    }
    function Ze2(a, b) {
      if (a > b)
        throw Error("Short delay should be less than long delay!");
      this.a = a;
      this.c = b;
      a = K3();
      b = Ke2();
      this.b = xe2(a) || "ReactNative" === b;
    }
    Ze2.prototype.get = function() {
      var a = l.navigator;
      return (a && "boolean" === typeof a.onLine && (Se2() || "chrome-extension:" === He2() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5e3, this.a);
    };
    function $e2() {
      var a = l.document;
      return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : true;
    }
    function af() {
      var a = l.document, b = null;
      return $e2() || !a ? E3() : new D3(function(c) {
        b = function() {
          $e2() && (a.removeEventListener("visibilitychange", b, false), c());
        };
        a.addEventListener("visibilitychange", b, false);
      }).o(function(c) {
        a.removeEventListener("visibilitychange", b, false);
        throw c;
      });
    }
    function bf(a) {
      try {
        var b = new Date(parseInt(a, 10));
        if (!isNaN(b.getTime()) && !/[^0-9]/.test(a))
          return b.toUTCString();
      } catch (c) {
      }
      return null;
    }
    function cf() {
      return !(!L3("fireauth.oauthhelper", l) && !L3("fireauth.iframe", l));
    }
    function df() {
      var a = l.navigator;
      return a && a.serviceWorker && a.serviceWorker.controller || null;
    }
    function ef() {
      var a = l.navigator;
      return a && a.serviceWorker ? E3().then(function() {
        return a.serviceWorker.ready;
      }).then(function(b) {
        return b.active || null;
      }).o(function() {
        return null;
      }) : E3(null);
    }
    ;
    var ff = {};
    function gf(a) {
      ff[a] || (ff[a] = true, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
    }
    ;
    var hf;
    try {
      var jf = {};
      Object.defineProperty(jf, "abcd", {configurable: true, enumerable: true, value: 1});
      Object.defineProperty(jf, "abcd", {configurable: true, enumerable: true, value: 2});
      hf = 2 == jf.abcd;
    } catch (a) {
      hf = false;
    }
    function M3(a, b, c) {
      hf ? Object.defineProperty(a, b, {configurable: true, enumerable: true, value: c}) : a[b] = c;
    }
    function N3(a, b) {
      if (b)
        for (var c in b)
          b.hasOwnProperty(c) && M3(a, c, b[c]);
    }
    function kf(a) {
      var b = {};
      N3(b, a);
      return b;
    }
    function lf(a) {
      var b = {}, c;
      for (c in a)
        a.hasOwnProperty(c) && (b[c] = a[c]);
      return b;
    }
    function mf(a, b) {
      if (!b || !b.length)
        return true;
      if (!a)
        return false;
      for (var c = 0; c < b.length; c++) {
        var d = a[b[c]];
        if (void 0 === d || null === d || "" === d)
          return false;
      }
      return true;
    }
    function nf(a) {
      var b = a;
      if ("object" == typeof a && null != a) {
        b = "length" in a ? [] : {};
        for (var c in a)
          M3(b, c, nf(a[c]));
      }
      return b;
    }
    ;
    function of(a) {
      var b = a && (a[pf] ? "phone" : null);
      if (b && a && a[qf]) {
        M3(this, "uid", a[qf]);
        M3(this, "displayName", a[rf] || null);
        var c = null;
        a[sf] && (c = new Date(a[sf]).toUTCString());
        M3(this, "enrollmentTime", c);
        M3(this, "factorId", b);
      } else
        throw new t2("internal-error", "Internal assert: invalid MultiFactorInfo object");
    }
    of.prototype.w = function() {
      return {uid: this.uid, displayName: this.displayName, factorId: this.factorId, enrollmentTime: this.enrollmentTime};
    };
    function tf(a) {
      try {
        var b = new uf(a);
      } catch (c) {
        b = null;
      }
      return b;
    }
    var rf = "displayName", sf = "enrolledAt", qf = "mfaEnrollmentId", pf = "phoneInfo";
    function uf(a) {
      of.call(this, a);
      M3(this, "phoneNumber", a[pf]);
    }
    r2(uf, of);
    uf.prototype.w = function() {
      var a = uf.ab.w.call(this);
      a.phoneNumber = this.phoneNumber;
      return a;
    };
    function vf(a) {
      var b = {}, c = a[wf], d = a[xf], e = a[yf];
      a = tf(a[zf]);
      if (!e || e != Af && e != Bf && !c || e == Bf && !d || e == Cf && !a)
        throw Error("Invalid checkActionCode response!");
      e == Bf ? (b[Df] = c || null, b[Ef] = c || null, b[Ff] = d) : (b[Df] = d || null, b[Ef] = d || null, b[Ff] = c || null);
      b[Gf] = a || null;
      M3(this, Hf, e);
      M3(this, If, nf(b));
    }
    var Cf = "REVERT_SECOND_FACTOR_ADDITION", Af = "EMAIL_SIGNIN", Bf = "VERIFY_AND_CHANGE_EMAIL", wf = "email", zf = "mfaInfo", xf = "newEmail", yf = "requestType", Ff = "email", Df = "fromEmail", Gf = "multiFactorInfo", Ef = "previousEmail", If = "data", Hf = "operation";
    function Jf(a) {
      a = J3(a);
      var b = be2(a, Kf) || null, c = be2(a, Lf) || null, d = be2(a, Mf) || null;
      d = d ? Nf[d] || null : null;
      if (!b || !c || !d)
        throw new t2("argument-error", Kf + ", " + Lf + "and " + Mf + " are required in a valid action code URL.");
      N3(this, {apiKey: b, operation: d, code: c, continueUrl: be2(a, Of) || null, languageCode: be2(a, Pf) || null, tenantId: be2(a, Qf) || null});
    }
    var Kf = "apiKey", Lf = "oobCode", Of = "continueUrl", Pf = "languageCode", Mf = "mode", Qf = "tenantId", Nf = {recoverEmail: "RECOVER_EMAIL", resetPassword: "PASSWORD_RESET", revertSecondFactorAddition: Cf, signIn: Af, verifyAndChangeEmail: Bf, verifyEmail: "VERIFY_EMAIL"};
    function Rf(a) {
      try {
        return new Jf(a);
      } catch (b) {
        return null;
      }
    }
    ;
    function Sf(a) {
      var b = a[Tf];
      if ("undefined" === typeof b)
        throw new t2("missing-continue-uri");
      if ("string" !== typeof b || "string" === typeof b && !b.length)
        throw new t2("invalid-continue-uri");
      this.h = b;
      this.b = this.a = null;
      this.g = false;
      var c = a[Uf];
      if (c && "object" === typeof c) {
        b = c[Vf];
        var d = c[Wf];
        c = c[Xf];
        if ("string" === typeof b && b.length) {
          this.a = b;
          if ("undefined" !== typeof d && "boolean" !== typeof d)
            throw new t2("argument-error", Wf + " property must be a boolean when specified.");
          this.g = !!d;
          if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length))
            throw new t2("argument-error", Xf + " property must be a non empty string when specified.");
          this.b = c || null;
        } else {
          if ("undefined" !== typeof b)
            throw new t2("argument-error", Vf + " property must be a non empty string when specified.");
          if ("undefined" !== typeof d || "undefined" !== typeof c)
            throw new t2("missing-android-pkg-name");
        }
      } else if ("undefined" !== typeof c)
        throw new t2("argument-error", Uf + " property must be a non null object when specified.");
      this.f = null;
      if ((b = a[Yf]) && "object" === typeof b)
        if (b = b[Zf], "string" === typeof b && b.length)
          this.f = b;
        else {
          if ("undefined" !== typeof b)
            throw new t2("argument-error", Zf + " property must be a non empty string when specified.");
        }
      else if ("undefined" !== typeof b)
        throw new t2("argument-error", Yf + " property must be a non null object when specified.");
      b = a[$f];
      if ("undefined" !== typeof b && "boolean" !== typeof b)
        throw new t2("argument-error", $f + " property must be a boolean when specified.");
      this.c = !!b;
      a = a[ag];
      if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length))
        throw new t2("argument-error", ag + " property must be a non empty string when specified.");
      this.i = a || null;
    }
    var Uf = "android", ag = "dynamicLinkDomain", $f = "handleCodeInApp", Yf = "iOS", Tf = "url", Wf = "installApp", Xf = "minimumVersion", Vf = "packageName", Zf = "bundleId";
    function bg(a) {
      var b = {};
      b.continueUrl = a.h;
      b.canHandleCodeInApp = a.c;
      if (b.androidPackageName = a.a)
        b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
      b.iOSBundleId = a.f;
      b.dynamicLinkDomain = a.i;
      for (var c in b)
        null === b[c] && delete b[c];
      return b;
    }
    ;
    function cg(a) {
      return Ra3(a, function(b) {
        b = b.toString(16);
        return 1 < b.length ? b : "0" + b;
      }).join("");
    }
    ;
    var dg = null;
    function eg(a) {
      var b = "";
      fg(a, function(c) {
        b += String.fromCharCode(c);
      });
      return b;
    }
    function fg(a, b) {
      function c(n2) {
        for (; d < a.length; ) {
          var p2 = a.charAt(d++), v2 = dg[p2];
          if (null != v2)
            return v2;
          if (!/^[\s\xa0]*$/.test(p2))
            throw Error("Unknown base64 encoding at char: " + p2);
        }
        return n2;
      }
      gg();
      for (var d = 0; ; ) {
        var e = c(-1), f = c(0), g = c(64), h2 = c(64);
        if (64 === h2 && -1 === e)
          break;
        b(e << 2 | f >> 4);
        64 != g && (b(f << 4 & 240 | g >> 2), 64 != h2 && b(g << 6 & 192 | h2));
      }
    }
    function gg() {
      if (!dg) {
        dg = {};
        for (var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c = 0; 5 > c; c++)
          for (var d = a.concat(b[c].split("")), e = 0; e < d.length; e++) {
            var f = d[e];
            void 0 === dg[f] && (dg[f] = e);
          }
      }
    }
    ;
    function hg(a) {
      var b = ig(a);
      if (!(b && b.sub && b.iss && b.aud && b.exp))
        throw Error("Invalid JWT");
      this.h = a;
      this.a = b.exp;
      this.i = b.sub;
      a = Date.now() / 1e3;
      this.g = b.iat || (a > this.a ? this.a : a);
      this.b = b.provider_id || b.firebase && b.firebase.sign_in_provider || null;
      this.f = b.firebase && b.firebase.tenant || null;
      this.c = !!b.is_anonymous || "anonymous" == this.b;
    }
    hg.prototype.T = function() {
      return this.f;
    };
    hg.prototype.l = function() {
      return this.c;
    };
    hg.prototype.toString = function() {
      return this.h;
    };
    function jg(a) {
      try {
        return new hg(a);
      } catch (b) {
        return null;
      }
    }
    function ig(a) {
      if (!a)
        return null;
      a = a.split(".");
      if (3 != a.length)
        return null;
      a = a[1];
      for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++)
        a += ".";
      try {
        return JSON.parse(eg(a));
      } catch (d) {
      }
      return null;
    }
    ;
    var kg = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "), lg = ["client_id", "response_type", "scope", "redirect_uri", "state"], mg = {nd: {Ja: "locale", ua: 700, ta: 600, fa: "facebook.com", Xa: lg}, pd: {Ja: null, ua: 500, ta: 750, fa: "github.com", Xa: lg}, qd: {Ja: "hl", ua: 515, ta: 680, fa: "google.com", Xa: lg}, wd: {Ja: "lang", ua: 485, ta: 705, fa: "twitter.com", Xa: kg}, kd: {Ja: "locale", ua: 640, ta: 600, fa: "apple.com", Xa: []}};
    function ng(a) {
      for (var b in mg)
        if (mg[b].fa == a)
          return mg[b];
      return null;
    }
    ;
    function og(a) {
      var b = {};
      b["facebook.com"] = pg;
      b["google.com"] = qg;
      b["github.com"] = rg;
      b["twitter.com"] = sg;
      var c = a && a[tg];
      try {
        if (c)
          return b[c] ? new b[c](a) : new ug(a);
        if ("undefined" !== typeof a[vg])
          return new wg(a);
      } catch (d) {
      }
      return null;
    }
    var vg = "idToken", tg = "providerId";
    function wg(a) {
      var b = a[tg];
      if (!b && a[vg]) {
        var c = jg(a[vg]);
        c && c.b && (b = c.b);
      }
      if (!b)
        throw Error("Invalid additional user info!");
      if ("anonymous" == b || "custom" == b)
        b = null;
      c = false;
      "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = true);
      M3(this, "providerId", b);
      M3(this, "isNewUser", c);
    }
    function ug(a) {
      wg.call(this, a);
      a = We2(a.rawUserInfo || "{}");
      M3(this, "profile", nf(a || {}));
    }
    r2(ug, wg);
    function pg(a) {
      ug.call(this, a);
      if ("facebook.com" != this.providerId)
        throw Error("Invalid provider ID!");
    }
    r2(pg, ug);
    function rg(a) {
      ug.call(this, a);
      if ("github.com" != this.providerId)
        throw Error("Invalid provider ID!");
      M3(this, "username", this.profile && this.profile.login || null);
    }
    r2(rg, ug);
    function qg(a) {
      ug.call(this, a);
      if ("google.com" != this.providerId)
        throw Error("Invalid provider ID!");
    }
    r2(qg, ug);
    function sg(a) {
      ug.call(this, a);
      if ("twitter.com" != this.providerId)
        throw Error("Invalid provider ID!");
      M3(this, "username", a.screenName || null);
    }
    r2(sg, ug);
    function xg(a) {
      var b = J3(a), c = be2(b, "link"), d = be2(J3(c), "link");
      b = be2(b, "deep_link_id");
      return be2(J3(b), "link") || b || d || c || a;
    }
    ;
    function yg(a, b) {
      if (!a && !b)
        throw new t2("internal-error", "Internal assert: no raw session string available");
      if (a && b)
        throw new t2("internal-error", "Internal assert: unable to determine the session type");
      this.a = a || null;
      this.b = b || null;
      this.type = this.a ? zg : Ag;
    }
    var zg = "enroll", Ag = "signin";
    yg.prototype.Ha = function() {
      return this.a ? E3(this.a) : E3(this.b);
    };
    yg.prototype.w = function() {
      return this.type == zg ? {multiFactorSession: {idToken: this.a}} : {multiFactorSession: {pendingCredential: this.b}};
    };
    function Bg() {
    }
    Bg.prototype.ka = function() {
    };
    Bg.prototype.b = function() {
    };
    Bg.prototype.c = function() {
    };
    Bg.prototype.w = function() {
    };
    function Cg(a, b) {
      return a.then(function(c) {
        if (c[Dg]) {
          var d = jg(c[Dg]);
          if (!d || b != d.i)
            throw new t2("user-mismatch");
          return c;
        }
        throw new t2("user-mismatch");
      }).o(function(c) {
        throw c && c.code && c.code == xa2 + "user-not-found" ? new t2("user-mismatch") : c;
      });
    }
    function Eg(a, b) {
      if (b)
        this.a = b;
      else
        throw new t2("internal-error", "failed to construct a credential");
      M3(this, "providerId", a);
      M3(this, "signInMethod", a);
    }
    Eg.prototype.ka = function(a) {
      return Fg(a, Gg(this));
    };
    Eg.prototype.b = function(a, b) {
      var c = Gg(this);
      c.idToken = b;
      return Hg(a, c);
    };
    Eg.prototype.c = function(a, b) {
      return Cg(Ig(a, Gg(this)), b);
    };
    function Gg(a) {
      return {pendingToken: a.a, requestUri: "http://localhost"};
    }
    Eg.prototype.w = function() {
      return {providerId: this.providerId, signInMethod: this.signInMethod, pendingToken: this.a};
    };
    function Jg(a) {
      if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken)
        try {
          return new Eg(a.providerId, a.pendingToken);
        } catch (b) {
        }
      return null;
    }
    function Kg(a, b, c) {
      this.a = null;
      if (b.idToken || b.accessToken)
        b.idToken && M3(this, "idToken", b.idToken), b.accessToken && M3(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && M3(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);
      else if (b.oauthToken && b.oauthTokenSecret)
        M3(this, "accessToken", b.oauthToken), M3(this, "secret", b.oauthTokenSecret);
      else
        throw new t2("internal-error", "failed to construct a credential");
      M3(this, "providerId", a);
      M3(this, "signInMethod", c);
    }
    Kg.prototype.ka = function(a) {
      return Fg(a, Lg(this));
    };
    Kg.prototype.b = function(a, b) {
      var c = Lg(this);
      c.idToken = b;
      return Hg(a, c);
    };
    Kg.prototype.c = function(a, b) {
      var c = Lg(this);
      return Cg(Ig(a, c), b);
    };
    function Lg(a) {
      var b = {};
      a.idToken && (b.id_token = a.idToken);
      a.accessToken && (b.access_token = a.accessToken);
      a.secret && (b.oauth_token_secret = a.secret);
      b.providerId = a.providerId;
      a.nonce && !a.a && (b.nonce = a.nonce);
      b = {postBody: fe2(b).toString(), requestUri: "http://localhost"};
      a.a && (delete b.postBody, b.pendingToken = a.a);
      return b;
    }
    Kg.prototype.w = function() {
      var a = {providerId: this.providerId, signInMethod: this.signInMethod};
      this.idToken && (a.oauthIdToken = this.idToken);
      this.accessToken && (a.oauthAccessToken = this.accessToken);
      this.secret && (a.oauthTokenSecret = this.secret);
      this.nonce && (a.nonce = this.nonce);
      this.a && (a.pendingToken = this.a);
      return a;
    };
    function Mg(a) {
      if (a && a.providerId && a.signInMethod) {
        var b = {idToken: a.oauthIdToken, accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken, oauthTokenSecret: a.oauthTokenSecret, oauthToken: a.oauthTokenSecret && a.oauthAccessToken, nonce: a.nonce, pendingToken: a.pendingToken};
        try {
          return new Kg(a.providerId, b, a.signInMethod);
        } catch (c) {
        }
      }
      return null;
    }
    function Ng(a, b) {
      this.Qc = b || [];
      N3(this, {providerId: a, isOAuthProvider: true});
      this.Ib = {};
      this.pb = (ng(a) || {}).Ja || null;
      this.ob = null;
    }
    Ng.prototype.Ka = function(a) {
      this.Ib = nb2(a);
      return this;
    };
    function Og(a) {
      if ("string" !== typeof a || 0 != a.indexOf("saml."))
        throw new t2("argument-error", 'SAML provider IDs must be prefixed with "saml."');
      Ng.call(this, a, []);
    }
    r2(Og, Ng);
    function Pg(a) {
      Ng.call(this, a, lg);
      this.a = [];
    }
    r2(Pg, Ng);
    Pg.prototype.Ca = function(a) {
      Va3(this.a, a) || this.a.push(a);
      return this;
    };
    Pg.prototype.Qb = function() {
      return Za3(this.a);
    };
    Pg.prototype.credential = function(a, b) {
      var c;
      m(a) ? c = {idToken: a.idToken || null, accessToken: a.accessToken || null, nonce: a.rawNonce || null} : c = {idToken: a || null, accessToken: b || null};
      if (!c.idToken && !c.accessToken)
        throw new t2("argument-error", "credential failed: must provide the ID token and/or the access token.");
      return new Kg(this.providerId, c, this.providerId);
    };
    function Qg() {
      Pg.call(this, "facebook.com");
    }
    r2(Qg, Pg);
    M3(Qg, "PROVIDER_ID", "facebook.com");
    M3(Qg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");
    function Rg(a) {
      if (!a)
        throw new t2("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
      var b = a;
      m(a) && (b = a.accessToken);
      return new Qg().credential({accessToken: b});
    }
    function Sg() {
      Pg.call(this, "github.com");
    }
    r2(Sg, Pg);
    M3(Sg, "PROVIDER_ID", "github.com");
    M3(Sg, "GITHUB_SIGN_IN_METHOD", "github.com");
    function Tg(a) {
      if (!a)
        throw new t2("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
      var b = a;
      m(a) && (b = a.accessToken);
      return new Sg().credential({accessToken: b});
    }
    function Ug() {
      Pg.call(this, "google.com");
      this.Ca("profile");
    }
    r2(Ug, Pg);
    M3(Ug, "PROVIDER_ID", "google.com");
    M3(Ug, "GOOGLE_SIGN_IN_METHOD", "google.com");
    function Vg(a, b) {
      var c = a;
      m(a) && (c = a.idToken, b = a.accessToken);
      return new Ug().credential({idToken: c, accessToken: b});
    }
    function Wg() {
      Ng.call(this, "twitter.com", kg);
    }
    r2(Wg, Ng);
    M3(Wg, "PROVIDER_ID", "twitter.com");
    M3(Wg, "TWITTER_SIGN_IN_METHOD", "twitter.com");
    function Xg(a, b) {
      var c = a;
      m(c) || (c = {oauthToken: a, oauthTokenSecret: b});
      if (!c.oauthToken || !c.oauthTokenSecret)
        throw new t2("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
      return new Kg("twitter.com", c, "twitter.com");
    }
    function Yg(a, b, c) {
      this.a = a;
      this.f = b;
      M3(this, "providerId", "password");
      M3(this, "signInMethod", c === Zg.EMAIL_LINK_SIGN_IN_METHOD ? Zg.EMAIL_LINK_SIGN_IN_METHOD : Zg.EMAIL_PASSWORD_SIGN_IN_METHOD);
    }
    Yg.prototype.ka = function(a) {
      return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O3(a, $g, {email: this.a, oobCode: this.f}) : O3(a, ah, {email: this.a, password: this.f});
    };
    Yg.prototype.b = function(a, b) {
      return this.signInMethod == Zg.EMAIL_LINK_SIGN_IN_METHOD ? O3(a, bh, {idToken: b, email: this.a, oobCode: this.f}) : O3(a, ch, {idToken: b, email: this.a, password: this.f});
    };
    Yg.prototype.c = function(a, b) {
      return Cg(this.ka(a), b);
    };
    Yg.prototype.w = function() {
      return {email: this.a, password: this.f, signInMethod: this.signInMethod};
    };
    function dh(a) {
      return a && a.email && a.password ? new Yg(a.email, a.password, a.signInMethod) : null;
    }
    function Zg() {
      N3(this, {providerId: "password", isOAuthProvider: false});
    }
    function eh(a, b) {
      b = fh(b);
      if (!b)
        throw new t2("argument-error", "Invalid email link!");
      return new Yg(a, b.code, Zg.EMAIL_LINK_SIGN_IN_METHOD);
    }
    function fh(a) {
      a = xg(a);
      return (a = Rf(a)) && a.operation === Af ? a : null;
    }
    N3(Zg, {PROVIDER_ID: "password"});
    N3(Zg, {EMAIL_LINK_SIGN_IN_METHOD: "emailLink"});
    N3(Zg, {EMAIL_PASSWORD_SIGN_IN_METHOD: "password"});
    function gh(a) {
      if (!(a.eb && a.cb || a.La && a.ea))
        throw new t2("internal-error");
      this.a = a;
      M3(this, "providerId", "phone");
      this.fa = "phone";
      M3(this, "signInMethod", "phone");
    }
    gh.prototype.ka = function(a) {
      return a.fb(hh(this));
    };
    gh.prototype.b = function(a, b) {
      var c = hh(this);
      c.idToken = b;
      return O3(a, ih, c);
    };
    gh.prototype.c = function(a, b) {
      var c = hh(this);
      c.operation = "REAUTH";
      a = O3(a, jh, c);
      return Cg(a, b);
    };
    gh.prototype.w = function() {
      var a = {providerId: "phone"};
      this.a.eb && (a.verificationId = this.a.eb);
      this.a.cb && (a.verificationCode = this.a.cb);
      this.a.La && (a.temporaryProof = this.a.La);
      this.a.ea && (a.phoneNumber = this.a.ea);
      return a;
    };
    function kh(a) {
      if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
        var b = {};
        w2(["verificationId", "verificationCode", "temporaryProof", "phoneNumber"], function(c) {
          a[c] && (b[c] = a[c]);
        });
        return new gh(b);
      }
      return null;
    }
    function hh(a) {
      return a.a.La && a.a.ea ? {temporaryProof: a.a.La, phoneNumber: a.a.ea} : {sessionInfo: a.a.eb, code: a.a.cb};
    }
    function lh(a) {
      try {
        this.a = a || index_esm_default.auth();
      } catch (b) {
        throw new t2("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
      }
      N3(this, {providerId: "phone", isOAuthProvider: false});
    }
    lh.prototype.fb = function(a, b) {
      var c = this.a.a;
      return E3(b.verify()).then(function(d) {
        if ("string" !== typeof d)
          throw new t2("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");
        switch (b.type) {
          case "recaptcha":
            var e = m(a) ? a.session : null, f = m(a) ? a.phoneNumber : a, g;
            e && e.type == zg ? g = e.Ha().then(function(h2) {
              return mh(c, {idToken: h2, phoneEnrollmentInfo: {phoneNumber: f, recaptchaToken: d}});
            }) : e && e.type == Ag ? g = e.Ha().then(function(h2) {
              return nh(c, {mfaPendingCredential: h2, mfaEnrollmentId: a.multiFactorHint && a.multiFactorHint.uid || a.multiFactorUid, phoneSignInInfo: {recaptchaToken: d}});
            }) : g = oh(c, {phoneNumber: f, recaptchaToken: d});
            return g.then(function(h2) {
              "function" === typeof b.reset && b.reset();
              return h2;
            }, function(h2) {
              "function" === typeof b.reset && b.reset();
              throw h2;
            });
          default:
            throw new t2("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
        }
      });
    };
    function ph(a, b) {
      if (!a)
        throw new t2("missing-verification-id");
      if (!b)
        throw new t2("missing-verification-code");
      return new gh({eb: a, cb: b});
    }
    N3(lh, {PROVIDER_ID: "phone"});
    N3(lh, {PHONE_SIGN_IN_METHOD: "phone"});
    function qh(a) {
      if (a.temporaryProof && a.phoneNumber)
        return new gh({La: a.temporaryProof, ea: a.phoneNumber});
      var b = a && a.providerId;
      if (!b || "password" === b)
        return null;
      var c = a && a.oauthAccessToken, d = a && a.oauthTokenSecret, e = a && a.nonce, f = a && a.oauthIdToken, g = a && a.pendingToken;
      try {
        switch (b) {
          case "google.com":
            return Vg(f, c);
          case "facebook.com":
            return Rg(c);
          case "github.com":
            return Tg(c);
          case "twitter.com":
            return Xg(c, d);
          default:
            return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new Eg(b, g) : new Kg(b, {
              pendingToken: g,
              idToken: a.oauthIdToken,
              accessToken: a.oauthAccessToken
            }, b) : new Pg(b).credential({idToken: f, accessToken: c, rawNonce: e}) : null;
        }
      } catch (h2) {
        return null;
      }
    }
    function rh(a) {
      if (!a.isOAuthProvider)
        throw new t2("invalid-oauth-provider");
    }
    ;
    function sh(a, b, c, d, e, f, g) {
      this.c = a;
      this.b = b || null;
      this.g = c || null;
      this.f = d || null;
      this.i = f || null;
      this.h = g || null;
      this.a = e || null;
      if (this.g || this.a) {
        if (this.g && this.a)
          throw new t2("invalid-auth-event");
        if (this.g && !this.f)
          throw new t2("invalid-auth-event");
      } else
        throw new t2("invalid-auth-event");
    }
    sh.prototype.getUid = function() {
      var a = [];
      a.push(this.c);
      this.b && a.push(this.b);
      this.f && a.push(this.f);
      this.h && a.push(this.h);
      return a.join("-");
    };
    sh.prototype.T = function() {
      return this.h;
    };
    sh.prototype.w = function() {
      return {type: this.c, eventId: this.b, urlResponse: this.g, sessionId: this.f, postBody: this.i, tenantId: this.h, error: this.a && this.a.w()};
    };
    function th(a) {
      a = a || {};
      return a.type ? new sh(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Aa3(a.error), a.postBody, a.tenantId) : null;
    }
    ;
    function uh() {
      this.b = null;
      this.a = [];
    }
    var vh = null;
    function wh(a) {
      var b = vh;
      b.a.push(a);
      b.b || (b.b = function(c) {
        for (var d = 0; d < b.a.length; d++)
          b.a[d](c);
      }, a = L3("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));
    }
    ;
    function xh(a) {
      var b = "unauthorized-domain", c = void 0, d = J3(a);
      a = d.a;
      d = d.c;
      "chrome-extension" == d ? c = Qb2("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Qb2("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
      t2.call(this, b, c);
    }
    r2(xh, t2);
    function yh(a, b, c) {
      t2.call(this, a, c);
      a = b || {};
      a.Jb && M3(this, "email", a.Jb);
      a.ea && M3(this, "phoneNumber", a.ea);
      a.credential && M3(this, "credential", a.credential);
      a.Zb && M3(this, "tenantId", a.Zb);
    }
    r2(yh, t2);
    yh.prototype.w = function() {
      var a = {code: this.code, message: this.message};
      this.email && (a.email = this.email);
      this.phoneNumber && (a.phoneNumber = this.phoneNumber);
      this.tenantId && (a.tenantId = this.tenantId);
      var b = this.credential && this.credential.w();
      b && z3(a, b);
      return a;
    };
    yh.prototype.toJSON = function() {
      return this.w();
    };
    function zh(a) {
      if (a.code) {
        var b = a.code || "";
        0 == b.indexOf(xa2) && (b = b.substring(xa2.length));
        var c = {credential: qh(a), Zb: a.tenantId};
        if (a.email)
          c.Jb = a.email;
        else if (a.phoneNumber)
          c.ea = a.phoneNumber;
        else if (!c.credential)
          return new t2(b, a.message || void 0);
        return new yh(b, c, a.message);
      }
      return null;
    }
    ;
    function Ah() {
    }
    Ah.prototype.c = null;
    function Bh(a) {
      return a.c || (a.c = a.b());
    }
    ;
    var Ch;
    function Dh() {
    }
    r2(Dh, Ah);
    Dh.prototype.a = function() {
      var a = Eh(this);
      return a ? new ActiveXObject(a) : new XMLHttpRequest();
    };
    Dh.prototype.b = function() {
      var a = {};
      Eh(this) && (a[0] = true, a[1] = true);
      return a;
    };
    function Eh(a) {
      if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
        for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
          var d = b[c];
          try {
            return new ActiveXObject(d), a.f = d;
          } catch (e) {
          }
        }
        throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
      }
      return a.f;
    }
    Ch = new Dh();
    function Fh() {
    }
    r2(Fh, Ah);
    Fh.prototype.a = function() {
      var a = new XMLHttpRequest();
      if ("withCredentials" in a)
        return a;
      if ("undefined" != typeof XDomainRequest)
        return new Gh();
      throw Error("Unsupported browser");
    };
    Fh.prototype.b = function() {
      return {};
    };
    function Gh() {
      this.a = new XDomainRequest();
      this.readyState = 0;
      this.onreadystatechange = null;
      this.responseType = this.responseText = this.response = "";
      this.status = -1;
      this.statusText = "";
      this.a.onload = q3(this.qc, this);
      this.a.onerror = q3(this.Sb, this);
      this.a.onprogress = q3(this.rc, this);
      this.a.ontimeout = q3(this.vc, this);
    }
    k3 = Gh.prototype;
    k3.open = function(a, b, c) {
      if (null != c && !c)
        throw Error("Only async requests are supported.");
      this.a.open(a, b);
    };
    k3.send = function(a) {
      if (a)
        if ("string" == typeof a)
          this.a.send(a);
        else
          throw Error("Only string data is supported");
      else
        this.a.send();
    };
    k3.abort = function() {
      this.a.abort();
    };
    k3.setRequestHeader = function() {
    };
    k3.getResponseHeader = function(a) {
      return "content-type" == a.toLowerCase() ? this.a.contentType : "";
    };
    k3.qc = function() {
      this.status = 200;
      this.response = this.responseText = this.a.responseText;
      Hh(this, 4);
    };
    k3.Sb = function() {
      this.status = 500;
      this.response = this.responseText = "";
      Hh(this, 4);
    };
    k3.vc = function() {
      this.Sb();
    };
    k3.rc = function() {
      this.status = 200;
      Hh(this, 1);
    };
    function Hh(a, b) {
      a.readyState = b;
      if (a.onreadystatechange)
        a.onreadystatechange();
    }
    k3.getAllResponseHeaders = function() {
      return "content-type: " + this.a.contentType;
    };
    function Ih(a, b, c) {
      this.reset(a, b, c, void 0, void 0);
    }
    Ih.prototype.a = null;
    var Jh = 0;
    Ih.prototype.reset = function(a, b, c, d, e) {
      "number" == typeof e || Jh++;
      d || va3();
      delete this.a;
    };
    function Kh(a) {
      this.f = a;
      this.b = this.c = this.a = null;
    }
    function Lh(a, b) {
      this.name = a;
      this.value = b;
    }
    Lh.prototype.toString = function() {
      return this.name;
    };
    var Mh = new Lh("SEVERE", 1e3), Nh = new Lh("WARNING", 900), Oh = new Lh("CONFIG", 700), Ph = new Lh("FINE", 500);
    function Qh(a) {
      if (a.c)
        return a.c;
      if (a.a)
        return Qh(a.a);
      Ga3("Root logger has no level set.");
      return null;
    }
    Kh.prototype.log = function(a, b, c) {
      if (a.value >= Qh(this).value)
        for (oa3(b) && (b = b()), a = new Ih(a, String(b), this.f), c && (a.a = c), c = this; c; )
          c = c.a;
    };
    var Rh = {}, Sh = null;
    function Th(a) {
      Sh || (Sh = new Kh(""), Rh[""] = Sh, Sh.c = Oh);
      var b;
      if (!(b = Rh[a])) {
        b = new Kh(a);
        var c = a.lastIndexOf("."), d = a.substr(c + 1);
        c = Th(a.substr(0, c));
        c.b || (c.b = {});
        c.b[d] = b;
        b.a = c;
        Rh[a] = b;
      }
      return b;
    }
    ;
    function Uh(a, b) {
      a && a.log(Ph, b, void 0);
    }
    ;
    function Vh(a) {
      this.f = a;
    }
    r2(Vh, Ah);
    Vh.prototype.a = function() {
      return new Wh(this.f);
    };
    Vh.prototype.b = function(a) {
      return function() {
        return a;
      };
    }({});
    function Wh(a) {
      H3.call(this);
      this.u = a;
      this.h = void 0;
      this.readyState = Xh;
      this.status = 0;
      this.responseType = this.responseText = this.response = this.statusText = "";
      this.onreadystatechange = null;
      this.l = new Headers();
      this.b = null;
      this.s = "GET";
      this.f = "";
      this.a = false;
      this.i = Th("goog.net.FetchXmlHttp");
      this.m = this.c = this.g = null;
    }
    r2(Wh, H3);
    var Xh = 0;
    k3 = Wh.prototype;
    k3.open = function(a, b) {
      if (this.readyState != Xh)
        throw this.abort(), Error("Error reopening a connection");
      this.s = a;
      this.f = b;
      this.readyState = 1;
      Yh(this);
    };
    k3.send = function(a) {
      if (1 != this.readyState)
        throw this.abort(), Error("need to call open() first. ");
      this.a = true;
      var b = {headers: this.l, method: this.s, credentials: this.h, cache: void 0};
      a && (b.body = a);
      this.u.fetch(new Request(this.f, b)).then(this.uc.bind(this), this.Ua.bind(this));
    };
    k3.abort = function() {
      this.response = this.responseText = "";
      this.l = new Headers();
      this.status = 0;
      this.c && this.c.cancel("Request was aborted.");
      1 <= this.readyState && this.a && 4 != this.readyState && (this.a = false, Zh(this));
      this.readyState = Xh;
    };
    k3.uc = function(a) {
      this.a && (this.g = a, this.b || (this.status = this.g.status, this.statusText = this.g.statusText, this.b = a.headers, this.readyState = 2, Yh(this)), this.a && (this.readyState = 3, Yh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.sc.bind(this), this.Ua.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.m = new TextDecoder(), $h(this)) : a.text().then(this.tc.bind(this), this.Ua.bind(this)))));
    };
    function $h(a) {
      a.c.read().then(a.pc.bind(a)).catch(a.Ua.bind(a));
    }
    k3.pc = function(a) {
      if (this.a) {
        var b = this.m.decode(a.value ? a.value : new Uint8Array(0), {stream: !a.done});
        b && (this.response = this.responseText += b);
        a.done ? Zh(this) : Yh(this);
        3 == this.readyState && $h(this);
      }
    };
    k3.tc = function(a) {
      this.a && (this.response = this.responseText = a, Zh(this));
    };
    k3.sc = function(a) {
      this.a && (this.response = a, Zh(this));
    };
    k3.Ua = function(a) {
      var b = this.i;
      b && b.log(Nh, "Failed to fetch url " + this.f, a instanceof Error ? a : Error(a));
      this.a && Zh(this);
    };
    function Zh(a) {
      a.readyState = 4;
      a.g = null;
      a.c = null;
      a.m = null;
      Yh(a);
    }
    k3.setRequestHeader = function(a, b) {
      this.l.append(a, b);
    };
    k3.getResponseHeader = function(a) {
      return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.i) && a.log(Nh, "Attempting to get response header but no headers have been received for url: " + this.f, void 0), "");
    };
    k3.getAllResponseHeaders = function() {
      if (!this.b) {
        var a = this.i;
        a && a.log(Nh, "Attempting to get all response headers but no headers have been received for url: " + this.f, void 0);
        return "";
      }
      a = [];
      for (var b = this.b.entries(), c = b.next(); !c.done; )
        c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
      return a.join("\r\n");
    };
    function Yh(a) {
      a.onreadystatechange && a.onreadystatechange.call(a);
    }
    Object.defineProperty(Wh.prototype, "withCredentials", {get: function() {
      return "include" === this.h;
    }, set: function(a) {
      this.h = a ? "include" : "same-origin";
    }});
    function ai2(a) {
      H3.call(this);
      this.headers = new Jd2();
      this.D = a || null;
      this.c = false;
      this.C = this.a = null;
      this.h = this.R = this.l = "";
      this.f = this.O = this.i = this.J = false;
      this.g = 0;
      this.s = null;
      this.m = bi2;
      this.u = this.S = false;
    }
    r2(ai2, H3);
    var bi2 = "";
    ai2.prototype.b = Th("goog.net.XhrIo");
    var ci2 = /^https?$/i, di2 = ["POST", "PUT"];
    function ei2(a, b, c, d, e) {
      if (a.a)
        throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
      c = c ? c.toUpperCase() : "GET";
      a.l = b;
      a.h = "";
      a.R = c;
      a.J = false;
      a.c = true;
      a.a = a.D ? a.D.a() : Ch.a();
      a.C = a.D ? Bh(a.D) : Bh(Ch);
      a.a.onreadystatechange = q3(a.Vb, a);
      try {
        Uh(a.b, fi2(a, "Opening Xhr")), a.O = true, a.a.open(c, String(b), true), a.O = false;
      } catch (g) {
        Uh(a.b, fi2(a, "Error opening Xhr: " + g.message));
        gi2(a, g);
        return;
      }
      b = d || "";
      var f = new Jd2(a.headers);
      e && Id2(e, function(g, h2) {
        f.set(h2, g);
      });
      e = Ta3(f.Y());
      d = l.FormData && b instanceof l.FormData;
      !Va3(di2, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
      f.forEach(function(g, h2) {
        this.a.setRequestHeader(h2, g);
      }, a);
      a.m && (a.a.responseType = a.m);
      "withCredentials" in a.a && a.a.withCredentials !== a.S && (a.a.withCredentials = a.S);
      try {
        hi2(a), 0 < a.g && (a.u = ii2(a.a), Uh(a.b, fi2(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.u)), a.u ? (a.a.timeout = a.g, a.a.ontimeout = q3(a.Ma, a)) : a.s = Ed2(a.Ma, a.g, a)), Uh(a.b, fi2(a, "Sending request")), a.i = true, a.a.send(b), a.i = false;
      } catch (g) {
        Uh(a.b, fi2(a, "Send error: " + g.message)), gi2(a, g);
      }
    }
    function ii2(a) {
      return Wb2 && fc3(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
    }
    function Ua3(a) {
      return "content-type" == a.toLowerCase();
    }
    k3 = ai2.prototype;
    k3.Ma = function() {
      "undefined" != typeof ha3 && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Uh(this.b, fi2(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
    };
    function gi2(a, b) {
      a.c = false;
      a.a && (a.f = true, a.a.abort(), a.f = false);
      a.h = b;
      ji2(a);
      ki2(a);
    }
    function ji2(a) {
      a.J || (a.J = true, a.dispatchEvent("complete"), a.dispatchEvent("error"));
    }
    k3.abort = function() {
      this.a && this.c && (Uh(this.b, fi2(this, "Aborting")), this.c = false, this.f = true, this.a.abort(), this.f = false, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ki2(this));
    };
    k3.Da = function() {
      this.a && (this.c && (this.c = false, this.f = true, this.a.abort(), this.f = false), ki2(this, true));
      ai2.ab.Da.call(this);
    };
    k3.Vb = function() {
      this.xa || (this.O || this.i || this.f ? li2(this) : this.Jc());
    };
    k3.Jc = function() {
      li2(this);
    };
    function li2(a) {
      if (a.c && "undefined" != typeof ha3) {
        if (a.C[1] && 4 == mi2(a) && 2 == ni2(a))
          Uh(a.b, fi2(a, "Local request error detected and ignored"));
        else if (a.i && 4 == mi2(a))
          Ed2(a.Vb, 0, a);
        else if (a.dispatchEvent("readystatechange"), 4 == mi2(a)) {
          Uh(a.b, fi2(a, "Request complete"));
          a.c = false;
          try {
            var b = ni2(a);
            a:
              switch (b) {
                case 200:
                case 201:
                case 202:
                case 204:
                case 206:
                case 304:
                case 1223:
                  var c = true;
                  break a;
                default:
                  c = false;
              }
            var d;
            if (!(d = c)) {
              var e;
              if (e = 0 === b) {
                var f = String(a.l).match(Md2)[1] || null;
                if (!f && l.self && l.self.location) {
                  var g = l.self.location.protocol;
                  f = g.substr(0, g.length - 1);
                }
                e = !ci2.test(f ? f.toLowerCase() : "");
              }
              d = e;
            }
            if (d)
              a.dispatchEvent("complete"), a.dispatchEvent("success");
            else {
              try {
                var h2 = 2 < mi2(a) ? a.a.statusText : "";
              } catch (n2) {
                Uh(a.b, "Can not get status: " + n2.message), h2 = "";
              }
              a.h = h2 + " [" + ni2(a) + "]";
              ji2(a);
            }
          } finally {
            ki2(a);
          }
        }
      }
    }
    function ki2(a, b) {
      if (a.a) {
        hi2(a);
        var c = a.a, d = a.C[0] ? la2 : null;
        a.a = null;
        a.C = null;
        b || a.dispatchEvent("ready");
        try {
          c.onreadystatechange = d;
        } catch (e) {
          (a = a.b) && a.log(Mh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
        }
      }
    }
    function hi2(a) {
      a.a && a.u && (a.a.ontimeout = null);
      a.s && (l.clearTimeout(a.s), a.s = null);
    }
    function mi2(a) {
      return a.a ? a.a.readyState : 0;
    }
    function ni2(a) {
      try {
        return 2 < mi2(a) ? a.a.status : -1;
      } catch (b) {
        return -1;
      }
    }
    function oi2(a) {
      try {
        return a.a ? a.a.responseText : "";
      } catch (b) {
        return Uh(a.b, "Can not get responseText: " + b.message), "";
      }
    }
    k3.getResponse = function() {
      try {
        if (!this.a)
          return null;
        if ("response" in this.a)
          return this.a.response;
        switch (this.m) {
          case bi2:
          case "text":
            return this.a.responseText;
          case "arraybuffer":
            if ("mozResponseArrayBuffer" in this.a)
              return this.a.mozResponseArrayBuffer;
        }
        var a = this.b;
        a && a.log(Mh, "Response type " + this.m + " is not supported on this browser", void 0);
        return null;
      } catch (b) {
        return Uh(this.b, "Can not get response: " + b.message), null;
      }
    };
    function fi2(a, b) {
      return b + " [" + a.R + " " + a.l + " " + ni2(a) + "]";
    }
    ;
    function pi2(a) {
      var b = qi2;
      this.g = [];
      this.u = b;
      this.s = a || null;
      this.f = this.a = false;
      this.c = void 0;
      this.v = this.C = this.i = false;
      this.h = 0;
      this.b = null;
      this.l = 0;
    }
    pi2.prototype.cancel = function(a) {
      if (this.a)
        this.c instanceof pi2 && this.c.cancel();
      else {
        if (this.b) {
          var b = this.b;
          delete this.b;
          a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
        }
        this.u ? this.u.call(this.s, this) : this.v = true;
        this.a || (a = new ri2(this), si2(this), ti2(this, false, a));
      }
    };
    pi2.prototype.m = function(a, b) {
      this.i = false;
      ti2(this, a, b);
    };
    function ti2(a, b, c) {
      a.a = true;
      a.c = c;
      a.f = !b;
      ui2(a);
    }
    function si2(a) {
      if (a.a) {
        if (!a.v)
          throw new vi2(a);
        a.v = false;
      }
    }
    function wi2(a, b) {
      xi2(a, null, b, void 0);
    }
    function xi2(a, b, c, d) {
      a.g.push([b, c, d]);
      a.a && ui2(a);
    }
    pi2.prototype.then = function(a, b, c) {
      var d, e, f = new D3(function(g, h2) {
        d = g;
        e = h2;
      });
      xi2(this, d, function(g) {
        g instanceof ri2 ? f.cancel() : e(g);
      });
      return f.then(a, b, c);
    };
    pi2.prototype.$goog_Thenable = true;
    function yi2(a) {
      return Sa3(a.g, function(b) {
        return oa3(b[1]);
      });
    }
    function ui2(a) {
      if (a.h && a.a && yi2(a)) {
        var b = a.h, c = zi2[b];
        c && (l.clearTimeout(c.a), delete zi2[b]);
        a.h = 0;
      }
      a.b && (a.b.l--, delete a.b);
      b = a.c;
      for (var d = c = false; a.g.length && !a.i; ) {
        var e = a.g.shift(), f = e[0], g = e[1];
        e = e[2];
        if (f = a.f ? g : f)
          try {
            var h2 = f.call(e || a.s, b);
            void 0 !== h2 && (a.f = a.f && (h2 == b || h2 instanceof Error), a.c = b = h2);
            if (Ea3(b) || "function" === typeof l.Promise && b instanceof l.Promise)
              d = true, a.i = true;
          } catch (n2) {
            b = n2, a.f = true, yi2(a) || (c = true);
          }
      }
      a.c = b;
      d && (h2 = q3(a.m, a, true), d = q3(a.m, a, false), b instanceof pi2 ? (xi2(b, h2, d), b.C = true) : b.then(h2, d));
      c && (b = new Ai2(b), zi2[b.a] = b, a.h = b.a);
    }
    function vi2() {
      u.call(this);
    }
    r2(vi2, u);
    vi2.prototype.message = "Deferred has already fired";
    vi2.prototype.name = "AlreadyCalledError";
    function ri2() {
      u.call(this);
    }
    r2(ri2, u);
    ri2.prototype.message = "Deferred was canceled";
    ri2.prototype.name = "CanceledError";
    function Ai2(a) {
      this.a = l.setTimeout(q3(this.c, this), 0);
      this.b = a;
    }
    Ai2.prototype.c = function() {
      delete zi2[this.a];
      throw this.b;
    };
    var zi2 = {};
    function Bi2(a) {
      var b = {}, c = b.document || document, d = yb2(a).toString(), e = oc3(document, "SCRIPT"), f = {Wb: e, Ma: void 0}, g = new pi2(f), h2 = null, n2 = null != b.timeout ? b.timeout : 5e3;
      0 < n2 && (h2 = window.setTimeout(function() {
        Ci2(e, true);
        var p2 = new Di2(Ei2, "Timeout reached for loading script " + d);
        si2(g);
        ti2(g, false, p2);
      }, n2), f.Ma = h2);
      e.onload = e.onreadystatechange = function() {
        e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Ci2(e, b.xd || false, h2), si2(g), ti2(g, true, null));
      };
      e.onerror = function() {
        Ci2(e, true, h2);
        var p2 = new Di2(Fi2, "Error while loading script " + d);
        si2(g);
        ti2(g, false, p2);
      };
      f = b.attributes || {};
      z3(f, {type: "text/javascript", charset: "UTF-8"});
      lc3(e, f);
      Ob2(e, a);
      Gi2(c).appendChild(e);
      return g;
    }
    function Gi2(a) {
      var b;
      return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
    }
    function qi2() {
      if (this && this.Wb) {
        var a = this.Wb;
        a && "SCRIPT" == a.tagName && Ci2(a, true, this.Ma);
      }
    }
    function Ci2(a, b, c) {
      null != c && l.clearTimeout(c);
      a.onload = la2;
      a.onerror = la2;
      a.onreadystatechange = la2;
      b && window.setTimeout(function() {
        a && a.parentNode && a.parentNode.removeChild(a);
      }, 0);
    }
    var Fi2 = 0, Ei2 = 1;
    function Di2(a, b) {
      var c = "Jsloader error (code #" + a + ")";
      b && (c += ": " + b);
      u.call(this, c);
      this.code = a;
    }
    r2(Di2, u);
    function Hi2(a) {
      this.f = a;
    }
    r2(Hi2, Ah);
    Hi2.prototype.a = function() {
      return new this.f();
    };
    Hi2.prototype.b = function() {
      return {};
    };
    function Ii2(a, b, c) {
      this.c = a;
      a = b || {};
      this.l = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
      this.m = a.secureTokenTimeout || Ji2;
      this.g = nb2(a.secureTokenHeaders || Ki2);
      this.h = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
      this.i = a.identityPlatformEndpoint || "https://identitytoolkit.googleapis.com/v2/";
      this.v = a.firebaseTimeout || Li2;
      this.a = nb2(a.firebaseHeaders || Mi2);
      c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);
      c = "Node" == Ke2();
      c = l.XMLHttpRequest || c && index_esm_default.INTERNAL.node && index_esm_default.INTERNAL.node.XMLHttpRequest;
      if (!c && !Je2())
        throw new t2("internal-error", "The XMLHttpRequest compatibility library was not found.");
      this.f = void 0;
      Je2() ? this.f = new Vh(self) : Le2() ? this.f = new Hi2(c) : this.f = new Fh();
      this.b = null;
    }
    var Ni2, Dg = "idToken", Ji2 = new Ze2(3e4, 6e4), Ki2 = {"Content-Type": "application/x-www-form-urlencoded"}, Li2 = new Ze2(3e4, 6e4), Mi2 = {"Content-Type": "application/json"};
    function Oi2(a, b) {
      b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
    }
    function Pi2(a, b) {
      b && (a.l = Qi2("https://securetoken.googleapis.com/v1/token", b), a.h = Qi2("https://www.googleapis.com/identitytoolkit/v3/relyingparty/", b), a.i = Qi2("https://identitytoolkit.googleapis.com/v2/", b));
    }
    function Qi2(a, b) {
      a = J3(a);
      b = J3(b.url);
      a.f = a.a + a.f;
      Pd2(a, b.c);
      a.a = b.a;
      Qd2(a, b.g);
      return a.toString();
    }
    function Ri2(a, b) {
      b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);
    }
    Ii2.prototype.T = function() {
      return this.b;
    };
    function Si2(a, b, c, d, e, f, g) {
      ue2() || Je2() ? a = q3(a.u, a) : (Ni2 || (Ni2 = new D3(function(h2, n2) {
        Ti2(h2, n2);
      })), a = q3(a.s, a));
      a(b, c, d, e, f, g);
    }
    Ii2.prototype.u = function(a, b, c, d, e, f) {
      if (Je2() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request))
        throw new t2("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
      var g = new ai2(this.f);
      if (f) {
        g.g = Math.max(0, f);
        var h2 = setTimeout(function() {
          g.dispatchEvent("timeout");
        }, f);
      }
      qd2(g, "complete", function() {
        h2 && clearTimeout(h2);
        var n2 = null;
        try {
          n2 = JSON.parse(oi2(this)) || null;
        } catch (p2) {
          n2 = null;
        }
        b && b(n2);
      });
      wd2(g, "ready", function() {
        h2 && clearTimeout(h2);
        Xc2(this);
      });
      wd2(g, "timeout", function() {
        h2 && clearTimeout(h2);
        Xc2(this);
        b && b(null);
      });
      ei2(g, a, c, d, e);
    };
    var Ui2 = new qb2(rb, "https://apis.google.com/js/client.js?onload=%{onload}"), Vi2 = "__fcb" + Math.floor(1e6 * Math.random()).toString();
    function Ti2(a, b) {
      if (((window.gapi || {}).client || {}).request)
        a();
      else {
        l[Vi2] = function() {
          ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
        };
        var c = zb2(Ui2, {onload: Vi2});
        wi2(Bi2(c), function() {
          b(Error("CORS_UNSUPPORTED"));
        });
      }
    }
    Ii2.prototype.s = function(a, b, c, d, e) {
      var f = this;
      Ni2.then(function() {
        window.gapi.client.setApiKey(f.c);
        var g = window.gapi.auth.getToken();
        window.gapi.auth.setToken(null);
        window.gapi.client.request({path: a, method: c, body: d, headers: e, authType: "none", callback: function(h2) {
          window.gapi.auth.setToken(g);
          b && b(h2);
        }});
      }).o(function(g) {
        b && b({error: {message: g && g.message || "CORS_UNSUPPORTED"}});
      });
    };
    function Wi2(a, b) {
      return new D3(function(c, d) {
        "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Si2(a, a.l + "?key=" + encodeURIComponent(a.c), function(e) {
          e ? e.error ? d(Xi2(e)) : e.access_token && e.refresh_token ? c(e) : d(new t2("internal-error")) : d(new t2("network-request-failed"));
        }, "POST", fe2(b).toString(), a.g, a.m.get()) : d(new t2("internal-error"));
      });
    }
    function Yi2(a, b, c, d, e, f, g) {
      var h2 = J3(b + c);
      I4(h2, "key", a.c);
      g && I4(h2, "cb", va3().toString());
      var n2 = "GET" == d;
      if (n2)
        for (var p2 in e)
          e.hasOwnProperty(p2) && I4(h2, p2, e[p2]);
      return new D3(function(v2, B2) {
        Si2(a, h2.toString(), function(A3) {
          A3 ? A3.error ? B2(Xi2(A3, f || {})) : v2(A3) : B2(new t2("network-request-failed"));
        }, d, n2 ? void 0 : ke2(Ve2(e)), a.a, a.v.get());
      });
    }
    function Zi2(a) {
      a = a.email;
      if ("string" !== typeof a || !De2.test(a))
        throw new t2("invalid-email");
    }
    function $i2(a) {
      "email" in a && Zi2(a);
    }
    function aj(a, b) {
      return O3(a, bj, {identifier: b, continueUri: Se2() ? re2() : "http://localhost"}).then(function(c) {
        return c.signinMethods || [];
      });
    }
    function cj(a) {
      return O3(a, dj, {}).then(function(b) {
        return b.authorizedDomains || [];
      });
    }
    function P4(a) {
      if (!a[Dg]) {
        if (a.mfaPendingCredential)
          throw new t2("multi-factor-auth-required", null, nb2(a));
        throw new t2("internal-error");
      }
    }
    function ej(a) {
      if (a.phoneNumber || a.temporaryProof) {
        if (!a.phoneNumber || !a.temporaryProof)
          throw new t2("internal-error");
      } else {
        if (!a.sessionInfo)
          throw new t2("missing-verification-id");
        if (!a.code)
          throw new t2("missing-verification-code");
      }
    }
    Ii2.prototype.zb = function() {
      return O3(this, fj, {});
    };
    Ii2.prototype.Bb = function(a, b) {
      return O3(this, gj, {idToken: a, email: b});
    };
    Ii2.prototype.Cb = function(a, b) {
      return O3(this, ch, {idToken: a, password: b});
    };
    var hj = {displayName: "DISPLAY_NAME", photoUrl: "PHOTO_URL"};
    k3 = Ii2.prototype;
    k3.Db = function(a, b) {
      var c = {idToken: a}, d = [];
      lb2(hj, function(e, f) {
        var g = b[f];
        null === g ? d.push(e) : f in b && (c[f] = g);
      });
      d.length && (c.deleteAttribute = d);
      return O3(this, gj, c);
    };
    k3.vb = function(a, b) {
      a = {requestType: "PASSWORD_RESET", email: a};
      z3(a, b);
      return O3(this, ij, a);
    };
    k3.wb = function(a, b) {
      a = {requestType: "EMAIL_SIGNIN", email: a};
      z3(a, b);
      return O3(this, jj, a);
    };
    k3.ub = function(a, b) {
      a = {requestType: "VERIFY_EMAIL", idToken: a};
      z3(a, b);
      return O3(this, kj, a);
    };
    k3.Eb = function(a, b, c) {
      a = {requestType: "VERIFY_AND_CHANGE_EMAIL", idToken: a, newEmail: b};
      z3(a, c);
      return O3(this, lj, a);
    };
    function oh(a, b) {
      return O3(a, mj, b);
    }
    k3.fb = function(a) {
      return O3(this, nj, a);
    };
    function mh(a, b) {
      return O3(a, oj, b).then(function(c) {
        return c.phoneSessionInfo.sessionInfo;
      });
    }
    function pj(a) {
      if (!a.phoneVerificationInfo)
        throw new t2("internal-error");
      if (!a.phoneVerificationInfo.sessionInfo)
        throw new t2("missing-verification-id");
      if (!a.phoneVerificationInfo.code)
        throw new t2("missing-verification-code");
    }
    function nh(a, b) {
      return O3(a, qj, b).then(function(c) {
        return c.phoneResponseInfo.sessionInfo;
      });
    }
    function rj(a, b, c) {
      return O3(a, sj, {idToken: b, deleteProvider: c});
    }
    function tj(a) {
      if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken)
        throw new t2("internal-error");
    }
    function uj(a, b) {
      b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Ud(a.postBody), je2(a, "nonce") && (b.nonce = a.get("nonce"))));
      return b;
    }
    function vj(a) {
      var b = null;
      a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = zh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = zh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = zh(a)) : a.errorMessage && (b = wj(a.errorMessage));
      if (b)
        throw b;
      P4(a);
    }
    function Fg(a, b) {
      b.returnIdpCredential = true;
      return O3(a, xj, b);
    }
    function Hg(a, b) {
      b.returnIdpCredential = true;
      return O3(a, yj, b);
    }
    function Ig(a, b) {
      b.returnIdpCredential = true;
      b.autoCreate = false;
      return O3(a, zj, b);
    }
    function Aj(a) {
      if (!a.oobCode)
        throw new t2("invalid-action-code");
    }
    k3.nb = function(a, b) {
      return O3(this, Bj, {oobCode: a, newPassword: b});
    };
    k3.Ra = function(a) {
      return O3(this, Cj, {oobCode: a});
    };
    k3.jb = function(a) {
      return O3(this, Dj, {oobCode: a});
    };
    var Dj = {endpoint: "setAccountInfo", A: Aj, Z: "email", B: true}, Cj = {endpoint: "resetPassword", A: Aj, G: function(a) {
      var b = a.requestType;
      if (!b || !a.email && "EMAIL_SIGNIN" != b && "VERIFY_AND_CHANGE_EMAIL" != b)
        throw new t2("internal-error");
    }, B: true}, Ej = {endpoint: "signupNewUser", A: function(a) {
      Zi2(a);
      if (!a.password)
        throw new t2("weak-password");
    }, G: P4, V: true, B: true}, bj = {endpoint: "createAuthUri", B: true}, Fj = {endpoint: "deleteAccount", N: ["idToken"]}, sj = {endpoint: "setAccountInfo", N: ["idToken", "deleteProvider"], A: function(a) {
      if (!Array.isArray(a.deleteProvider))
        throw new t2("internal-error");
    }}, $g = {endpoint: "emailLinkSignin", N: ["email", "oobCode"], A: Zi2, G: P4, V: true, B: true}, bh = {endpoint: "emailLinkSignin", N: ["idToken", "email", "oobCode"], A: Zi2, G: P4, V: true}, Gj = {endpoint: "accounts/mfaEnrollment:finalize", N: ["idToken", "phoneVerificationInfo"], A: pj, G: P4, B: true, Na: true}, Hj = {endpoint: "accounts/mfaSignIn:finalize", N: ["mfaPendingCredential", "phoneVerificationInfo"], A: pj, G: P4, B: true, Na: true}, Ij = {endpoint: "getAccountInfo"}, jj = {endpoint: "getOobConfirmationCode", N: ["requestType"], A: function(a) {
      if ("EMAIL_SIGNIN" != a.requestType)
        throw new t2("internal-error");
      Zi2(a);
    }, Z: "email", B: true}, kj = {endpoint: "getOobConfirmationCode", N: ["idToken", "requestType"], A: function(a) {
      if ("VERIFY_EMAIL" != a.requestType)
        throw new t2("internal-error");
    }, Z: "email", B: true}, lj = {endpoint: "getOobConfirmationCode", N: ["idToken", "newEmail", "requestType"], A: function(a) {
      if ("VERIFY_AND_CHANGE_EMAIL" != a.requestType)
        throw new t2("internal-error");
    }, Z: "email", B: true}, ij = {endpoint: "getOobConfirmationCode", N: ["requestType"], A: function(a) {
      if ("PASSWORD_RESET" != a.requestType)
        throw new t2("internal-error");
      Zi2(a);
    }, Z: "email", B: true}, dj = {lb: true, endpoint: "getProjectConfig", Ub: "GET"}, Jj = {lb: true, endpoint: "getRecaptchaParam", Ub: "GET", G: function(a) {
      if (!a.recaptchaSiteKey)
        throw new t2("internal-error");
    }}, Bj = {endpoint: "resetPassword", A: Aj, Z: "email", B: true}, mj = {endpoint: "sendVerificationCode", N: ["phoneNumber", "recaptchaToken"], Z: "sessionInfo", B: true}, gj = {endpoint: "setAccountInfo", N: ["idToken"], A: $i2, V: true}, ch = {
      endpoint: "setAccountInfo",
      N: ["idToken"],
      A: function(a) {
        $i2(a);
        if (!a.password)
          throw new t2("weak-password");
      },
      G: P4,
      V: true
    }, fj = {endpoint: "signupNewUser", G: P4, V: true, B: true}, oj = {endpoint: "accounts/mfaEnrollment:start", N: ["idToken", "phoneEnrollmentInfo"], A: function(a) {
      if (!a.phoneEnrollmentInfo)
        throw new t2("internal-error");
      if (!a.phoneEnrollmentInfo.phoneNumber)
        throw new t2("missing-phone-number");
      if (!a.phoneEnrollmentInfo.recaptchaToken)
        throw new t2("missing-app-credential");
    }, G: function(a) {
      if (!a.phoneSessionInfo || !a.phoneSessionInfo.sessionInfo)
        throw new t2("internal-error");
    }, B: true, Na: true}, qj = {
      endpoint: "accounts/mfaSignIn:start",
      N: ["mfaPendingCredential", "mfaEnrollmentId", "phoneSignInInfo"],
      A: function(a) {
        if (!a.phoneSignInInfo || !a.phoneSignInInfo.recaptchaToken)
          throw new t2("missing-app-credential");
      },
      G: function(a) {
        if (!a.phoneResponseInfo || !a.phoneResponseInfo.sessionInfo)
          throw new t2("internal-error");
      },
      B: true,
      Na: true
    }, xj = {endpoint: "verifyAssertion", A: tj, Ya: uj, G: vj, V: true, B: true}, zj = {endpoint: "verifyAssertion", A: tj, Ya: uj, G: function(a) {
      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage)
        throw new t2("user-not-found");
      if (a.errorMessage)
        throw wj(a.errorMessage);
      P4(a);
    }, V: true, B: true}, yj = {endpoint: "verifyAssertion", A: function(a) {
      tj(a);
      if (!a.idToken)
        throw new t2("internal-error");
    }, Ya: uj, G: vj, V: true}, Kj = {endpoint: "verifyCustomToken", A: function(a) {
      if (!a.token)
        throw new t2("invalid-custom-token");
    }, G: P4, V: true, B: true}, ah = {endpoint: "verifyPassword", A: function(a) {
      Zi2(a);
      if (!a.password)
        throw new t2("wrong-password");
    }, G: P4, V: true, B: true}, nj = {endpoint: "verifyPhoneNumber", A: ej, G: P4, B: true}, ih = {
      endpoint: "verifyPhoneNumber",
      A: function(a) {
        if (!a.idToken)
          throw new t2("internal-error");
        ej(a);
      },
      G: function(a) {
        if (a.temporaryProof)
          throw a.code = "credential-already-in-use", zh(a);
        P4(a);
      }
    }, jh = {Hb: {USER_NOT_FOUND: "user-not-found"}, endpoint: "verifyPhoneNumber", A: ej, G: P4, B: true}, Lj = {endpoint: "accounts/mfaEnrollment:withdraw", N: ["idToken", "mfaEnrollmentId"], G: function(a) {
      if (!!a[Dg] ^ !!a.refreshToken)
        throw new t2("internal-error");
    }, B: true, Na: true};
    function O3(a, b, c) {
      if (!mf(c, b.N))
        return F3(new t2("internal-error"));
      var d = !!b.Na, e = b.Ub || "POST", f;
      return E3(c).then(b.A).then(function() {
        b.V && (c.returnSecureToken = true);
        b.B && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);
        return d ? Yi2(a, a.i, b.endpoint, e, c, b.Hb, b.lb || false) : Yi2(a, a.h, b.endpoint, e, c, b.Hb, b.lb || false);
      }).then(function(g) {
        f = g;
        return b.Ya ? b.Ya(c, f) : f;
      }).then(b.G).then(function() {
        if (!b.Z)
          return f;
        if (!(b.Z in f))
          throw new t2("internal-error");
        return f[b.Z];
      });
    }
    function wj(a) {
      return Xi2({error: {errors: [{message: a}], code: 400, message: a}});
    }
    function Xi2(a, b) {
      var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";
      var d = {keyInvalid: "invalid-api-key", ipRefererBlocked: "app-not-authorized"};
      if (c = d[c] ? new t2(d[c]) : null)
        return c;
      c = a.error && a.error.message || "";
      d = {
        INVALID_CUSTOM_TOKEN: "invalid-custom-token",
        CREDENTIAL_MISMATCH: "custom-token-mismatch",
        MISSING_CUSTOM_TOKEN: "internal-error",
        INVALID_IDENTIFIER: "invalid-email",
        MISSING_CONTINUE_URI: "internal-error",
        INVALID_EMAIL: "invalid-email",
        INVALID_PASSWORD: "wrong-password",
        USER_DISABLED: "user-disabled",
        MISSING_PASSWORD: "internal-error",
        EMAIL_EXISTS: "email-already-in-use",
        PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
        INVALID_IDP_RESPONSE: "invalid-credential",
        INVALID_PENDING_TOKEN: "invalid-credential",
        FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
        MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
        INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
        INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
        INVALID_SENDER: "invalid-sender",
        EMAIL_NOT_FOUND: "user-not-found",
        RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
        EXPIRED_OOB_CODE: "expired-action-code",
        INVALID_OOB_CODE: "invalid-action-code",
        MISSING_OOB_CODE: "internal-error",
        INVALID_PROVIDER_ID: "invalid-provider-id",
        CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
        INVALID_ID_TOKEN: "invalid-user-token",
        TOKEN_EXPIRED: "user-token-expired",
        USER_NOT_FOUND: "user-token-expired",
        CORS_UNSUPPORTED: "cors-unsupported",
        DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
        INVALID_APP_ID: "invalid-app-id",
        TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
        WEAK_PASSWORD: "weak-password",
        OPERATION_NOT_ALLOWED: "operation-not-allowed",
        USER_CANCELLED: "user-cancelled",
        CAPTCHA_CHECK_FAILED: "captcha-check-failed",
        INVALID_APP_CREDENTIAL: "invalid-app-credential",
        INVALID_CODE: "invalid-verification-code",
        INVALID_PHONE_NUMBER: "invalid-phone-number",
        INVALID_SESSION_INFO: "invalid-verification-id",
        INVALID_TEMPORARY_PROOF: "invalid-credential",
        MISSING_APP_CREDENTIAL: "missing-app-credential",
        MISSING_CODE: "missing-verification-code",
        MISSING_PHONE_NUMBER: "missing-phone-number",
        MISSING_SESSION_INFO: "missing-verification-id",
        QUOTA_EXCEEDED: "quota-exceeded",
        SESSION_EXPIRED: "code-expired",
        REJECTED_CREDENTIAL: "rejected-credential",
        INVALID_CONTINUE_URI: "invalid-continue-uri",
        MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
        MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
        UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
        INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
        INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
        INVALID_CERT_HASH: "invalid-cert-hash",
        UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",
        INVALID_TENANT_ID: "invalid-tenant-id",
        TENANT_ID_MISMATCH: "tenant-id-mismatch",
        ADMIN_ONLY_OPERATION: "admin-restricted-operation",
        INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",
        MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",
        MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",
        MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",
        EMAIL_CHANGE_NEEDS_VERIFICATION: "email-change-needs-verification",
        SECOND_FACTOR_EXISTS: "second-factor-already-in-use",
        SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",
        UNSUPPORTED_FIRST_FACTOR: "unsupported-first-factor",
        UNVERIFIED_EMAIL: "unverified-email"
      };
      z3(d, b || {});
      b = (b = c.match(/^[^\s]+\s*:\s*([\s\S]*)$/)) && 1 < b.length ? b[1] : void 0;
      for (var e in d)
        if (0 === c.indexOf(e))
          return new t2(d[e], b);
      !b && a && (b = Ue2(a));
      return new t2("internal-error", b);
    }
    ;
    function Mj(a) {
      this.b = a;
      this.a = null;
      this.rb = Nj(this);
    }
    function Nj(a) {
      return Oj().then(function() {
        return new D3(function(b, c) {
          L3("gapi.iframes.getContext")().open({where: document.body, url: a.b, messageHandlersFilter: L3("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"), attributes: {style: {position: "absolute", top: "-100px", width: "1px", height: "1px"}}, dontclear: true}, function(d) {
            function e() {
              clearTimeout(f);
              b();
            }
            a.a = d;
            a.a.restyle({setHideOnLeave: false});
            var f = setTimeout(function() {
              c(Error("Network Error"));
            }, Pj.get());
            d.ping(e).then(e, function() {
              c(Error("Network Error"));
            });
          });
        });
      });
    }
    function Qj(a, b) {
      return a.rb.then(function() {
        return new D3(function(c) {
          a.a.send(b.type, b, c, L3("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
      });
    }
    function Rj(a, b) {
      a.rb.then(function() {
        a.a.register("authEvent", b, L3("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    }
    var Sj = new qb2(rb, "https://apis.google.com/js/api.js?onload=%{onload}"), Tj = new Ze2(3e4, 6e4), Pj = new Ze2(5e3, 15e3), Uj = null;
    function Oj() {
      return Uj ? Uj : Uj = new D3(function(a, b) {
        function c() {
          Ye2();
          L3("gapi.load")("gapi.iframes", {callback: a, ontimeout: function() {
            Ye2();
            b(Error("Network Error"));
          }, timeout: Tj.get()});
        }
        if (L3("gapi.iframes.Iframe"))
          a();
        else if (L3("gapi.load"))
          c();
        else {
          var d = "__iframefcb" + Math.floor(1e6 * Math.random()).toString();
          l[d] = function() {
            L3("gapi.load") ? c() : b(Error("Network Error"));
          };
          d = zb2(Sj, {onload: d});
          E3(Bi2(d)).o(function() {
            b(Error("Network Error"));
          });
        }
      }).o(function(a) {
        Uj = null;
        throw a;
      });
    }
    ;
    function Vj(a, b, c, d) {
      this.l = a;
      this.h = b;
      this.i = c;
      this.g = d;
      this.f = null;
      this.g ? (a = J3(this.g.url), a = ce2(a.c, a.a, a.g, "/emulator/auth/iframe")) : a = ce2("https", this.l, null, "/__/auth/iframe");
      this.a = a;
      I4(this.a, "apiKey", this.h);
      I4(this.a, "appName", this.i);
      this.b = null;
      this.c = [];
    }
    Vj.prototype.toString = function() {
      this.f ? I4(this.a, "v", this.f) : ie2(this.a.b, "v");
      this.b ? I4(this.a, "eid", this.b) : ie2(this.a.b, "eid");
      this.c.length ? I4(this.a, "fw", this.c.join(",")) : ie2(this.a.b, "fw");
      return this.a.toString();
    };
    function Wj(a, b, c, d, e, f) {
      this.u = a;
      this.s = b;
      this.c = c;
      this.m = d;
      this.v = f;
      this.i = this.g = this.l = null;
      this.a = e;
      this.h = this.f = null;
    }
    Wj.prototype.yb = function(a) {
      this.h = a;
      return this;
    };
    Wj.prototype.toString = function() {
      if (this.v) {
        var a = J3(this.v.url);
        a = ce2(a.c, a.a, a.g, "/emulator/auth/handler");
      } else
        a = ce2("https", this.u, null, "/__/auth/handler");
      I4(a, "apiKey", this.s);
      I4(a, "appName", this.c);
      I4(a, "authType", this.m);
      if (this.a.isOAuthProvider) {
        var b = this.a;
        try {
          var c = index_esm_default.app(this.c).auth().la();
        } catch (h2) {
          c = null;
        }
        b.ob = c;
        I4(a, "providerId", this.a.providerId);
        c = this.a;
        b = Ve2(c.Ib);
        for (var d in b)
          b[d] = b[d].toString();
        d = c.Qc;
        b = nb2(b);
        for (var e = 0; e < d.length; e++) {
          var f = d[e];
          f in b && delete b[f];
        }
        c.pb && c.ob && !b[c.pb] && (b[c.pb] = c.ob);
        mb2(b) || I4(a, "customParameters", Ue2(b));
      }
      "function" === typeof this.a.Qb && (c = this.a.Qb(), c.length && I4(a, "scopes", c.join(",")));
      this.l ? I4(a, "redirectUrl", this.l) : ie2(a.b, "redirectUrl");
      this.g ? I4(a, "eventId", this.g) : ie2(a.b, "eventId");
      this.i ? I4(a, "v", this.i) : ie2(a.b, "v");
      if (this.b)
        for (var g in this.b)
          this.b.hasOwnProperty(g) && !be2(a, g) && I4(a, g, this.b[g]);
      this.h ? I4(a, "tid", this.h) : ie2(a.b, "tid");
      this.f ? I4(a, "eid", this.f) : ie2(a.b, "eid");
      g = Xj(this.c);
      g.length && I4(a, "fw", g.join(","));
      return a.toString();
    };
    function Xj(a) {
      try {
        return index_esm_default.app(a).auth().Ga();
      } catch (b) {
        return [];
      }
    }
    function Yj(a, b, c, d, e, f) {
      this.s = a;
      this.g = b;
      this.b = c;
      this.f = f;
      this.c = d || null;
      this.i = e || null;
      this.l = this.u = this.C = null;
      this.h = [];
      this.m = this.a = null;
    }
    function Zj(a) {
      var b = re2();
      return cj(a).then(function(c) {
        a: {
          var d = J3(b), e = d.c;
          d = d.a;
          for (var f = 0; f < c.length; f++) {
            var g = c[f];
            var h2 = d;
            var n2 = e;
            0 == g.indexOf("chrome-extension://") ? h2 = J3(g).a == h2 && "chrome-extension" == n2 : "http" != n2 && "https" != n2 ? h2 = false : Ce2.test(g) ? h2 = h2 == g : (g = g.split(".").join("\\."), h2 = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h2));
            if (h2) {
              c = true;
              break a;
            }
          }
          c = false;
        }
        if (!c)
          throw new xh(re2());
      });
    }
    function ak(a) {
      if (a.m)
        return a.m;
      a.m = Ee2().then(function() {
        if (!a.u) {
          var b = a.c, c = a.i, d = Xj(a.b), e = new Vj(a.s, a.g, a.b, a.f);
          e.f = b;
          e.b = c;
          e.c = Za3(d || []);
          a.u = e.toString();
        }
        a.v = new Mj(a.u);
        bk(a);
      });
      return a.m;
    }
    k3 = Yj.prototype;
    k3.Ob = function(a, b, c) {
      var d = new t2("popup-closed-by-user"), e = new t2("web-storage-unsupported"), f = this, g = false;
      return this.ma().then(function() {
        ck(f).then(function(h2) {
          h2 || (a && ye2(a), b(e), g = true);
        });
      }).o(function() {
      }).then(function() {
        if (!g)
          return Be2(a);
      }).then(function() {
        if (!g)
          return Fd2(c).then(function() {
            b(d);
          });
      });
    };
    k3.Xb = function() {
      var a = K3();
      return !Te2(a) && !Xe2(a);
    };
    k3.Tb = function() {
      return false;
    };
    k3.Mb = function(a, b, c, d, e, f, g, h2) {
      if (!a)
        return F3(new t2("popup-blocked"));
      if (g && !Te2())
        return this.ma().o(function(p2) {
          ye2(a);
          e(p2);
        }), d(), E3();
      this.a || (this.a = Zj(dk(this)));
      var n2 = this;
      return this.a.then(function() {
        var p2 = n2.ma().o(function(v2) {
          ye2(a);
          e(v2);
          throw v2;
        });
        d();
        return p2;
      }).then(function() {
        rh(c);
        if (!g) {
          var p2 = ek(n2.s, n2.g, n2.b, b, c, null, f, n2.c, void 0, n2.i, h2, n2.f);
          se2(p2, a);
        }
      }).o(function(p2) {
        "auth/network-request-failed" == p2.code && (n2.a = null);
        throw p2;
      });
    };
    function dk(a) {
      a.l || (a.C = a.c ? Oe2(a.c, Xj(a.b)) : null, a.l = new Ii2(a.g, Ca3(a.i), a.C), a.f && Pi2(a.l, a.f));
      return a.l;
    }
    k3.Nb = function(a, b, c, d) {
      this.a || (this.a = Zj(dk(this)));
      var e = this;
      return this.a.then(function() {
        rh(b);
        var f = ek(e.s, e.g, e.b, a, b, re2(), c, e.c, void 0, e.i, d, e.f);
        se2(f);
      }).o(function(f) {
        "auth/network-request-failed" == f.code && (e.a = null);
        throw f;
      });
    };
    k3.ma = function() {
      var a = this;
      return ak(this).then(function() {
        return a.v.rb;
      }).o(function() {
        a.a = null;
        throw new t2("network-request-failed");
      });
    };
    k3.$b = function() {
      return true;
    };
    function ek(a, b, c, d, e, f, g, h2, n2, p2, v2, B2) {
      a = new Wj(a, b, c, d, e, B2);
      a.l = f;
      a.g = g;
      a.i = h2;
      a.b = nb2(n2 || null);
      a.f = p2;
      return a.yb(v2).toString();
    }
    function bk(a) {
      if (!a.v)
        throw Error("IfcHandler must be initialized!");
      Rj(a.v, function(b) {
        var c = {};
        if (b && b.authEvent) {
          var d = false;
          b = th(b.authEvent);
          for (c = 0; c < a.h.length; c++)
            d = a.h[c](b) || d;
          c = {};
          c.status = d ? "ACK" : "ERROR";
          return E3(c);
        }
        c.status = "ERROR";
        return E3(c);
      });
    }
    function ck(a) {
      var b = {type: "webStorageSupport"};
      return ak(a).then(function() {
        return Qj(a.v, b);
      }).then(function(c) {
        if (c && c.length && "undefined" !== typeof c[0].webStorageSupport)
          return c[0].webStorageSupport;
        throw Error();
      });
    }
    k3.Ea = function(a) {
      this.h.push(a);
    };
    k3.Sa = function(a) {
      Xa3(this.h, function(b) {
        return b == a;
      });
    };
    function fk(a) {
      this.a = a || index_esm_default.INTERNAL.reactNative && index_esm_default.INTERNAL.reactNative.AsyncStorage;
      if (!this.a)
        throw new t2("internal-error", "The React Native compatibility library was not found.");
      this.type = "asyncStorage";
    }
    k3 = fk.prototype;
    k3.get = function(a) {
      return E3(this.a.getItem(a)).then(function(b) {
        return b && We2(b);
      });
    };
    k3.set = function(a, b) {
      return E3(this.a.setItem(a, Ue2(b)));
    };
    k3.U = function(a) {
      return E3(this.a.removeItem(a));
    };
    k3.ca = function() {
    };
    k3.ia = function() {
    };
    function gk(a) {
      this.b = a;
      this.a = {};
      this.f = q3(this.c, this);
    }
    var hk = [];
    function ik() {
      var a = Je2() ? self : null;
      w2(hk, function(c) {
        c.b == a && (b = c);
      });
      if (!b) {
        var b = new gk(a);
        hk.push(b);
      }
      return b;
    }
    gk.prototype.c = function(a) {
      var b = a.data.eventType, c = a.data.eventId, d = this.a[b];
      if (d && 0 < d.length) {
        a.ports[0].postMessage({status: "ack", eventId: c, eventType: b, response: null});
        var e = [];
        w2(d, function(f) {
          e.push(E3().then(function() {
            return f(a.origin, a.data.data);
          }));
        });
        Jc2(e).then(function(f) {
          var g = [];
          w2(f, function(h2) {
            g.push({fulfilled: h2.Pb, value: h2.value, reason: h2.reason ? h2.reason.message : void 0});
          });
          w2(g, function(h2) {
            for (var n2 in h2)
              "undefined" === typeof h2[n2] && delete h2[n2];
          });
          a.ports[0].postMessage({
            status: "done",
            eventId: c,
            eventType: b,
            response: g
          });
        });
      }
    };
    function jk(a, b, c) {
      mb2(a.a) && a.b.addEventListener("message", a.f);
      "undefined" === typeof a.a[b] && (a.a[b] = []);
      a.a[b].push(c);
    }
    ;
    function kk(a) {
      this.a = a;
    }
    kk.prototype.postMessage = function(a, b) {
      this.a.postMessage(a, b);
    };
    function lk(a) {
      this.c = a;
      this.b = false;
      this.a = [];
    }
    function mk(a, b, c, d) {
      var e, f = c || {}, g, h2, n2, p2 = null;
      if (a.b)
        return F3(Error("connection_unavailable"));
      var v2 = d ? 800 : 50, B2 = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;
      return new D3(function(A3, Q3) {
        B2 ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), B2.port1.start(), h2 = setTimeout(function() {
          Q3(Error("unsupported_event"));
        }, v2), g = function(ya2) {
          ya2.data.eventId === e && ("ack" === ya2.data.status ? (clearTimeout(h2), n2 = setTimeout(function() {
            Q3(Error("timeout"));
          }, 3e3)) : "done" === ya2.data.status ? (clearTimeout(n2), "undefined" !== typeof ya2.data.response ? A3(ya2.data.response) : Q3(Error("unknown_error"))) : (clearTimeout(h2), clearTimeout(n2), Q3(Error("invalid_response"))));
        }, p2 = {messageChannel: B2, onMessage: g}, a.a.push(p2), B2.port1.addEventListener("message", g), a.c.postMessage({eventType: b, eventId: e, data: f}, [B2.port2])) : Q3(Error("connection_unavailable"));
      }).then(function(A3) {
        nk(a, p2);
        return A3;
      }).o(function(A3) {
        nk(a, p2);
        throw A3;
      });
    }
    function nk(a, b) {
      if (b) {
        var c = b.messageChannel, d = b.onMessage;
        c && (c.port1.removeEventListener("message", d), c.port1.close());
        Xa3(a.a, function(e) {
          return e == b;
        });
      }
    }
    lk.prototype.close = function() {
      for (; 0 < this.a.length; )
        nk(this, this.a[0]);
      this.b = true;
    };
    function ok() {
      if (!pk())
        throw new t2("web-storage-unsupported");
      this.c = {};
      this.a = [];
      this.b = 0;
      this.m = l.indexedDB;
      this.type = "indexedDB";
      this.g = this.v = this.f = this.l = null;
      this.s = false;
      this.h = null;
      var a = this;
      Je2() && self ? (this.v = ik(), jk(this.v, "keyChanged", function(b, c) {
        return qk(a).then(function(d) {
          0 < d.length && w2(a.a, function(e) {
            e(d);
          });
          return {keyProcessed: Va3(d, c.key)};
        });
      }), jk(this.v, "ping", function() {
        return E3(["keyChanged"]);
      })) : ef().then(function(b) {
        if (a.h = b)
          a.g = new lk(new kk(b)), mk(a.g, "ping", null, true).then(function(c) {
            c[0].fulfilled && Va3(c[0].value, "keyChanged") && (a.s = true);
          }).o(function() {
          });
      });
    }
    var rk;
    function sk(a) {
      return new D3(function(b, c) {
        var d = a.m.deleteDatabase("firebaseLocalStorageDb");
        d.onsuccess = function() {
          b();
        };
        d.onerror = function(e) {
          c(Error(e.target.error));
        };
      });
    }
    function tk(a) {
      return new D3(function(b, c) {
        var d = a.m.open("firebaseLocalStorageDb", 1);
        d.onerror = function(e) {
          try {
            e.preventDefault();
          } catch (f) {
          }
          c(Error(e.target.error));
        };
        d.onupgradeneeded = function(e) {
          e = e.target.result;
          try {
            e.createObjectStore("firebaseLocalStorage", {keyPath: "fbase_key"});
          } catch (f) {
            c(f);
          }
        };
        d.onsuccess = function(e) {
          e = e.target.result;
          e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : sk(a).then(function() {
            return tk(a);
          }).then(function(f) {
            b(f);
          }).o(function(f) {
            c(f);
          });
        };
      });
    }
    function uk(a) {
      a.i || (a.i = tk(a));
      return a.i;
    }
    function vk(a, b) {
      function c(e, f) {
        uk(a).then(b).then(e).o(function(g) {
          if (3 < ++d)
            f(g);
          else
            return uk(a).then(function(h2) {
              h2.close();
              a.i = void 0;
              return c(e, f);
            }).o(function(h2) {
              f(h2);
            });
        });
      }
      var d = 0;
      return new D3(c);
    }
    function pk() {
      try {
        return !!l.indexedDB;
      } catch (a) {
        return false;
      }
    }
    function wk(a) {
      return a.objectStore("firebaseLocalStorage");
    }
    function xk(a, b) {
      return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
    }
    function yk(a) {
      return new D3(function(b, c) {
        a.onsuccess = function(d) {
          d && d.target ? b(d.target.result) : b();
        };
        a.onerror = function(d) {
          c(d.target.error);
        };
      });
    }
    k3 = ok.prototype;
    k3.set = function(a, b) {
      var c = this, d = false;
      return vk(this, function(e) {
        e = wk(xk(e, true));
        return yk(e.get(a));
      }).then(function(e) {
        return vk(c, function(f) {
          f = wk(xk(f, true));
          if (e)
            return e.value = b, yk(f.put(e));
          c.b++;
          d = true;
          var g = {};
          g.fbase_key = a;
          g.value = b;
          return yk(f.add(g));
        });
      }).then(function() {
        c.c[a] = b;
        return zk(c, a);
      }).oa(function() {
        d && c.b--;
      });
    };
    function zk(a, b) {
      return a.g && a.h && df() === a.h ? mk(a.g, "keyChanged", {key: b}, a.s).then(function() {
      }).o(function() {
      }) : E3();
    }
    k3.get = function(a) {
      return vk(this, function(b) {
        return yk(wk(xk(b, false)).get(a));
      }).then(function(b) {
        return b && b.value;
      });
    };
    k3.U = function(a) {
      var b = this, c = false;
      return vk(this, function(d) {
        c = true;
        b.b++;
        return yk(wk(xk(d, true))["delete"](a));
      }).then(function() {
        delete b.c[a];
        return zk(b, a);
      }).oa(function() {
        c && b.b--;
      });
    };
    function qk(a) {
      return uk(a).then(function(b) {
        var c = wk(xk(b, false));
        return c.getAll ? yk(c.getAll()) : new D3(function(d, e) {
          var f = [], g = c.openCursor();
          g.onsuccess = function(h2) {
            (h2 = h2.target.result) ? (f.push(h2.value), h2["continue"]()) : d(f);
          };
          g.onerror = function(h2) {
            e(h2.target.error);
          };
        });
      }).then(function(b) {
        var c = {}, d = [];
        if (0 == a.b) {
          for (d = 0; d < b.length; d++)
            c[b[d].fbase_key] = b[d].value;
          d = te2(a.c, c);
          a.c = c;
        }
        return d;
      });
    }
    k3.ca = function(a) {
      0 == this.a.length && Ak(this);
      this.a.push(a);
    };
    k3.ia = function(a) {
      Xa3(this.a, function(b) {
        return b == a;
      });
      0 == this.a.length && Bk(this);
    };
    function Ak(a) {
      function b() {
        a.f = setTimeout(function() {
          a.l = qk(a).then(function(c) {
            0 < c.length && w2(a.a, function(d) {
              d(c);
            });
          }).then(function() {
            b();
          }).o(function(c) {
            "STOP_EVENT" != c.message && b();
          });
        }, 800);
      }
      Bk(a);
      b();
    }
    function Bk(a) {
      a.l && a.l.cancel("STOP_EVENT");
      a.f && (clearTimeout(a.f), a.f = null);
    }
    ;
    function Ck(a) {
      var b = this, c = null;
      this.a = [];
      this.type = "indexedDB";
      this.c = a;
      this.b = E3().then(function() {
        if (pk()) {
          var d = Qe2(), e = "__sak" + d;
          rk || (rk = new ok());
          c = rk;
          return c.set(e, d).then(function() {
            return c.get(e);
          }).then(function(f) {
            if (f !== d)
              throw Error("indexedDB not supported!");
            return c.U(e);
          }).then(function() {
            return c;
          }).o(function() {
            return b.c;
          });
        }
        return b.c;
      }).then(function(d) {
        b.type = d.type;
        d.ca(function(e) {
          w2(b.a, function(f) {
            f(e);
          });
        });
        return d;
      });
    }
    k3 = Ck.prototype;
    k3.get = function(a) {
      return this.b.then(function(b) {
        return b.get(a);
      });
    };
    k3.set = function(a, b) {
      return this.b.then(function(c) {
        return c.set(a, b);
      });
    };
    k3.U = function(a) {
      return this.b.then(function(b) {
        return b.U(a);
      });
    };
    k3.ca = function(a) {
      this.a.push(a);
    };
    k3.ia = function(a) {
      Xa3(this.a, function(b) {
        return b == a;
      });
    };
    function Dk() {
      this.a = {};
      this.type = "inMemory";
    }
    k3 = Dk.prototype;
    k3.get = function(a) {
      return E3(this.a[a]);
    };
    k3.set = function(a, b) {
      this.a[a] = b;
      return E3();
    };
    k3.U = function(a) {
      delete this.a[a];
      return E3();
    };
    k3.ca = function() {
    };
    k3.ia = function() {
    };
    function Ek() {
      if (!Fk()) {
        if ("Node" == Ke2())
          throw new t2("internal-error", "The LocalStorage compatibility library was not found.");
        throw new t2("web-storage-unsupported");
      }
      this.a = Gk() || index_esm_default.INTERNAL.node.localStorage;
      this.type = "localStorage";
    }
    function Gk() {
      try {
        var a = l.localStorage, b = Qe2();
        a && (a.setItem(b, "1"), a.removeItem(b));
        return a;
      } catch (c) {
        return null;
      }
    }
    function Fk() {
      var a = "Node" == Ke2();
      a = Gk() || a && index_esm_default.INTERNAL.node && index_esm_default.INTERNAL.node.localStorage;
      if (!a)
        return false;
      try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), true;
      } catch (b) {
        return false;
      }
    }
    k3 = Ek.prototype;
    k3.get = function(a) {
      var b = this;
      return E3().then(function() {
        var c = b.a.getItem(a);
        return We2(c);
      });
    };
    k3.set = function(a, b) {
      var c = this;
      return E3().then(function() {
        var d = Ue2(b);
        null === d ? c.U(a) : c.a.setItem(a, d);
      });
    };
    k3.U = function(a) {
      var b = this;
      return E3().then(function() {
        b.a.removeItem(a);
      });
    };
    k3.ca = function(a) {
      l.window && nd2(l.window, "storage", a);
    };
    k3.ia = function(a) {
      l.window && xd2(l.window, "storage", a);
    };
    function Hk() {
      this.type = "nullStorage";
    }
    k3 = Hk.prototype;
    k3.get = function() {
      return E3(null);
    };
    k3.set = function() {
      return E3();
    };
    k3.U = function() {
      return E3();
    };
    k3.ca = function() {
    };
    k3.ia = function() {
    };
    function Ik() {
      if (!Jk()) {
        if ("Node" == Ke2())
          throw new t2("internal-error", "The SessionStorage compatibility library was not found.");
        throw new t2("web-storage-unsupported");
      }
      this.a = Kk() || index_esm_default.INTERNAL.node.sessionStorage;
      this.type = "sessionStorage";
    }
    function Kk() {
      try {
        var a = l.sessionStorage, b = Qe2();
        a && (a.setItem(b, "1"), a.removeItem(b));
        return a;
      } catch (c) {
        return null;
      }
    }
    function Jk() {
      var a = "Node" == Ke2();
      a = Kk() || a && index_esm_default.INTERNAL.node && index_esm_default.INTERNAL.node.sessionStorage;
      if (!a)
        return false;
      try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), true;
      } catch (b) {
        return false;
      }
    }
    k3 = Ik.prototype;
    k3.get = function(a) {
      var b = this;
      return E3().then(function() {
        var c = b.a.getItem(a);
        return We2(c);
      });
    };
    k3.set = function(a, b) {
      var c = this;
      return E3().then(function() {
        var d = Ue2(b);
        null === d ? c.U(a) : c.a.setItem(a, d);
      });
    };
    k3.U = function(a) {
      var b = this;
      return E3().then(function() {
        b.a.removeItem(a);
      });
    };
    k3.ca = function() {
    };
    k3.ia = function() {
    };
    function Lk() {
      var a = {};
      a.Browser = Mk;
      a.Node = Nk;
      a.ReactNative = Ok;
      a.Worker = Pk;
      this.a = a[Ke2()];
    }
    var Qk, Mk = {F: Ek, bb: Ik}, Nk = {F: Ek, bb: Ik}, Ok = {F: fk, bb: Hk}, Pk = {F: Ek, bb: Hk};
    var Rk = {rd: "local", NONE: "none", td: "session"};
    function Sk(a) {
      var b = new t2("invalid-persistence-type"), c = new t2("unsupported-persistence-type");
      a: {
        for (d in Rk)
          if (Rk[d] == a) {
            var d = true;
            break a;
          }
        d = false;
      }
      if (!d || "string" !== typeof a)
        throw b;
      switch (Ke2()) {
        case "ReactNative":
          if ("session" === a)
            throw c;
          break;
        case "Node":
          if ("none" !== a)
            throw c;
          break;
        case "Worker":
          if ("session" === a || !pk() && "none" !== a)
            throw c;
          break;
        default:
          if (!Pe2() && "none" !== a)
            throw c;
      }
    }
    function Tk() {
      var a = !Xe2(K3()) && Ie2() ? true : false, b = Te2(), c = Pe2();
      this.m = a;
      this.h = b;
      this.l = c;
      this.a = {};
      Qk || (Qk = new Lk());
      a = Qk;
      try {
        this.g = !qe2() && cf() || !l.indexedDB ? new a.a.F() : new Ck(Je2() ? new Dk() : new a.a.F());
      } catch (d) {
        this.g = new Dk(), this.h = true;
      }
      try {
        this.i = new a.a.bb();
      } catch (d) {
        this.i = new Dk();
      }
      this.v = new Dk();
      this.f = q3(this.Yb, this);
      this.b = {};
    }
    var Uk;
    function Vk() {
      Uk || (Uk = new Tk());
      return Uk;
    }
    function Wk(a, b) {
      switch (b) {
        case "session":
          return a.i;
        case "none":
          return a.v;
        default:
          return a.g;
      }
    }
    function Xk(a, b) {
      return "firebase:" + a.name + (b ? ":" + b : "");
    }
    function Yk(a, b, c) {
      var d = Xk(b, c), e = Wk(a, b.F);
      return a.get(b, c).then(function(f) {
        var g = null;
        try {
          g = We2(l.localStorage.getItem(d));
        } catch (h2) {
        }
        if (g && !f)
          return l.localStorage.removeItem(d), a.set(b, g, c);
        g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
      });
    }
    k3 = Tk.prototype;
    k3.get = function(a, b) {
      return Wk(this, a.F).get(Xk(a, b));
    };
    function Zk(a, b, c) {
      c = Xk(b, c);
      "local" == b.F && (a.b[c] = null);
      return Wk(a, b.F).U(c);
    }
    k3.set = function(a, b, c) {
      var d = Xk(a, c), e = this, f = Wk(this, a.F);
      return f.set(d, b).then(function() {
        return f.get(d);
      }).then(function(g) {
        "local" == a.F && (e.b[d] = g);
      });
    };
    k3.addListener = function(a, b, c) {
      a = Xk(a, b);
      this.l && (this.b[a] = l.localStorage.getItem(a));
      mb2(this.a) && (Wk(this, "local").ca(this.f), this.h || (qe2() || !cf()) && l.indexedDB || !this.l || $k(this));
      this.a[a] || (this.a[a] = []);
      this.a[a].push(c);
    };
    k3.removeListener = function(a, b, c) {
      a = Xk(a, b);
      this.a[a] && (Xa3(this.a[a], function(d) {
        return d == c;
      }), 0 == this.a[a].length && delete this.a[a]);
      mb2(this.a) && (Wk(this, "local").ia(this.f), al(this));
    };
    function $k(a) {
      al(a);
      a.c = setInterval(function() {
        for (var b in a.a) {
          var c = l.localStorage.getItem(b), d = a.b[b];
          c != d && (a.b[b] = c, c = new bd2({type: "storage", key: b, target: window, oldValue: d, newValue: c, a: true}), a.Yb(c));
        }
      }, 1e3);
    }
    function al(a) {
      a.c && (clearInterval(a.c), a.c = null);
    }
    k3.Yb = function(a) {
      if (a && a.g) {
        var b = a.a.key;
        if (null == b)
          for (var c in this.a) {
            var d = this.b[c];
            "undefined" === typeof d && (d = null);
            var e = l.localStorage.getItem(c);
            e !== d && (this.b[c] = e, this.mb(c));
          }
        else if (0 == b.indexOf("firebase:") && this.a[b]) {
          "undefined" !== typeof a.a.a ? Wk(this, "local").ia(this.f) : al(this);
          if (this.m) {
            if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c)
              null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);
            else if (this.b[b] === d && "undefined" === typeof a.a.a)
              return;
          }
          var f = this;
          c = function() {
            if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b))
              f.b[b] = l.localStorage.getItem(b), f.mb(b);
          };
          Wb2 && ic3 && 10 == ic3 && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
        }
      } else
        w2(a, q3(this.mb, this));
    };
    k3.mb = function(a) {
      this.a[a] && w2(this.a[a], function(b) {
        b();
      });
    };
    function bl(a) {
      this.a = a;
      this.b = Vk();
    }
    var cl = {name: "authEvent", F: "local"};
    function dl(a) {
      return a.b.get(cl, a.a).then(function(b) {
        return th(b);
      });
    }
    ;
    function el() {
      this.a = Vk();
    }
    ;
    function fl() {
      this.b = -1;
    }
    ;
    function gl(a, b) {
      this.b = hl;
      this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
      this.g = this.c = 0;
      this.a = [];
      this.i = a;
      this.h = b;
      this.l = l.Int32Array ? new Int32Array(64) : Array(64);
      void 0 === il && (l.Int32Array ? il = new Int32Array(jl) : il = jl);
      this.reset();
    }
    var il;
    r2(gl, fl);
    for (var hl = 64, kl = hl - 1, ll = [], ml = 0; ml < kl; ml++)
      ll[ml] = 0;
    var nl = Ya3(128, ll);
    gl.prototype.reset = function() {
      this.g = this.c = 0;
      this.a = l.Int32Array ? new Int32Array(this.h) : Za3(this.h);
    };
    function ol(a) {
      for (var b = a.f, c = a.l, d = 0, e = 0; e < b.length; )
        c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
      for (b = 16; 64 > b; b++) {
        e = c[b - 15] | 0;
        d = c[b - 2] | 0;
        var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0, g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
        c[b] = f + g | 0;
      }
      d = a.a[0] | 0;
      e = a.a[1] | 0;
      var h2 = a.a[2] | 0, n2 = a.a[3] | 0, p2 = a.a[4] | 0, v2 = a.a[5] | 0, B2 = a.a[6] | 0;
      f = a.a[7] | 0;
      for (b = 0; 64 > b; b++) {
        var A3 = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h2 ^ e & h2) | 0;
        g = p2 & v2 ^ ~p2 & B2;
        f = f + ((p2 >>> 6 | p2 << 26) ^ (p2 >>> 11 | p2 << 21) ^ (p2 >>> 25 | p2 << 7)) | 0;
        g = g + (il[b] | 0) | 0;
        g = f + (g + (c[b] | 0) | 0) | 0;
        f = B2;
        B2 = v2;
        v2 = p2;
        p2 = n2 + g | 0;
        n2 = h2;
        h2 = e;
        e = d;
        d = g + A3 | 0;
      }
      a.a[0] = a.a[0] + d | 0;
      a.a[1] = a.a[1] + e | 0;
      a.a[2] = a.a[2] + h2 | 0;
      a.a[3] = a.a[3] + n2 | 0;
      a.a[4] = a.a[4] + p2 | 0;
      a.a[5] = a.a[5] + v2 | 0;
      a.a[6] = a.a[6] + B2 | 0;
      a.a[7] = a.a[7] + f | 0;
    }
    function pl(a, b, c) {
      void 0 === c && (c = b.length);
      var d = 0, e = a.c;
      if ("string" === typeof b)
        for (; d < c; )
          a.f[e++] = b.charCodeAt(d++), e == a.b && (ol(a), e = 0);
      else if (na3(b))
        for (; d < c; ) {
          var f = b[d++];
          if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0)))
            throw Error("message must be a byte array");
          a.f[e++] = f;
          e == a.b && (ol(a), e = 0);
        }
      else
        throw Error("message must be string or array");
      a.c = e;
      a.g += c;
    }
    var jl = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function ql() {
      gl.call(this, 8, rl);
    }
    r2(ql, gl);
    var rl = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
    function sl(a, b, c, d, e, f) {
      this.v = a;
      this.i = b;
      this.l = c;
      this.m = d || null;
      this.u = e || null;
      this.s = f;
      this.h = b + ":" + c;
      this.C = new el();
      this.g = new bl(this.h);
      this.f = null;
      this.b = [];
      this.a = this.c = null;
    }
    function tl(a) {
      return new t2("invalid-cordova-configuration", a);
    }
    k3 = sl.prototype;
    k3.ma = function() {
      return this.Ia ? this.Ia : this.Ia = Fe2().then(function() {
        if ("function" !== typeof L3("universalLinks.subscribe", l))
          throw tl("cordova-universal-links-plugin-fix is not installed");
        if ("undefined" === typeof L3("BuildInfo.packageName", l))
          throw tl("cordova-plugin-buildinfo is not installed");
        if ("function" !== typeof L3("cordova.plugins.browsertab.openUrl", l))
          throw tl("cordova-plugin-browsertab is not installed");
        if ("function" !== typeof L3("cordova.InAppBrowser.open", l))
          throw tl("cordova-plugin-inappbrowser is not installed");
      }, function() {
        throw new t2("cordova-not-ready");
      });
    };
    function ul() {
      for (var a = 20, b = []; 0 < a; )
        b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
      return b.join("");
    }
    function vl(a) {
      var b = new ql();
      pl(b, a);
      a = [];
      var c = 8 * b.g;
      56 > b.c ? pl(b, nl, 56 - b.c) : pl(b, nl, b.b - (b.c - 56));
      for (var d = 63; 56 <= d; d--)
        b.f[d] = c & 255, c /= 256;
      ol(b);
      for (d = c = 0; d < b.i; d++)
        for (var e = 24; 0 <= e; e -= 8)
          a[c++] = b.a[d] >> e & 255;
      return cg(a);
    }
    k3.Ob = function(a, b) {
      b(new t2("operation-not-supported-in-this-environment"));
      return E3();
    };
    k3.Mb = function() {
      return F3(new t2("operation-not-supported-in-this-environment"));
    };
    k3.$b = function() {
      return false;
    };
    k3.Xb = function() {
      return true;
    };
    k3.Tb = function() {
      return true;
    };
    k3.Nb = function(a, b, c, d) {
      if (this.c)
        return F3(new t2("redirect-operation-pending"));
      var e = this, f = l.document, g = null, h2 = null, n2 = null, p2 = null;
      return this.c = E3().then(function() {
        rh(b);
        return wl(e);
      }).then(function() {
        return xl(e, a, b, c, d);
      }).then(function() {
        return new D3(function(v2, B2) {
          h2 = function() {
            var A3 = L3("cordova.plugins.browsertab.close", l);
            v2();
            "function" === typeof A3 && A3();
            e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);
            return false;
          };
          e.Ea(h2);
          n2 = function() {
            g || (g = Fd2(2e3).then(function() {
              B2(new t2("redirect-cancelled-by-user"));
            }));
          };
          p2 = function() {
            $e2() && n2();
          };
          f.addEventListener("resume", n2, false);
          K3().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p2, false);
        }).o(function(v2) {
          return yl(e).then(function() {
            throw v2;
          });
        });
      }).oa(function() {
        n2 && f.removeEventListener("resume", n2, false);
        p2 && f.removeEventListener("visibilitychange", p2, false);
        g && g.cancel();
        h2 && e.Sa(h2);
        e.c = null;
      });
    };
    function xl(a, b, c, d, e) {
      var f = ul(), g = new sh(b, d, null, f, new t2("no-auth-event"), null, e), h2 = L3("BuildInfo.packageName", l);
      if ("string" !== typeof h2)
        throw new t2("invalid-cordova-configuration");
      var n2 = L3("BuildInfo.displayName", l), p2 = {};
      if (K3().toLowerCase().match(/iphone|ipad|ipod/))
        p2.ibi = h2;
      else if (K3().toLowerCase().match(/android/))
        p2.apn = h2;
      else
        return F3(new t2("operation-not-supported-in-this-environment"));
      n2 && (p2.appDisplayName = n2);
      f = vl(f);
      p2.sessionId = f;
      var v2 = ek(a.v, a.i, a.l, b, c, null, d, a.m, p2, a.u, e, a.s);
      return a.ma().then(function() {
        var B2 = a.h;
        return a.C.a.set(cl, g.w(), B2);
      }).then(function() {
        var B2 = L3("cordova.plugins.browsertab.isAvailable", l);
        if ("function" !== typeof B2)
          throw new t2("invalid-cordova-configuration");
        var A3 = null;
        B2(function(Q3) {
          if (Q3) {
            A3 = L3("cordova.plugins.browsertab.openUrl", l);
            if ("function" !== typeof A3)
              throw new t2("invalid-cordova-configuration");
            A3(v2);
          } else {
            A3 = L3("cordova.InAppBrowser.open", l);
            if ("function" !== typeof A3)
              throw new t2("invalid-cordova-configuration");
            Q3 = K3();
            a.a = A3(v2, Q3.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || Q3.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
          }
        });
      });
    }
    function zl(a, b) {
      for (var c = 0; c < a.b.length; c++)
        try {
          a.b[c](b);
        } catch (d) {
        }
    }
    function wl(a) {
      a.f || (a.f = a.ma().then(function() {
        return new D3(function(b) {
          function c(d) {
            b(d);
            a.Sa(c);
            return false;
          }
          a.Ea(c);
          Al(a);
        });
      }));
      return a.f;
    }
    function yl(a) {
      var b = null;
      return dl(a.g).then(function(c) {
        b = c;
        c = a.g;
        return Zk(c.b, cl, c.a);
      }).then(function() {
        return b;
      });
    }
    function Al(a) {
      function b(g) {
        d = true;
        e && e.cancel();
        yl(a).then(function(h2) {
          var n2 = c;
          if (h2 && g && g.url) {
            var p2 = null;
            n2 = xg(g.url);
            -1 != n2.indexOf("/__/auth/callback") && (p2 = J3(n2), p2 = We2(be2(p2, "firebaseError") || null), p2 = (p2 = "object" === typeof p2 ? Aa3(p2) : null) ? new sh(h2.c, h2.b, null, null, p2, null, h2.T()) : new sh(h2.c, h2.b, n2, h2.f, null, null, h2.T()));
            n2 = p2 || c;
          }
          zl(a, n2);
        });
      }
      var c = new sh("unknown", null, null, null, new t2("no-auth-event")), d = false, e = Fd2(500).then(function() {
        return yl(a).then(function() {
          d || zl(a, c);
        });
      }), f = l.handleOpenURL;
      l.handleOpenURL = function(g) {
        0 == g.toLowerCase().indexOf(L3("BuildInfo.packageName", l).toLowerCase() + "://") && b({url: g});
        if ("function" === typeof f)
          try {
            f(g);
          } catch (h2) {
            console.error(h2);
          }
      };
      vh || (vh = new uh());
      wh(b);
    }
    k3.Ea = function(a) {
      this.b.push(a);
      wl(this).o(function(b) {
        "auth/invalid-cordova-configuration" === b.code && (b = new sh("unknown", null, null, null, new t2("no-auth-event")), a(b));
      });
    };
    k3.Sa = function(a) {
      Xa3(this.b, function(b) {
        return b == a;
      });
    };
    function Bl(a) {
      this.a = a;
      this.b = Vk();
    }
    var Cl = {name: "pendingRedirect", F: "session"};
    function Dl(a) {
      return a.b.set(Cl, "pending", a.a);
    }
    function El(a) {
      return Zk(a.b, Cl, a.a);
    }
    function Fl(a) {
      return a.b.get(Cl, a.a).then(function(b) {
        return "pending" == b;
      });
    }
    ;
    function Gl(a, b, c, d) {
      this.i = {};
      this.u = 0;
      this.D = a;
      this.v = b;
      this.m = c;
      this.J = d;
      this.h = [];
      this.f = false;
      this.l = q3(this.s, this);
      this.b = new Hl();
      this.C = new Il();
      this.g = new Bl(Jl(this.v, this.m));
      this.c = {};
      this.c.unknown = this.b;
      this.c.signInViaRedirect = this.b;
      this.c.linkViaRedirect = this.b;
      this.c.reauthViaRedirect = this.b;
      this.c.signInViaPopup = this.C;
      this.c.linkViaPopup = this.C;
      this.c.reauthViaPopup = this.C;
      this.a = Kl(this.D, this.v, this.m, Da3, this.J);
    }
    function Kl(a, b, c, d, e) {
      var f = index_esm_default.SDK_VERSION || null;
      return Ge2() ? new sl(a, b, c, f, d, e) : new Yj(a, b, c, f, d, e);
    }
    Gl.prototype.reset = function() {
      this.f = false;
      this.a.Sa(this.l);
      this.a = Kl(this.D, this.v, this.m, null, this.J);
      this.i = {};
    };
    function Ll(a) {
      a.f || (a.f = true, a.a.Ea(a.l));
      var b = a.a;
      return a.a.ma().o(function(c) {
        a.a == b && a.reset();
        throw c;
      });
    }
    function Ml(a) {
      a.a.Xb() && Ll(a).o(function(b) {
        var c = new sh("unknown", null, null, null, new t2("operation-not-supported-in-this-environment"));
        Nl(b) && a.s(c);
      });
      a.a.Tb() || Ol(a.b);
    }
    function Pl(a, b) {
      Va3(a.h, b) || a.h.push(b);
      a.f || Fl(a.g).then(function(c) {
        c ? El(a.g).then(function() {
          Ll(a).o(function(d) {
            var e = new sh("unknown", null, null, null, new t2("operation-not-supported-in-this-environment"));
            Nl(d) && a.s(e);
          });
        }) : Ml(a);
      }).o(function() {
        Ml(a);
      });
    }
    function Ql(a, b) {
      Xa3(a.h, function(c) {
        return c == b;
      });
    }
    Gl.prototype.s = function(a) {
      if (!a)
        throw new t2("invalid-auth-event");
      6e5 <= va3() - this.u && (this.i = {}, this.u = 0);
      if (a && a.getUid() && this.i.hasOwnProperty(a.getUid()))
        return false;
      for (var b = false, c = 0; c < this.h.length; c++) {
        var d = this.h[c];
        if (d.Fb(a.c, a.b)) {
          if (b = this.c[a.c])
            b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = true, this.u = va3());
          b = true;
          break;
        }
      }
      Ol(this.b);
      return b;
    };
    var Rl = new Ze2(2e3, 1e4), Sl = new Ze2(3e4, 6e4);
    Gl.prototype.qa = function() {
      return this.b.qa();
    };
    function Tl(a, b, c, d, e, f, g) {
      return a.a.Mb(b, c, d, function() {
        a.f || (a.f = true, a.a.Ea(a.l));
      }, function() {
        a.reset();
      }, e, f, g);
    }
    function Nl(a) {
      return a && "auth/cordova-not-ready" == a.code ? true : false;
    }
    function Ul(a, b, c, d, e) {
      var f;
      return Dl(a.g).then(function() {
        return a.a.Nb(b, c, d, e).o(function(g) {
          if (Nl(g))
            throw new t2("operation-not-supported-in-this-environment");
          f = g;
          return El(a.g).then(function() {
            throw f;
          });
        }).then(function() {
          return a.a.$b() ? new D3(function() {
          }) : El(a.g).then(function() {
            return a.qa();
          }).then(function() {
          }).o(function() {
          });
        });
      });
    }
    function Vl(a, b, c, d, e) {
      return a.a.Ob(d, function(f) {
        b.na(c, null, f, e);
      }, Rl.get());
    }
    var Wl = {};
    function Jl(a, b, c) {
      a = a + ":" + b;
      c && (a = a + ":" + c.url);
      return a;
    }
    function Xl(a, b, c, d) {
      var e = Jl(b, c, d);
      Wl[e] || (Wl[e] = new Gl(a, b, c, d));
      return Wl[e];
    }
    function Hl() {
      this.b = null;
      this.f = [];
      this.c = [];
      this.a = null;
      this.i = this.g = false;
    }
    Hl.prototype.reset = function() {
      this.b = null;
      this.a && (this.a.cancel(), this.a = null);
    };
    Hl.prototype.h = function(a, b) {
      if (a) {
        this.reset();
        this.g = true;
        var c = a.c, d = a.b, e = a.a && "auth/web-storage-unsupported" == a.a.code, f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
        this.i = !(!e && !f);
        "unknown" != c || e || f ? a.a ? (Yl(this, true, null, a.a), E3()) : b.Fa(c, d) ? Zl(this, a, b) : F3(new t2("invalid-auth-event")) : (Yl(this, false, null, null), E3());
      } else
        F3(new t2("invalid-auth-event"));
    };
    function Ol(a) {
      a.g || (a.g = true, Yl(a, false, null, null));
    }
    function $l(a) {
      a.g && !a.i && Yl(a, false, null, null);
    }
    function Zl(a, b, c) {
      c = c.Fa(b.c, b.b);
      var d = b.g, e = b.f, f = b.i, g = b.T(), h2 = !!b.c.match(/Redirect$/);
      c(d, e, g, f).then(function(n2) {
        Yl(a, h2, n2, null);
      }).o(function(n2) {
        Yl(a, h2, null, n2);
      });
    }
    function am(a, b) {
      a.b = function() {
        return F3(b);
      };
      if (a.c.length)
        for (var c = 0; c < a.c.length; c++)
          a.c[c](b);
    }
    function bm(a, b) {
      a.b = function() {
        return E3(b);
      };
      if (a.f.length)
        for (var c = 0; c < a.f.length; c++)
          a.f[c](b);
    }
    function Yl(a, b, c, d) {
      b ? d ? am(a, d) : bm(a, c) : bm(a, {user: null});
      a.f = [];
      a.c = [];
    }
    Hl.prototype.qa = function() {
      var a = this;
      return new D3(function(b, c) {
        a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), cm(a));
      });
    };
    function cm(a) {
      var b = new t2("timeout");
      a.a && a.a.cancel();
      a.a = Fd2(Sl.get()).then(function() {
        a.b || (a.g = true, Yl(a, true, null, b));
      });
    }
    function Il() {
    }
    Il.prototype.h = function(a, b) {
      if (a) {
        var c = a.c, d = a.b;
        a.a ? (b.na(a.c, null, a.a, a.b), E3()) : b.Fa(c, d) ? dm(a, b) : F3(new t2("invalid-auth-event"));
      } else
        F3(new t2("invalid-auth-event"));
    };
    function dm(a, b) {
      var c = a.b, d = a.c;
      b.Fa(d, c)(a.g, a.f, a.T(), a.i).then(function(e) {
        b.na(d, e, null, c);
      }).o(function(e) {
        b.na(d, null, e, c);
      });
    }
    ;
    function em() {
      this.ib = false;
      Object.defineProperty(this, "appVerificationDisabled", {get: function() {
        return this.ib;
      }, set: function(a) {
        this.ib = a;
      }, enumerable: false});
    }
    ;
    function fm(a, b) {
      this.a = b;
      M3(this, "verificationId", a);
    }
    fm.prototype.confirm = function(a) {
      a = ph(this.verificationId, a);
      return this.a(a);
    };
    function gm(a, b, c, d) {
      return new lh(a).fb(b, c).then(function(e) {
        return new fm(e, d);
      });
    }
    ;
    function hm(a) {
      var b = ig(a);
      if (!(b && b.exp && b.auth_time && b.iat))
        throw new t2("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
      N3(this, {token: a, expirationTime: bf(1e3 * b.exp), authTime: bf(1e3 * b.auth_time), issuedAtTime: bf(1e3 * b.iat), signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null, signInSecondFactor: b.firebase && b.firebase.sign_in_second_factor ? b.firebase.sign_in_second_factor : null, claims: b});
    }
    ;
    function im(a, b, c) {
      var d = b && b[jm];
      if (!d)
        throw new t2("argument-error", "Internal assert: Invalid MultiFactorResolver");
      this.a = a;
      this.f = nb2(b);
      this.g = c;
      this.c = new yg(null, d);
      this.b = [];
      var e = this;
      w2(b[km] || [], function(f) {
        (f = tf(f)) && e.b.push(f);
      });
      M3(this, "auth", this.a);
      M3(this, "session", this.c);
      M3(this, "hints", this.b);
    }
    var km = "mfaInfo", jm = "mfaPendingCredential";
    im.prototype.Rc = function(a) {
      var b = this;
      return a.sb(this.a.a, this.c).then(function(c) {
        var d = nb2(b.f);
        delete d[km];
        delete d[jm];
        z3(d, c);
        return b.g(d);
      });
    };
    function lm(a, b, c, d) {
      t2.call(this, "multi-factor-auth-required", d, b);
      this.b = new im(a, b, c);
      M3(this, "resolver", this.b);
    }
    r2(lm, t2);
    function mm(a, b, c) {
      if (a && m(a.serverResponse) && "auth/multi-factor-auth-required" === a.code)
        try {
          return new lm(b, a.serverResponse, c, a.message);
        } catch (d) {
        }
      return null;
    }
    ;
    function nm() {
    }
    nm.prototype.sb = function(a, b, c) {
      return b.type == zg ? om(this, a, b, c) : pm(this, a, b);
    };
    function om(a, b, c, d) {
      return c.Ha().then(function(e) {
        e = {idToken: e};
        "undefined" !== typeof d && (e.displayName = d);
        z3(e, {phoneVerificationInfo: hh(a.a)});
        return O3(b, Gj, e);
      });
    }
    function pm(a, b, c) {
      return c.Ha().then(function(d) {
        d = {mfaPendingCredential: d};
        z3(d, {phoneVerificationInfo: hh(a.a)});
        return O3(b, Hj, d);
      });
    }
    function qm(a) {
      M3(this, "factorId", a.fa);
      this.a = a;
    }
    r2(qm, nm);
    function rm(a) {
      qm.call(this, a);
      if (this.a.fa != lh.PROVIDER_ID)
        throw new t2("argument-error", "firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");
    }
    r2(rm, qm);
    function sm(a, b) {
      G3.call(this, a);
      for (var c in b)
        this[c] = b[c];
    }
    r2(sm, G3);
    function tm(a, b) {
      this.a = a;
      this.b = [];
      this.c = q3(this.yc, this);
      nd2(this.a, "userReloaded", this.c);
      var c = [];
      b && b.multiFactor && b.multiFactor.enrolledFactors && w2(b.multiFactor.enrolledFactors, function(d) {
        var e = null, f = {};
        if (d) {
          d.uid && (f[qf] = d.uid);
          d.displayName && (f[rf] = d.displayName);
          d.enrollmentTime && (f[sf] = new Date(d.enrollmentTime).toISOString());
          d.phoneNumber && (f[pf] = d.phoneNumber);
          try {
            e = new uf(f);
          } catch (g) {
          }
          d = e;
        } else
          d = null;
        d && c.push(d);
      });
      um(this, c);
    }
    function vm(a) {
      var b = [];
      w2(a.mfaInfo || [], function(c) {
        (c = tf(c)) && b.push(c);
      });
      return b;
    }
    k3 = tm.prototype;
    k3.yc = function(a) {
      um(this, vm(a.hd));
    };
    function um(a, b) {
      a.b = b;
      M3(a, "enrolledFactors", b);
    }
    k3.Rb = function() {
      return this.a.I().then(function(a) {
        return new yg(a, null);
      });
    };
    k3.fc = function(a, b) {
      var c = this, d = this.a.a;
      return this.Rb().then(function(e) {
        return a.sb(d, e, b);
      }).then(function(e) {
        wm(c.a, e);
        return c.a.reload();
      });
    };
    k3.bd = function(a) {
      var b = this, c = "string" === typeof a ? a : a.uid, d = this.a.a;
      return this.a.I().then(function(e) {
        return O3(d, Lj, {idToken: e, mfaEnrollmentId: c});
      }).then(function(e) {
        var f = Qa3(b.b, function(g) {
          return g.uid != c;
        });
        um(b, f);
        wm(b.a, e);
        return b.a.reload().o(function(g) {
          if ("auth/user-token-expired" != g.code)
            throw g;
        });
      });
    };
    k3.w = function() {
      return {multiFactor: {enrolledFactors: Ra3(this.b, function(a) {
        return a.w();
      })}};
    };
    function xm(a, b, c) {
      this.h = a;
      this.i = b;
      this.g = c;
      this.c = 3e4;
      this.f = 96e4;
      this.b = null;
      this.a = this.c;
      if (this.f < this.c)
        throw Error("Proactive refresh lower bound greater than upper bound!");
    }
    xm.prototype.start = function() {
      this.a = this.c;
      ym(this, true);
    };
    function zm(a, b) {
      if (b)
        return a.a = a.c, a.g();
      b = a.a;
      a.a *= 2;
      a.a > a.f && (a.a = a.f);
      return b;
    }
    function ym(a, b) {
      a.stop();
      a.b = Fd2(zm(a, b)).then(function() {
        return af();
      }).then(function() {
        return a.h();
      }).then(function() {
        ym(a, true);
      }).o(function(c) {
        a.i(c) && ym(a, false);
      });
    }
    xm.prototype.stop = function() {
      this.b && (this.b.cancel(), this.b = null);
    };
    function Am(a) {
      this.f = a;
      this.b = this.a = null;
      this.c = Date.now();
    }
    Am.prototype.w = function() {
      return {apiKey: this.f.c, refreshToken: this.a, accessToken: this.b && this.b.toString(), expirationTime: this.c};
    };
    function Bm(a, b) {
      "undefined" === typeof b && (a.b ? (b = a.b, b = b.a - b.g) : b = 0);
      a.c = Date.now() + 1e3 * b;
    }
    function Cm(a, b) {
      a.b = jg(b[Dg] || "");
      a.a = b.refreshToken;
      b = b.expiresIn;
      Bm(a, "undefined" !== typeof b ? Number(b) : void 0);
    }
    function Dm(a, b) {
      a.b = b.b;
      a.a = b.a;
      a.c = b.c;
    }
    function Em(a, b) {
      return Wi2(a.f, b).then(function(c) {
        a.b = jg(c.access_token);
        a.a = c.refresh_token;
        Bm(a, c.expires_in);
        return {accessToken: a.b.toString(), refreshToken: a.a};
      }).o(function(c) {
        "auth/user-token-expired" == c.code && (a.a = null);
        throw c;
      });
    }
    Am.prototype.getToken = function(a) {
      a = !!a;
      return this.b && !this.a ? F3(new t2("user-token-expired")) : a || !this.b || Date.now() > this.c - 3e4 ? this.a ? Em(this, {grant_type: "refresh_token", refresh_token: this.a}) : E3(null) : E3({accessToken: this.b.toString(), refreshToken: this.a});
    };
    function Fm(a, b) {
      this.a = a || null;
      this.b = b || null;
      N3(this, {lastSignInTime: bf(b || null), creationTime: bf(a || null)});
    }
    function Gm(a) {
      return new Fm(a.a, a.b);
    }
    Fm.prototype.w = function() {
      return {lastLoginAt: this.b, createdAt: this.a};
    };
    function Hm(a, b, c, d, e, f) {
      N3(this, {uid: a, displayName: d || null, photoURL: e || null, email: c || null, phoneNumber: f || null, providerId: b});
    }
    function Im(a, b, c) {
      this.J = [];
      this.l = a.apiKey;
      this.m = a.appName;
      this.s = a.authDomain || null;
      var d = index_esm_default.SDK_VERSION ? Oe2(index_esm_default.SDK_VERSION) : null;
      this.a = new Ii2(this.l, Ca3(Da3), d);
      a.emulatorConfig && Pi2(this.a, a.emulatorConfig);
      this.b = new Am(this.a);
      Jm(this, b[Dg]);
      Cm(this.b, b);
      M3(this, "refreshToken", this.b.a);
      Km(this, c || {});
      H3.call(this);
      this.R = false;
      this.s && Re2() && (this.i = Xl(this.s, this.l, this.m));
      this.S = [];
      this.h = null;
      this.u = Lm(this);
      this.aa = q3(this.hb, this);
      var e = this;
      this.ya = null;
      this.Oa = function(f) {
        e.wa(f.h);
      };
      this.ja = null;
      this.Aa = function(f) {
        Pi2(e.a, f.c);
      };
      this.X = null;
      this.$ = [];
      this.Ba = function(f) {
        Mm(e, f.f);
      };
      this.ba = null;
      this.O = new tm(this, c);
      M3(this, "multiFactor", this.O);
    }
    r2(Im, H3);
    Im.prototype.wa = function(a) {
      this.ya = a;
      Oi2(this.a, a);
    };
    Im.prototype.la = function() {
      return this.ya;
    };
    function Nm(a, b) {
      a.ja && xd2(a.ja, "languageCodeChanged", a.Oa);
      (a.ja = b) && nd2(b, "languageCodeChanged", a.Oa);
    }
    function Om(a, b) {
      a.X && xd2(a.X, "emulatorConfigChanged", a.Aa);
      (a.X = b) && nd2(b, "emulatorConfigChanged", a.Aa);
    }
    function Mm(a, b) {
      a.$ = b;
      Ri2(a.a, index_esm_default.SDK_VERSION ? Oe2(index_esm_default.SDK_VERSION, a.$) : null);
    }
    Im.prototype.Ga = function() {
      return Za3(this.$);
    };
    function Pm(a, b) {
      a.ba && xd2(a.ba, "frameworkChanged", a.Ba);
      (a.ba = b) && nd2(b, "frameworkChanged", a.Ba);
    }
    Im.prototype.hb = function() {
      this.u.b && (this.u.stop(), this.u.start());
    };
    function Qm(a) {
      try {
        return index_esm_default.app(a.m).auth();
      } catch (b) {
        throw new t2("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
      }
    }
    function Lm(a) {
      return new xm(function() {
        return a.I(true);
      }, function(b) {
        return b && "auth/network-request-failed" == b.code ? true : false;
      }, function() {
        var b = a.b.c - Date.now() - 3e5;
        return 0 < b ? b : 0;
      });
    }
    function Rm(a) {
      a.D || a.u.b || (a.u.start(), xd2(a, "tokenChanged", a.aa), nd2(a, "tokenChanged", a.aa));
    }
    function Sm(a) {
      xd2(a, "tokenChanged", a.aa);
      a.u.stop();
    }
    function Jm(a, b) {
      a.za = b;
      M3(a, "_lat", b);
    }
    function Tm(a, b) {
      Xa3(a.S, function(c) {
        return c == b;
      });
    }
    function Um(a) {
      for (var b = [], c = 0; c < a.S.length; c++)
        b.push(a.S[c](a));
      return Jc2(b).then(function() {
        return a;
      });
    }
    function Vm(a) {
      a.i && !a.R && (a.R = true, Pl(a.i, a));
    }
    function Km(a, b) {
      N3(a, {uid: b.uid, displayName: b.displayName || null, photoURL: b.photoURL || null, email: b.email || null, emailVerified: b.emailVerified || false, phoneNumber: b.phoneNumber || null, isAnonymous: b.isAnonymous || false, tenantId: b.tenantId || null, metadata: new Fm(b.createdAt, b.lastLoginAt), providerData: []});
      a.a.b = a.tenantId;
    }
    M3(Im.prototype, "providerId", "firebase");
    function Wm() {
    }
    function Xm(a) {
      return E3().then(function() {
        if (a.D)
          throw new t2("app-deleted");
      });
    }
    function Ym(a) {
      return Ra3(a.providerData, function(b) {
        return b.providerId;
      });
    }
    function Zm(a, b) {
      b && ($m(a, b.providerId), a.providerData.push(b));
    }
    function $m(a, b) {
      Xa3(a.providerData, function(c) {
        return c.providerId == b;
      });
    }
    function an2(a, b, c) {
      ("uid" != b || c) && a.hasOwnProperty(b) && M3(a, b, c);
    }
    function bn2(a, b) {
      a != b && (N3(a, {uid: b.uid, displayName: b.displayName, photoURL: b.photoURL, email: b.email, emailVerified: b.emailVerified, phoneNumber: b.phoneNumber, isAnonymous: b.isAnonymous, tenantId: b.tenantId, providerData: []}), b.metadata ? M3(a, "metadata", Gm(b.metadata)) : M3(a, "metadata", new Fm()), w2(b.providerData, function(c) {
        Zm(a, c);
      }), Dm(a.b, b.b), M3(a, "refreshToken", a.b.a), um(a.O, b.O.b));
    }
    k3 = Im.prototype;
    k3.reload = function() {
      var a = this;
      return R3(this, Xm(this).then(function() {
        return cn2(a).then(function() {
          return Um(a);
        }).then(Wm);
      }));
    };
    function cn2(a) {
      return a.I().then(function(b) {
        var c = a.isAnonymous;
        return dn2(a, b).then(function() {
          c || an2(a, "isAnonymous", false);
          return b;
        });
      });
    }
    k3.oc = function(a) {
      return this.I(a).then(function(b) {
        return new hm(b);
      });
    };
    k3.I = function(a) {
      var b = this;
      return R3(this, Xm(this).then(function() {
        return b.b.getToken(a);
      }).then(function(c) {
        if (!c)
          throw new t2("internal-error");
        c.accessToken != b.za && (Jm(b, c.accessToken), b.dispatchEvent(new sm("tokenChanged")));
        an2(b, "refreshToken", c.refreshToken);
        return c.accessToken;
      }));
    };
    function wm(a, b) {
      b[Dg] && a.za != b[Dg] && (Cm(a.b, b), a.dispatchEvent(new sm("tokenChanged")), Jm(a, b[Dg]), an2(a, "refreshToken", a.b.a));
    }
    function dn2(a, b) {
      return O3(a.a, Ij, {idToken: b}).then(q3(a.Kc, a));
    }
    k3.Kc = function(a) {
      a = a.users;
      if (!a || !a.length)
        throw new t2("internal-error");
      a = a[0];
      Km(this, {uid: a.localId, displayName: a.displayName, photoURL: a.photoUrl, email: a.email, emailVerified: !!a.emailVerified, phoneNumber: a.phoneNumber, lastLoginAt: a.lastLoginAt, createdAt: a.createdAt, tenantId: a.tenantId});
      for (var b = en2(a), c = 0; c < b.length; c++)
        Zm(this, b[c]);
      an2(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
      this.dispatchEvent(new sm("userReloaded", {hd: a}));
    };
    function en2(a) {
      return (a = a.providerUserInfo) && a.length ? Ra3(a, function(b) {
        return new Hm(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
      }) : [];
    }
    k3.Lc = function(a) {
      gf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
      return this.tb(a);
    };
    k3.tb = function(a) {
      var b = this, c = null;
      return R3(this, a.c(this.a, this.uid).then(function(d) {
        wm(b, d);
        c = fn2(b, d, "reauthenticate");
        b.h = null;
        return b.reload();
      }).then(function() {
        return c;
      }), true);
    };
    function gn2(a, b) {
      return cn2(a).then(function() {
        if (Va3(Ym(a), b))
          return Um(a).then(function() {
            throw new t2("provider-already-linked");
          });
      });
    }
    k3.Cc = function(a) {
      gf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
      return this.qb(a);
    };
    k3.qb = function(a) {
      var b = this, c = null;
      return R3(this, gn2(this, a.providerId).then(function() {
        return b.I();
      }).then(function(d) {
        return a.b(b.a, d);
      }).then(function(d) {
        c = fn2(b, d, "link");
        return hn2(b, d);
      }).then(function() {
        return c;
      }));
    };
    k3.Dc = function(a, b) {
      var c = this;
      return R3(this, gn2(this, "phone").then(function() {
        return gm(Qm(c), a, b, q3(c.qb, c));
      }));
    };
    k3.Mc = function(a, b) {
      var c = this;
      return R3(this, E3().then(function() {
        return gm(Qm(c), a, b, q3(c.tb, c));
      }), true);
    };
    function fn2(a, b, c) {
      var d = qh(b);
      b = og(b);
      return kf({user: a, credential: d, additionalUserInfo: b, operationType: c});
    }
    function hn2(a, b) {
      wm(a, b);
      return a.reload().then(function() {
        return a;
      });
    }
    k3.Bb = function(a) {
      var b = this;
      return R3(this, this.I().then(function(c) {
        return b.a.Bb(c, a);
      }).then(function(c) {
        wm(b, c);
        return b.reload();
      }));
    };
    k3.ed = function(a) {
      var b = this;
      return R3(this, this.I().then(function(c) {
        return a.b(b.a, c);
      }).then(function(c) {
        wm(b, c);
        return b.reload();
      }));
    };
    k3.Cb = function(a) {
      var b = this;
      return R3(this, this.I().then(function(c) {
        return b.a.Cb(c, a);
      }).then(function(c) {
        wm(b, c);
        return b.reload();
      }));
    };
    k3.Db = function(a) {
      if (void 0 === a.displayName && void 0 === a.photoURL)
        return Xm(this);
      var b = this;
      return R3(this, this.I().then(function(c) {
        return b.a.Db(c, {displayName: a.displayName, photoUrl: a.photoURL});
      }).then(function(c) {
        wm(b, c);
        an2(b, "displayName", c.displayName || null);
        an2(b, "photoURL", c.photoUrl || null);
        w2(b.providerData, function(d) {
          "password" === d.providerId && (M3(d, "displayName", b.displayName), M3(d, "photoURL", b.photoURL));
        });
        return Um(b);
      }).then(Wm));
    };
    k3.cd = function(a) {
      var b = this;
      return R3(this, cn2(this).then(function(c) {
        return Va3(Ym(b), a) ? rj(b.a, c, [a]).then(function(d) {
          var e = {};
          w2(d.providerUserInfo || [], function(f) {
            e[f.providerId] = true;
          });
          w2(Ym(b), function(f) {
            e[f] || $m(b, f);
          });
          e[lh.PROVIDER_ID] || M3(b, "phoneNumber", null);
          return Um(b);
        }) : Um(b).then(function() {
          throw new t2("no-such-provider");
        });
      }));
    };
    k3.delete = function() {
      var a = this;
      return R3(this, this.I().then(function(b) {
        return O3(a.a, Fj, {idToken: b});
      }).then(function() {
        a.dispatchEvent(new sm("userDeleted"));
      })).then(function() {
        for (var b = 0; b < a.J.length; b++)
          a.J[b].cancel("app-deleted");
        Nm(a, null);
        Om(a, null);
        Pm(a, null);
        a.J = [];
        a.D = true;
        Sm(a);
        M3(a, "refreshToken", null);
        a.i && Ql(a.i, a);
      });
    };
    k3.Fb = function(a, b) {
      return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.ga || null) == b || "reauthViaRedirect" == a && (this.ga || null) == b ? true : false;
    };
    k3.na = function(a, b, c, d) {
      "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
    };
    k3.Fa = function(a, b) {
      return "linkViaPopup" == a && b == (this.g || null) ? q3(this.Kb, this) : "reauthViaPopup" == a && b == (this.g || null) ? q3(this.Lb, this) : "linkViaRedirect" == a && (this.ga || null) == b ? q3(this.Kb, this) : "reauthViaRedirect" == a && (this.ga || null) == b ? q3(this.Lb, this) : null;
    };
    k3.Ec = function(a) {
      var b = this;
      return jn2(this, "linkViaPopup", a, function() {
        return gn2(b, a.providerId).then(function() {
          return Um(b);
        });
      }, false);
    };
    k3.Nc = function(a) {
      return jn2(this, "reauthViaPopup", a, function() {
        return E3();
      }, true);
    };
    function jn2(a, b, c, d, e) {
      if (!Re2())
        return F3(new t2("operation-not-supported-in-this-environment"));
      if (a.h && !e)
        return F3(a.h);
      var f = ng(c.providerId), g = Qe2(a.uid + ":::"), h2 = null;
      (!Te2() || Ie2()) && a.s && c.isOAuthProvider && (h2 = ek(a.s, a.l, a.m, b, c, null, g, index_esm_default.SDK_VERSION || null, null, null, a.tenantId));
      var n2 = ze2(h2, f && f.ua, f && f.ta);
      d = d().then(function() {
        kn2(a);
        if (!e)
          return a.I().then(function() {
          });
      }).then(function() {
        return Tl(a.i, n2, b, c, g, !!h2, a.tenantId);
      }).then(function() {
        return new D3(function(p2, v2) {
          a.na(b, null, new t2("cancelled-popup-request"), a.g || null);
          a.f = p2;
          a.C = v2;
          a.g = g;
          a.c = Vl(a.i, a, b, n2, g);
        });
      }).then(function(p2) {
        n2 && ye2(n2);
        return p2 ? kf(p2) : null;
      }).o(function(p2) {
        n2 && ye2(n2);
        throw p2;
      });
      return R3(a, d, e);
    }
    k3.Fc = function(a) {
      var b = this;
      return ln2(this, "linkViaRedirect", a, function() {
        return gn2(b, a.providerId);
      }, false);
    };
    k3.Oc = function(a) {
      return ln2(this, "reauthViaRedirect", a, function() {
        return E3();
      }, true);
    };
    function ln2(a, b, c, d, e) {
      if (!Re2())
        return F3(new t2("operation-not-supported-in-this-environment"));
      if (a.h && !e)
        return F3(a.h);
      var f = null, g = Qe2(a.uid + ":::");
      d = d().then(function() {
        kn2(a);
        if (!e)
          return a.I().then(function() {
          });
      }).then(function() {
        a.ga = g;
        return Um(a);
      }).then(function(h2) {
        a.ha && (h2 = a.ha, h2 = h2.b.set(mn2, a.w(), h2.a));
        return h2;
      }).then(function() {
        return Ul(a.i, b, c, g, a.tenantId);
      }).o(function(h2) {
        f = h2;
        if (a.ha)
          return nn2(a.ha);
        throw f;
      }).then(function() {
        if (f)
          throw f;
      });
      return R3(a, d, e);
    }
    function kn2(a) {
      if (!a.i || !a.R) {
        if (a.i && !a.R)
          throw new t2("internal-error");
        throw new t2("auth-domain-config-required");
      }
    }
    k3.Kb = function(a, b, c, d) {
      var e = this;
      this.c && (this.c.cancel(), this.c = null);
      var f = null;
      c = this.I().then(function(g) {
        return Hg(e.a, {requestUri: a, postBody: d, sessionId: b, idToken: g});
      }).then(function(g) {
        f = fn2(e, g, "link");
        return hn2(e, g);
      }).then(function() {
        return f;
      });
      return R3(this, c);
    };
    k3.Lb = function(a, b, c, d) {
      var e = this;
      this.c && (this.c.cancel(), this.c = null);
      var f = null, g = E3().then(function() {
        return Cg(Ig(e.a, {requestUri: a, sessionId: b, postBody: d, tenantId: c}), e.uid);
      }).then(function(h2) {
        f = fn2(e, h2, "reauthenticate");
        wm(e, h2);
        e.h = null;
        return e.reload();
      }).then(function() {
        return f;
      });
      return R3(this, g, true);
    };
    k3.ub = function(a) {
      var b = this, c = null;
      return R3(this, this.I().then(function(d) {
        c = d;
        return "undefined" === typeof a || mb2(a) ? {} : bg(new Sf(a));
      }).then(function(d) {
        return b.a.ub(c, d);
      }).then(function(d) {
        if (b.email != d)
          return b.reload();
      }).then(function() {
      }));
    };
    k3.Eb = function(a, b) {
      var c = this, d = null;
      return R3(this, this.I().then(function(e) {
        d = e;
        return "undefined" === typeof b || mb2(b) ? {} : bg(new Sf(b));
      }).then(function(e) {
        return c.a.Eb(d, a, e);
      }).then(function(e) {
        if (c.email != e)
          return c.reload();
      }).then(function() {
      }));
    };
    function R3(a, b, c) {
      var d = on2(a, b, c);
      a.J.push(d);
      d.oa(function() {
        Wa3(a.J, d);
      });
      return d.o(function(e) {
        var f = null;
        e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), Qm(a), q3(a.jc, a)));
        throw f || e;
      });
    }
    k3.jc = function(a) {
      var b = null, c = this;
      a = Cg(E3(a), c.uid).then(function(d) {
        b = fn2(c, d, "reauthenticate");
        wm(c, d);
        c.h = null;
        return c.reload();
      }).then(function() {
        return b;
      });
      return R3(this, a, true);
    };
    function on2(a, b, c) {
      return a.h && !c ? (b.cancel(), F3(a.h)) : b.o(function(d) {
        !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.h || a.dispatchEvent(new sm("userInvalidated")), a.h = d);
        throw d;
      });
    }
    k3.toJSON = function() {
      return this.w();
    };
    k3.w = function() {
      var a = {uid: this.uid, displayName: this.displayName, photoURL: this.photoURL, email: this.email, emailVerified: this.emailVerified, phoneNumber: this.phoneNumber, isAnonymous: this.isAnonymous, tenantId: this.tenantId, providerData: [], apiKey: this.l, appName: this.m, authDomain: this.s, stsTokenManager: this.b.w(), redirectEventId: this.ga || null};
      this.metadata && z3(a, this.metadata.w());
      w2(this.providerData, function(b) {
        a.providerData.push(lf(b));
      });
      z3(a, this.O.w());
      return a;
    };
    function pn2(a) {
      if (!a.apiKey)
        return null;
      var b = {apiKey: a.apiKey, authDomain: a.authDomain, appName: a.appName, emulatorConfig: a.emulatorConfig}, c = {};
      if (a.stsTokenManager && a.stsTokenManager.accessToken) {
        c[Dg] = a.stsTokenManager.accessToken;
        c.refreshToken = a.stsTokenManager.refreshToken || null;
        var d = a.stsTokenManager.expirationTime;
        d && (c.expiresIn = (d - Date.now()) / 1e3);
      } else
        return null;
      var e = new Im(b, c, a);
      a.providerData && w2(a.providerData, function(f) {
        f && Zm(e, kf(f));
      });
      a.redirectEventId && (e.ga = a.redirectEventId);
      return e;
    }
    function qn2(a, b, c, d) {
      var e = new Im(a, b);
      c && (e.ha = c);
      d && Mm(e, d);
      return e.reload().then(function() {
        return e;
      });
    }
    function rn2(a, b, c, d) {
      var e = a.b, f = {};
      f[Dg] = e.b && e.b.toString();
      f.refreshToken = e.a;
      b = new Im(b || {apiKey: a.l, authDomain: a.s, appName: a.m}, f);
      c && (b.ha = c);
      d && Mm(b, d);
      bn2(b, a);
      return b;
    }
    ;
    function sn2(a) {
      this.a = a;
      this.b = Vk();
    }
    var mn2 = {name: "redirectUser", F: "session"};
    function nn2(a) {
      return Zk(a.b, mn2, a.a);
    }
    function tn2(a, b) {
      return a.b.get(mn2, a.a).then(function(c) {
        c && b && (c.authDomain = b);
        return pn2(c || {});
      });
    }
    ;
    function un2(a) {
      this.a = a;
      this.b = Vk();
      this.c = null;
      this.f = vn2(this);
      this.b.addListener(wn2("local"), this.a, q3(this.g, this));
    }
    un2.prototype.g = function() {
      var a = this, b = wn2("local");
      xn2(this, function() {
        return E3().then(function() {
          return a.c && "local" != a.c.F ? a.b.get(b, a.a) : null;
        }).then(function(c) {
          if (c)
            return yn2(a, "local").then(function() {
              a.c = b;
            });
        });
      });
    };
    function yn2(a, b) {
      var c = [], d;
      for (d in Rk)
        Rk[d] !== b && c.push(Zk(a.b, wn2(Rk[d]), a.a));
      c.push(Zk(a.b, zn2, a.a));
      return Ic3(c);
    }
    function vn2(a) {
      var b = wn2("local"), c = wn2("session"), d = wn2("none");
      return Yk(a.b, b, a.a).then(function() {
        return a.b.get(c, a.a);
      }).then(function(e) {
        return e ? c : a.b.get(d, a.a).then(function(f) {
          return f ? d : a.b.get(b, a.a).then(function(g) {
            return g ? b : a.b.get(zn2, a.a).then(function(h2) {
              return h2 ? wn2(h2) : b;
            });
          });
        });
      }).then(function(e) {
        a.c = e;
        return yn2(a, e.F);
      }).o(function() {
        a.c || (a.c = b);
      });
    }
    var zn2 = {name: "persistence", F: "session"};
    function wn2(a) {
      return {name: "authUser", F: a};
    }
    un2.prototype.xb = function(a) {
      var b = null, c = this;
      Sk(a);
      return xn2(this, function() {
        return a != c.c.F ? c.b.get(c.c, c.a).then(function(d) {
          b = d;
          return yn2(c, a);
        }).then(function() {
          c.c = wn2(a);
          if (b)
            return c.b.set(c.c, b, c.a);
        }) : E3();
      });
    };
    function An2(a) {
      return xn2(a, function() {
        return a.b.set(zn2, a.c.F, a.a);
      });
    }
    function Bn2(a, b) {
      return xn2(a, function() {
        return a.b.set(a.c, b.w(), a.a);
      });
    }
    function Cn2(a) {
      return xn2(a, function() {
        return Zk(a.b, a.c, a.a);
      });
    }
    function Dn2(a, b, c) {
      return xn2(a, function() {
        return a.b.get(a.c, a.a).then(function(d) {
          d && b && (d.authDomain = b);
          d && c && (d.emulatorConfig = c);
          return pn2(d || {});
        });
      });
    }
    function xn2(a, b) {
      a.f = a.f.then(b, b);
      return a.f;
    }
    ;
    function En2(a) {
      this.l = false;
      M3(this, "settings", new em());
      M3(this, "app", a);
      if (S3(this).options && S3(this).options.apiKey)
        a = index_esm_default.SDK_VERSION ? Oe2(index_esm_default.SDK_VERSION) : null, this.a = new Ii2(S3(this).options && S3(this).options.apiKey, Ca3(Da3), a);
      else
        throw new t2("invalid-api-key");
      this.R = [];
      this.s = [];
      this.O = [];
      this.hb = index_esm_default.INTERNAL.createSubscribe(q3(this.zc, this));
      this.X = void 0;
      this.bc = index_esm_default.INTERNAL.createSubscribe(q3(this.Ac, this));
      Fn2(this, null);
      this.i = new un2(S3(this).options.apiKey + ":" + S3(this).name);
      this.D = new sn2(S3(this).options.apiKey + ":" + S3(this).name);
      this.$ = T3(this, Gn2(this));
      this.h = T3(this, Hn2(this));
      this.ba = false;
      this.ja = q3(this.Zc, this);
      this.Ba = q3(this.da, this);
      this.ya = q3(this.mc, this);
      this.za = q3(this.wc, this);
      this.Aa = q3(this.xc, this);
      this.b = null;
      In2(this);
      this.INTERNAL = {};
      this.INTERNAL["delete"] = q3(this.delete, this);
      this.INTERNAL.logFramework = q3(this.Gc, this);
      this.u = 0;
      H3.call(this);
      Jn2(this);
      this.J = [];
      this.P = null;
    }
    r2(En2, H3);
    function Kn2(a) {
      G3.call(this, "languageCodeChanged");
      this.h = a;
    }
    r2(Kn2, G3);
    function Ln2(a) {
      G3.call(this, "emulatorConfigChanged");
      this.c = a;
    }
    r2(Ln2, G3);
    function Mn2(a) {
      G3.call(this, "frameworkChanged");
      this.f = a;
    }
    r2(Mn2, G3);
    k3 = En2.prototype;
    k3.xb = function(a) {
      a = this.i.xb(a);
      return T3(this, a);
    };
    k3.wa = function(a) {
      this.aa === a || this.l || (this.aa = a, Oi2(this.a, this.aa), this.dispatchEvent(new Kn2(this.la())));
    };
    k3.la = function() {
      return this.aa;
    };
    k3.fd = function() {
      var a = l.navigator;
      this.wa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
    };
    k3.gd = function(a, b) {
      if (!this.P) {
        if (!/^https?:\/\//.test(a))
          throw new t2("argument-error", "Emulator URL must start with a valid scheme (http:// or https://).");
        b = b ? !!b.disableWarnings : false;
        Nn2(b);
        this.P = {url: a, ec: b};
        this.settings.ib = true;
        Pi2(this.a, this.P);
        this.dispatchEvent(new Ln2(this.P));
      }
    };
    function Nn2(a) {
      "undefined" !== typeof console && "function" === typeof console.info && console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
      l.document && !a && Ee2().then(function() {
        var b = l.document.createElement("div");
        b.innerText = "Running in emulator mode. Do not use with production credentials.";
        b.style.position = "fixed";
        b.style.width = "100%";
        b.style.backgroundColor = "#ffffff";
        b.style.border = ".1em solid #000000";
        b.style.color = "#ff0000";
        b.style.bottom = "0px";
        b.style.left = "0px";
        b.style.margin = "0px";
        b.style.zIndex = 1e4;
        b.style.textAlign = "center";
        b.classList.add("firebase-emulator-warning");
        l.document.body.appendChild(b);
      });
    }
    k3.Gc = function(a) {
      this.J.push(a);
      Ri2(this.a, index_esm_default.SDK_VERSION ? Oe2(index_esm_default.SDK_VERSION, this.J) : null);
      this.dispatchEvent(new Mn2(this.J));
    };
    k3.Ga = function() {
      return Za3(this.J);
    };
    k3.yb = function(a) {
      this.S === a || this.l || (this.S = a, this.a.b = this.S);
    };
    k3.T = function() {
      return this.S;
    };
    function Jn2(a) {
      Object.defineProperty(a, "lc", {get: function() {
        return this.la();
      }, set: function(b) {
        this.wa(b);
      }, enumerable: false});
      a.aa = null;
      Object.defineProperty(a, "ti", {get: function() {
        return this.T();
      }, set: function(b) {
        this.yb(b);
      }, enumerable: false});
      a.S = null;
      Object.defineProperty(a, "emulatorConfig", {get: function() {
        if (this.P) {
          var b = J3(this.P.url);
          b = kf({protocol: b.c, host: b.a, port: b.g, options: kf({disableWarnings: this.P.ec})});
        } else
          b = null;
        return b;
      }, enumerable: false});
    }
    k3.toJSON = function() {
      return {apiKey: S3(this).options.apiKey, authDomain: S3(this).options.authDomain, appName: S3(this).name, currentUser: U3(this) && U3(this).w()};
    };
    function On2(a) {
      return a.Oa || F3(new t2("auth-domain-config-required"));
    }
    function In2(a) {
      var b = S3(a).options.authDomain, c = S3(a).options.apiKey;
      b && Re2() && (a.Oa = a.$.then(function() {
        if (!a.l) {
          a.b = Xl(b, c, S3(a).name, a.P);
          Pl(a.b, a);
          U3(a) && Vm(U3(a));
          if (a.m) {
            Vm(a.m);
            var d = a.m;
            d.wa(a.la());
            Nm(d, a);
            d = a.m;
            Mm(d, a.J);
            Pm(d, a);
            d = a.m;
            Pi2(d.a, a.P);
            Om(d, a);
            a.m = null;
          }
          return a.b;
        }
      }));
    }
    k3.Fb = function(a, b) {
      switch (a) {
        case "unknown":
        case "signInViaRedirect":
          return true;
        case "signInViaPopup":
          return this.g == b && !!this.f;
        default:
          return false;
      }
    };
    k3.na = function(a, b, c, d) {
      "signInViaPopup" == a && this.g == d && (c && this.C ? this.C(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.C);
    };
    k3.Fa = function(a, b) {
      return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? q3(this.ic, this) : null;
    };
    k3.ic = function(a, b, c, d) {
      var e = this, f = {requestUri: a, postBody: d, sessionId: b, tenantId: c};
      this.c && (this.c.cancel(), this.c = null);
      return e.$.then(function() {
        return Pn2(e, Fg(e.a, f));
      });
    };
    k3.Xc = function(a) {
      if (!Re2())
        return F3(new t2("operation-not-supported-in-this-environment"));
      var b = this, c = ng(a.providerId), d = Qe2(), e = null;
      (!Te2() || Ie2()) && S3(this).options.authDomain && a.isOAuthProvider && (e = ek(S3(this).options.authDomain, S3(this).options.apiKey, S3(this).name, "signInViaPopup", a, null, d, index_esm_default.SDK_VERSION || null, null, null, this.T(), this.P));
      var f = ze2(e, c && c.ua, c && c.ta);
      c = On2(this).then(function(g) {
        return Tl(g, f, "signInViaPopup", a, d, !!e, b.T());
      }).then(function() {
        return new D3(function(g, h2) {
          b.na("signInViaPopup", null, new t2("cancelled-popup-request"), b.g);
          b.f = g;
          b.C = h2;
          b.g = d;
          b.c = Vl(b.b, b, "signInViaPopup", f, d);
        });
      }).then(function(g) {
        f && ye2(f);
        return g ? kf(g) : null;
      }).o(function(g) {
        f && ye2(f);
        throw g;
      });
      return T3(this, c);
    };
    k3.Yc = function(a) {
      if (!Re2())
        return F3(new t2("operation-not-supported-in-this-environment"));
      var b = this, c = On2(this).then(function() {
        return An2(b.i);
      }).then(function() {
        return Ul(b.b, "signInViaRedirect", a, void 0, b.T());
      });
      return T3(this, c);
    };
    function Qn2(a) {
      if (!Re2())
        return F3(new t2("operation-not-supported-in-this-environment"));
      var b = On2(a).then(function() {
        return a.b.qa();
      }).then(function(c) {
        return c ? kf(c) : null;
      });
      return T3(a, b);
    }
    k3.qa = function() {
      var a = this;
      return Qn2(this).then(function(b) {
        a.b && $l(a.b.b);
        return b;
      }).o(function(b) {
        a.b && $l(a.b.b);
        throw b;
      });
    };
    k3.dd = function(a) {
      if (!a)
        return F3(new t2("null-user"));
      if (this.S != a.tenantId)
        return F3(new t2("tenant-id-mismatch"));
      var b = this, c = {};
      c.apiKey = S3(this).options.apiKey;
      c.authDomain = S3(this).options.authDomain;
      c.appName = S3(this).name;
      var d = rn2(a, c, b.D, b.Ga());
      return T3(this, this.h.then(function() {
        if (S3(b).options.apiKey != a.l)
          return d.reload();
      }).then(function() {
        if (U3(b) && a.uid == U3(b).uid)
          return bn2(U3(b), a), b.da(a);
        Fn2(b, d);
        Vm(d);
        return b.da(d);
      }).then(function() {
        Rn2(b);
      }));
    };
    function Sn2(a, b) {
      var c = {};
      c.apiKey = S3(a).options.apiKey;
      c.authDomain = S3(a).options.authDomain;
      c.appName = S3(a).name;
      a.P && (c.emulatorConfig = a.P);
      return a.$.then(function() {
        return qn2(c, b, a.D, a.Ga());
      }).then(function(d) {
        if (U3(a) && d.uid == U3(a).uid)
          return bn2(U3(a), d), a.da(d);
        Fn2(a, d);
        Vm(d);
        return a.da(d);
      }).then(function() {
        Rn2(a);
      });
    }
    function Fn2(a, b) {
      U3(a) && (Tm(U3(a), a.Ba), xd2(U3(a), "tokenChanged", a.ya), xd2(U3(a), "userDeleted", a.za), xd2(U3(a), "userInvalidated", a.Aa), Sm(U3(a)));
      b && (b.S.push(a.Ba), nd2(b, "tokenChanged", a.ya), nd2(b, "userDeleted", a.za), nd2(b, "userInvalidated", a.Aa), 0 < a.u && Rm(b));
      M3(a, "currentUser", b);
      b && (b.wa(a.la()), Nm(b, a), Mm(b, a.J), Pm(b, a), Pi2(b.a, a.P), Om(b, a));
    }
    k3.Ab = function() {
      var a = this, b = this.h.then(function() {
        a.b && $l(a.b.b);
        if (!U3(a))
          return E3();
        Fn2(a, null);
        return Cn2(a.i).then(function() {
          Rn2(a);
        });
      });
      return T3(this, b);
    };
    function Tn2(a) {
      var b = tn2(a.D, S3(a).options.authDomain).then(function(c) {
        if (a.m = c)
          c.ha = a.D;
        return nn2(a.D);
      });
      return T3(a, b);
    }
    function Gn2(a) {
      var b = S3(a).options.authDomain, c = Tn2(a).then(function() {
        return Dn2(a.i, b, a.P);
      }).then(function(d) {
        return d ? (d.ha = a.D, a.m && (a.m.ga || null) == (d.ga || null) ? d : d.reload().then(function() {
          return Bn2(a.i, d).then(function() {
            return d;
          });
        }).o(function(e) {
          return "auth/network-request-failed" == e.code ? d : Cn2(a.i);
        })) : null;
      }).then(function(d) {
        Fn2(a, d || null);
      });
      return T3(a, c);
    }
    function Hn2(a) {
      return a.$.then(function() {
        return Qn2(a);
      }).o(function() {
      }).then(function() {
        if (!a.l)
          return a.ja();
      }).o(function() {
      }).then(function() {
        if (!a.l) {
          a.ba = true;
          var b = a.i;
          b.b.addListener(wn2("local"), b.a, a.ja);
        }
      });
    }
    k3.Zc = function() {
      var a = this;
      return Dn2(this.i, S3(this).options.authDomain).then(function(b) {
        if (!a.l) {
          var c;
          if (c = U3(a) && b) {
            c = U3(a).uid;
            var d = b.uid;
            c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? false : c == d;
          }
          if (c)
            return bn2(U3(a), b), U3(a).I();
          if (U3(a) || b)
            Fn2(a, b), b && (Vm(b), b.ha = a.D), a.b && Pl(a.b, a), Rn2(a);
        }
      });
    };
    k3.da = function(a) {
      return Bn2(this.i, a);
    };
    k3.mc = function() {
      Rn2(this);
      this.da(U3(this));
    };
    k3.wc = function() {
      this.Ab();
    };
    k3.xc = function() {
      this.Ab();
    };
    function Pn2(a, b) {
      var c = null, d = null;
      return T3(a, b.then(function(e) {
        c = qh(e);
        d = og(e);
        return Sn2(a, e);
      }, function(e) {
        var f = null;
        e && "auth/multi-factor-auth-required" === e.code && (f = mm(e.w(), a, q3(a.kc, a)));
        throw f || e;
      }).then(function() {
        return kf({user: U3(a), credential: c, additionalUserInfo: d, operationType: "signIn"});
      }));
    }
    k3.kc = function(a) {
      var b = this;
      return this.h.then(function() {
        return Pn2(b, E3(a));
      });
    };
    k3.zc = function(a) {
      var b = this;
      this.addAuthTokenListener(function() {
        a.next(U3(b));
      });
    };
    k3.Ac = function(a) {
      var b = this;
      Un2(this, function() {
        a.next(U3(b));
      });
    };
    k3.Ic = function(a, b, c) {
      var d = this;
      this.ba && Promise.resolve().then(function() {
        "function" === typeof a ? a(U3(d)) : "function" === typeof a.next && a.next(U3(d));
      });
      return this.hb(a, b, c);
    };
    k3.Hc = function(a, b, c) {
      var d = this;
      this.ba && Promise.resolve().then(function() {
        d.X = d.getUid();
        "function" === typeof a ? a(U3(d)) : "function" === typeof a.next && a.next(U3(d));
      });
      return this.bc(a, b, c);
    };
    k3.nc = function(a) {
      var b = this, c = this.h.then(function() {
        return U3(b) ? U3(b).I(a).then(function(d) {
          return {accessToken: d};
        }) : null;
      });
      return T3(this, c);
    };
    k3.Tc = function(a) {
      var b = this;
      return this.h.then(function() {
        return Pn2(b, O3(b.a, Kj, {token: a}));
      }).then(function(c) {
        var d = c.user;
        an2(d, "isAnonymous", false);
        b.da(d);
        return c;
      });
    };
    k3.Uc = function(a, b) {
      var c = this;
      return this.h.then(function() {
        return Pn2(c, O3(c.a, ah, {email: a, password: b}));
      });
    };
    k3.dc = function(a, b) {
      var c = this;
      return this.h.then(function() {
        return Pn2(c, O3(c.a, Ej, {email: a, password: b}));
      });
    };
    k3.$a = function(a) {
      var b = this;
      return this.h.then(function() {
        return Pn2(b, a.ka(b.a));
      });
    };
    k3.Sc = function(a) {
      gf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
      return this.$a(a);
    };
    k3.zb = function() {
      var a = this;
      return this.h.then(function() {
        var b = U3(a);
        if (b && b.isAnonymous) {
          var c = kf({providerId: null, isNewUser: false});
          return kf({user: b, credential: null, additionalUserInfo: c, operationType: "signIn"});
        }
        return Pn2(a, a.a.zb()).then(function(d) {
          var e = d.user;
          an2(e, "isAnonymous", true);
          a.da(e);
          return d;
        });
      });
    };
    function S3(a) {
      return a.app;
    }
    function U3(a) {
      return a.currentUser;
    }
    k3.getUid = function() {
      return U3(this) && U3(this).uid || null;
    };
    function Vn2(a) {
      return U3(a) && U3(a)._lat || null;
    }
    function Rn2(a) {
      if (a.ba) {
        for (var b = 0; b < a.s.length; b++)
          if (a.s[b])
            a.s[b](Vn2(a));
        if (a.X !== a.getUid() && a.O.length) {
          for (a.X = a.getUid(), b = 0; b < a.O.length; b++)
            if (a.O[b])
              a.O[b](Vn2(a));
        }
      }
    }
    k3.cc = function(a) {
      this.addAuthTokenListener(a);
      this.u++;
      0 < this.u && U3(this) && Rm(U3(this));
    };
    k3.Pc = function(a) {
      var b = this;
      w2(this.s, function(c) {
        c == a && b.u--;
      });
      0 > this.u && (this.u = 0);
      0 == this.u && U3(this) && Sm(U3(this));
      this.removeAuthTokenListener(a);
    };
    k3.addAuthTokenListener = function(a) {
      var b = this;
      this.s.push(a);
      T3(this, this.h.then(function() {
        b.l || Va3(b.s, a) && a(Vn2(b));
      }));
    };
    k3.removeAuthTokenListener = function(a) {
      Xa3(this.s, function(b) {
        return b == a;
      });
    };
    function Un2(a, b) {
      a.O.push(b);
      T3(a, a.h.then(function() {
        !a.l && Va3(a.O, b) && a.X !== a.getUid() && (a.X = a.getUid(), b(Vn2(a)));
      }));
    }
    k3.delete = function() {
      this.l = true;
      for (var a = 0; a < this.R.length; a++)
        this.R[a].cancel("app-deleted");
      this.R = [];
      this.i && (a = this.i, a.b.removeListener(wn2("local"), a.a, this.ja));
      this.b && (Ql(this.b, this), $l(this.b.b));
      return Promise.resolve();
    };
    function T3(a, b) {
      a.R.push(b);
      b.oa(function() {
        Wa3(a.R, b);
      });
      return b;
    }
    k3.hc = function(a) {
      return T3(this, aj(this.a, a));
    };
    k3.Bc = function(a) {
      return !!fh(a);
    };
    k3.wb = function(a, b) {
      var c = this;
      return T3(this, E3().then(function() {
        var d = new Sf(b);
        if (!d.c)
          throw new t2("argument-error", $f + " must be true when sending sign in link to email");
        return bg(d);
      }).then(function(d) {
        return c.a.wb(a, d);
      }).then(function() {
      }));
    };
    k3.jd = function(a) {
      return this.Ra(a).then(function(b) {
        return b.data.email;
      });
    };
    k3.nb = function(a, b) {
      return T3(this, this.a.nb(a, b).then(function() {
      }));
    };
    k3.Ra = function(a) {
      return T3(this, this.a.Ra(a).then(function(b) {
        return new vf(b);
      }));
    };
    k3.jb = function(a) {
      return T3(this, this.a.jb(a).then(function() {
      }));
    };
    k3.vb = function(a, b) {
      var c = this;
      return T3(this, E3().then(function() {
        return "undefined" === typeof b || mb2(b) ? {} : bg(new Sf(b));
      }).then(function(d) {
        return c.a.vb(a, d);
      }).then(function() {
      }));
    };
    k3.Wc = function(a, b) {
      return T3(this, gm(this, a, b, q3(this.$a, this)));
    };
    k3.Vc = function(a, b) {
      var c = this;
      return T3(this, E3().then(function() {
        var d = b || re2(), e = eh(a, d);
        d = fh(d);
        if (!d)
          throw new t2("argument-error", "Invalid email link!");
        if (d.tenantId !== c.T())
          throw new t2("tenant-id-mismatch");
        return c.$a(e);
      }));
    };
    function Wn2() {
    }
    Wn2.prototype.render = function() {
    };
    Wn2.prototype.reset = function() {
    };
    Wn2.prototype.getResponse = function() {
    };
    Wn2.prototype.execute = function() {
    };
    function Xn2() {
      this.a = {};
      this.b = 1e12;
    }
    var Yn2 = null;
    Xn2.prototype.render = function(a, b) {
      this.a[this.b.toString()] = new Zn2(a, b);
      return this.b++;
    };
    Xn2.prototype.reset = function(a) {
      var b = $n2(this, a);
      a = ao2(a);
      b && a && (b.delete(), delete this.a[a]);
    };
    Xn2.prototype.getResponse = function(a) {
      return (a = $n2(this, a)) ? a.getResponse() : null;
    };
    Xn2.prototype.execute = function(a) {
      (a = $n2(this, a)) && a.execute();
    };
    function $n2(a, b) {
      return (b = ao2(b)) ? a.a[b] || null : null;
    }
    function ao2(a) {
      return (a = "undefined" === typeof a ? 1e12 : a) ? a.toString() : null;
    }
    function Zn2(a, b) {
      this.g = false;
      this.c = b;
      this.a = this.b = null;
      this.h = "invisible" !== this.c.size;
      this.f = kc3(a);
      var c = this;
      this.i = function() {
        c.execute();
      };
      this.h ? this.execute() : nd2(this.f, "click", this.i);
    }
    Zn2.prototype.getResponse = function() {
      bo2(this);
      return this.b;
    };
    Zn2.prototype.execute = function() {
      bo2(this);
      var a = this;
      this.a || (this.a = setTimeout(function() {
        a.b = Me2();
        var b = a.c.callback, c = a.c["expired-callback"];
        if (b)
          try {
            b(a.b);
          } catch (d) {
          }
        a.a = setTimeout(function() {
          a.a = null;
          a.b = null;
          if (c)
            try {
              c();
            } catch (d) {
            }
          a.h && a.execute();
        }, 6e4);
      }, 500));
    };
    Zn2.prototype.delete = function() {
      bo2(this);
      this.g = true;
      clearTimeout(this.a);
      this.a = null;
      xd2(this.f, "click", this.i);
    };
    function bo2(a) {
      if (a.g)
        throw Error("reCAPTCHA mock was already deleted!");
    }
    ;
    function co2() {
    }
    M3(co2, "FACTOR_ID", "phone");
    function eo2() {
    }
    eo2.prototype.g = function() {
      Yn2 || (Yn2 = new Xn2());
      return E3(Yn2);
    };
    eo2.prototype.c = function() {
    };
    var fo2 = null;
    function go2() {
      this.b = l.grecaptcha ? Infinity : 0;
      this.f = null;
      this.a = "__rcb" + Math.floor(1e6 * Math.random()).toString();
    }
    var ho2 = new qb2(rb, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"), io2 = new Ze2(3e4, 6e4);
    go2.prototype.g = function(a) {
      var b = this;
      return new D3(function(c, d) {
        var e = setTimeout(function() {
          d(new t2("network-request-failed"));
        }, io2.get());
        if (!l.grecaptcha || a !== b.f && !b.b) {
          l[b.a] = function() {
            if (l.grecaptcha) {
              b.f = a;
              var g = l.grecaptcha.render;
              l.grecaptcha.render = function(h2, n2) {
                h2 = g(h2, n2);
                b.b++;
                return h2;
              };
              clearTimeout(e);
              c(l.grecaptcha);
            } else
              clearTimeout(e), d(new t2("internal-error"));
            delete l[b.a];
          };
          var f = zb2(ho2, {onload: b.a, hl: a || ""});
          E3(Bi2(f)).o(function() {
            clearTimeout(e);
            d(new t2("internal-error", "Unable to load external reCAPTCHA dependencies!"));
          });
        } else
          clearTimeout(e), c(l.grecaptcha);
      });
    };
    go2.prototype.c = function() {
      this.b--;
    };
    var jo2 = null;
    function ko2(a, b, c, d, e, f, g) {
      M3(this, "type", "recaptcha");
      this.c = this.f = null;
      this.D = false;
      this.v = b;
      this.g = null;
      g ? (fo2 || (fo2 = new eo2()), g = fo2) : (jo2 || (jo2 = new go2()), g = jo2);
      this.m = g;
      this.a = c || {theme: "light", type: "image"};
      this.h = [];
      if (this.a[lo2])
        throw new t2("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
      this.i = "invisible" === this.a[mo2];
      if (!l.document)
        throw new t2("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
      if (!kc3(b) || !this.i && kc3(b).hasChildNodes())
        throw new t2("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
      this.s = new Ii2(a, f || null, e || null);
      this.u = d || function() {
        return null;
      };
      var h2 = this;
      this.l = [];
      var n2 = this.a[no2];
      this.a[no2] = function(v2) {
        oo2(h2, v2);
        if ("function" === typeof n2)
          n2(v2);
        else if ("string" === typeof n2) {
          var B2 = L3(n2, l);
          "function" === typeof B2 && B2(v2);
        }
      };
      var p2 = this.a[po2];
      this.a[po2] = function() {
        oo2(h2, null);
        if ("function" === typeof p2)
          p2();
        else if ("string" === typeof p2) {
          var v2 = L3(p2, l);
          "function" === typeof v2 && v2();
        }
      };
    }
    var no2 = "callback", po2 = "expired-callback", lo2 = "sitekey", mo2 = "size";
    function oo2(a, b) {
      for (var c = 0; c < a.l.length; c++)
        try {
          a.l[c](b);
        } catch (d) {
        }
    }
    function qo2(a, b) {
      Xa3(a.l, function(c) {
        return c == b;
      });
    }
    function ro2(a, b) {
      a.h.push(b);
      b.oa(function() {
        Wa3(a.h, b);
      });
      return b;
    }
    k3 = ko2.prototype;
    k3.Ia = function() {
      var a = this;
      return this.f ? this.f : this.f = ro2(this, E3().then(function() {
        if (Se2() && !Je2())
          return Ee2();
        throw new t2("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
      }).then(function() {
        return a.m.g(a.u());
      }).then(function(b) {
        a.g = b;
        return O3(a.s, Jj, {});
      }).then(function(b) {
        a.a[lo2] = b.recaptchaSiteKey;
      }).o(function(b) {
        a.f = null;
        throw b;
      }));
    };
    k3.render = function() {
      so2(this);
      var a = this;
      return ro2(this, this.Ia().then(function() {
        if (null === a.c) {
          var b = a.v;
          if (!a.i) {
            var c = kc3(b);
            b = nc3("DIV");
            c.appendChild(b);
          }
          a.c = a.g.render(b, a.a);
        }
        return a.c;
      }));
    };
    k3.verify = function() {
      so2(this);
      var a = this;
      return ro2(this, this.render().then(function(b) {
        return new D3(function(c) {
          var d = a.g.getResponse(b);
          if (d)
            c(d);
          else {
            var e = function(f) {
              f && (qo2(a, e), c(f));
            };
            a.l.push(e);
            a.i && a.g.execute(a.c);
          }
        });
      }));
    };
    k3.reset = function() {
      so2(this);
      null !== this.c && this.g.reset(this.c);
    };
    function so2(a) {
      if (a.D)
        throw new t2("internal-error", "RecaptchaVerifier instance has been destroyed.");
    }
    k3.clear = function() {
      so2(this);
      this.D = true;
      this.m.c();
      for (var a = 0; a < this.h.length; a++)
        this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");
      if (!this.i) {
        a = kc3(this.v);
        for (var b; b = a.firstChild; )
          a.removeChild(b);
      }
    };
    function to2(a, b, c) {
      var d = false;
      try {
        this.b = c || index_esm_default.app();
      } catch (g) {
        throw new t2("argument-error", "No firebase.app.App instance is currently initialized.");
      }
      if (this.b.options && this.b.options.apiKey)
        c = this.b.options.apiKey;
      else
        throw new t2("invalid-api-key");
      var e = this, f = null;
      try {
        f = this.b.auth().Ga();
      } catch (g) {
      }
      try {
        d = this.b.auth().settings.appVerificationDisabledForTesting;
      } catch (g) {
      }
      f = index_esm_default.SDK_VERSION ? Oe2(index_esm_default.SDK_VERSION, f) : null;
      ko2.call(this, c, a, b, function() {
        try {
          var g = e.b.auth().la();
        } catch (h2) {
          g = null;
        }
        return g;
      }, f, Ca3(Da3), d);
    }
    r2(to2, ko2);
    function uo2(a, b, c, d) {
      a: {
        c = Array.prototype.slice.call(c);
        var e = 0;
        for (var f = false, g = 0; g < b.length; g++)
          if (b[g].optional)
            f = true;
          else {
            if (f)
              throw new t2("internal-error", "Argument validator encountered a required argument after an optional argument.");
            e++;
          }
        f = b.length;
        if (c.length < e || f < c.length)
          d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";
        else {
          for (e = 0; e < c.length; e++)
            if (f = b[e].optional && void 0 === c[e], !b[e].M(c[e]) && !f) {
              b = b[e];
              if (0 > e || e >= vo2.length)
                throw new t2("internal-error", "Argument validator received an unsupported number of arguments.");
              c = vo2[e];
              d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
              break a;
            }
          d = null;
        }
      }
      if (d)
        throw new t2("argument-error", a + " failed: " + d);
    }
    var vo2 = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");
    function V3(a, b) {
      return {name: a || "", K: "a valid string", optional: !!b, M: function(c) {
        return "string" === typeof c;
      }};
    }
    function wo2(a, b) {
      return {name: a || "", K: "a boolean", optional: !!b, M: function(c) {
        return "boolean" === typeof c;
      }};
    }
    function W3(a, b) {
      return {name: a || "", K: "a valid object", optional: !!b, M: m};
    }
    function xo2(a, b) {
      return {name: a || "", K: "a function", optional: !!b, M: function(c) {
        return "function" === typeof c;
      }};
    }
    function yo2(a, b) {
      return {name: a || "", K: "null", optional: !!b, M: function(c) {
        return null === c;
      }};
    }
    function zo2() {
      return {name: "", K: "an HTML element", optional: false, M: function(a) {
        return !!(a && a instanceof Element);
      }};
    }
    function Ao2() {
      return {name: "auth", K: "an instance of Firebase Auth", optional: true, M: function(a) {
        return !!(a && a instanceof En2);
      }};
    }
    function Bo2() {
      return {name: "app", K: "an instance of Firebase App", optional: true, M: function(a) {
        return !!(a && a instanceof index_esm_default.app.App);
      }};
    }
    function Co2(a) {
      return {name: a ? a + "Credential" : "credential", K: a ? "a valid " + a + " credential" : "a valid credential", optional: false, M: function(b) {
        if (!b)
          return false;
        var c = !a || b.providerId === a;
        return !(!b.ka || !c);
      }};
    }
    function Do2() {
      return {name: "multiFactorAssertion", K: "a valid multiFactorAssertion", optional: false, M: function(a) {
        return a ? !!a.sb : false;
      }};
    }
    function Eo2() {
      return {name: "authProvider", K: "a valid Auth provider", optional: false, M: function(a) {
        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
      }};
    }
    function Fo2(a, b) {
      return m(a) && "string" === typeof a.type && a.type === b && "function" === typeof a.Ha;
    }
    function Go2(a) {
      return m(a) && "string" === typeof a.uid;
    }
    function Ho2() {
      return {name: "applicationVerifier", K: "an implementation of firebase.auth.ApplicationVerifier", optional: false, M: function(a) {
        return !(!a || "string" !== typeof a.type || "function" !== typeof a.verify);
      }};
    }
    function X3(a, b, c, d) {
      return {name: c || "", K: a.K + " or " + b.K, optional: !!d, M: function(e) {
        return a.M(e) || b.M(e);
      }};
    }
    ;
    function Y3(a, b) {
      for (var c in b) {
        var d = b[c].name;
        a[d] = Io2(d, a[c], b[c].j);
      }
    }
    function Jo2(a, b) {
      for (var c in b) {
        var d = b[c].name;
        d !== c && Object.defineProperty(a, d, {get: ua3(function(e) {
          return this[e];
        }, c), set: ua3(function(e, f, g, h2) {
          uo2(e, [g], [h2], true);
          this[f] = h2;
        }, d, c, b[c].kb), enumerable: true});
      }
    }
    function Z3(a, b, c, d) {
      a[b] = Io2(b, c, d);
    }
    function Io2(a, b, c) {
      function d() {
        var g = Array.prototype.slice.call(arguments);
        uo2(e, c, g);
        return b.apply(this, g);
      }
      if (!c)
        return b;
      var e = Ko2(a), f;
      for (f in b)
        d[f] = b[f];
      for (f in b.prototype)
        d.prototype[f] = b.prototype[f];
      return d;
    }
    function Ko2(a) {
      a = a.split(".");
      return a[a.length - 1];
    }
    ;
    Y3(En2.prototype, {
      jb: {name: "applyActionCode", j: [V3("code")]},
      Ra: {name: "checkActionCode", j: [V3("code")]},
      nb: {name: "confirmPasswordReset", j: [V3("code"), V3("newPassword")]},
      dc: {name: "createUserWithEmailAndPassword", j: [V3("email"), V3("password")]},
      hc: {name: "fetchSignInMethodsForEmail", j: [V3("email")]},
      qa: {name: "getRedirectResult", j: []},
      Bc: {name: "isSignInWithEmailLink", j: [V3("emailLink")]},
      Hc: {name: "onAuthStateChanged", j: [X3(W3(), xo2(), "nextOrObserver"), xo2("opt_error", true), xo2("opt_completed", true)]},
      Ic: {
        name: "onIdTokenChanged",
        j: [X3(W3(), xo2(), "nextOrObserver"), xo2("opt_error", true), xo2("opt_completed", true)]
      },
      vb: {name: "sendPasswordResetEmail", j: [V3("email"), X3(W3("opt_actionCodeSettings", true), yo2(null, true), "opt_actionCodeSettings", true)]},
      wb: {name: "sendSignInLinkToEmail", j: [V3("email"), W3("actionCodeSettings")]},
      xb: {name: "setPersistence", j: [V3("persistence")]},
      Sc: {name: "signInAndRetrieveDataWithCredential", j: [Co2()]},
      zb: {name: "signInAnonymously", j: []},
      $a: {name: "signInWithCredential", j: [Co2()]},
      Tc: {name: "signInWithCustomToken", j: [V3("token")]},
      Uc: {name: "signInWithEmailAndPassword", j: [V3("email"), V3("password")]},
      Vc: {name: "signInWithEmailLink", j: [V3("email"), V3("emailLink", true)]},
      Wc: {name: "signInWithPhoneNumber", j: [V3("phoneNumber"), Ho2()]},
      Xc: {name: "signInWithPopup", j: [Eo2()]},
      Yc: {name: "signInWithRedirect", j: [Eo2()]},
      dd: {name: "updateCurrentUser", j: [X3(function(a) {
        return {name: "user", K: "an instance of Firebase User", optional: !!a, M: function(b) {
          return !!(b && b instanceof Im);
        }};
      }(), yo2(), "user")]},
      Ab: {name: "signOut", j: []},
      toJSON: {name: "toJSON", j: [V3(null, true)]},
      fd: {name: "useDeviceLanguage", j: []},
      gd: {name: "useEmulator", j: [V3("url"), W3("options", true)]},
      jd: {name: "verifyPasswordResetCode", j: [V3("code")]}
    });
    Jo2(En2.prototype, {lc: {name: "languageCode", kb: X3(V3(), yo2(), "languageCode")}, ti: {name: "tenantId", kb: X3(V3(), yo2(), "tenantId")}});
    En2.Persistence = Rk;
    En2.Persistence.LOCAL = "local";
    En2.Persistence.SESSION = "session";
    En2.Persistence.NONE = "none";
    Y3(Im.prototype, {
      delete: {name: "delete", j: []},
      oc: {name: "getIdTokenResult", j: [wo2("opt_forceRefresh", true)]},
      I: {name: "getIdToken", j: [wo2("opt_forceRefresh", true)]},
      Cc: {name: "linkAndRetrieveDataWithCredential", j: [Co2()]},
      qb: {name: "linkWithCredential", j: [Co2()]},
      Dc: {name: "linkWithPhoneNumber", j: [V3("phoneNumber"), Ho2()]},
      Ec: {name: "linkWithPopup", j: [Eo2()]},
      Fc: {name: "linkWithRedirect", j: [Eo2()]},
      Lc: {name: "reauthenticateAndRetrieveDataWithCredential", j: [Co2()]},
      tb: {name: "reauthenticateWithCredential", j: [Co2()]},
      Mc: {
        name: "reauthenticateWithPhoneNumber",
        j: [V3("phoneNumber"), Ho2()]
      },
      Nc: {name: "reauthenticateWithPopup", j: [Eo2()]},
      Oc: {name: "reauthenticateWithRedirect", j: [Eo2()]},
      reload: {name: "reload", j: []},
      ub: {name: "sendEmailVerification", j: [X3(W3("opt_actionCodeSettings", true), yo2(null, true), "opt_actionCodeSettings", true)]},
      toJSON: {name: "toJSON", j: [V3(null, true)]},
      cd: {name: "unlink", j: [V3("provider")]},
      Bb: {name: "updateEmail", j: [V3("email")]},
      Cb: {name: "updatePassword", j: [V3("password")]},
      ed: {name: "updatePhoneNumber", j: [Co2("phone")]},
      Db: {name: "updateProfile", j: [W3("profile")]},
      Eb: {name: "verifyBeforeUpdateEmail", j: [V3("email"), X3(W3("opt_actionCodeSettings", true), yo2(null, true), "opt_actionCodeSettings", true)]}
    });
    Y3(Xn2.prototype, {execute: {name: "execute"}, render: {name: "render"}, reset: {name: "reset"}, getResponse: {name: "getResponse"}});
    Y3(Wn2.prototype, {execute: {name: "execute"}, render: {name: "render"}, reset: {name: "reset"}, getResponse: {name: "getResponse"}});
    Y3(D3.prototype, {oa: {name: "finally"}, o: {name: "catch"}, then: {name: "then"}});
    Jo2(em.prototype, {appVerificationDisabled: {name: "appVerificationDisabledForTesting", kb: wo2("appVerificationDisabledForTesting")}});
    Y3(fm.prototype, {confirm: {name: "confirm", j: [V3("verificationCode")]}});
    Z3(Bg, "fromJSON", function(a) {
      a = "string" === typeof a ? JSON.parse(a) : a;
      for (var b, c = [Mg, dh, kh, Jg], d = 0; d < c.length; d++)
        if (b = c[d](a))
          return b;
      return null;
    }, [X3(V3(), W3(), "json")]);
    Z3(Zg, "credential", function(a, b) {
      return new Yg(a, b);
    }, [V3("email"), V3("password")]);
    Y3(Yg.prototype, {w: {name: "toJSON", j: [V3(null, true)]}});
    Y3(Qg.prototype, {Ca: {name: "addScope", j: [V3("scope")]}, Ka: {name: "setCustomParameters", j: [W3("customOAuthParameters")]}});
    Z3(Qg, "credential", Rg, [X3(V3(), W3(), "token")]);
    Z3(Zg, "credentialWithLink", eh, [V3("email"), V3("emailLink")]);
    Y3(Sg.prototype, {Ca: {name: "addScope", j: [V3("scope")]}, Ka: {name: "setCustomParameters", j: [W3("customOAuthParameters")]}});
    Z3(Sg, "credential", Tg, [X3(V3(), W3(), "token")]);
    Y3(Ug.prototype, {Ca: {name: "addScope", j: [V3("scope")]}, Ka: {name: "setCustomParameters", j: [W3("customOAuthParameters")]}});
    Z3(Ug, "credential", Vg, [X3(V3(), X3(W3(), yo2()), "idToken"), X3(V3(), yo2(), "accessToken", true)]);
    Y3(Wg.prototype, {Ka: {name: "setCustomParameters", j: [W3("customOAuthParameters")]}});
    Z3(Wg, "credential", Xg, [X3(V3(), W3(), "token"), V3("secret", true)]);
    Y3(Pg.prototype, {Ca: {name: "addScope", j: [V3("scope")]}, credential: {name: "credential", j: [X3(V3(), X3(W3(), yo2()), "optionsOrIdToken"), X3(V3(), yo2(), "accessToken", true)]}, Ka: {name: "setCustomParameters", j: [W3("customOAuthParameters")]}});
    Y3(Kg.prototype, {w: {name: "toJSON", j: [V3(null, true)]}});
    Y3(Eg.prototype, {w: {name: "toJSON", j: [V3(null, true)]}});
    Z3(lh, "credential", ph, [V3("verificationId"), V3("verificationCode")]);
    Y3(lh.prototype, {fb: {name: "verifyPhoneNumber", j: [X3(V3(), function(a, b) {
      return {name: a || "phoneInfoOptions", K: "valid phone info options", optional: !!b, M: function(c) {
        return c ? c.session && c.phoneNumber ? Fo2(c.session, zg) && "string" === typeof c.phoneNumber : c.session && c.multiFactorHint ? Fo2(c.session, Ag) && Go2(c.multiFactorHint) : c.session && c.multiFactorUid ? Fo2(c.session, Ag) && "string" === typeof c.multiFactorUid : c.phoneNumber ? "string" === typeof c.phoneNumber : false : false;
      }};
    }(), "phoneInfoOptions"), Ho2()]}});
    Y3(gh.prototype, {w: {name: "toJSON", j: [V3(null, true)]}});
    Y3(t2.prototype, {toJSON: {name: "toJSON", j: [V3(null, true)]}});
    Y3(yh.prototype, {toJSON: {name: "toJSON", j: [V3(null, true)]}});
    Y3(xh.prototype, {toJSON: {name: "toJSON", j: [V3(null, true)]}});
    Y3(lm.prototype, {toJSON: {name: "toJSON", j: [V3(null, true)]}});
    Y3(im.prototype, {Rc: {name: "resolveSignIn", j: [Do2()]}});
    Y3(tm.prototype, {Rb: {name: "getSession", j: []}, fc: {name: "enroll", j: [Do2(), V3("displayName", true)]}, bd: {name: "unenroll", j: [X3({name: "multiFactorInfo", K: "a valid multiFactorInfo", optional: false, M: Go2}, V3(), "multiFactorInfoIdentifier")]}});
    Y3(to2.prototype, {clear: {name: "clear", j: []}, render: {name: "render", j: []}, verify: {name: "verify", j: []}});
    Z3(Jf, "parseLink", Rf, [V3("link")]);
    Z3(co2, "assertion", function(a) {
      return new rm(a);
    }, [Co2("phone")]);
    (function() {
      if ("undefined" !== typeof index_esm_default && index_esm_default.INTERNAL && index_esm_default.INTERNAL.registerComponent) {
        var a = {ActionCodeInfo: {Operation: {EMAIL_SIGNIN: Af, PASSWORD_RESET: "PASSWORD_RESET", RECOVER_EMAIL: "RECOVER_EMAIL", REVERT_SECOND_FACTOR_ADDITION: Cf, VERIFY_AND_CHANGE_EMAIL: Bf, VERIFY_EMAIL: "VERIFY_EMAIL"}}, Auth: En2, AuthCredential: Bg, Error: t2};
        Z3(a, "EmailAuthProvider", Zg, []);
        Z3(a, "FacebookAuthProvider", Qg, []);
        Z3(a, "GithubAuthProvider", Sg, []);
        Z3(a, "GoogleAuthProvider", Ug, []);
        Z3(a, "TwitterAuthProvider", Wg, []);
        Z3(a, "OAuthProvider", Pg, [V3("providerId")]);
        Z3(a, "SAMLAuthProvider", Og, [V3("providerId")]);
        Z3(a, "PhoneAuthProvider", lh, [Ao2()]);
        Z3(a, "RecaptchaVerifier", to2, [X3(V3(), zo2(), "recaptchaContainer"), W3("recaptchaParameters", true), Bo2()]);
        Z3(a, "ActionCodeURL", Jf, []);
        Z3(a, "PhoneMultiFactorGenerator", co2, []);
        index_esm_default.INTERNAL.registerComponent({name: "auth", instanceFactory: function(b) {
          b = b.getProvider("app").getImmediate();
          return new En2(b);
        }, multipleInstances: false, serviceProps: a, instantiationMode: "LAZY", type: "PUBLIC"});
        index_esm_default.INTERNAL.registerComponent({
          name: "auth-internal",
          instanceFactory: function(b) {
            b = b.getProvider("auth").getImmediate();
            return {getUid: q3(b.getUid, b), getToken: q3(b.nc, b), addAuthTokenListener: q3(b.cc, b), removeAuthTokenListener: q3(b.Pc, b)};
          },
          multipleInstances: false,
          instantiationMode: "LAZY",
          type: "PRIVATE"
        });
        index_esm_default.registerVersion("@firebase/auth", "0.16.2");
        index_esm_default.INTERNAL.extendNamespace({User: Im});
      } else
        throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();
  }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  // node_modules/@firebase/webchannel-wrapper/dist/index.esm.js
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  function __extends2(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i2 = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i2 >= o.length)
            o = void 0;
          return {value: o && o[i2++], done: !o};
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var h;
  var goog = goog || {};
  var k2 = commonjsGlobal || self;
  function aa2() {
  }
  function ba2(a) {
    var b = typeof a;
    b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    return "array" == b || "object" == b && "number" == typeof a.length;
  }
  function n(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }
  function ca2(a) {
    return Object.prototype.hasOwnProperty.call(a, da2) && a[da2] || (a[da2] = ++ea2);
  }
  var da2 = "closure_uid_" + (1e9 * Math.random() >>> 0);
  var ea2 = 0;
  function fa2(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }
  function ha2(a, b, c) {
    if (!a)
      throw Error();
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function() {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }
    return function() {
      return a.apply(b, arguments);
    };
  }
  function p(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa2 : p = ha2;
    return p.apply(null, arguments);
  }
  function ja2(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }
  function q2() {
    return Date.now();
  }
  function r(a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.X = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
    a.Kb = function(d, e, f) {
      for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
        g[m - 2] = arguments[m];
      return b.prototype[e].apply(d, g);
    };
  }
  function t() {
    this.j = this.j;
    this.i = this.i;
  }
  var ka2 = 0;
  t.prototype.j = false;
  t.prototype.ja = function() {
    if (!this.j && (this.j = true, this.G(), 0 != ka2)) {
      var a = ca2(this);
    }
  };
  t.prototype.G = function() {
    if (this.i)
      for (; this.i.length; )
        this.i.shift()();
  };
  var ma2 = Array.prototype.indexOf ? function(a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function(a, b) {
    if ("string" === typeof a)
      return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for (var c = 0; c < a.length; c++)
      if (c in a && a[c] === b)
        return c;
    return -1;
  };
  var na2 = Array.prototype.forEach ? function(a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function(a, b, c) {
    for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
      f in e && b.call(c, e[f], f, a);
  };
  function oa2(a) {
    a: {
      var b = pa2;
      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
        if (e in d && b.call(void 0, d[e], e, a)) {
          b = e;
          break a;
        }
      b = -1;
    }
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
  }
  function qa2(a) {
    return Array.prototype.concat.apply([], arguments);
  }
  function ra2(a) {
    var b = a.length;
    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++)
        c[d] = a[d];
      return c;
    }
    return [];
  }
  function sa2(a) {
    return /^[\s\xa0]*$/.test(a);
  }
  var ta2 = String.prototype.trim ? function(a) {
    return a.trim();
  } : function(a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  };
  function v(a, b) {
    return -1 != a.indexOf(b);
  }
  function ua2(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  var w;
  a: {
    var va2 = k2.navigator;
    if (va2) {
      var wa2 = va2.userAgent;
      if (wa2) {
        w = wa2;
        break a;
      }
    }
    w = "";
  }
  function za2(a, b, c) {
    for (var d in a)
      b.call(c, a[d], d, a);
  }
  function Aa2(a) {
    var b = {};
    for (var c in a)
      b[c] = a[c];
    return b;
  }
  var Ba2 = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  function Ca2(a, b) {
    var c, d;
    for (var e = 1; e < arguments.length; e++) {
      d = arguments[e];
      for (c in d)
        a[c] = d[c];
      for (var f = 0; f < Ba2.length; f++)
        c = Ba2[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
  }
  function Da2(a) {
    Da2[" "](a);
    return a;
  }
  Da2[" "] = aa2;
  function Ea2(a, b) {
    var c = Fa2;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }
  var Ga2 = v(w, "Opera");
  var x2 = v(w, "Trident") || v(w, "MSIE");
  var Ha2 = v(w, "Edge");
  var Ia2 = Ha2 || x2;
  var Ja2 = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge");
  var Ka2 = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
  function La2() {
    var a = k2.document;
    return a ? a.documentMode : void 0;
  }
  var Ma2;
  a: {
    var Na2 = "", Oa2 = function() {
      var a = w;
      if (Ja2)
        return /rv:([^\);]+)(\)|;)/.exec(a);
      if (Ha2)
        return /Edge\/([\d\.]+)/.exec(a);
      if (x2)
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
      if (Ka2)
        return /WebKit\/(\S+)/.exec(a);
      if (Ga2)
        return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();
    Oa2 && (Na2 = Oa2 ? Oa2[1] : "");
    if (x2) {
      var Pa2 = La2();
      if (null != Pa2 && Pa2 > parseFloat(Na2)) {
        Ma2 = String(Pa2);
        break a;
      }
    }
    Ma2 = Na2;
  }
  var Fa2 = {};
  function Qa2(a) {
    return Ea2(a, function() {
      {
        var b = 0;
        var e = ta2(String(Ma2)).split("."), f = ta2(String(a)).split("."), g = Math.max(e.length, f.length);
        for (var m = 0; 0 == b && m < g; m++) {
          var c = e[m] || "", d = f[m] || "";
          do {
            c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
            d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
            if (0 == c[0].length && 0 == d[0].length)
              break;
            b = ua2(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua2(0 == c[2].length, 0 == d[2].length) || ua2(c[2], d[2]);
            c = c[3];
            d = d[3];
          } while (0 == b);
        }
      }
      return 0 <= b;
    });
  }
  var Ra2;
  if (k2.document && x2) {
    var Sa2 = La2();
    Ra2 = Sa2 ? Sa2 : parseInt(Ma2, 10) || void 0;
  } else
    Ra2 = void 0;
  var Ta2 = Ra2;
  var Ua2 = !x2 || 9 <= Number(Ta2);
  var Va2 = x2 && !Qa2("9");
  var Wa2 = function() {
    if (!k2.addEventListener || !Object.defineProperty)
      return false;
    var a = false, b = Object.defineProperty({}, "passive", {get: function() {
      a = true;
    }});
    try {
      k2.addEventListener("test", aa2, b), k2.removeEventListener("test", aa2, b);
    } catch (c) {
    }
    return a;
  }();
  function y(a, b) {
    this.type = a;
    this.a = this.target = b;
    this.defaultPrevented = false;
  }
  y.prototype.b = function() {
    this.defaultPrevented = true;
  };
  function z2(a, b) {
    y.call(this, a ? a.type : "");
    this.relatedTarget = this.a = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
    this.pointerId = 0;
    this.pointerType = "";
    this.c = null;
    if (a) {
      var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.a = b;
      if (b = a.relatedTarget) {
        if (Ja2) {
          a: {
            try {
              Da2(b.nodeName);
              var e = true;
              break a;
            } catch (f) {
            }
            e = false;
          }
          e || (b = null);
        }
      } else
        "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa2[a.pointerType] || "";
      this.c = a;
      a.defaultPrevented && this.b();
    }
  }
  r(z2, y);
  var Xa2 = {2: "touch", 3: "pen", 4: "mouse"};
  z2.prototype.b = function() {
    z2.X.b.call(this);
    var a = this.c;
    if (a.preventDefault)
      a.preventDefault();
    else if (a.returnValue = false, Va2)
      try {
        if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
          a.keyCode = -1;
      } catch (b) {
      }
  };
  var A2 = "closure_listenable_" + (1e6 * Math.random() | 0);
  var Ya2 = 0;
  function Za2(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.ca = e;
    this.key = ++Ya2;
    this.Y = this.Z = false;
  }
  function $a2(a) {
    a.Y = true;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.ca = null;
  }
  function ab(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }
  ab.prototype.add = function(a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var g = bb(a, b, d, e);
    -1 < g ? (b = a[g], c || (b.Z = false)) : (b = new Za2(b, this.src, f, !!d, e), b.Z = c, a.push(b));
    return b;
  };
  function cb(a, b) {
    var c = b.type;
    if (c in a.a) {
      var d = a.a[c], e = ma2(d, b), f;
      (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
      f && ($a2(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
  }
  function bb(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
        return e;
    }
    return -1;
  }
  var db = "closure_lm_" + (1e6 * Math.random() | 0);
  var eb = {};
  function gb(a, b, c, d, e) {
    if (d && d.once)
      return hb(a, b, c, d, e);
    if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++)
        gb(a, b[f], c, d, e);
      return null;
    }
    c = ib(c);
    return a && a[A2] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, false, d, e);
  }
  function jb(a, b, c, d, e, f) {
    if (!b)
      throw Error("Invalid event type");
    var g = n(e) ? !!e.capture : !!e;
    if (g && !Ua2)
      return null;
    var m = kb(a);
    m || (a[db] = m = new ab(a));
    c = m.add(b, c, d, g, f);
    if (c.proxy)
      return c;
    d = lb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener)
      Wa2 || (e = g), void 0 === e && (e = false), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent)
      a.attachEvent(mb(b.toString()), d);
    else if (a.addListener && a.removeListener)
      a.addListener(d);
    else
      throw Error("addEventListener and attachEvent are unavailable.");
    return c;
  }
  function lb() {
    var a = nb, b = Ua2 ? function(c) {
      return a.call(b.src, b.listener, c);
    } : function(c) {
      c = a.call(b.src, b.listener, c);
      if (!c)
        return c;
    };
    return b;
  }
  function hb(a, b, c, d, e) {
    if (Array.isArray(b)) {
      for (var f = 0; f < b.length; f++)
        hb(a, b[f], c, d, e);
      return null;
    }
    c = ib(c);
    return a && a[A2] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, true, d, e);
  }
  function ob(a, b, c, d, e) {
    if (Array.isArray(b))
      for (var f = 0; f < b.length; f++)
        ob(a, b[f], c, d, e);
    else
      (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A2]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a2(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c));
  }
  function pb(a) {
    if ("number" !== typeof a && a && !a.Y) {
      var b = a.src;
      if (b && b[A2])
        cb(b.c, a);
      else {
        var c = a.type, d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a2(a);
      }
    }
  }
  function mb(a) {
    return a in eb ? eb[a] : eb[a] = "on" + a;
  }
  function qb(a, b) {
    var c = a.listener, d = a.ca || a.src;
    a.Z && pb(a);
    return c.call(d, b);
  }
  function nb(a, b) {
    if (a.Y)
      return true;
    if (!Ua2) {
      if (!b)
        a: {
          b = ["window", "event"];
          for (var c = k2, d = 0; d < b.length; d++)
            if (c = c[b[d]], null == c) {
              b = null;
              break a;
            }
          b = c;
        }
      b = new z2(b, this);
      return qb(a, b);
    }
    return qb(a, new z2(b, this));
  }
  function kb(a) {
    a = a[db];
    return a instanceof ab ? a : null;
  }
  var sb = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
  function ib(a) {
    if ("function" === typeof a)
      return a;
    a[sb] || (a[sb] = function(b) {
      return a.handleEvent(b);
    });
    return a[sb];
  }
  function D2() {
    t.call(this);
    this.c = new ab(this);
    this.J = this;
    this.C = null;
  }
  r(D2, t);
  D2.prototype[A2] = true;
  h = D2.prototype;
  h.addEventListener = function(a, b, c, d) {
    gb(this, a, b, c, d);
  };
  h.removeEventListener = function(a, b, c, d) {
    ob(this, a, b, c, d);
  };
  function E2(a, b) {
    var c, d = a.C;
    if (d)
      for (c = []; d; d = d.C)
        c.push(d);
    a = a.J;
    d = b.type || b;
    if ("string" === typeof b)
      b = new y(b, a);
    else if (b instanceof y)
      b.target = b.target || a;
    else {
      var e = b;
      b = new y(d, a);
      Ca2(b, e);
    }
    e = true;
    if (c)
      for (var f = c.length - 1; 0 <= f; f--) {
        var g = b.a = c[f];
        e = tb(g, d, true, b) && e;
      }
    g = b.a = a;
    e = tb(g, d, true, b) && e;
    e = tb(g, d, false, b) && e;
    if (c)
      for (f = 0; f < c.length; f++)
        g = b.a = c[f], e = tb(g, d, false, b) && e;
  }
  h.G = function() {
    D2.X.G.call(this);
    if (this.c) {
      var a = this.c, c;
      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++)
          $a2(d[e]);
        delete a.a[c];
        a.b--;
      }
    }
    this.C = null;
  };
  h.va = function(a, b, c, d) {
    return this.c.add(String(a), b, false, c, d);
  };
  h.wa = function(a, b, c, d) {
    return this.c.add(String(a), b, true, c, d);
  };
  function tb(a, b, c, d) {
    b = a.c.a[String(b)];
    if (!b)
      return true;
    b = b.concat();
    for (var e = true, f = 0; f < b.length; ++f) {
      var g = b[f];
      if (g && !g.Y && g.capture == c) {
        var m = g.listener, l = g.ca || g.src;
        g.Z && cb(a.c, g);
        e = false !== m.call(l, d) && e;
      }
    }
    return e && !d.defaultPrevented;
  }
  var ub = k2.JSON.stringify;
  function vb() {
    this.b = this.a = null;
  }
  var xb = new (function() {
    function class_1(a, b) {
      this.c = a;
      this.f = b;
      this.b = 0;
      this.a = null;
    }
    class_1.prototype.get = function() {
      var a;
      0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c();
      return a;
    };
    return class_1;
  }())(function() {
    return new wb();
  }, function(a) {
    a.reset();
  });
  vb.prototype.add = function(a, b) {
    var c = xb.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };
  function yb() {
    var a = zb, b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }
  function wb() {
    this.next = this.b = this.a = null;
  }
  wb.prototype.set = function(a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };
  wb.prototype.reset = function() {
    this.next = this.b = this.a = null;
  };
  function Ab(a) {
    k2.setTimeout(function() {
      throw a;
    }, 0);
  }
  function Bb(a, b) {
    Cb || Db();
    Eb || (Cb(), Eb = true);
    zb.add(a, b);
  }
  var Cb;
  function Db() {
    var a = k2.Promise.resolve(void 0);
    Cb = function() {
      a.then(Fb);
    };
  }
  var Eb = false;
  var zb = new vb();
  function Fb() {
    for (var a; a = yb(); ) {
      try {
        a.a.call(a.b);
      } catch (c) {
        Ab(c);
      }
      var b = xb;
      b.f(a);
      100 > b.b && (b.b++, a.next = b.a, b.a = a);
    }
    Eb = false;
  }
  function Gb(a, b) {
    D2.call(this);
    this.b = a || 1;
    this.a = b || k2;
    this.f = p(this.Za, this);
    this.g = q2();
  }
  r(Gb, D2);
  h = Gb.prototype;
  h.aa = false;
  h.M = null;
  h.Za = function() {
    if (this.aa) {
      var a = q2() - this.g;
      0 < a && a < 0.8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E2(this, "tick"), this.aa && (Hb(this), this.start()));
    }
  };
  h.start = function() {
    this.aa = true;
    this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q2());
  };
  function Hb(a) {
    a.aa = false;
    a.M && (a.a.clearTimeout(a.M), a.M = null);
  }
  h.G = function() {
    Gb.X.G.call(this);
    Hb(this);
    delete this.a;
  };
  function Ib(a, b, c) {
    if ("function" === typeof a)
      c && (a = p(a, c));
    else if (a && "function" == typeof a.handleEvent)
      a = p(a.handleEvent, a);
    else
      throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : k2.setTimeout(a, b || 0);
  }
  function Jb(a) {
    a.a = Ib(function() {
      a.a = null;
      a.c && (a.c = false, Jb(a));
    }, a.h);
    var b = a.b;
    a.b = null;
    a.g.apply(null, b);
  }
  var Kb = function(_super) {
    __extends2(Kb2, _super);
    function Kb2(a, b) {
      var _this = _super.call(this) || this;
      _this.g = a;
      _this.h = b;
      _this.b = null;
      _this.c = false;
      _this.a = null;
      return _this;
    }
    Kb2.prototype.f = function(a) {
      this.b = arguments;
      this.a ? this.c = true : Jb(this);
    };
    Kb2.prototype.G = function() {
      _super.prototype.G.call(this);
      this.a && (k2.clearTimeout(this.a), this.a = null, this.c = false, this.b = null);
    };
    return Kb2;
  }(t);
  function F2(a) {
    t.call(this);
    this.b = a;
    this.a = {};
  }
  r(F2, t);
  var Lb = [];
  function Mb(a, b, c, d) {
    Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb);
    for (var e = 0; e < c.length; e++) {
      var f = gb(b, c[e], d || a.handleEvent, false, a.b || a);
      if (!f)
        break;
      a.a[f.key] = f;
    }
  }
  function Nb(a) {
    za2(a.a, function(b, c) {
      this.a.hasOwnProperty(c) && pb(b);
    }, a);
    a.a = {};
  }
  F2.prototype.G = function() {
    F2.X.G.call(this);
    Nb(this);
  };
  F2.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
  };
  function Ob() {
    this.a = true;
  }
  function Pb(a, b, c, d, e, f) {
    a.info(function() {
      if (a.a)
        if (f) {
          var g = "";
          for (var m = f.split("&"), l = 0; l < m.length; l++) {
            var u = m[l].split("=");
            if (1 < u.length) {
              var C2 = u[0];
              u = u[1];
              var B2 = C2.split("_");
              g = 2 <= B2.length && "type" == B2[1] ? g + (C2 + "=" + u + "&") : g + (C2 + "=redacted&");
            }
          }
        } else
          g = null;
      else
        g = f;
      return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g;
    });
  }
  function Qb(a, b, c, d, e, f, g) {
    a.info(function() {
      return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g;
    });
  }
  function G2(a, b, c, d) {
    a.info(function() {
      return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : "");
    });
  }
  function Sb(a, b) {
    a.info(function() {
      return "TIMEOUT: " + b;
    });
  }
  Ob.prototype.info = function() {
  };
  function Rb(a, b) {
    if (!a.a)
      return b;
    if (!b)
      return null;
    try {
      var c = JSON.parse(b);
      if (c) {
        for (a = 0; a < c.length; a++)
          if (Array.isArray(c[a])) {
            var d = c[a];
            if (!(2 > d.length)) {
              var e = d[1];
              if (Array.isArray(e) && !(1 > e.length)) {
                var f = e[0];
                if ("noop" != f && "stop" != f && "close" != f)
                  for (var g = 1; g < e.length; g++)
                    e[g] = "";
              }
            }
          }
      }
      return ub(c);
    } catch (m) {
      return b;
    }
  }
  var H2 = {};
  var Tb = null;
  function Ub() {
    return Tb = Tb || new D2();
  }
  H2.Fa = "serverreachability";
  function Vb(a) {
    y.call(this, H2.Fa, a);
  }
  r(Vb, y);
  function I3(a) {
    var b = Ub();
    E2(b, new Vb(b, a));
  }
  H2.STAT_EVENT = "statevent";
  function Wb(a, b) {
    y.call(this, H2.STAT_EVENT, a);
    this.stat = b;
  }
  r(Wb, y);
  function J2(a) {
    var b = Ub();
    E2(b, new Wb(b, a));
  }
  H2.Ga = "timingevent";
  function Xb(a) {
    y.call(this, H2.Ga, a);
  }
  r(Xb, y);
  function K2(a, b) {
    if ("function" !== typeof a)
      throw Error("Fn must not be null and must be a function");
    return k2.setTimeout(function() {
      a();
    }, b);
  }
  var Yb = {NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9};
  var Zb = {fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress"};
  function $b() {
  }
  $b.prototype.a = null;
  function ac2(a) {
    var b;
    (b = a.a) || (b = a.a = {});
    return b;
  }
  function bc2() {
  }
  var L2 = {OPEN: "a", eb: "b", Ea: "c", qb: "d"};
  function cc2() {
    y.call(this, "d");
  }
  r(cc2, y);
  function dc2() {
    y.call(this, "c");
  }
  r(dc2, y);
  var ec2;
  function fc2() {
  }
  r(fc2, $b);
  ec2 = new fc2();
  function M2(a, b, c, d) {
    this.g = a;
    this.c = b;
    this.f = c;
    this.S = d || 1;
    this.J = new F2(this);
    this.P = gc2;
    a = Ia2 ? 125 : void 0;
    this.R = new Gb(a);
    this.B = null;
    this.b = false;
    this.j = this.l = this.i = this.H = this.u = this.T = this.o = null;
    this.s = [];
    this.a = null;
    this.D = 0;
    this.h = this.m = null;
    this.N = -1;
    this.A = false;
    this.O = 0;
    this.F = null;
    this.V = this.C = this.U = this.I = false;
  }
  var gc2 = 45e3;
  var hc2 = {};
  var ic2 = {};
  h = M2.prototype;
  h.setTimeout = function(a) {
    this.P = a;
  };
  function jc2(a, b, c) {
    a.H = 1;
    a.i = kc2(N2(b));
    a.j = c;
    a.I = true;
    lc2(a, null);
  }
  function lc2(a, b) {
    a.u = q2();
    mc2(a);
    a.l = N2(a.i);
    var c = a.l, d = a.S;
    Array.isArray(d) || (d = [String(d)]);
    nc2(c.b, "t", d);
    a.D = 0;
    a.a = oc2(a.g, a.g.C ? b : null);
    0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O));
    Mb(a.J, a.a, "readystatechange", a.Xa);
    b = a.B ? Aa2(a.B) : {};
    a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b));
    I3(1);
    Pb(a.c, a.m, a.l, a.f, a.S, a.j);
  }
  h.Xa = function(a) {
    a = a.target;
    var b = this.F;
    b && 3 == O2(a) ? b.f() : this.Ca(a);
  };
  h.Ca = function(a) {
    try {
      if (a == this.a)
        a: {
          var b = O2(this.a), c = this.a.ua(), d = this.a.W();
          if (!(3 > b || 3 == b && !Ia2 && !this.a.$())) {
            this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I3(3) : I3(2));
            pc2(this);
            var e = this.a.W();
            this.N = e;
            var f = this.a.$();
            this.b = 200 == e;
            Qb(this.c, this.m, this.l, this.f, this.S, b, e);
            if (this.b) {
              if (this.U && !this.C) {
                b: {
                  if (this.a) {
                    var g, m = this.a;
                    if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa2(g)) {
                      var l = g;
                      break b;
                    }
                  }
                  l = null;
                }
                if (l)
                  G2(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"), this.C = true, qc2(this, l);
                else {
                  this.b = false;
                  this.h = 3;
                  J2(12);
                  P3(this);
                  rc2(this);
                  break a;
                }
              }
              this.I ? (sc2(this, b, f), Ia2 && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G2(this.c, this.f, f, null), qc2(this, f));
              4 == b && P3(this);
              this.b && !this.A && (4 == b ? uc2(this.g, this) : (this.b = false, mc2(this)));
            } else
              400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J2(12)) : (this.h = 0, J2(13)), P3(this), rc2(this);
          }
        }
    } catch (u) {
    } finally {
    }
  };
  function sc2(a, b, c) {
    for (var d = true; !a.A && a.D < c.length; ) {
      var e = vc2(a, c);
      if (e == ic2) {
        4 == b && (a.h = 4, J2(14), d = false);
        G2(a.c, a.f, null, "[Incomplete Response]");
        break;
      } else if (e == hc2) {
        a.h = 4;
        J2(15);
        G2(a.c, a.f, c, "[Invalid Chunk]");
        d = false;
        break;
      } else
        G2(a.c, a.f, e, null), qc2(a, e);
    }
    4 == b && 0 == c.length && (a.h = 1, J2(16), d = false);
    a.b = a.b && d;
    d ? 0 < c.length && !a.V && (a.V = true, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc2(b), b.F = true, J2(11))) : (G2(a.c, a.f, c, "[Invalid Chunked Response]"), P3(a), rc2(a));
  }
  h.Wa = function() {
    if (this.a) {
      var a = O2(this.a), b = this.a.$();
      this.D < b.length && (pc2(this), sc2(this, a, b), this.b && 4 != a && mc2(this));
    }
  };
  function vc2(a, b) {
    var c = a.D, d = b.indexOf("\n", c);
    if (-1 == d)
      return ic2;
    c = Number(b.substring(c, d));
    if (isNaN(c))
      return hc2;
    d += 1;
    if (d + c > b.length)
      return ic2;
    b = b.substr(d, c);
    a.D = d + c;
    return b;
  }
  h.cancel = function() {
    this.A = true;
    P3(this);
  };
  function mc2(a) {
    a.T = q2() + a.P;
    yc2(a, a.P);
  }
  function yc2(a, b) {
    if (null != a.o)
      throw Error("WatchDog timer not null");
    a.o = K2(p(a.Va, a), b);
  }
  function pc2(a) {
    a.o && (k2.clearTimeout(a.o), a.o = null);
  }
  h.Va = function() {
    this.o = null;
    var a = q2();
    0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I3(3), J2(17)), P3(this), this.h = 2, rc2(this)) : yc2(this, this.T - a);
  };
  function rc2(a) {
    0 == a.g.v || a.A || uc2(a.g, a);
  }
  function P3(a) {
    pc2(a);
    var b = a.F;
    b && "function" == typeof b.ja && b.ja();
    a.F = null;
    Hb(a.R);
    Nb(a.J);
    a.a && (b = a.a, a.a = null, b.abort(), b.ja());
  }
  function qc2(a, b) {
    try {
      var c = a.g;
      if (0 != c.v && (c.a == a || zc2(c.b, a))) {
        if (c.I = a.N, !a.C && zc2(c.b, a) && 3 == c.v) {
          try {
            var d = c.ka.a.parse(b);
          } catch (tc2) {
            d = null;
          }
          if (Array.isArray(d) && 3 == d.length) {
            var e = d;
            if (0 == e[0])
              a: {
                if (!c.j) {
                  if (c.a)
                    if (c.a.u + 3e3 < a.u)
                      Ac2(c), Bc2(c);
                    else
                      break a;
                  Cc2(c);
                  J2(18);
                }
              }
            else
              c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K2(p(c.Sa, c), 6e3));
            if (1 >= Dc2(c.b) && c.ea) {
              try {
                c.ea();
              } catch (tc2) {
              }
              c.ea = void 0;
            }
          } else
            Q2(c, 11);
        } else if ((a.C || c.a == a) && Ac2(c), !sa2(b))
          for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
            if (e = b[d], c.P = e[0], e = e[1], 2 == c.v)
              if ("c" == e[0]) {
                c.J = e[1];
                c.ga = e[2];
                var f = e[3];
                null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                var g = e[4];
                null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
                var m = e[5];
                if (null != m && "number" === typeof m && 0 < m) {
                  var l = 1.5 * m;
                  c.D = l;
                  c.c.info("backChannelRequestTimeoutMs_=" + l);
                }
                l = c;
                var u = a.a;
                if (u) {
                  var C2 = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                  if (C2) {
                    var B2 = l.b;
                    !B2.a && (v(C2, "spdy") || v(C2, "quic") || v(C2, "h2")) && (B2.f = B2.g, B2.a = new Set(), B2.b && (Ec2(B2, B2.b), B2.b = null));
                  }
                  if (l.A) {
                    var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") : null;
                    rb && (l.na = rb, R2(l.B, l.A, rb));
                  }
                }
                c.v = 3;
                c.f && c.f.ta();
                c.U && (c.N = q2() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                l = c;
                var xa2 = a;
                l.la = Fc2(l, l.C ? l.ga : null, l.fa);
                if (xa2.C) {
                  Gc2(l.b, xa2);
                  var ya2 = xa2, xc2 = l.D;
                  xc2 && ya2.setTimeout(xc2);
                  ya2.o && (pc2(ya2), mc2(ya2));
                  l.a = xa2;
                } else
                  Hc(l);
                0 < c.g.length && Ic2(c);
              } else
                "stop" != e[0] && "close" != e[0] || Q2(c, 7);
            else
              3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q2(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
      }
      I3(4);
    } catch (tc2) {
    }
  }
  function Kc2(a) {
    if (a.K && "function" == typeof a.K)
      return a.K();
    if ("string" === typeof a)
      return a.split("");
    if (ba2(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++)
        b.push(a[d]);
      return b;
    }
    b = [];
    c = 0;
    for (d in a)
      b[c++] = a[d];
    return a = b;
  }
  function Lc2(a, b) {
    if (a.forEach && "function" == typeof a.forEach)
      a.forEach(b, void 0);
    else if (ba2(a) || "string" === typeof a)
      na2(a, b, void 0);
    else {
      if (a.L && "function" == typeof a.L)
        var c = a.L();
      else if (a.K && "function" == typeof a.K)
        c = void 0;
      else if (ba2(a) || "string" === typeof a) {
        c = [];
        for (var d = a.length, e = 0; e < d; e++)
          c.push(e);
      } else
        for (e in (c = [], d = 0, a))
          c[d++] = e;
      d = Kc2(a);
      e = d.length;
      for (var f = 0; f < e; f++)
        b.call(void 0, d[f], c && c[f], a);
    }
  }
  function S2(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;
    if (1 < c) {
      if (c % 2)
        throw Error("Uneven number of arguments");
      for (var d = 0; d < c; d += 2)
        this.set(arguments[d], arguments[d + 1]);
    } else if (a)
      if (a instanceof S2)
        for (c = a.L(), d = 0; d < c.length; d++)
          this.set(c[d], a.get(c[d]));
      else
        for (d in a)
          this.set(d, a[d]);
  }
  h = S2.prototype;
  h.K = function() {
    Mc2(this);
    for (var a = [], b = 0; b < this.a.length; b++)
      a.push(this.b[this.a[b]]);
    return a;
  };
  h.L = function() {
    Mc2(this);
    return this.a.concat();
  };
  function Mc2(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length; ) {
        var d = a.a[b];
        T2(a.b, d) && (a.a[c++] = d);
        b++;
      }
      a.a.length = c;
    }
    if (a.c != a.a.length) {
      var e = {};
      for (c = b = 0; b < a.a.length; )
        d = a.a[b], T2(e, d) || (a.a[c++] = d, e[d] = 1), b++;
      a.a.length = c;
    }
  }
  h.get = function(a, b) {
    return T2(this.b, a) ? this.b[a] : b;
  };
  h.set = function(a, b) {
    T2(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };
  h.forEach = function(a, b) {
    for (var c = this.L(), d = 0; d < c.length; d++) {
      var e = c[d], f = this.get(e);
      a.call(b, f, e, this);
    }
  };
  function T2(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  var Nc2 = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
  function Oc2(a, b) {
    if (a) {
      a = a.split("&");
      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="), e = null;
        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else
          f = a[c];
        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }
  function U2(a, b) {
    this.c = this.j = this.f = "";
    this.h = null;
    this.i = this.g = "";
    this.a = false;
    if (a instanceof U2) {
      this.a = void 0 !== b ? b : a.a;
      Pc2(this, a.f);
      this.j = a.j;
      Qc(this, a.c);
      Rc2(this, a.h);
      this.g = a.g;
      b = a.b;
      var c = new Sc2();
      c.c = b.c;
      b.a && (c.a = new S2(b.a), c.b = b.b);
      Tc2(this, c);
      this.i = a.i;
    } else
      a && (c = String(a).match(Nc2)) ? (this.a = !!b, Pc2(this, c[1] || "", true), this.j = Uc2(c[2] || ""), Qc(this, c[3] || "", true), Rc2(this, c[4]), this.g = Uc2(c[5] || "", true), Tc2(this, c[6] || "", true), this.i = Uc2(c[7] || "")) : (this.a = !!b, this.b = new Sc2(null, this.a));
  }
  U2.prototype.toString = function() {
    var a = [], b = this.f;
    b && a.push(Vc2(b, Wc, true), ":");
    var c = this.c;
    if (c || "file" == b)
      a.push("//"), (b = this.j) && a.push(Vc2(b, Wc, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c));
    if (c = this.g)
      this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc2(c, "/" == c.charAt(0) ? Xc : Yc, true));
    (c = this.b.toString()) && a.push("?", c);
    (c = this.i) && a.push("#", Vc2(c, Zc));
    return a.join("");
  };
  function N2(a) {
    return new U2(a);
  }
  function Pc2(a, b, c) {
    a.f = c ? Uc2(b, true) : b;
    a.f && (a.f = a.f.replace(/:$/, ""));
  }
  function Qc(a, b, c) {
    a.c = c ? Uc2(b, true) : b;
  }
  function Rc2(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b)
        throw Error("Bad port number " + b);
      a.h = b;
    } else
      a.h = null;
  }
  function Tc2(a, b, c) {
    b instanceof Sc2 ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc2(b, ad)), a.b = new Sc2(b, a.a));
  }
  function R2(a, b, c) {
    a.b.set(b, c);
  }
  function kc2(a) {
    R2(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q2()).toString(36));
    return a;
  }
  function bd(a) {
    return a instanceof U2 ? N2(a) : new U2(a, void 0);
  }
  function cd(a, b, c, d) {
    var e = new U2(null, void 0);
    a && Pc2(e, a);
    b && Qc(e, b);
    c && Rc2(e, c);
    d && (e.g = d);
    return e;
  }
  function Uc2(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }
  function Vc2(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }
  function dd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }
  var Wc = /[#\/\?@]/g;
  var Yc = /[#\?:]/g;
  var Xc = /[#\?]/g;
  var ad = /[#\?@]/g;
  var Zc = /#/g;
  function Sc2(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }
  function V2(a) {
    a.a || (a.a = new S2(), a.b = 0, a.c && Oc2(a.c, function(b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }
  h = Sc2.prototype;
  h.add = function(a, b) {
    V2(this);
    this.c = null;
    a = W2(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };
  function ed(a, b) {
    V2(a);
    b = W2(a, b);
    T2(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T2(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc2(a)));
  }
  function fd(a, b) {
    V2(a);
    b = W2(a, b);
    return T2(a.a.b, b);
  }
  h.forEach = function(a, b) {
    V2(this);
    this.a.forEach(function(c, d) {
      na2(c, function(e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };
  h.L = function() {
    V2(this);
    for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
      for (var e = a[d], f = 0; f < e.length; f++)
        c.push(b[d]);
    return c;
  };
  h.K = function(a) {
    V2(this);
    var b = [];
    if ("string" === typeof a)
      fd(this, a) && (b = qa2(b, this.a.get(W2(this, a))));
    else {
      a = this.a.K();
      for (var c = 0; c < a.length; c++)
        b = qa2(b, a[c]);
    }
    return b;
  };
  h.set = function(a, b) {
    V2(this);
    this.c = null;
    a = W2(this, a);
    fd(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };
  h.get = function(a, b) {
    if (!a)
      return b;
    a = this.K(a);
    return 0 < a.length ? String(a[0]) : b;
  };
  function nc2(a, b, c) {
    ed(a, b);
    0 < c.length && (a.c = null, a.a.set(W2(a, b), ra2(c)), a.b += c.length);
  }
  h.toString = function() {
    if (this.c)
      return this.c;
    if (!this.a)
      return "";
    for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
      var d = b[c], e = encodeURIComponent(String(d));
      d = this.K(d);
      for (var f = 0; f < d.length; f++) {
        var g = e;
        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
        a.push(g);
      }
    }
    return this.c = a.join("&");
  };
  function W2(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }
  function $c(a, b) {
    b && !a.f && (V2(a), a.c = null, a.a.forEach(function(c, d) {
      var e = d.toLowerCase();
      d != e && (ed(this, d), nc2(this, e, c));
    }, a));
    a.f = b;
  }
  var gd = function() {
    function gd2(a, b) {
      this.b = a;
      this.a = b;
    }
    return gd2;
  }();
  function hd(a) {
    this.g = a || id;
    k2.PerformanceNavigationTiming ? (a = k2.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k2.ia && k2.ia.ya && k2.ia.ya() && k2.ia.ya().Lb);
    this.f = a ? this.g : 1;
    this.a = null;
    1 < this.f && (this.a = new Set());
    this.b = null;
    this.c = [];
  }
  var id = 10;
  function jd(a) {
    return a.b ? true : a.a ? a.a.size >= a.f : false;
  }
  function Dc2(a) {
    return a.b ? 1 : a.a ? a.a.size : 0;
  }
  function zc2(a, b) {
    return a.b ? a.b == b : a.a ? a.a.has(b) : false;
  }
  function Ec2(a, b) {
    a.a ? a.a.add(b) : a.b = b;
  }
  function Gc2(a, b) {
    a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b);
  }
  hd.prototype.cancel = function() {
    var e_1, _a9;
    this.c = kd(this);
    if (this.b)
      this.b.cancel(), this.b = null;
    else if (this.a && 0 !== this.a.size) {
      try {
        for (var _b = __values2(this.a.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var a = _c2.value;
          a.cancel();
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      this.a.clear();
    }
  };
  function kd(a) {
    var e_2, _a9;
    if (null != a.b)
      return a.c.concat(a.b.s);
    if (null != a.a && 0 !== a.a.size) {
      var b = a.c;
      try {
        for (var _b = __values2(a.a.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var c = _c2.value;
          b = b.concat(c.s);
        }
      } catch (e_2_1) {
        e_2 = {error: e_2_1};
      } finally {
        try {
          if (_c2 && !_c2.done && (_a9 = _b.return))
            _a9.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return b;
    }
    return ra2(a.c);
  }
  function ld() {
  }
  ld.prototype.stringify = function(a) {
    return k2.JSON.stringify(a, void 0);
  };
  ld.prototype.parse = function(a) {
    return k2.JSON.parse(a, void 0);
  };
  function md() {
    this.a = new ld();
  }
  function nd(a, b, c) {
    var d = c || "";
    try {
      Lc2(a, function(e, f) {
        var g = e;
        n(e) && (g = ub(e));
        b.push(d + f + "=" + encodeURIComponent(g));
      });
    } catch (e) {
      throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    }
  }
  function od(a, b) {
    var c = new Ob();
    if (k2.Image) {
      var d = new Image();
      d.onload = ja2(pd, c, d, "TestLoadImage: loaded", true, b);
      d.onerror = ja2(pd, c, d, "TestLoadImage: error", false, b);
      d.onabort = ja2(pd, c, d, "TestLoadImage: abort", false, b);
      d.ontimeout = ja2(pd, c, d, "TestLoadImage: timeout", false, b);
      k2.setTimeout(function() {
        if (d.ontimeout)
          d.ontimeout();
      }, 1e4);
      d.src = a;
    } else
      b(false);
  }
  function pd(a, b, c, d, e) {
    try {
      b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    } catch (f) {
    }
  }
  var qd = k2.JSON.parse;
  function X2(a) {
    D2.call(this);
    this.headers = new S2();
    this.H = a || null;
    this.b = false;
    this.s = this.a = null;
    this.B = "";
    this.h = 0;
    this.f = "";
    this.g = this.A = this.l = this.u = false;
    this.o = 0;
    this.m = null;
    this.I = rd;
    this.D = this.F = false;
  }
  r(X2, D2);
  var rd = "";
  var sd = /^https?$/i;
  var td = ["POST", "PUT"];
  h = X2.prototype;
  h.ba = function(a, b, c, d) {
    if (this.a)
      throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.B = a;
    this.f = "";
    this.h = 0;
    this.u = false;
    this.b = true;
    this.a = new XMLHttpRequest();
    this.s = this.H ? ac2(this.H) : ac2(ec2);
    this.a.onreadystatechange = p(this.za, this);
    try {
      this.A = true, this.a.open(b, String(a), true), this.A = false;
    } catch (f) {
      ud(this, f);
      return;
    }
    a = c || "";
    var e = new S2(this.headers);
    d && Lc2(d, function(f, g) {
      e.set(g, f);
    });
    d = oa2(e.L());
    c = k2.FormData && a instanceof k2.FormData;
    !(0 <= ma2(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function(f, g) {
      this.a.setRequestHeader(g, f);
    }, this);
    this.I && (this.a.responseType = this.I);
    "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
    try {
      vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = true, this.a.send(a), this.l = false;
    } catch (f) {
      ud(this, f);
    }
  };
  function wd(a) {
    return x2 && Qa2(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
  }
  function pa2(a) {
    return "content-type" == a.toLowerCase();
  }
  h.xa = function() {
    "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E2(this, "timeout"), this.abort(8));
  };
  function ud(a, b) {
    a.b = false;
    a.a && (a.g = true, a.a.abort(), a.g = false);
    a.f = b;
    a.h = 5;
    xd(a);
    yd(a);
  }
  function xd(a) {
    a.u || (a.u = true, E2(a, "complete"), E2(a, "error"));
  }
  h.abort = function(a) {
    this.a && this.b && (this.b = false, this.g = true, this.a.abort(), this.g = false, this.h = a || 7, E2(this, "complete"), E2(this, "abort"), yd(this));
  };
  h.G = function() {
    this.a && (this.b && (this.b = false, this.g = true, this.a.abort(), this.g = false), yd(this, true));
    X2.X.G.call(this);
  };
  h.za = function() {
    this.j || (this.A || this.l || this.g ? zd(this) : this.Ua());
  };
  h.Ua = function() {
    zd(this);
  };
  function zd(a) {
    if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O2(a) || 2 != a.W())) {
      if (a.l && 4 == O2(a))
        Ib(a.za, 0, a);
      else if (E2(a, "readystatechange"), 4 == O2(a)) {
        a.b = false;
        try {
          {
            var l = a.W();
            a:
              switch (l) {
                case 200:
                case 201:
                case 202:
                case 204:
                case 206:
                case 304:
                case 1223:
                  var b = true;
                  break a;
                default:
                  b = false;
              }
            var c;
            if (!(c = b)) {
              var d;
              if (d = 0 === l) {
                var e = String(a.B).match(Nc2)[1] || null;
                if (!e && k2.self && k2.self.location) {
                  var f = k2.self.location.protocol;
                  e = f.substr(0, f.length - 1);
                }
                d = !sd.test(e ? e.toLowerCase() : "");
              }
              c = d;
            }
            var g = c;
          }
          if (g)
            E2(a, "complete"), E2(a, "success");
          else {
            a.h = 6;
            try {
              var m = 2 < O2(a) ? a.a.statusText : "";
            } catch (l2) {
              m = "";
            }
            a.f = m + " [" + a.W() + "]";
            xd(a);
          }
        } finally {
          yd(a);
        }
      }
    }
  }
  function yd(a, b) {
    if (a.a) {
      vd(a);
      var c = a.a, d = a.s[0] ? aa2 : null;
      a.a = null;
      a.s = null;
      b || E2(a, "ready");
      try {
        c.onreadystatechange = d;
      } catch (e) {
      }
    }
  }
  function vd(a) {
    a.a && a.D && (a.a.ontimeout = null);
    a.m && (k2.clearTimeout(a.m), a.m = null);
  }
  function O2(a) {
    return a.a ? a.a.readyState : 0;
  }
  h.W = function() {
    try {
      return 2 < O2(this) ? this.a.status : -1;
    } catch (a) {
      return -1;
    }
  };
  h.$ = function() {
    try {
      return this.a ? this.a.responseText : "";
    } catch (a) {
      return "";
    }
  };
  h.Pa = function(a) {
    if (this.a) {
      var b = this.a.responseText;
      a && 0 == b.indexOf(a) && (b = b.substring(a.length));
      return qd(b);
    }
  };
  h.ua = function() {
    return this.h;
  };
  h.Qa = function() {
    return "string" === typeof this.f ? this.f : String(this.f);
  };
  function Ad(a) {
    var b = "";
    za2(a, function(c, d) {
      b += d;
      b += ":";
      b += c;
      b += "\r\n";
    });
    return b;
  }
  function Bd(a, b, c) {
    a: {
      for (d in c) {
        var d = false;
        break a;
      }
      d = true;
    }
    d || (c = Ad(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : R2(a, b, c));
  }
  function Cd(a, b, c) {
    return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
  }
  function Dd(a) {
    this.pa = 0;
    this.g = [];
    this.c = new Ob();
    this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
    this.Oa = this.R = 0;
    this.La = Cd("failFast", false, a);
    this.H = this.m = this.j = this.h = this.f = null;
    this.S = true;
    this.I = this.oa = this.P = -1;
    this.T = this.o = this.u = 0;
    this.Ha = Cd("baseRetryDelayMs", 5e3, a);
    this.Ra = Cd("retryDelaySeedMs", 1e4, a);
    this.Ma = Cd("forwardChannelMaxRetries", 2, a);
    this.ma = Cd("forwardChannelRequestTimeoutMs", 2e4, a);
    this.Na = a && a.g || void 0;
    this.D = void 0;
    this.C = a && a.supportsCrossDomainXhr || false;
    this.J = "";
    this.b = new hd(a && a.concurrentRequestLimit);
    this.ka = new md();
    this.da = a && a.fastHandshake || false;
    this.Ia = a && a.b || false;
    a && a.f && (this.c.a = false);
    a && a.forceLongPolling && (this.S = false);
    this.U = !this.da && this.S && a && a.detectBufferingProxy || false;
    this.ea = void 0;
    this.N = 0;
    this.F = false;
    this.s = null;
    (this.Ka = a && a.c || false) && this.c.info("Opt-in to enable Chrome Origin Trials.");
  }
  h = Dd.prototype;
  h.ha = 8;
  h.v = 1;
  function Jc(a) {
    Ed(a);
    if (3 == a.v) {
      var b = a.R++, c = N2(a.B);
      R2(c, "SID", a.J);
      R2(c, "RID", b);
      R2(c, "TYPE", "terminate");
      Fd(a, c);
      b = new M2(a, a.c, b, void 0);
      b.H = 2;
      b.i = kc2(N2(c));
      c = false;
      k2.navigator && k2.navigator.sendBeacon && (c = k2.navigator.sendBeacon(b.i.toString(), ""));
      !c && k2.Image && (new Image().src = b.i, c = true);
      c || (b.a = oc2(b.g, null), b.a.ba(b.i));
      b.u = q2();
      mc2(b);
    }
    Gd(a);
  }
  function Bc2(a) {
    a.a && (wc2(a), a.a.cancel(), a.a = null);
  }
  function Ed(a) {
    Bc2(a);
    a.j && (k2.clearTimeout(a.j), a.j = null);
    Ac2(a);
    a.b.cancel();
    a.h && ("number" === typeof a.h && k2.clearTimeout(a.h), a.h = null);
  }
  function Hd(a, b) {
    a.g.push(new gd(a.Oa++, b));
    3 == a.v && Ic2(a);
  }
  function Ic2(a) {
    jd(a.b) || a.h || (a.h = true, Bb(a.Ba, a), a.u = 0);
  }
  function Id(a, b) {
    if (Dc2(a.b) >= a.b.f - (a.h ? 1 : 0))
      return false;
    if (a.h)
      return a.g = b.s.concat(a.g), true;
    if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
      return false;
    a.h = K2(p(a.Ba, a, b), Jd(a, a.u));
    a.u++;
    return true;
  }
  h.Ba = function(a) {
    if (this.h)
      if (this.h = null, 1 == this.v) {
        if (!a) {
          this.R = Math.floor(1e5 * Math.random());
          a = this.R++;
          var b = new M2(this, this.c, a, void 0), c = this.l;
          this.O && (c ? (c = Aa2(c), Ca2(c, this.O)) : c = this.O);
          null === this.i && (b.B = c);
          var d;
          if (this.da)
            a: {
              for (var e = d = 0; e < this.g.length; e++) {
                b: {
                  var f = this.g[e];
                  if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                    f = f.length;
                    break b;
                  }
                  f = void 0;
                }
                if (void 0 === f)
                  break;
                d += f;
                if (4096 < d) {
                  d = e;
                  break a;
                }
                if (4096 === d || e === this.g.length - 1) {
                  d = e + 1;
                  break a;
                }
              }
              d = 1e3;
            }
          else
            d = 1e3;
          d = Kd(this, b, d);
          e = N2(this.B);
          R2(e, "RID", a);
          R2(e, "CVER", 22);
          this.A && R2(e, "X-HTTP-Session-Id", this.A);
          Fd(this, e);
          this.i && c && Bd(e, this.i, c);
          Ec2(this.b, b);
          this.Ia && R2(e, "TYPE", "init");
          this.da ? (R2(e, "$req", d), R2(e, "SID", "null"), b.U = true, jc2(b, e, null)) : jc2(b, e, d);
          this.v = 2;
        }
      } else
        3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
  };
  function Ld(a, b) {
    var c;
    b ? c = b.f : c = a.R++;
    var d = N2(a.B);
    R2(d, "SID", a.J);
    R2(d, "RID", c);
    R2(d, "AID", a.P);
    Fd(a, d);
    a.i && a.l && Bd(d, a.i, a.l);
    c = new M2(a, a.c, c, a.u + 1);
    null === a.i && (c.B = a.l);
    b && (a.g = b.s.concat(a.g));
    b = Kd(a, c, 1e3);
    c.setTimeout(Math.round(0.5 * a.ma) + Math.round(0.5 * a.ma * Math.random()));
    Ec2(a.b, c);
    jc2(c, d, b);
  }
  function Fd(a, b) {
    a.f && Lc2({}, function(c, d) {
      R2(b, d, c);
    });
  }
  function Kd(a, b, c) {
    c = Math.min(a.g.length, c);
    var d = a.f ? p(a.f.Ja, a.f, a) : null;
    a:
      for (var e = a.g, f = -1; ; ) {
        var g = ["count=" + c];
        -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
        for (var m = true, l = 0; l < c; l++) {
          var u = e[l].b, C2 = e[l].a;
          u -= f;
          if (0 > u)
            f = Math.max(0, e[l].b - 100), m = false;
          else
            try {
              nd(C2, g, "req" + u + "_");
            } catch (B2) {
              d && d(C2);
            }
        }
        if (m) {
          d = g.join("&");
          break a;
        }
      }
    a = a.g.splice(0, c);
    b.s = a;
    return d;
  }
  function Hc(a) {
    a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0);
  }
  function Cc2(a) {
    if (a.a || a.j || 3 <= a.o)
      return false;
    a.T++;
    a.j = K2(p(a.Aa, a), Jd(a, a.o));
    a.o++;
    return true;
  }
  h.Aa = function() {
    this.j = null;
    Md(this);
    if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
      var a = 2 * this.N;
      this.c.info("BP detection timer enabled: " + a);
      this.s = K2(p(this.Ta, this), a);
    }
  };
  h.Ta = function() {
    this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = false, this.F = true, J2(10), Bc2(this), Md(this));
  };
  function wc2(a) {
    null != a.s && (k2.clearTimeout(a.s), a.s = null);
  }
  function Md(a) {
    a.a = new M2(a, a.c, "rpc", a.T);
    null === a.i && (a.a.B = a.l);
    a.a.O = 0;
    var b = N2(a.la);
    R2(b, "RID", "rpc");
    R2(b, "SID", a.J);
    R2(b, "CI", a.H ? "0" : "1");
    R2(b, "AID", a.P);
    Fd(a, b);
    R2(b, "TYPE", "xmlhttp");
    a.i && a.l && Bd(b, a.i, a.l);
    a.D && a.a.setTimeout(a.D);
    var c = a.a;
    a = a.ga;
    c.H = 1;
    c.i = kc2(N2(b));
    c.j = null;
    c.I = true;
    lc2(c, a);
  }
  h.Sa = function() {
    null != this.m && (this.m = null, Bc2(this), Cc2(this), J2(19));
  };
  function Ac2(a) {
    null != a.m && (k2.clearTimeout(a.m), a.m = null);
  }
  function uc2(a, b) {
    var c = null;
    if (a.a == b) {
      Ac2(a);
      wc2(a);
      a.a = null;
      var d = 2;
    } else if (zc2(a.b, b))
      c = b.s, Gc2(a.b, b), d = 1;
    else
      return;
    a.I = b.N;
    if (0 != a.v) {
      if (b.b)
        if (1 == d) {
          c = b.j ? b.j.length : 0;
          b = q2() - b.u;
          var e = a.u;
          d = Ub();
          E2(d, new Xb(d, c, b, e));
          Ic2(a);
        } else
          Hc(a);
      else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc2(a)))
        switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
          case 1:
            Q2(a, 5);
            break;
          case 4:
            Q2(a, 10);
            break;
          case 3:
            Q2(a, 6);
            break;
          default:
            Q2(a, 2);
        }
    }
  }
  function Jd(a, b) {
    var c = a.Ha + Math.floor(Math.random() * a.Ra);
    a.f || (c *= 2);
    return c * b;
  }
  function Q2(a, b) {
    a.c.info("Error code " + b);
    if (2 == b) {
      var c = null;
      a.f && (c = null);
      var d = p(a.Ya, a);
      c || (c = new U2("//www.google.com/images/cleardot.gif"), k2.location && "http" == k2.location.protocol || Pc2(c, "https"), kc2(c));
      od(c.toString(), d);
    } else
      J2(2);
    a.v = 0;
    a.f && a.f.ra(b);
    Gd(a);
    Ed(a);
  }
  h.Ya = function(a) {
    a ? (this.c.info("Successfully pinged google.com"), J2(2)) : (this.c.info("Failed to ping google.com"), J2(1));
  };
  function Gd(a) {
    a.v = 0;
    a.I = -1;
    if (a.f) {
      if (0 != kd(a.b).length || 0 != a.g.length)
        a.b.c.length = 0, ra2(a.g), a.g.length = 0;
      a.f.qa();
    }
  }
  function Fc2(a, b, c) {
    var d = bd(c);
    if ("" != d.c)
      b && Qc(d, b + "." + d.c), Rc2(d, d.h);
    else {
      var e = k2.location;
      d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    }
    a.V && za2(a.V, function(f, g) {
      R2(d, g, f);
    });
    b = a.A;
    c = a.na;
    b && c && R2(d, b, c);
    R2(d, "VER", a.ha);
    Fd(a, d);
    return d;
  }
  function oc2(a, b) {
    if (b && !a.C)
      throw Error("Can't create secondary domain capable XhrIo object.");
    b = new X2(a.Na);
    b.F = a.C;
    return b;
  }
  function Nd() {
  }
  h = Nd.prototype;
  h.ta = function() {
  };
  h.sa = function() {
  };
  h.ra = function() {
  };
  h.qa = function() {
  };
  h.Ja = function() {
  };
  function Od() {
    if (x2 && !(10 <= Number(Ta2)))
      throw Error("Environmental error: no available transport.");
  }
  Od.prototype.a = function(a, b) {
    return new Y2(a, b);
  };
  function Y2(a, b) {
    D2.call(this);
    this.a = new Dd(b);
    this.o = a;
    this.b = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {"X-Client-Protocol": "webchannel"});
    this.a.l = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {"X-WebChannel-Content-Type": b.messageContentType});
    b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = {"X-WebChannel-Client-Profile": b.a});
    this.a.O = a;
    (a = b && b.httpHeadersOverwriteParam) && !sa2(a) && (this.a.i = a);
    this.m = b && b.supportsCrossDomainXhr || false;
    this.l = b && b.sendRawJson || false;
    (b = b && b.httpSessionIdParam) && !sa2(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
    this.f = new Z2(this);
  }
  r(Y2, D2);
  Y2.prototype.g = function() {
    this.a.f = this.f;
    this.m && (this.a.C = true);
    var a = this.a, b = this.o, c = this.b || void 0;
    J2(0);
    a.fa = b;
    a.V = c || {};
    a.H = a.S;
    a.B = Fc2(a, null, a.fa);
    Ic2(a);
  };
  Y2.prototype.close = function() {
    Jc(this.a);
  };
  Y2.prototype.h = function(a) {
    if ("string" === typeof a) {
      var b = {};
      b.__data__ = a;
      Hd(this.a, b);
    } else
      this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a);
  };
  Y2.prototype.G = function() {
    this.a.f = null;
    delete this.f;
    Jc(this.a);
    delete this.a;
    Y2.X.G.call(this);
  };
  function Pd(a) {
    cc2.call(this);
    var b = a.__sm__;
    if (b) {
      a: {
        for (var c in b) {
          a = c;
          break a;
        }
        a = void 0;
      }
      (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    } else
      this.data = a;
  }
  r(Pd, cc2);
  function Qd() {
    dc2.call(this);
    this.status = 1;
  }
  r(Qd, dc2);
  function Z2(a) {
    this.a = a;
  }
  r(Z2, Nd);
  Z2.prototype.ta = function() {
    E2(this.a, "a");
  };
  Z2.prototype.sa = function(a) {
    E2(this.a, new Pd(a));
  };
  Z2.prototype.ra = function(a) {
    E2(this.a, new Qd(a));
  };
  Z2.prototype.qa = function() {
    E2(this.a, "b");
  };
  Od.prototype.createWebChannel = Od.prototype.a;
  Y2.prototype.send = Y2.prototype.h;
  Y2.prototype.open = Y2.prototype.g;
  Y2.prototype.close = Y2.prototype.close;
  Yb.NO_ERROR = 0;
  Yb.TIMEOUT = 8;
  Yb.HTTP_ERROR = 6;
  Zb.COMPLETE = "complete";
  bc2.EventType = L2;
  L2.OPEN = "a";
  L2.CLOSE = "b";
  L2.ERROR = "c";
  L2.MESSAGE = "d";
  D2.prototype.listen = D2.prototype.va;
  X2.prototype.listenOnce = X2.prototype.wa;
  X2.prototype.getLastError = X2.prototype.Qa;
  X2.prototype.getLastErrorCode = X2.prototype.ua;
  X2.prototype.getStatus = X2.prototype.W;
  X2.prototype.getResponseJson = X2.prototype.Pa;
  X2.prototype.getResponseText = X2.prototype.$;
  X2.prototype.send = X2.prototype.ba;
  var createWebChannelTransport = function() {
    return new Od();
  };
  var getStatEventTarget = function() {
    return Ub();
  };
  var ErrorCode = Yb;
  var EventType = Zb;
  var Event = H2;
  var Stat = {gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20};
  var WebChannel = bc2;
  var XhrIo = X2;

  // node_modules/@firebase/firestore/dist/esm5/prebuilt-22c6b89e-c0c434ed.js
  var _ = new Logger("@firebase/firestore");
  function I2() {
    return _.logLevel;
  }
  function E(t2) {
    for (var n2 = [], r2 = 1; r2 < arguments.length; r2++)
      n2[r2 - 1] = arguments[r2];
    if (_.logLevel <= LogLevel.DEBUG) {
      var i2 = n2.map(A);
      _.debug.apply(_, __spreadArrays(["Firestore (8.2.4): " + t2], i2));
    }
  }
  function T(t2) {
    for (var n2 = [], r2 = 1; r2 < arguments.length; r2++)
      n2[r2 - 1] = arguments[r2];
    if (_.logLevel <= LogLevel.ERROR) {
      var i2 = n2.map(A);
      _.error.apply(_, __spreadArrays(["Firestore (8.2.4): " + t2], i2));
    }
  }
  function N(t2) {
    for (var n2 = [], r2 = 1; r2 < arguments.length; r2++)
      n2[r2 - 1] = arguments[r2];
    if (_.logLevel <= LogLevel.WARN) {
      var i2 = n2.map(A);
      _.warn.apply(_, __spreadArrays(["Firestore (8.2.4): " + t2], i2));
    }
  }
  function A(t2) {
    if ("string" == typeof t2)
      return t2;
    try {
      return e = t2, JSON.stringify(e);
    } catch (e2) {
      return t2;
    }
    var e;
  }
  function S(t2) {
    void 0 === t2 && (t2 = "Unexpected state");
    var e = "FIRESTORE (8.2.4) INTERNAL ASSERTION FAILED: " + t2;
    throw T(e), new Error(e);
  }
  function D(t2, e) {
    t2 || S();
  }
  function x(t2, e) {
    return t2;
  }
  function k(t2) {
    var e = "undefined" != typeof self && (self.crypto || self.msCrypto), n2 = new Uint8Array(t2);
    if (e && "function" == typeof e.getRandomValues)
      e.getRandomValues(n2);
    else
      for (var r2 = 0; r2 < t2; r2++)
        n2[r2] = Math.floor(256 * Math.random());
    return n2;
  }
  var O = function() {
    function t2() {
    }
    return t2.t = function() {
      for (var t3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t3.length) * t3.length, n2 = ""; n2.length < 20; )
        for (var r2 = k(40), i2 = 0; i2 < r2.length; ++i2)
          n2.length < 20 && r2[i2] < e && (n2 += t3.charAt(r2[i2] % t3.length));
      return n2;
    }, t2;
  }();
  function P2(t2, e) {
    return t2 < e ? -1 : t2 > e ? 1 : 0;
  }
  function L(t2, e, n2) {
    return t2.length === e.length && t2.every(function(t3, r2) {
      return n2(t3, e[r2]);
    });
  }
  function C(t2) {
    return t2 + "\0";
  }
  var V = function() {
    function t2(t3) {
      this.i = t3;
    }
    return t2.fromBase64String = function(e) {
      return new t2(atob(e));
    }, t2.fromUint8Array = function(e) {
      return new t2(function(t3) {
        for (var e2 = "", n2 = 0; n2 < t3.length; ++n2)
          e2 += String.fromCharCode(t3[n2]);
        return e2;
      }(e));
    }, t2.prototype.toBase64 = function() {
      return t3 = this.i, btoa(t3);
      var t3;
    }, t2.prototype.toUint8Array = function() {
      return function(t3) {
        for (var e = new Uint8Array(t3.length), n2 = 0; n2 < t3.length; n2++)
          e[n2] = t3.charCodeAt(n2);
        return e;
      }(this.i);
    }, t2.prototype.o = function() {
      return 2 * this.i.length;
    }, t2.prototype.u = function(t3) {
      return P2(this.i, t3.i);
    }, t2.prototype.isEqual = function(t3) {
      return this.i === t3.i;
    }, t2;
  }();
  V.h = new V("");
  var R = {
    OK: "ok",
    CANCELLED: "cancelled",
    UNKNOWN: "unknown",
    INVALID_ARGUMENT: "invalid-argument",
    DEADLINE_EXCEEDED: "deadline-exceeded",
    NOT_FOUND: "not-found",
    ALREADY_EXISTS: "already-exists",
    PERMISSION_DENIED: "permission-denied",
    UNAUTHENTICATED: "unauthenticated",
    RESOURCE_EXHAUSTED: "resource-exhausted",
    FAILED_PRECONDITION: "failed-precondition",
    ABORTED: "aborted",
    OUT_OF_RANGE: "out-of-range",
    UNIMPLEMENTED: "unimplemented",
    INTERNAL: "internal",
    UNAVAILABLE: "unavailable",
    DATA_LOSS: "data-loss"
  };
  var U = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).code = e2, r2.message = n2, r2.name = "FirebaseError", r2.toString = function() {
        return r2.name + ": [code=" + r2.code + "]: " + r2.message;
      }, r2;
    }
    return __extends(e, t2), e;
  }(Error);
  var M = function() {
    function t2(t3) {
      this.l = t3;
    }
    return t2.fromBase64String = function(e) {
      try {
        return new t2(V.fromBase64String(e));
      } catch (e2) {
        throw new U(R.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e2);
      }
    }, t2.fromUint8Array = function(e) {
      return new t2(V.fromUint8Array(e));
    }, t2.prototype.toBase64 = function() {
      return this.l.toBase64();
    }, t2.prototype.toUint8Array = function() {
      return this.l.toUint8Array();
    }, t2.prototype.toString = function() {
      return "Bytes(base64: " + this.toBase64() + ")";
    }, t2.prototype.isEqual = function(t3) {
      return this.l.isEqual(t3.l);
    }, t2;
  }();
  var q = function(t2) {
    this._ = t2;
  };
  function F() {
    if ("undefined" == typeof Uint8Array)
      throw new U(R.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
  }
  function j() {
    if ("undefined" == typeof atob)
      throw new U(R.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
  }
  var z = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.fromBase64String = function(t3) {
      return j(), new e(M.fromBase64String(t3));
    }, e.fromUint8Array = function(t3) {
      return F(), new e(M.fromUint8Array(t3));
    }, e.prototype.toBase64 = function() {
      return j(), this._.toBase64();
    }, e.prototype.toUint8Array = function() {
      return F(), this._.toUint8Array();
    }, e.prototype.isEqual = function(t3) {
      return this._.isEqual(t3._);
    }, e.prototype.toString = function() {
      return "Blob(base64: " + this.toBase64() + ")";
    }, e;
  }(q);
  var G = function(t2, e, n2, r2, i2, o) {
    this.T = t2, this.persistenceKey = e, this.host = n2, this.ssl = r2, this.forceLongPolling = i2, this.I = o;
  };
  var B = function() {
    function t2(t3, e) {
      this.projectId = t3, this.database = e || "(default)";
    }
    return Object.defineProperty(t2.prototype, "m", {
      get: function() {
        return "(default)" === this.database;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(e) {
      return e instanceof t2 && e.projectId === this.projectId && e.database === this.database;
    }, t2;
  }();
  var K = function() {
    function t2(t3) {
      this.uid = t3;
    }
    return t2.prototype.A = function() {
      return null != this.uid;
    }, t2.prototype.R = function() {
      return this.A() ? "uid:" + this.uid : "anonymous-user";
    }, t2.prototype.isEqual = function(t3) {
      return t3.uid === this.uid;
    }, t2;
  }();
  K.UNAUTHENTICATED = new K(null), K.P = new K("google-credentials-uid"), K.g = new K("first-party-uid");
  var H = function(t2, e) {
    this.user = e, this.type = "OAuth", this.V = {}, this.V.Authorization = "Bearer " + t2;
  };
  var J = function() {
    function t2() {
      this.p = null;
    }
    return t2.prototype.getToken = function() {
      return Promise.resolve(null);
    }, t2.prototype.v = function() {
    }, t2.prototype.S = function(t3) {
      this.p = t3, t3(K.UNAUTHENTICATED);
    }, t2.prototype.D = function() {
      this.p = null;
    }, t2;
  }();
  var W = function() {
    function t2(t3) {
      var e = this;
      this.C = null, this.currentUser = K.UNAUTHENTICATED, this.N = false, this.F = 0, this.p = null, this.forceRefresh = false, this.C = function() {
        e.F++, e.currentUser = e.O(), e.N = true, e.p && e.p(e.currentUser);
      }, this.F = 0, this.auth = t3.getImmediate({
        optional: true
      }), this.auth ? this.auth.addAuthTokenListener(this.C) : (this.C(null), t3.get().then(function(t4) {
        e.auth = t4, e.C && e.auth.addAuthTokenListener(e.C);
      }, function() {
      }));
    }
    return t2.prototype.getToken = function() {
      var t3 = this, e = this.F, n2 = this.forceRefresh;
      return this.forceRefresh = false, this.auth ? this.auth.getToken(n2).then(function(n3) {
        return t3.F !== e ? (E("FirebaseCredentialsProvider", "getToken aborted due to token change."), t3.getToken()) : n3 ? (D("string" == typeof n3.accessToken), new H(n3.accessToken, t3.currentUser)) : null;
      }) : Promise.resolve(null);
    }, t2.prototype.v = function() {
      this.forceRefresh = true;
    }, t2.prototype.S = function(t3) {
      this.p = t3, this.N && t3(this.currentUser);
    }, t2.prototype.D = function() {
      this.auth && this.auth.removeAuthTokenListener(this.C), this.C = null, this.p = null;
    }, t2.prototype.O = function() {
      var t3 = this.auth && this.auth.getUid();
      return D(null === t3 || "string" == typeof t3), new K(t3);
    }, t2;
  }();
  var Q = function() {
    function t2(t3, e) {
      this.k = t3, this.M = e, this.type = "FirstParty", this.user = K.g;
    }
    return Object.defineProperty(t2.prototype, "V", {
      get: function() {
        var t3 = {
          "X-Goog-AuthUser": this.M
        }, e = this.k.auth.getAuthHeaderValueForFirstParty([]);
        return e && (t3.Authorization = e), t3;
      },
      enumerable: false,
      configurable: true
    }), t2;
  }();
  var Y = function() {
    function t2(t3, e) {
      this.k = t3, this.M = e;
    }
    return t2.prototype.getToken = function() {
      return Promise.resolve(new Q(this.k, this.M));
    }, t2.prototype.S = function(t3) {
      t3(K.g);
    }, t2.prototype.D = function() {
    }, t2.prototype.v = function() {
    }, t2;
  }();
  var X = function() {
    function t2(t3, e) {
      var n2 = this;
      this.previousValue = t3, e && (e.L = function(t4) {
        return n2.$(t4);
      }, this.B = function(t4) {
        return e.q(t4);
      });
    }
    return t2.prototype.$ = function(t3) {
      return this.previousValue = Math.max(t3, this.previousValue), this.previousValue;
    }, t2.prototype.next = function() {
      var t3 = ++this.previousValue;
      return this.B && this.B(t3), t3;
    }, t2;
  }();
  X.U = -1;
  var $ = function() {
    function t2(t3, e) {
      if (this.seconds = t3, this.nanoseconds = e, e < 0)
        throw new U(R.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
      if (e >= 1e9)
        throw new U(R.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
      if (t3 < -62135596800)
        throw new U(R.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t3);
      if (t3 >= 253402300800)
        throw new U(R.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t3);
    }
    return t2.now = function() {
      return t2.fromMillis(Date.now());
    }, t2.fromDate = function(e) {
      return t2.fromMillis(e.getTime());
    }, t2.fromMillis = function(e) {
      var n2 = Math.floor(e / 1e3);
      return new t2(n2, 1e6 * (e - 1e3 * n2));
    }, t2.prototype.toDate = function() {
      return new Date(this.toMillis());
    }, t2.prototype.toMillis = function() {
      return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }, t2.prototype.K = function(t3) {
      return this.seconds === t3.seconds ? P2(this.nanoseconds, t3.nanoseconds) : P2(this.seconds, t3.seconds);
    }, t2.prototype.isEqual = function(t3) {
      return t3.seconds === this.seconds && t3.nanoseconds === this.nanoseconds;
    }, t2.prototype.toString = function() {
      return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, t2.prototype.toJSON = function() {
      return {
        seconds: this.seconds,
        nanoseconds: this.nanoseconds
      };
    }, t2.prototype.valueOf = function() {
      var t3 = this.seconds - -62135596800;
      return String(t3).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }, t2;
  }();
  var Z = function() {
    function t2(t3) {
      this.timestamp = t3;
    }
    return t2.W = function(e) {
      return new t2(e);
    }, t2.min = function() {
      return new t2(new $(0, 0));
    }, t2.prototype.u = function(t3) {
      return this.timestamp.K(t3.timestamp);
    }, t2.prototype.isEqual = function(t3) {
      return this.timestamp.isEqual(t3.timestamp);
    }, t2.prototype.j = function() {
      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }, t2.prototype.toString = function() {
      return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t2.prototype.G = function() {
      return this.timestamp;
    }, t2;
  }();
  var tt = function() {
    function t2(t3, e, n2) {
      void 0 === e ? e = 0 : e > t3.length && S(), void 0 === n2 ? n2 = t3.length - e : n2 > t3.length - e && S(), this.segments = t3, this.offset = e, this.H = n2;
    }
    return Object.defineProperty(t2.prototype, "length", {
      get: function() {
        return this.H;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(e) {
      return 0 === t2.J(this, e);
    }, t2.prototype.child = function(e) {
      var n2 = this.segments.slice(this.offset, this.limit());
      return e instanceof t2 ? e.forEach(function(t3) {
        n2.push(t3);
      }) : n2.push(e), this.Y(n2);
    }, t2.prototype.limit = function() {
      return this.offset + this.length;
    }, t2.prototype.X = function(t3) {
      return t3 = void 0 === t3 ? 1 : t3, this.Y(this.segments, this.offset + t3, this.length - t3);
    }, t2.prototype.Z = function() {
      return this.Y(this.segments, this.offset, this.length - 1);
    }, t2.prototype.tt = function() {
      return this.segments[this.offset];
    }, t2.prototype.et = function() {
      return this.get(this.length - 1);
    }, t2.prototype.get = function(t3) {
      return this.segments[this.offset + t3];
    }, t2.prototype.nt = function() {
      return 0 === this.length;
    }, t2.prototype.st = function(t3) {
      if (t3.length < this.length)
        return false;
      for (var e = 0; e < this.length; e++)
        if (this.get(e) !== t3.get(e))
          return false;
      return true;
    }, t2.prototype.it = function(t3) {
      if (this.length + 1 !== t3.length)
        return false;
      for (var e = 0; e < this.length; e++)
        if (this.get(e) !== t3.get(e))
          return false;
      return true;
    }, t2.prototype.forEach = function(t3) {
      for (var e = this.offset, n2 = this.limit(); e < n2; e++)
        t3(this.segments[e]);
    }, t2.prototype.rt = function() {
      return this.segments.slice(this.offset, this.limit());
    }, t2.J = function(t3, e) {
      for (var n2 = Math.min(t3.length, e.length), r2 = 0; r2 < n2; r2++) {
        var i2 = t3.get(r2), o = e.get(r2);
        if (i2 < o)
          return -1;
        if (i2 > o)
          return 1;
      }
      return t3.length < e.length ? -1 : t3.length > e.length ? 1 : 0;
    }, t2;
  }();
  var et = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.Y = function(t3, n2, r2) {
      return new e(t3, n2, r2);
    }, e.prototype.ot = function() {
      return this.rt().join("/");
    }, e.prototype.toString = function() {
      return this.ot();
    }, e.ct = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      for (var r2 = [], i2 = 0, o = t3; i2 < o.length; i2++) {
        var u = o[i2];
        if (u.indexOf("//") >= 0)
          throw new U(R.INVALID_ARGUMENT, "Invalid segment (" + u + "). Paths must not contain // in them.");
        r2.push.apply(r2, u.split("/").filter(function(t4) {
          return t4.length > 0;
        }));
      }
      return new e(r2);
    }, e.at = function() {
      return new e([]);
    }, e;
  }(tt);
  var nt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
  var rt = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.Y = function(t3, n2, r2) {
      return new e(t3, n2, r2);
    }, e.ut = function(t3) {
      return nt.test(t3);
    }, e.prototype.ot = function() {
      return this.rt().map(function(t3) {
        return t3 = t3.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), e.ut(t3) || (t3 = "`" + t3 + "`"), t3;
      }).join(".");
    }, e.prototype.toString = function() {
      return this.ot();
    }, e.prototype.ht = function() {
      return 1 === this.length && "__name__" === this.get(0);
    }, e.lt = function() {
      return new e(["__name__"]);
    }, e._t = function(t3) {
      for (var n2 = [], r2 = "", i2 = 0, o = function() {
        if (0 === r2.length)
          throw new U(R.INVALID_ARGUMENT, "Invalid field path (" + t3 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
        n2.push(r2), r2 = "";
      }, u = false; i2 < t3.length; ) {
        var s = t3[i2];
        if ("\\" === s) {
          if (i2 + 1 === t3.length)
            throw new U(R.INVALID_ARGUMENT, "Path has trailing escape character: " + t3);
          var a = t3[i2 + 1];
          if ("\\" !== a && "." !== a && "`" !== a)
            throw new U(R.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t3);
          r2 += a, i2 += 2;
        } else
          "`" === s ? (u = !u, i2++) : "." !== s || u ? (r2 += s, i2++) : (o(), i2++);
      }
      if (o(), u)
        throw new U(R.INVALID_ARGUMENT, "Unterminated ` in path: " + t3);
      return new e(n2);
    }, e.at = function() {
      return new e([]);
    }, e;
  }(tt);
  var it = function() {
    function t2(t3) {
      this.path = t3;
    }
    return t2.ft = function(e) {
      return new t2(et.ct(e));
    }, t2.dt = function(e) {
      return new t2(et.ct(e).X(5));
    }, t2.prototype.wt = function(t3) {
      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t3;
    }, t2.prototype.isEqual = function(t3) {
      return null !== t3 && 0 === et.J(this.path, t3.path);
    }, t2.prototype.toString = function() {
      return this.path.toString();
    }, t2.J = function(t3, e) {
      return et.J(t3.path, e.path);
    }, t2.Et = function(t3) {
      return t3.length % 2 == 0;
    }, t2.Tt = function(e) {
      return new t2(new et(e.slice()));
    }, t2;
  }();
  function ot(t2) {
    var e = 0;
    for (var n2 in t2)
      Object.prototype.hasOwnProperty.call(t2, n2) && e++;
    return e;
  }
  function ut(t2, e) {
    for (var n2 in t2)
      Object.prototype.hasOwnProperty.call(t2, n2) && e(n2, t2[n2]);
  }
  function st(t2) {
    for (var e in t2)
      if (Object.prototype.hasOwnProperty.call(t2, e))
        return false;
    return true;
  }
  var at = function() {
    function t2(t3) {
      this.fields = t3, t3.sort(rt.J);
    }
    return t2.prototype.It = function(t3) {
      for (var e = 0, n2 = this.fields; e < n2.length; e++) {
        if (n2[e].st(t3))
          return true;
      }
      return false;
    }, t2.prototype.isEqual = function(t3) {
      return L(this.fields, t3.fields, function(t4, e) {
        return t4.isEqual(e);
      });
    }, t2;
  }();
  var ct = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
  function ft(t2) {
    if (D(!!t2), "string" == typeof t2) {
      var e = 0, n2 = ct.exec(t2);
      if (D(!!n2), n2[1]) {
        var r2 = n2[1];
        r2 = (r2 + "000000000").substr(0, 9), e = Number(r2);
      }
      var i2 = new Date(t2);
      return {
        seconds: Math.floor(i2.getTime() / 1e3),
        nanos: e
      };
    }
    return {
      seconds: ht(t2.seconds),
      nanos: ht(t2.nanos)
    };
  }
  function ht(t2) {
    return "number" == typeof t2 ? t2 : "string" == typeof t2 ? Number(t2) : 0;
  }
  function lt(t2) {
    return "string" == typeof t2 ? V.fromBase64String(t2) : V.fromUint8Array(t2);
  }
  function pt(t2) {
    var e, n2;
    return "server_timestamp" === (null === (n2 = ((null === (e = null == t2 ? void 0 : t2.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n2 ? void 0 : n2.stringValue);
  }
  function dt(t2) {
    var e = t2.mapValue.fields.__previous_value__;
    return pt(e) ? dt(e) : e;
  }
  function vt(t2) {
    var e = ft(t2.mapValue.fields.__local_write_time__.timestampValue);
    return new $(e.seconds, e.nanos);
  }
  function yt(t2) {
    return null == t2;
  }
  function mt(t2) {
    return 0 === t2 && 1 / t2 == -1 / 0;
  }
  function gt(t2) {
    return "number" == typeof t2 && Number.isInteger(t2) && !mt(t2) && t2 <= Number.MAX_SAFE_INTEGER && t2 >= Number.MIN_SAFE_INTEGER;
  }
  function wt(t2) {
    return "nullValue" in t2 ? 0 : "booleanValue" in t2 ? 1 : "integerValue" in t2 || "doubleValue" in t2 ? 2 : "timestampValue" in t2 ? 3 : "stringValue" in t2 ? 5 : "bytesValue" in t2 ? 6 : "referenceValue" in t2 ? 7 : "geoPointValue" in t2 ? 8 : "arrayValue" in t2 ? 9 : "mapValue" in t2 ? pt(t2) ? 4 : 10 : S();
  }
  function bt(t2, e) {
    var n2 = wt(t2);
    if (n2 !== wt(e))
      return false;
    switch (n2) {
      case 0:
        return true;
      case 1:
        return t2.booleanValue === e.booleanValue;
      case 4:
        return vt(t2).isEqual(vt(e));
      case 3:
        return function(t3, e2) {
          if ("string" == typeof t3.timestampValue && "string" == typeof e2.timestampValue && t3.timestampValue.length === e2.timestampValue.length)
            return t3.timestampValue === e2.timestampValue;
          var n3 = ft(t3.timestampValue), r2 = ft(e2.timestampValue);
          return n3.seconds === r2.seconds && n3.nanos === r2.nanos;
        }(t2, e);
      case 5:
        return t2.stringValue === e.stringValue;
      case 6:
        return function(t3, e2) {
          return lt(t3.bytesValue).isEqual(lt(e2.bytesValue));
        }(t2, e);
      case 7:
        return t2.referenceValue === e.referenceValue;
      case 8:
        return function(t3, e2) {
          return ht(t3.geoPointValue.latitude) === ht(e2.geoPointValue.latitude) && ht(t3.geoPointValue.longitude) === ht(e2.geoPointValue.longitude);
        }(t2, e);
      case 2:
        return function(t3, e2) {
          if ("integerValue" in t3 && "integerValue" in e2)
            return ht(t3.integerValue) === ht(e2.integerValue);
          if ("doubleValue" in t3 && "doubleValue" in e2) {
            var n3 = ht(t3.doubleValue), r2 = ht(e2.doubleValue);
            return n3 === r2 ? mt(n3) === mt(r2) : isNaN(n3) && isNaN(r2);
          }
          return false;
        }(t2, e);
      case 9:
        return L(t2.arrayValue.values || [], e.arrayValue.values || [], bt);
      case 10:
        return function(t3, e2) {
          var n3 = t3.mapValue.fields || {}, r2 = e2.mapValue.fields || {};
          if (ot(n3) !== ot(r2))
            return false;
          for (var i2 in n3)
            if (n3.hasOwnProperty(i2) && (void 0 === r2[i2] || !bt(n3[i2], r2[i2])))
              return false;
          return true;
        }(t2, e);
      default:
        return S();
    }
  }
  function _t(t2, e) {
    return void 0 !== (t2.values || []).find(function(t3) {
      return bt(t3, e);
    });
  }
  function It(t2, e) {
    var n2 = wt(t2), r2 = wt(e);
    if (n2 !== r2)
      return P2(n2, r2);
    switch (n2) {
      case 0:
        return 0;
      case 1:
        return P2(t2.booleanValue, e.booleanValue);
      case 2:
        return function(t3, e2) {
          var n3 = ht(t3.integerValue || t3.doubleValue), r3 = ht(e2.integerValue || e2.doubleValue);
          return n3 < r3 ? -1 : n3 > r3 ? 1 : n3 === r3 ? 0 : isNaN(n3) ? isNaN(r3) ? 0 : -1 : 1;
        }(t2, e);
      case 3:
        return Et(t2.timestampValue, e.timestampValue);
      case 4:
        return Et(vt(t2), vt(e));
      case 5:
        return P2(t2.stringValue, e.stringValue);
      case 6:
        return function(t3, e2) {
          var n3 = lt(t3), r3 = lt(e2);
          return n3.u(r3);
        }(t2.bytesValue, e.bytesValue);
      case 7:
        return function(t3, e2) {
          for (var n3 = t3.split("/"), r3 = e2.split("/"), i2 = 0; i2 < n3.length && i2 < r3.length; i2++) {
            var o = P2(n3[i2], r3[i2]);
            if (0 !== o)
              return o;
          }
          return P2(n3.length, r3.length);
        }(t2.referenceValue, e.referenceValue);
      case 8:
        return function(t3, e2) {
          var n3 = P2(ht(t3.latitude), ht(e2.latitude));
          return 0 !== n3 ? n3 : P2(ht(t3.longitude), ht(e2.longitude));
        }(t2.geoPointValue, e.geoPointValue);
      case 9:
        return function(t3, e2) {
          for (var n3 = t3.values || [], r3 = e2.values || [], i2 = 0; i2 < n3.length && i2 < r3.length; ++i2) {
            var o = It(n3[i2], r3[i2]);
            if (o)
              return o;
          }
          return P2(n3.length, r3.length);
        }(t2.arrayValue, e.arrayValue);
      case 10:
        return function(t3, e2) {
          var n3 = t3.fields || {}, r3 = Object.keys(n3), i2 = e2.fields || {}, o = Object.keys(i2);
          r3.sort(), o.sort();
          for (var u = 0; u < r3.length && u < o.length; ++u) {
            var s = P2(r3[u], o[u]);
            if (0 !== s)
              return s;
            var a = It(n3[r3[u]], i2[o[u]]);
            if (0 !== a)
              return a;
          }
          return P2(r3.length, o.length);
        }(t2.mapValue, e.mapValue);
      default:
        throw S();
    }
  }
  function Et(t2, e) {
    if ("string" == typeof t2 && "string" == typeof e && t2.length === e.length)
      return P2(t2, e);
    var n2 = ft(t2), r2 = ft(e), i2 = P2(n2.seconds, r2.seconds);
    return 0 !== i2 ? i2 : P2(n2.nanos, r2.nanos);
  }
  function Tt(t2) {
    return Nt(t2);
  }
  function Nt(t2) {
    return "nullValue" in t2 ? "null" : "booleanValue" in t2 ? "" + t2.booleanValue : "integerValue" in t2 ? "" + t2.integerValue : "doubleValue" in t2 ? "" + t2.doubleValue : "timestampValue" in t2 ? function(t3) {
      var e2 = ft(t3);
      return "time(" + e2.seconds + "," + e2.nanos + ")";
    }(t2.timestampValue) : "stringValue" in t2 ? t2.stringValue : "bytesValue" in t2 ? lt(t2.bytesValue).toBase64() : "referenceValue" in t2 ? (n2 = t2.referenceValue, it.dt(n2).toString()) : "geoPointValue" in t2 ? "geo(" + (e = t2.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t2 ? function(t3) {
      for (var e2 = "[", n3 = true, r2 = 0, i2 = t3.values || []; r2 < i2.length; r2++) {
        n3 ? n3 = false : e2 += ",", e2 += Nt(i2[r2]);
      }
      return e2 + "]";
    }(t2.arrayValue) : "mapValue" in t2 ? function(t3) {
      for (var e2 = "{", n3 = true, r2 = 0, i2 = Object.keys(t3.fields || {}).sort(); r2 < i2.length; r2++) {
        var o = i2[r2];
        n3 ? n3 = false : e2 += ",", e2 += o + ":" + Nt(t3.fields[o]);
      }
      return e2 + "}";
    }(t2.mapValue) : S();
    var e, n2;
  }
  function At(t2, e) {
    return {
      referenceValue: "projects/" + t2.projectId + "/databases/" + t2.database + "/documents/" + e.path.ot()
    };
  }
  function St(t2) {
    return !!t2 && "integerValue" in t2;
  }
  function Dt(t2) {
    return !!t2 && "arrayValue" in t2;
  }
  function xt(t2) {
    return !!t2 && "nullValue" in t2;
  }
  function kt(t2) {
    return !!t2 && "doubleValue" in t2 && isNaN(Number(t2.doubleValue));
  }
  function Ot(t2) {
    return !!t2 && "mapValue" in t2;
  }
  var Pt = function() {
    function t2(t3) {
      this.proto = t3;
    }
    return t2.empty = function() {
      return new t2({
        mapValue: {}
      });
    }, t2.prototype.field = function(t3) {
      if (t3.nt())
        return this.proto;
      for (var e = this.proto, n2 = 0; n2 < t3.length - 1; ++n2) {
        if (!e.mapValue.fields)
          return null;
        if (!Ot(e = e.mapValue.fields[t3.get(n2)]))
          return null;
      }
      return (e = (e.mapValue.fields || {})[t3.et()]) || null;
    }, t2.prototype.isEqual = function(t3) {
      return bt(this.proto, t3.proto);
    }, t2;
  }();
  var Lt = function() {
    function t2(t3) {
      void 0 === t3 && (t3 = Pt.empty()), this.At = t3, this.Rt = new Map();
    }
    return t2.prototype.set = function(t3, e) {
      return this.Pt(t3, e), this;
    }, t2.prototype.delete = function(t3) {
      return this.Pt(t3, null), this;
    }, t2.prototype.Pt = function(t3, e) {
      for (var n2 = this.Rt, r2 = 0; r2 < t3.length - 1; ++r2) {
        var i2 = t3.get(r2), o = n2.get(i2);
        o instanceof Map ? n2 = o : o && 10 === wt(o) ? (o = new Map(Object.entries(o.mapValue.fields || {})), n2.set(i2, o), n2 = o) : (o = new Map(), n2.set(i2, o), n2 = o);
      }
      n2.set(t3.et(), e);
    }, t2.prototype.yt = function() {
      var t3 = this.gt(rt.at(), this.Rt);
      return null != t3 ? new Pt(t3) : this.At;
    }, t2.prototype.gt = function(t3, e) {
      var n2 = this, r2 = false, i2 = this.At.field(t3), o = Ot(i2) ? Object.assign({}, i2.mapValue.fields) : {};
      return e.forEach(function(e2, i3) {
        if (e2 instanceof Map) {
          var u = n2.gt(t3.child(i3), e2);
          null != u && (o[i3] = u, r2 = true);
        } else
          null !== e2 ? (o[i3] = e2, r2 = true) : o.hasOwnProperty(i3) && (delete o[i3], r2 = true);
      }), r2 ? {
        mapValue: {
          fields: o
        }
      } : null;
    }, t2;
  }();
  function Ct(t2) {
    var e = [];
    return ut(t2.fields || {}, function(t3, n2) {
      var r2 = new rt([t3]);
      if (Ot(n2)) {
        var i2 = Ct(n2.mapValue).fields;
        if (0 === i2.length)
          e.push(r2);
        else
          for (var o = 0, u = i2; o < u.length; o++) {
            var s = u[o];
            e.push(r2.child(s));
          }
      } else
        e.push(r2);
    }), new at(e);
  }
  var Vt = function(t2, e) {
    this.key = t2, this.version = e;
  };
  var Rt = function(t2) {
    function e(e2, n2, r2, i2) {
      var o = this;
      return (o = t2.call(this, e2, n2) || this).Vt = r2, o.bt = !!i2.bt, o.hasCommittedMutations = !!i2.hasCommittedMutations, o;
    }
    return __extends(e, t2), e.prototype.field = function(t3) {
      return this.Vt.field(t3);
    }, e.prototype.data = function() {
      return this.Vt;
    }, e.prototype.vt = function() {
      return this.Vt.proto;
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof e && this.key.isEqual(t3.key) && this.version.isEqual(t3.version) && this.bt === t3.bt && this.hasCommittedMutations === t3.hasCommittedMutations && this.Vt.isEqual(t3.Vt);
    }, e.prototype.toString = function() {
      return "Document(" + this.key + ", " + this.version + ", " + this.Vt.toString() + ", {hasLocalMutations: " + this.bt + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
    }, Object.defineProperty(e.prototype, "hasPendingWrites", {
      get: function() {
        return this.bt || this.hasCommittedMutations;
      },
      enumerable: false,
      configurable: true
    }), e;
  }(Vt);
  var Ut = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this, e2, n2) || this).hasCommittedMutations = !(!r2 || !r2.hasCommittedMutations), i2;
    }
    return __extends(e, t2), e.prototype.toString = function() {
      return "NoDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(e.prototype, "hasPendingWrites", {
      get: function() {
        return this.hasCommittedMutations;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.isEqual = function(t3) {
      return t3 instanceof e && t3.hasCommittedMutations === this.hasCommittedMutations && t3.version.isEqual(this.version) && t3.key.isEqual(this.key);
    }, e;
  }(Vt);
  var Mt = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.toString = function() {
      return "UnknownDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(e.prototype, "hasPendingWrites", {
      get: function() {
        return true;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.isEqual = function(t3) {
      return t3 instanceof e && t3.version.isEqual(this.version) && t3.key.isEqual(this.key);
    }, e;
  }(Vt);
  var qt = function(t2, e, n2, r2, i2, o, u) {
    void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i2 && (i2 = null), void 0 === o && (o = null), void 0 === u && (u = null), this.path = t2, this.collectionGroup = e, this.orderBy = n2, this.filters = r2, this.limit = i2, this.startAt = o, this.endAt = u, this.St = null;
  };
  function Ft(t2, e, n2, r2, i2, o, u) {
    return void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i2 && (i2 = null), void 0 === o && (o = null), void 0 === u && (u = null), new qt(t2, e, n2, r2, i2, o, u);
  }
  function jt(t2) {
    var e = x(t2);
    if (null === e.St) {
      var n2 = e.path.ot();
      null !== e.collectionGroup && (n2 += "|cg:" + e.collectionGroup), n2 += "|f:", n2 += e.filters.map(function(t3) {
        return function(t4) {
          return t4.field.ot() + t4.op.toString() + Tt(t4.value);
        }(t3);
      }).join(","), n2 += "|ob:", n2 += e.orderBy.map(function(t3) {
        return function(t4) {
          return t4.field.ot() + t4.dir;
        }(t3);
      }).join(","), yt(e.limit) || (n2 += "|l:", n2 += e.limit), e.startAt && (n2 += "|lb:", n2 += te(e.startAt)), e.endAt && (n2 += "|ub:", n2 += te(e.endAt)), e.St = n2;
    }
    return e.St;
  }
  function zt(t2, e) {
    if (t2.limit !== e.limit)
      return false;
    if (t2.orderBy.length !== e.orderBy.length)
      return false;
    for (var n2 = 0; n2 < t2.orderBy.length; n2++)
      if (!ne(t2.orderBy[n2], e.orderBy[n2]))
        return false;
    if (t2.filters.length !== e.filters.length)
      return false;
    for (var r2 = 0; r2 < t2.filters.length; r2++)
      if (i2 = t2.filters[r2], o = e.filters[r2], i2.op !== o.op || !i2.field.isEqual(o.field) || !bt(i2.value, o.value))
        return false;
    var i2, o;
    return t2.collectionGroup === e.collectionGroup && !!t2.path.isEqual(e.path) && !!ie(t2.startAt, e.startAt) && ie(t2.endAt, e.endAt);
  }
  function Gt(t2) {
    return it.Et(t2.path) && null === t2.collectionGroup && 0 === t2.filters.length;
  }
  var Bt = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).field = e2, i2.op = n2, i2.value = r2, i2;
    }
    return __extends(e, t2), e.create = function(t3, n2, r2) {
      return t3.ht() ? "in" === n2 || "not-in" === n2 ? this.Dt(t3, n2, r2) : new Kt(t3, n2, r2) : "array-contains" === n2 ? new Qt(t3, r2) : "in" === n2 ? new Yt(t3, r2) : "not-in" === n2 ? new Xt(t3, r2) : "array-contains-any" === n2 ? new $t(t3, r2) : new e(t3, n2, r2);
    }, e.Dt = function(t3, e2, n2) {
      return "in" === e2 ? new Ht(t3, n2) : new Jt(t3, n2);
    }, e.prototype.matches = function(t3) {
      var e2 = t3.field(this.field);
      return "!=" === this.op ? null !== e2 && this.Ct(It(e2, this.value)) : null !== e2 && wt(this.value) === wt(e2) && this.Ct(It(e2, this.value));
    }, e.prototype.Ct = function(t3) {
      switch (this.op) {
        case "<":
          return t3 < 0;
        case "<=":
          return t3 <= 0;
        case "==":
          return 0 === t3;
        case "!=":
          return 0 !== t3;
        case ">":
          return t3 > 0;
        case ">=":
          return t3 >= 0;
        default:
          return S();
      }
    }, e.prototype.xt = function() {
      return ["<", "<=", ">", ">=", "!=", "not-in"].indexOf(this.op) >= 0;
    }, e;
  }(function() {
  });
  var Kt = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this, e2, n2, r2) || this).key = it.dt(r2.referenceValue), i2;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = it.J(t3.key, this.key);
      return this.Ct(e2);
    }, e;
  }(Bt);
  var Ht = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, "in", n2) || this).keys = Wt("in", n2), r2;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      return this.keys.some(function(e2) {
        return e2.isEqual(t3.key);
      });
    }, e;
  }(Bt);
  var Jt = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, "not-in", n2) || this).keys = Wt("not-in", n2), r2;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      return !this.keys.some(function(e2) {
        return e2.isEqual(t3.key);
      });
    }, e;
  }(Bt);
  function Wt(t2, e) {
    var n2;
    return ((null === (n2 = e.arrayValue) || void 0 === n2 ? void 0 : n2.values) || []).map(function(t3) {
      return it.dt(t3.referenceValue);
    });
  }
  var Qt = function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "array-contains", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = t3.field(this.field);
      return Dt(e2) && _t(e2.arrayValue, this.value);
    }, e;
  }(Bt);
  var Yt = function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "in", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = t3.field(this.field);
      return null !== e2 && _t(this.value.arrayValue, e2);
    }, e;
  }(Bt);
  var Xt = function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "not-in", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      if (_t(this.value.arrayValue, {
        nullValue: "NULL_VALUE"
      }))
        return false;
      var e2 = t3.field(this.field);
      return null !== e2 && !_t(this.value.arrayValue, e2);
    }, e;
  }(Bt);
  var $t = function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "array-contains-any", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = this, n2 = t3.field(this.field);
      return !(!Dt(n2) || !n2.arrayValue.values) && n2.arrayValue.values.some(function(t4) {
        return _t(e2.value.arrayValue, t4);
      });
    }, e;
  }(Bt);
  var Zt = function(t2, e) {
    this.position = t2, this.before = e;
  };
  function te(t2) {
    return (t2.before ? "b" : "a") + ":" + t2.position.map(function(t3) {
      return Tt(t3);
    }).join(",");
  }
  var ee = function(t2, e) {
    void 0 === e && (e = "asc"), this.field = t2, this.dir = e;
  };
  function ne(t2, e) {
    return t2.dir === e.dir && t2.field.isEqual(e.field);
  }
  function re(t2, e, n2) {
    for (var r2 = 0, i2 = 0; i2 < t2.position.length; i2++) {
      var o = e[i2], u = t2.position[i2];
      if (r2 = o.field.ht() ? it.J(it.dt(u.referenceValue), n2.key) : It(u, n2.field(o.field)), "desc" === o.dir && (r2 *= -1), 0 !== r2)
        break;
    }
    return t2.before ? r2 <= 0 : r2 < 0;
  }
  function ie(t2, e) {
    if (null === t2)
      return null === e;
    if (null === e)
      return false;
    if (t2.before !== e.before || t2.position.length !== e.position.length)
      return false;
    for (var n2 = 0; n2 < t2.position.length; n2++)
      if (!bt(t2.position[n2], e.position[n2]))
        return false;
    return true;
  }
  var oe = function(t2, e, n2, r2, i2, o, u, s) {
    void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i2 && (i2 = null), void 0 === o && (o = "F"), void 0 === u && (u = null), void 0 === s && (s = null), this.path = t2, this.collectionGroup = e, this.Nt = n2, this.filters = r2, this.limit = i2, this.limitType = o, this.startAt = u, this.endAt = s, this.Ft = null, this.Ot = null, this.startAt, this.endAt;
  };
  function ue(t2, e, n2, r2, i2, o, u, s) {
    return new oe(t2, e, n2, r2, i2, o, u, s);
  }
  function se(t2) {
    return new oe(t2);
  }
  function ae(t2) {
    return !yt(t2.limit) && "F" === t2.limitType;
  }
  function ce(t2) {
    return !yt(t2.limit) && "L" === t2.limitType;
  }
  function fe(t2) {
    return t2.Nt.length > 0 ? t2.Nt[0].field : null;
  }
  function he(t2) {
    for (var e = 0, n2 = t2.filters; e < n2.length; e++) {
      var r2 = n2[e];
      if (r2.xt())
        return r2.field;
    }
    return null;
  }
  function le(t2) {
    return null !== t2.collectionGroup;
  }
  function pe(t2) {
    var e = x(t2);
    if (null === e.Ft) {
      e.Ft = [];
      var n2 = he(e), r2 = fe(e);
      if (null !== n2 && null === r2)
        n2.ht() || e.Ft.push(new ee(n2)), e.Ft.push(new ee(rt.lt(), "asc"));
      else {
        for (var i2 = false, o = 0, u = e.Nt; o < u.length; o++) {
          var s = u[o];
          e.Ft.push(s), s.field.ht() && (i2 = true);
        }
        if (!i2) {
          var a = e.Nt.length > 0 ? e.Nt[e.Nt.length - 1].dir : "asc";
          e.Ft.push(new ee(rt.lt(), a));
        }
      }
    }
    return e.Ft;
  }
  function de(t2) {
    var e = x(t2);
    if (!e.Ot)
      if ("F" === e.limitType)
        e.Ot = Ft(e.path, e.collectionGroup, pe(e), e.filters, e.limit, e.startAt, e.endAt);
      else {
        for (var n2 = [], r2 = 0, i2 = pe(e); r2 < i2.length; r2++) {
          var o = i2[r2], u = "desc" === o.dir ? "asc" : "desc";
          n2.push(new ee(o.field, u));
        }
        var s = e.endAt ? new Zt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Zt(e.startAt.position, !e.startAt.before) : null;
        e.Ot = Ft(e.path, e.collectionGroup, n2, e.filters, e.limit, s, a);
      }
    return e.Ot;
  }
  function ve(t2, e, n2) {
    return new oe(t2.path, t2.collectionGroup, t2.Nt.slice(), t2.filters.slice(), e, n2, t2.startAt, t2.endAt);
  }
  function ye(t2, e) {
    return zt(de(t2), de(e)) && t2.limitType === e.limitType;
  }
  function me(t2) {
    return jt(de(t2)) + "|lt:" + t2.limitType;
  }
  function ge(t2) {
    return "Query(target=" + function(t3) {
      var e = t3.path.ot();
      return null !== t3.collectionGroup && (e += " collectionGroup=" + t3.collectionGroup), t3.filters.length > 0 && (e += ", filters: [" + t3.filters.map(function(t4) {
        return (e2 = t4).field.ot() + " " + e2.op + " " + Tt(e2.value);
        var e2;
      }).join(", ") + "]"), yt(t3.limit) || (e += ", limit: " + t3.limit), t3.orderBy.length > 0 && (e += ", orderBy: [" + t3.orderBy.map(function(t4) {
        return function(t5) {
          return t5.field.ot() + " (" + t5.dir + ")";
        }(t4);
      }).join(", ") + "]"), t3.startAt && (e += ", startAt: " + te(t3.startAt)), t3.endAt && (e += ", endAt: " + te(t3.endAt)), "Target(" + e + ")";
    }(de(t2)) + "; limitType=" + t2.limitType + ")";
  }
  function we(t2, e) {
    return function(t3, e2) {
      var n2 = e2.key.path;
      return null !== t3.collectionGroup ? e2.key.wt(t3.collectionGroup) && t3.path.st(n2) : it.Et(t3.path) ? t3.path.isEqual(n2) : t3.path.it(n2);
    }(t2, e) && function(t3, e2) {
      for (var n2 = 0, r2 = t3.Nt; n2 < r2.length; n2++) {
        var i2 = r2[n2];
        if (!i2.field.ht() && null === e2.field(i2.field))
          return false;
      }
      return true;
    }(t2, e) && function(t3, e2) {
      for (var n2 = 0, r2 = t3.filters; n2 < r2.length; n2++) {
        if (!r2[n2].matches(e2))
          return false;
      }
      return true;
    }(t2, e) && function(t3, e2) {
      return !(t3.startAt && !re(t3.startAt, pe(t3), e2)) && (!t3.endAt || !re(t3.endAt, pe(t3), e2));
    }(t2, e);
  }
  function be(t2) {
    return function(e, n2) {
      for (var r2 = false, i2 = 0, o = pe(t2); i2 < o.length; i2++) {
        var u = o[i2], s = _e(u, e, n2);
        if (0 !== s)
          return s;
        r2 = r2 || u.field.ht();
      }
      return 0;
    };
  }
  function _e(t2, e, n2) {
    var r2 = t2.field.ht() ? it.J(e.key, n2.key) : function(t3, e2, n3) {
      var r3 = e2.field(t3), i2 = n3.field(t3);
      return null !== r3 && null !== i2 ? It(r3, i2) : S();
    }(t2.field, e, n2);
    switch (t2.dir) {
      case "asc":
        return r2;
      case "desc":
        return -1 * r2;
      default:
        return S();
    }
  }
  var Ie = function() {
    function t2(t3, e, n2, r2, i2, o, u) {
      void 0 === i2 && (i2 = Z.min()), void 0 === o && (o = Z.min()), void 0 === u && (u = V.h), this.target = t3, this.targetId = e, this.kt = n2, this.sequenceNumber = r2, this.Mt = i2, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = u;
    }
    return t2.prototype.Lt = function(e) {
      return new t2(this.target, this.targetId, this.kt, e, this.Mt, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, t2.prototype.$t = function(e, n2) {
      return new t2(this.target, this.targetId, this.kt, this.sequenceNumber, n2, this.lastLimboFreeSnapshotVersion, e);
    }, t2.prototype.Bt = function(e) {
      return new t2(this.target, this.targetId, this.kt, this.sequenceNumber, this.Mt, e, this.resumeToken);
    }, t2;
  }();
  function Ee(t2, e) {
    if (t2.qt) {
      if (isNaN(e))
        return {
          doubleValue: "NaN"
        };
      if (e === 1 / 0)
        return {
          doubleValue: "Infinity"
        };
      if (e === -1 / 0)
        return {
          doubleValue: "-Infinity"
        };
    }
    return {
      doubleValue: mt(e) ? "-0" : e
    };
  }
  function Te(t2) {
    return {
      integerValue: "" + t2
    };
  }
  function Ne(t2, e) {
    return gt(e) ? Te(e) : Ee(t2, e);
  }
  var Ae = function() {
    this.Ut = void 0;
  };
  function Se(t2, e, n2) {
    return t2 instanceof ke ? function(t3, e2) {
      var n3 = {
        fields: {
          __type__: {
            stringValue: "server_timestamp"
          },
          __local_write_time__: {
            timestampValue: {
              seconds: t3.seconds,
              nanos: t3.nanoseconds
            }
          }
        }
      };
      return e2 && (n3.fields.__previous_value__ = e2), {
        mapValue: n3
      };
    }(n2, e) : t2 instanceof Oe ? Pe(t2, e) : t2 instanceof Le ? Ce(t2, e) : function(t3, e2) {
      var n3 = xe(t3, e2), r2 = Re(n3) + Re(t3.Qt);
      return St(n3) && St(t3.Qt) ? Te(r2) : Ee(t3.Kt, r2);
    }(t2, e);
  }
  function De(t2, e, n2) {
    return t2 instanceof Oe ? Pe(t2, e) : t2 instanceof Le ? Ce(t2, e) : n2;
  }
  function xe(t2, e) {
    return t2 instanceof Ve ? St(n2 = e) || function(t3) {
      return !!t3 && "doubleValue" in t3;
    }(n2) ? e : {
      integerValue: 0
    } : null;
    var n2;
  }
  var ke = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e;
  }(Ae);
  var Oe = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).elements = e2, n2;
    }
    return __extends(e, t2), e;
  }(Ae);
  function Pe(t2, e) {
    for (var n2 = Ue(e), r2 = function(t3) {
      n2.some(function(e2) {
        return bt(e2, t3);
      }) || n2.push(t3);
    }, i2 = 0, o = t2.elements; i2 < o.length; i2++) {
      r2(o[i2]);
    }
    return {
      arrayValue: {
        values: n2
      }
    };
  }
  var Le = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).elements = e2, n2;
    }
    return __extends(e, t2), e;
  }(Ae);
  function Ce(t2, e) {
    for (var n2 = Ue(e), r2 = function(t3) {
      n2 = n2.filter(function(e2) {
        return !bt(e2, t3);
      });
    }, i2 = 0, o = t2.elements; i2 < o.length; i2++) {
      r2(o[i2]);
    }
    return {
      arrayValue: {
        values: n2
      }
    };
  }
  var Ve = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Kt = e2, r2.Qt = n2, r2;
    }
    return __extends(e, t2), e;
  }(Ae);
  function Re(t2) {
    return ht(t2.integerValue || t2.doubleValue);
  }
  function Ue(t2) {
    return Dt(t2) && t2.arrayValue.values ? t2.arrayValue.values.slice() : [];
  }
  var Me = function(t2, e) {
    this.field = t2, this.transform = e;
  };
  var qe = function(t2, e) {
    this.version = t2, this.transformResults = e;
  };
  var Fe = function() {
    function t2(t3, e) {
      this.updateTime = t3, this.exists = e;
    }
    return t2.Wt = function() {
      return new t2();
    }, t2.exists = function(e) {
      return new t2(void 0, e);
    }, t2.updateTime = function(e) {
      return new t2(e);
    }, Object.defineProperty(t2.prototype, "jt", {
      get: function() {
        return void 0 === this.updateTime && void 0 === this.exists;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(t3) {
      return this.exists === t3.exists && (this.updateTime ? !!t3.updateTime && this.updateTime.isEqual(t3.updateTime) : !t3.updateTime);
    }, t2;
  }();
  function je(t2, e) {
    return void 0 !== t2.updateTime ? e instanceof Rt && e.version.isEqual(t2.updateTime) : void 0 === t2.exists || t2.exists === e instanceof Rt;
  }
  var ze = function() {
  };
  function Ge(t2, e, n2) {
    return t2 instanceof We ? function(t3, e2, n3) {
      var r2 = t3.value;
      if (n3.transformResults) {
        var i2 = Xe(t3.fieldTransforms, e2, n3.transformResults);
        r2 = Ze(t3.fieldTransforms, r2, i2);
      }
      return new Rt(t3.key, n3.version, r2, {
        hasCommittedMutations: true
      });
    }(t2, e, n2) : t2 instanceof Qe ? function(t3, e2, n3) {
      if (!je(t3.Gt, e2))
        return new Mt(t3.key, n3.version);
      var r2 = Ye(t3, e2, n3.transformResults ? Xe(t3.fieldTransforms, e2, n3.transformResults) : []);
      return new Rt(t3.key, n3.version, r2, {
        hasCommittedMutations: true
      });
    }(t2, e, n2) : function(t3, e2, n3) {
      return new Ut(t3.key, n3.version, {
        hasCommittedMutations: true
      });
    }(t2, 0, n2);
  }
  function Be(t2, e, n2, r2) {
    return t2 instanceof We ? function(t3, e2, n3, r3) {
      if (!je(t3.Gt, e2))
        return e2;
      var i2 = t3.value, o = $e(t3.fieldTransforms, n3, e2);
      i2 = Ze(t3.fieldTransforms, i2, o);
      var u = Je(e2);
      return new Rt(t3.key, u, i2, {
        bt: true
      });
    }(t2, e, r2) : t2 instanceof Qe ? function(t3, e2, n3, r3) {
      if (!je(t3.Gt, e2))
        return e2;
      var i2 = Je(e2), o = Ye(t3, e2, $e(t3.fieldTransforms, n3, e2));
      return new Rt(t3.key, i2, o, {
        bt: true
      });
    }(t2, e, r2) : function(t3, e2) {
      return je(t3.Gt, e2) ? new Ut(t3.key, Z.min()) : e2;
    }(t2, e);
  }
  function Ke(t2, e) {
    return function(t3, e2) {
      for (var n2 = null, r2 = 0, i2 = t3; r2 < i2.length; r2++) {
        var o = i2[r2], u = e2 instanceof Rt ? e2.field(o.field) : void 0, s = xe(o.transform, u || null);
        null != s && (n2 = null == n2 ? new Lt().set(o.field, s) : n2.set(o.field, s));
      }
      return n2 ? n2.yt() : null;
    }(t2.fieldTransforms, e);
  }
  function He(t2, e) {
    return t2.type === e.type && !!t2.key.isEqual(e.key) && !!t2.Gt.isEqual(e.Gt) && !!function(t3, e2) {
      return void 0 === t3 && void 0 === e2 || !(!t3 || !e2) && L(t3, e2, function(t4, e3) {
        return function(t5, e4) {
          return t5.field.isEqual(e4.field) && function(t6, e5) {
            return t6 instanceof Oe && e5 instanceof Oe || t6 instanceof Le && e5 instanceof Le ? L(t6.elements, e5.elements, bt) : t6 instanceof Ve && e5 instanceof Ve ? bt(t6.Qt, e5.Qt) : t6 instanceof ke && e5 instanceof ke;
          }(t5.transform, e4.transform);
        }(t4, e3);
      });
    }(t2.fieldTransforms, e.fieldTransforms) && (0 === t2.type ? t2.value.isEqual(e.value) : 1 !== t2.type || t2.data.isEqual(e.data) && t2.zt.isEqual(e.zt));
  }
  function Je(t2) {
    return t2 instanceof Rt ? t2.version : Z.min();
  }
  var We = function(t2) {
    function e(e2, n2, r2, i2) {
      void 0 === i2 && (i2 = []);
      var o = this;
      return (o = t2.call(this) || this).key = e2, o.value = n2, o.Gt = r2, o.fieldTransforms = i2, o.type = 0, o;
    }
    return __extends(e, t2), e;
  }(ze);
  var Qe = function(t2) {
    function e(e2, n2, r2, i2, o) {
      void 0 === o && (o = []);
      var u = this;
      return (u = t2.call(this) || this).key = e2, u.data = n2, u.zt = r2, u.Gt = i2, u.fieldTransforms = o, u.type = 1, u;
    }
    return __extends(e, t2), e;
  }(ze);
  function Ye(t2, e, n2) {
    var r2;
    return r2 = function(t3, e2) {
      var n3 = new Lt(e2);
      return t3.zt.fields.forEach(function(e3) {
        if (!e3.nt()) {
          var r3 = t3.data.field(e3);
          null !== r3 ? n3.set(e3, r3) : n3.delete(e3);
        }
      }), n3.yt();
    }(t2, r2 = e instanceof Rt ? e.data() : Pt.empty()), r2 = Ze(t2.fieldTransforms, r2, n2);
  }
  function Xe(t2, e, n2) {
    var r2 = [];
    D(t2.length === n2.length);
    for (var i2 = 0; i2 < n2.length; i2++) {
      var o = t2[i2], u = o.transform, s = null;
      e instanceof Rt && (s = e.field(o.field)), r2.push(De(u, s, n2[i2]));
    }
    return r2;
  }
  function $e(t2, e, n2, r2) {
    for (var i2 = [], o = 0, u = t2; o < u.length; o++) {
      var s = u[o], a = s.transform, c = null;
      n2 instanceof Rt && (c = n2.field(s.field)), i2.push(Se(a, c, e));
    }
    return i2;
  }
  function Ze(t2, e, n2) {
    for (var r2 = new Lt(e), i2 = 0; i2 < t2.length; i2++) {
      var o = t2[i2];
      r2.set(o.field, n2[i2]);
    }
    return r2.yt();
  }
  var tn;
  var en;
  var nn = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).key = e2, r2.Gt = n2, r2.type = 2, r2.fieldTransforms = [], r2;
    }
    return __extends(e, t2), e;
  }(ze);
  var rn = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).key = e2, r2.Gt = n2, r2.type = 3, r2.fieldTransforms = [], r2;
    }
    return __extends(e, t2), e;
  }(ze);
  var on = function(t2) {
    this.count = t2;
  };
  function un(t2) {
    switch (t2) {
      case R.OK:
        return S();
      case R.CANCELLED:
      case R.UNKNOWN:
      case R.DEADLINE_EXCEEDED:
      case R.RESOURCE_EXHAUSTED:
      case R.INTERNAL:
      case R.UNAVAILABLE:
      case R.UNAUTHENTICATED:
        return false;
      case R.INVALID_ARGUMENT:
      case R.NOT_FOUND:
      case R.ALREADY_EXISTS:
      case R.PERMISSION_DENIED:
      case R.FAILED_PRECONDITION:
      case R.ABORTED:
      case R.OUT_OF_RANGE:
      case R.UNIMPLEMENTED:
      case R.DATA_LOSS:
        return true;
      default:
        return S();
    }
  }
  function sn(t2) {
    if (void 0 === t2)
      return T("GRPC error has no .code"), R.UNKNOWN;
    switch (t2) {
      case tn.OK:
        return R.OK;
      case tn.CANCELLED:
        return R.CANCELLED;
      case tn.UNKNOWN:
        return R.UNKNOWN;
      case tn.DEADLINE_EXCEEDED:
        return R.DEADLINE_EXCEEDED;
      case tn.RESOURCE_EXHAUSTED:
        return R.RESOURCE_EXHAUSTED;
      case tn.INTERNAL:
        return R.INTERNAL;
      case tn.UNAVAILABLE:
        return R.UNAVAILABLE;
      case tn.UNAUTHENTICATED:
        return R.UNAUTHENTICATED;
      case tn.INVALID_ARGUMENT:
        return R.INVALID_ARGUMENT;
      case tn.NOT_FOUND:
        return R.NOT_FOUND;
      case tn.ALREADY_EXISTS:
        return R.ALREADY_EXISTS;
      case tn.PERMISSION_DENIED:
        return R.PERMISSION_DENIED;
      case tn.FAILED_PRECONDITION:
        return R.FAILED_PRECONDITION;
      case tn.ABORTED:
        return R.ABORTED;
      case tn.OUT_OF_RANGE:
        return R.OUT_OF_RANGE;
      case tn.UNIMPLEMENTED:
        return R.UNIMPLEMENTED;
      case tn.DATA_LOSS:
        return R.DATA_LOSS;
      default:
        return S();
    }
  }
  (en = tn || (tn = {}))[en.OK = 0] = "OK", en[en.CANCELLED = 1] = "CANCELLED", en[en.UNKNOWN = 2] = "UNKNOWN", en[en.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", en[en.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", en[en.NOT_FOUND = 5] = "NOT_FOUND", en[en.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", en[en.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", en[en.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", en[en.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", en[en.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", en[en.ABORTED = 10] = "ABORTED", en[en.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", en[en.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", en[en.INTERNAL = 13] = "INTERNAL", en[en.UNAVAILABLE = 14] = "UNAVAILABLE", en[en.DATA_LOSS = 15] = "DATA_LOSS";
  var an = function() {
    function t2(t3, e) {
      this.J = t3, this.root = e || fn.EMPTY;
    }
    return t2.prototype.Ht = function(e, n2) {
      return new t2(this.J, this.root.Ht(e, n2, this.J).copy(null, null, fn.Jt, null, null));
    }, t2.prototype.remove = function(e) {
      return new t2(this.J, this.root.remove(e, this.J).copy(null, null, fn.Jt, null, null));
    }, t2.prototype.get = function(t3) {
      for (var e = this.root; !e.nt(); ) {
        var n2 = this.J(t3, e.key);
        if (0 === n2)
          return e.value;
        n2 < 0 ? e = e.left : n2 > 0 && (e = e.right);
      }
      return null;
    }, t2.prototype.indexOf = function(t3) {
      for (var e = 0, n2 = this.root; !n2.nt(); ) {
        var r2 = this.J(t3, n2.key);
        if (0 === r2)
          return e + n2.left.size;
        r2 < 0 ? n2 = n2.left : (e += n2.left.size + 1, n2 = n2.right);
      }
      return -1;
    }, t2.prototype.nt = function() {
      return this.root.nt();
    }, Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.root.size;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.Yt = function() {
      return this.root.Yt();
    }, t2.prototype.Xt = function() {
      return this.root.Xt();
    }, t2.prototype.Zt = function(t3) {
      return this.root.Zt(t3);
    }, t2.prototype.forEach = function(t3) {
      this.Zt(function(e, n2) {
        return t3(e, n2), false;
      });
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.Zt(function(e, n2) {
        return t3.push(e + ":" + n2), false;
      }), "{" + t3.join(", ") + "}";
    }, t2.prototype.te = function(t3) {
      return this.root.te(t3);
    }, t2.prototype.ee = function() {
      return new cn(this.root, null, this.J, false);
    }, t2.prototype.ne = function(t3) {
      return new cn(this.root, t3, this.J, false);
    }, t2.prototype.se = function() {
      return new cn(this.root, null, this.J, true);
    }, t2.prototype.ie = function(t3) {
      return new cn(this.root, t3, this.J, true);
    }, t2;
  }();
  var cn = function() {
    function t2(t3, e, n2, r2) {
      this.re = r2, this.oe = [];
      for (var i2 = 1; !t3.nt(); )
        if (i2 = e ? n2(t3.key, e) : 1, r2 && (i2 *= -1), i2 < 0)
          t3 = this.re ? t3.left : t3.right;
        else {
          if (0 === i2) {
            this.oe.push(t3);
            break;
          }
          this.oe.push(t3), t3 = this.re ? t3.right : t3.left;
        }
    }
    return t2.prototype.ce = function() {
      var t3 = this.oe.pop(), e = {
        key: t3.key,
        value: t3.value
      };
      if (this.re)
        for (t3 = t3.left; !t3.nt(); )
          this.oe.push(t3), t3 = t3.right;
      else
        for (t3 = t3.right; !t3.nt(); )
          this.oe.push(t3), t3 = t3.left;
      return e;
    }, t2.prototype.ae = function() {
      return this.oe.length > 0;
    }, t2.prototype.ue = function() {
      if (0 === this.oe.length)
        return null;
      var t3 = this.oe[this.oe.length - 1];
      return {
        key: t3.key,
        value: t3.value
      };
    }, t2;
  }();
  var fn = function() {
    function t2(e, n2, r2, i2, o) {
      this.key = e, this.value = n2, this.color = null != r2 ? r2 : t2.RED, this.left = null != i2 ? i2 : t2.EMPTY, this.right = null != o ? o : t2.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    return t2.prototype.copy = function(e, n2, r2, i2, o) {
      return new t2(null != e ? e : this.key, null != n2 ? n2 : this.value, null != r2 ? r2 : this.color, null != i2 ? i2 : this.left, null != o ? o : this.right);
    }, t2.prototype.nt = function() {
      return false;
    }, t2.prototype.Zt = function(t3) {
      return this.left.Zt(t3) || t3(this.key, this.value) || this.right.Zt(t3);
    }, t2.prototype.te = function(t3) {
      return this.right.te(t3) || t3(this.key, this.value) || this.left.te(t3);
    }, t2.prototype.min = function() {
      return this.left.nt() ? this : this.left.min();
    }, t2.prototype.Yt = function() {
      return this.min().key;
    }, t2.prototype.Xt = function() {
      return this.right.nt() ? this.key : this.right.Xt();
    }, t2.prototype.Ht = function(t3, e, n2) {
      var r2 = this, i2 = n2(t3, r2.key);
      return (r2 = i2 < 0 ? r2.copy(null, null, null, r2.left.Ht(t3, e, n2), null) : 0 === i2 ? r2.copy(null, e, null, null, null) : r2.copy(null, null, null, null, r2.right.Ht(t3, e, n2))).he();
    }, t2.prototype.le = function() {
      if (this.left.nt())
        return t2.EMPTY;
      var e = this;
      return e.left._e() || e.left.left._e() || (e = e.fe()), (e = e.copy(null, null, null, e.left.le(), null)).he();
    }, t2.prototype.remove = function(e, n2) {
      var r2, i2 = this;
      if (n2(e, i2.key) < 0)
        i2.left.nt() || i2.left._e() || i2.left.left._e() || (i2 = i2.fe()), i2 = i2.copy(null, null, null, i2.left.remove(e, n2), null);
      else {
        if (i2.left._e() && (i2 = i2.de()), i2.right.nt() || i2.right._e() || i2.right.left._e() || (i2 = i2.we()), 0 === n2(e, i2.key)) {
          if (i2.right.nt())
            return t2.EMPTY;
          r2 = i2.right.min(), i2 = i2.copy(r2.key, r2.value, null, null, i2.right.le());
        }
        i2 = i2.copy(null, null, null, null, i2.right.remove(e, n2));
      }
      return i2.he();
    }, t2.prototype._e = function() {
      return this.color;
    }, t2.prototype.he = function() {
      var t3 = this;
      return t3.right._e() && !t3.left._e() && (t3 = t3.Ee()), t3.left._e() && t3.left.left._e() && (t3 = t3.de()), t3.left._e() && t3.right._e() && (t3 = t3.Te()), t3;
    }, t2.prototype.fe = function() {
      var t3 = this.Te();
      return t3.right.left._e() && (t3 = (t3 = (t3 = t3.copy(null, null, null, null, t3.right.de())).Ee()).Te()), t3;
    }, t2.prototype.we = function() {
      var t3 = this.Te();
      return t3.left.left._e() && (t3 = (t3 = t3.de()).Te()), t3;
    }, t2.prototype.Ee = function() {
      var e = this.copy(null, null, t2.RED, null, this.right.left);
      return this.right.copy(null, null, this.color, e, null);
    }, t2.prototype.de = function() {
      var e = this.copy(null, null, t2.RED, this.left.right, null);
      return this.left.copy(null, null, this.color, null, e);
    }, t2.prototype.Te = function() {
      var t3 = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
      return this.copy(null, null, !this.color, t3, e);
    }, t2.prototype.Ie = function() {
      var t3 = this.me();
      return Math.pow(2, t3) <= this.size + 1;
    }, t2.prototype.me = function() {
      if (this._e() && this.left._e())
        throw S();
      if (this.right._e())
        throw S();
      var t3 = this.left.me();
      if (t3 !== this.right.me())
        throw S();
      return t3 + (this._e() ? 0 : 1);
    }, t2;
  }();
  fn.EMPTY = null, fn.RED = true, fn.Jt = false, fn.EMPTY = new (function() {
    function t2() {
      this.size = 0;
    }
    return Object.defineProperty(t2.prototype, "key", {
      get: function() {
        throw S();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "value", {
      get: function() {
        throw S();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "color", {
      get: function() {
        throw S();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "left", {
      get: function() {
        throw S();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "right", {
      get: function() {
        throw S();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.copy = function(t3, e, n2, r2, i2) {
      return this;
    }, t2.prototype.Ht = function(t3, e, n2) {
      return new fn(t3, e);
    }, t2.prototype.remove = function(t3, e) {
      return this;
    }, t2.prototype.nt = function() {
      return true;
    }, t2.prototype.Zt = function(t3) {
      return false;
    }, t2.prototype.te = function(t3) {
      return false;
    }, t2.prototype.Yt = function() {
      return null;
    }, t2.prototype.Xt = function() {
      return null;
    }, t2.prototype._e = function() {
      return false;
    }, t2.prototype.Ie = function() {
      return true;
    }, t2.prototype.me = function() {
      return 0;
    }, t2;
  }())();
  var hn = function() {
    function t2(t3) {
      this.J = t3, this.data = new an(this.J);
    }
    return t2.prototype.has = function(t3) {
      return null !== this.data.get(t3);
    }, t2.prototype.first = function() {
      return this.data.Yt();
    }, t2.prototype.last = function() {
      return this.data.Xt();
    }, Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.data.size;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.indexOf = function(t3) {
      return this.data.indexOf(t3);
    }, t2.prototype.forEach = function(t3) {
      this.data.Zt(function(e, n2) {
        return t3(e), false;
      });
    }, t2.prototype.Ae = function(t3, e) {
      for (var n2 = this.data.ne(t3[0]); n2.ae(); ) {
        var r2 = n2.ce();
        if (this.J(r2.key, t3[1]) >= 0)
          return;
        e(r2.key);
      }
    }, t2.prototype.Re = function(t3, e) {
      var n2;
      for (n2 = void 0 !== e ? this.data.ne(e) : this.data.ee(); n2.ae(); )
        if (!t3(n2.ce().key))
          return;
    }, t2.prototype.Pe = function(t3) {
      var e = this.data.ne(t3);
      return e.ae() ? e.ce().key : null;
    }, t2.prototype.ee = function() {
      return new ln(this.data.ee());
    }, t2.prototype.ne = function(t3) {
      return new ln(this.data.ne(t3));
    }, t2.prototype.add = function(t3) {
      return this.copy(this.data.remove(t3).Ht(t3, true));
    }, t2.prototype.delete = function(t3) {
      return this.has(t3) ? this.copy(this.data.remove(t3)) : this;
    }, t2.prototype.nt = function() {
      return this.data.nt();
    }, t2.prototype.ye = function(t3) {
      var e = this;
      return e.size < t3.size && (e = t3, t3 = this), t3.forEach(function(t4) {
        e = e.add(t4);
      }), e;
    }, t2.prototype.isEqual = function(e) {
      if (!(e instanceof t2))
        return false;
      if (this.size !== e.size)
        return false;
      for (var n2 = this.data.ee(), r2 = e.data.ee(); n2.ae(); ) {
        var i2 = n2.ce().key, o = r2.ce().key;
        if (0 !== this.J(i2, o))
          return false;
      }
      return true;
    }, t2.prototype.rt = function() {
      var t3 = [];
      return this.forEach(function(e) {
        t3.push(e);
      }), t3;
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.forEach(function(e) {
        return t3.push(e);
      }), "SortedSet(" + t3.toString() + ")";
    }, t2.prototype.copy = function(e) {
      var n2 = new t2(this.J);
      return n2.data = e, n2;
    }, t2;
  }();
  var ln = function() {
    function t2(t3) {
      this.ge = t3;
    }
    return t2.prototype.ce = function() {
      return this.ge.ce().key;
    }, t2.prototype.ae = function() {
      return this.ge.ae();
    }, t2;
  }();
  var pn = new an(it.J);
  function dn() {
    return pn;
  }
  function vn() {
    return dn();
  }
  var yn = new an(it.J);
  function mn() {
    return yn;
  }
  var gn = new an(it.J);
  function wn() {
    return gn;
  }
  var bn = new hn(it.J);
  function _n() {
    for (var t2 = [], e = 0; e < arguments.length; e++)
      t2[e] = arguments[e];
    for (var n2 = bn, r2 = 0, i2 = t2; r2 < i2.length; r2++) {
      var o = i2[r2];
      n2 = n2.add(o);
    }
    return n2;
  }
  var In = new hn(P2);
  function En() {
    return In;
  }
  var Tn = function() {
    function t2(t3) {
      this.J = t3 ? function(e, n2) {
        return t3(e, n2) || it.J(e.key, n2.key);
      } : function(t4, e) {
        return it.J(t4.key, e.key);
      }, this.Ve = mn(), this.pe = new an(this.J);
    }
    return t2.be = function(e) {
      return new t2(e.J);
    }, t2.prototype.has = function(t3) {
      return null != this.Ve.get(t3);
    }, t2.prototype.get = function(t3) {
      return this.Ve.get(t3);
    }, t2.prototype.first = function() {
      return this.pe.Yt();
    }, t2.prototype.last = function() {
      return this.pe.Xt();
    }, t2.prototype.nt = function() {
      return this.pe.nt();
    }, t2.prototype.indexOf = function(t3) {
      var e = this.Ve.get(t3);
      return e ? this.pe.indexOf(e) : -1;
    }, Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.pe.size;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.forEach = function(t3) {
      this.pe.Zt(function(e, n2) {
        return t3(e), false;
      });
    }, t2.prototype.add = function(t3) {
      var e = this.delete(t3.key);
      return e.copy(e.Ve.Ht(t3.key, t3), e.pe.Ht(t3, null));
    }, t2.prototype.delete = function(t3) {
      var e = this.get(t3);
      return e ? this.copy(this.Ve.remove(t3), this.pe.remove(e)) : this;
    }, t2.prototype.isEqual = function(e) {
      if (!(e instanceof t2))
        return false;
      if (this.size !== e.size)
        return false;
      for (var n2 = this.pe.ee(), r2 = e.pe.ee(); n2.ae(); ) {
        var i2 = n2.ce().key, o = r2.ce().key;
        if (!i2.isEqual(o))
          return false;
      }
      return true;
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.forEach(function(e) {
        t3.push(e.toString());
      }), 0 === t3.length ? "DocumentSet ()" : "DocumentSet (\n  " + t3.join("  \n") + "\n)";
    }, t2.prototype.copy = function(e, n2) {
      var r2 = new t2();
      return r2.J = this.J, r2.Ve = e, r2.pe = n2, r2;
    }, t2;
  }();
  var Nn = function() {
    function t2() {
      this.ve = new an(it.J);
    }
    return t2.prototype.track = function(t3) {
      var e = t3.doc.key, n2 = this.ve.get(e);
      n2 ? 0 !== t3.type && 3 === n2.type ? this.ve = this.ve.Ht(e, t3) : 3 === t3.type && 1 !== n2.type ? this.ve = this.ve.Ht(e, {
        type: n2.type,
        doc: t3.doc
      }) : 2 === t3.type && 2 === n2.type ? this.ve = this.ve.Ht(e, {
        type: 2,
        doc: t3.doc
      }) : 2 === t3.type && 0 === n2.type ? this.ve = this.ve.Ht(e, {
        type: 0,
        doc: t3.doc
      }) : 1 === t3.type && 0 === n2.type ? this.ve = this.ve.remove(e) : 1 === t3.type && 2 === n2.type ? this.ve = this.ve.Ht(e, {
        type: 1,
        doc: n2.doc
      }) : 0 === t3.type && 1 === n2.type ? this.ve = this.ve.Ht(e, {
        type: 2,
        doc: t3.doc
      }) : S() : this.ve = this.ve.Ht(e, t3);
    }, t2.prototype.Se = function() {
      var t3 = [];
      return this.ve.Zt(function(e, n2) {
        t3.push(n2);
      }), t3;
    }, t2;
  }();
  var An = function() {
    function t2(t3, e, n2, r2, i2, o, u, s) {
      this.query = t3, this.docs = e, this.De = n2, this.docChanges = r2, this.Ce = i2, this.fromCache = o, this.xe = u, this.Ne = s;
    }
    return t2.Fe = function(e, n2, r2, i2) {
      var o = [];
      return n2.forEach(function(t3) {
        o.push({
          type: 0,
          doc: t3
        });
      }), new t2(e, n2, Tn.be(n2), o, r2, i2, true, false);
    }, Object.defineProperty(t2.prototype, "hasPendingWrites", {
      get: function() {
        return !this.Ce.nt();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(t3) {
      if (!(this.fromCache === t3.fromCache && this.xe === t3.xe && this.Ce.isEqual(t3.Ce) && ye(this.query, t3.query) && this.docs.isEqual(t3.docs) && this.De.isEqual(t3.De)))
        return false;
      var e = this.docChanges, n2 = t3.docChanges;
      if (e.length !== n2.length)
        return false;
      for (var r2 = 0; r2 < e.length; r2++)
        if (e[r2].type !== n2[r2].type || !e[r2].doc.isEqual(n2[r2].doc))
          return false;
      return true;
    }, t2;
  }();
  var Sn = function() {
    function t2(t3, e, n2, r2, i2) {
      this.Mt = t3, this.Oe = e, this.ke = n2, this.Me = r2, this.Le = i2;
    }
    return t2.$e = function(e, n2) {
      var r2 = new Map();
      return r2.set(e, Dn.Be(e, n2)), new t2(Z.min(), r2, En(), dn(), _n());
    }, t2;
  }();
  var Dn = function() {
    function t2(t3, e, n2, r2, i2) {
      this.resumeToken = t3, this.qe = e, this.Ue = n2, this.Qe = r2, this.Ke = i2;
    }
    return t2.Be = function(e, n2) {
      return new t2(V.h, n2, _n(), _n(), _n());
    }, t2;
  }();
  var xn = function(t2, e, n2, r2) {
    this.We = t2, this.removedTargetIds = e, this.key = n2, this.je = r2;
  };
  var kn = function(t2, e) {
    this.targetId = t2, this.Ge = e;
  };
  var On = function(t2, e, n2, r2) {
    void 0 === n2 && (n2 = V.h), void 0 === r2 && (r2 = null), this.state = t2, this.targetIds = e, this.resumeToken = n2, this.cause = r2;
  };
  var Pn = function() {
    function t2() {
      this.ze = 0, this.He = Vn(), this.Je = V.h, this.Ye = false, this.Xe = true;
    }
    return Object.defineProperty(t2.prototype, "qe", {
      get: function() {
        return this.Ye;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "resumeToken", {
      get: function() {
        return this.Je;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "Ze", {
      get: function() {
        return 0 !== this.ze;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "tn", {
      get: function() {
        return this.Xe;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.en = function(t3) {
      t3.o() > 0 && (this.Xe = true, this.Je = t3);
    }, t2.prototype.nn = function() {
      var t3 = _n(), e = _n(), n2 = _n();
      return this.He.forEach(function(r2, i2) {
        switch (i2) {
          case 0:
            t3 = t3.add(r2);
            break;
          case 2:
            e = e.add(r2);
            break;
          case 1:
            n2 = n2.add(r2);
            break;
          default:
            S();
        }
      }), new Dn(this.Je, this.Ye, t3, e, n2);
    }, t2.prototype.sn = function() {
      this.Xe = false, this.He = Vn();
    }, t2.prototype.rn = function(t3, e) {
      this.Xe = true, this.He = this.He.Ht(t3, e);
    }, t2.prototype.on = function(t3) {
      this.Xe = true, this.He = this.He.remove(t3);
    }, t2.prototype.cn = function() {
      this.ze += 1;
    }, t2.prototype.an = function() {
      this.ze -= 1;
    }, t2.prototype.un = function() {
      this.Xe = true, this.Ye = true;
    }, t2;
  }();
  var Ln = function() {
    function t2(t3) {
      this.hn = t3, this.ln = new Map(), this._n = dn(), this.fn = Cn(), this.dn = new hn(P2);
    }
    return t2.prototype.wn = function(t3) {
      for (var e = 0, n2 = t3.We; e < n2.length; e++) {
        var r2 = n2[e];
        t3.je instanceof Rt ? this.En(r2, t3.je) : t3.je instanceof Ut && this.Tn(r2, t3.key, t3.je);
      }
      for (var i2 = 0, o = t3.removedTargetIds; i2 < o.length; i2++) {
        r2 = o[i2];
        this.Tn(r2, t3.key, t3.je);
      }
    }, t2.prototype.In = function(t3) {
      var e = this;
      this.mn(t3, function(n2) {
        var r2 = e.An(n2);
        switch (t3.state) {
          case 0:
            e.Rn(n2) && r2.en(t3.resumeToken);
            break;
          case 1:
            r2.an(), r2.Ze || r2.sn(), r2.en(t3.resumeToken);
            break;
          case 2:
            r2.an(), r2.Ze || e.removeTarget(n2);
            break;
          case 3:
            e.Rn(n2) && (r2.un(), r2.en(t3.resumeToken));
            break;
          case 4:
            e.Rn(n2) && (e.Pn(n2), r2.en(t3.resumeToken));
            break;
          default:
            S();
        }
      });
    }, t2.prototype.mn = function(t3, e) {
      var n2 = this;
      t3.targetIds.length > 0 ? t3.targetIds.forEach(e) : this.ln.forEach(function(t4, r2) {
        n2.Rn(r2) && e(r2);
      });
    }, t2.prototype.yn = function(t3) {
      var e = t3.targetId, n2 = t3.Ge.count, r2 = this.gn(e);
      if (r2) {
        var i2 = r2.target;
        if (Gt(i2))
          if (0 === n2) {
            var o = new it(i2.path);
            this.Tn(e, o, new Ut(o, Z.min()));
          } else
            D(1 === n2);
        else
          this.Vn(e) !== n2 && (this.Pn(e), this.dn = this.dn.add(e));
      }
    }, t2.prototype.pn = function(t3) {
      var e = this, n2 = new Map();
      this.ln.forEach(function(r3, i3) {
        var o = e.gn(i3);
        if (o) {
          if (r3.qe && Gt(o.target)) {
            var u = new it(o.target.path);
            null !== e._n.get(u) || e.bn(i3, u) || e.Tn(i3, u, new Ut(u, t3));
          }
          r3.tn && (n2.set(i3, r3.nn()), r3.sn());
        }
      });
      var r2 = _n();
      this.fn.forEach(function(t4, n3) {
        var i3 = true;
        n3.Re(function(t5) {
          var n4 = e.gn(t5);
          return !n4 || 2 === n4.kt || (i3 = false, false);
        }), i3 && (r2 = r2.add(t4));
      });
      var i2 = new Sn(t3, n2, this.dn, this._n, r2);
      return this._n = dn(), this.fn = Cn(), this.dn = new hn(P2), i2;
    }, t2.prototype.En = function(t3, e) {
      if (this.Rn(t3)) {
        var n2 = this.bn(t3, e.key) ? 2 : 0;
        this.An(t3).rn(e.key, n2), this._n = this._n.Ht(e.key, e), this.fn = this.fn.Ht(e.key, this.vn(e.key).add(t3));
      }
    }, t2.prototype.Tn = function(t3, e, n2) {
      if (this.Rn(t3)) {
        var r2 = this.An(t3);
        this.bn(t3, e) ? r2.rn(e, 1) : r2.on(e), this.fn = this.fn.Ht(e, this.vn(e).delete(t3)), n2 && (this._n = this._n.Ht(e, n2));
      }
    }, t2.prototype.removeTarget = function(t3) {
      this.ln.delete(t3);
    }, t2.prototype.Vn = function(t3) {
      var e = this.An(t3).nn();
      return this.hn.Sn(t3).size + e.Ue.size - e.Ke.size;
    }, t2.prototype.cn = function(t3) {
      this.An(t3).cn();
    }, t2.prototype.An = function(t3) {
      var e = this.ln.get(t3);
      return e || (e = new Pn(), this.ln.set(t3, e)), e;
    }, t2.prototype.vn = function(t3) {
      var e = this.fn.get(t3);
      return e || (e = new hn(P2), this.fn = this.fn.Ht(t3, e)), e;
    }, t2.prototype.Rn = function(t3) {
      var e = null !== this.gn(t3);
      return e || E("WatchChangeAggregator", "Detected inactive target", t3), e;
    }, t2.prototype.gn = function(t3) {
      var e = this.ln.get(t3);
      return e && e.Ze ? null : this.hn.Dn(t3);
    }, t2.prototype.Pn = function(t3) {
      var e = this;
      this.ln.set(t3, new Pn()), this.hn.Sn(t3).forEach(function(n2) {
        e.Tn(t3, n2, null);
      });
    }, t2.prototype.bn = function(t3, e) {
      return this.hn.Sn(t3).has(e);
    }, t2;
  }();
  function Cn() {
    return new an(it.J);
  }
  function Vn() {
    return new an(it.J);
  }
  var Rn = {
    asc: "ASCENDING",
    desc: "DESCENDING"
  };
  var Un = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    in: "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
  };
  var Mn = function(t2, e) {
    this.T = t2, this.qt = e;
  };
  function qn(t2, e) {
    return t2.qt ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
      seconds: "" + e.seconds,
      nanos: e.nanoseconds
    };
  }
  function Fn(t2, e) {
    return t2.qt ? e.toBase64() : e.toUint8Array();
  }
  function jn(t2, e) {
    return qn(t2, e.G());
  }
  function zn(t2) {
    return D(!!t2), Z.W(function(t3) {
      var e = ft(t3);
      return new $(e.seconds, e.nanos);
    }(t2));
  }
  function Gn(t2, e) {
    return function(t3) {
      return new et(["projects", t3.projectId, "databases", t3.database]);
    }(t2).child("documents").child(e).ot();
  }
  function Bn(t2) {
    var e = et.ct(t2);
    return D(dr(e)), e;
  }
  function Kn(t2, e) {
    return Gn(t2.T, e.path);
  }
  function Hn(t2, e) {
    var n2 = Bn(e);
    if (n2.get(1) !== t2.T.projectId)
      throw new U(R.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n2.get(1) + " vs " + t2.T.projectId);
    if (n2.get(3) !== t2.T.database)
      throw new U(R.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n2.get(3) + " vs " + t2.T.database);
    return new it(Yn(n2));
  }
  function Jn(t2, e) {
    return Gn(t2.T, e);
  }
  function Wn(t2) {
    var e = Bn(t2);
    return 4 === e.length ? et.at() : Yn(e);
  }
  function Qn(t2) {
    return new et(["projects", t2.T.projectId, "databases", t2.T.database]).ot();
  }
  function Yn(t2) {
    return D(t2.length > 4 && "documents" === t2.get(4)), t2.X(5);
  }
  function Xn(t2, e, n2) {
    return {
      name: Kn(t2, e),
      fields: n2.proto.mapValue.fields
    };
  }
  function $n(t2, e, n2) {
    var r2 = Hn(t2, e.name), i2 = zn(e.updateTime), o = new Pt({
      mapValue: {
        fields: e.fields
      }
    });
    return new Rt(r2, i2, o, {
      hasCommittedMutations: !!n2
    });
  }
  function Zn(t2, e) {
    var n2;
    if (e instanceof We)
      n2 = {
        update: Xn(t2, e.key, e.value)
      };
    else if (e instanceof nn)
      n2 = {
        delete: Kn(t2, e.key)
      };
    else if (e instanceof Qe)
      n2 = {
        update: Xn(t2, e.key, e.data),
        updateMask: pr(e.zt)
      };
    else {
      if (!(e instanceof rn))
        return S();
      n2 = {
        verify: Kn(t2, e.key)
      };
    }
    return e.fieldTransforms.length > 0 && (n2.updateTransforms = e.fieldTransforms.map(function(t3) {
      return function(t4, e2) {
        var n3 = e2.transform;
        if (n3 instanceof ke)
          return {
            fieldPath: e2.field.ot(),
            setToServerValue: "REQUEST_TIME"
          };
        if (n3 instanceof Oe)
          return {
            fieldPath: e2.field.ot(),
            appendMissingElements: {
              values: n3.elements
            }
          };
        if (n3 instanceof Le)
          return {
            fieldPath: e2.field.ot(),
            removeAllFromArray: {
              values: n3.elements
            }
          };
        if (n3 instanceof Ve)
          return {
            fieldPath: e2.field.ot(),
            increment: n3.Qt
          };
        throw S();
      }(0, t3);
    })), e.Gt.jt || (n2.currentDocument = function(t3, e2) {
      return void 0 !== e2.updateTime ? {
        updateTime: jn(t3, e2.updateTime)
      } : void 0 !== e2.exists ? {
        exists: e2.exists
      } : S();
    }(t2, e.Gt)), n2;
  }
  function tr(t2, e) {
    var n2 = e.currentDocument ? function(t3) {
      return void 0 !== t3.updateTime ? Fe.updateTime(zn(t3.updateTime)) : void 0 !== t3.exists ? Fe.exists(t3.exists) : Fe.Wt();
    }(e.currentDocument) : Fe.Wt(), r2 = e.updateTransforms ? e.updateTransforms.map(function(e2) {
      return function(t3, e3) {
        var n3 = null;
        if ("setToServerValue" in e3)
          D("REQUEST_TIME" === e3.setToServerValue), n3 = new ke();
        else if ("appendMissingElements" in e3) {
          var r3 = e3.appendMissingElements.values || [];
          n3 = new Oe(r3);
        } else if ("removeAllFromArray" in e3) {
          var i3 = e3.removeAllFromArray.values || [];
          n3 = new Le(i3);
        } else
          "increment" in e3 ? n3 = new Ve(t3, e3.increment) : S();
        var o2 = rt._t(e3.fieldPath);
        return new Me(o2, n3);
      }(t2, e2);
    }) : [];
    if (e.update) {
      e.update.name;
      var i2 = Hn(t2, e.update.name), o = new Pt({
        mapValue: {
          fields: e.update.fields
        }
      });
      if (e.updateMask) {
        var u = function(t3) {
          var e2 = t3.fieldPaths || [];
          return new at(e2.map(function(t4) {
            return rt._t(t4);
          }));
        }(e.updateMask);
        return new Qe(i2, o, u, n2, r2);
      }
      return new We(i2, o, n2, r2);
    }
    if (e.delete) {
      var s = Hn(t2, e.delete);
      return new nn(s, n2);
    }
    if (e.verify) {
      var a = Hn(t2, e.verify);
      return new rn(a, n2);
    }
    return S();
  }
  function er(t2, e) {
    return {
      documents: [Jn(t2, e.path)]
    };
  }
  function nr(t2, e) {
    var n2 = {
      structuredQuery: {}
    }, r2 = e.path;
    null !== e.collectionGroup ? (n2.parent = Jn(t2, r2), n2.structuredQuery.from = [{
      collectionId: e.collectionGroup,
      allDescendants: true
    }]) : (n2.parent = Jn(t2, r2.Z()), n2.structuredQuery.from = [{
      collectionId: r2.et()
    }]);
    var i2 = function(t3) {
      if (0 !== t3.length) {
        var e2 = t3.map(function(t4) {
          return function(t5) {
            if ("==" === t5.op) {
              if (kt(t5.value))
                return {
                  unaryFilter: {
                    field: cr(t5.field),
                    op: "IS_NAN"
                  }
                };
              if (xt(t5.value))
                return {
                  unaryFilter: {
                    field: cr(t5.field),
                    op: "IS_NULL"
                  }
                };
            } else if ("!=" === t5.op) {
              if (kt(t5.value))
                return {
                  unaryFilter: {
                    field: cr(t5.field),
                    op: "IS_NOT_NAN"
                  }
                };
              if (xt(t5.value))
                return {
                  unaryFilter: {
                    field: cr(t5.field),
                    op: "IS_NOT_NULL"
                  }
                };
            }
            return {
              fieldFilter: {
                field: cr(t5.field),
                op: ar(t5.op),
                value: t5.value
              }
            };
          }(t4);
        });
        return 1 === e2.length ? e2[0] : {
          compositeFilter: {
            op: "AND",
            filters: e2
          }
        };
      }
    }(e.filters);
    i2 && (n2.structuredQuery.where = i2);
    var o = function(t3) {
      if (0 !== t3.length)
        return t3.map(function(t4) {
          return function(t5) {
            return {
              field: cr(t5.field),
              direction: sr(t5.dir)
            };
          }(t4);
        });
    }(e.orderBy);
    o && (n2.structuredQuery.orderBy = o);
    var u = function(t3, e2) {
      return t3.qt || yt(e2) ? e2 : {
        value: e2
      };
    }(t2, e.limit);
    return null !== u && (n2.structuredQuery.limit = u), e.startAt && (n2.structuredQuery.startAt = or(e.startAt)), e.endAt && (n2.structuredQuery.endAt = or(e.endAt)), n2;
  }
  function rr(t2) {
    var e = Wn(t2.parent), n2 = t2.structuredQuery, r2 = n2.from ? n2.from.length : 0, i2 = null;
    if (r2 > 0) {
      D(1 === r2);
      var o = n2.from[0];
      o.allDescendants ? i2 = o.collectionId : e = e.child(o.collectionId);
    }
    var u = [];
    n2.where && (u = ir(n2.where));
    var s = [];
    n2.orderBy && (s = n2.orderBy.map(function(t3) {
      return function(t4) {
        return new ee(fr(t4.field), function(t5) {
          switch (t5) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(t4.direction));
      }(t3);
    }));
    var a = null;
    n2.limit && (a = function(t3) {
      var e2;
      return yt(e2 = "object" == typeof t3 ? t3.value : t3) ? null : e2;
    }(n2.limit));
    var c = null;
    n2.startAt && (c = ur(n2.startAt));
    var f = null;
    return n2.endAt && (f = ur(n2.endAt)), ue(e, i2, s, u, a, "F", c, f);
  }
  function ir(t2) {
    return t2 ? void 0 !== t2.unaryFilter ? [lr(t2)] : void 0 !== t2.fieldFilter ? [hr(t2)] : void 0 !== t2.compositeFilter ? t2.compositeFilter.filters.map(function(t3) {
      return ir(t3);
    }).reduce(function(t3, e) {
      return t3.concat(e);
    }) : S() : [];
  }
  function or(t2) {
    return {
      before: t2.before,
      values: t2.position
    };
  }
  function ur(t2) {
    var e = !!t2.before, n2 = t2.values || [];
    return new Zt(n2, e);
  }
  function sr(t2) {
    return Rn[t2];
  }
  function ar(t2) {
    return Un[t2];
  }
  function cr(t2) {
    return {
      fieldPath: t2.ot()
    };
  }
  function fr(t2) {
    return rt._t(t2.fieldPath);
  }
  function hr(t2) {
    return Bt.create(fr(t2.fieldFilter.field), function(t3) {
      switch (t3) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        case "OPERATOR_UNSPECIFIED":
        default:
          return S();
      }
    }(t2.fieldFilter.op), t2.fieldFilter.value);
  }
  function lr(t2) {
    switch (t2.unaryFilter.op) {
      case "IS_NAN":
        var e = fr(t2.unaryFilter.field);
        return Bt.create(e, "==", {
          doubleValue: NaN
        });
      case "IS_NULL":
        var n2 = fr(t2.unaryFilter.field);
        return Bt.create(n2, "==", {
          nullValue: "NULL_VALUE"
        });
      case "IS_NOT_NAN":
        var r2 = fr(t2.unaryFilter.field);
        return Bt.create(r2, "!=", {
          doubleValue: NaN
        });
      case "IS_NOT_NULL":
        var i2 = fr(t2.unaryFilter.field);
        return Bt.create(i2, "!=", {
          nullValue: "NULL_VALUE"
        });
      case "OPERATOR_UNSPECIFIED":
      default:
        return S();
    }
  }
  function pr(t2) {
    var e = [];
    return t2.fields.forEach(function(t3) {
      return e.push(t3.ot());
    }), {
      fieldPaths: e
    };
  }
  function dr(t2) {
    return t2.length >= 4 && "projects" === t2.get(0) && "databases" === t2.get(2);
  }
  var vr = function() {
    var t2 = this;
    this.promise = new Promise(function(e, n2) {
      t2.resolve = e, t2.reject = n2;
    });
  };
  var yr = function() {
    function t2(t3) {
      var e = this;
      this.Cn = null, this.xn = null, this.result = void 0, this.error = void 0, this.Nn = false, this.Fn = false, t3(function(t4) {
        e.Nn = true, e.result = t4, e.Cn && e.Cn(t4);
      }, function(t4) {
        e.Nn = true, e.error = t4, e.xn && e.xn(t4);
      });
    }
    return t2.prototype.catch = function(t3) {
      return this.next(void 0, t3);
    }, t2.prototype.next = function(e, n2) {
      var r2 = this;
      return this.Fn && S(), this.Fn = true, this.Nn ? this.error ? this.On(n2, this.error) : this.kn(e, this.result) : new t2(function(t3, i2) {
        r2.Cn = function(n3) {
          r2.kn(e, n3).next(t3, i2);
        }, r2.xn = function(e2) {
          r2.On(n2, e2).next(t3, i2);
        };
      });
    }, t2.prototype.Mn = function() {
      var t3 = this;
      return new Promise(function(e, n2) {
        t3.next(e, n2);
      });
    }, t2.prototype.Ln = function(e) {
      try {
        var n2 = e();
        return n2 instanceof t2 ? n2 : t2.resolve(n2);
      } catch (e2) {
        return t2.reject(e2);
      }
    }, t2.prototype.kn = function(e, n2) {
      return e ? this.Ln(function() {
        return e(n2);
      }) : t2.resolve(n2);
    }, t2.prototype.On = function(e, n2) {
      return e ? this.Ln(function() {
        return e(n2);
      }) : t2.reject(n2);
    }, t2.resolve = function(e) {
      return new t2(function(t3, n2) {
        t3(e);
      });
    }, t2.reject = function(e) {
      return new t2(function(t3, n2) {
        n2(e);
      });
    }, t2.$n = function(e) {
      return new t2(function(t3, n2) {
        var r2 = 0, i2 = 0, o = false;
        e.forEach(function(e2) {
          ++r2, e2.next(function() {
            ++i2, o && i2 === r2 && t3();
          }, function(t4) {
            return n2(t4);
          });
        }), o = true, i2 === r2 && t3();
      });
    }, t2.Bn = function(e) {
      for (var n2 = t2.resolve(false), r2 = function(e2) {
        n2 = n2.next(function(n3) {
          return n3 ? t2.resolve(n3) : e2();
        });
      }, i2 = 0, o = e; i2 < o.length; i2++) {
        r2(o[i2]);
      }
      return n2;
    }, t2.forEach = function(t3, e) {
      var n2 = this, r2 = [];
      return t3.forEach(function(t4, i2) {
        r2.push(e.call(n2, t4, i2));
      }), this.$n(r2);
    }, t2;
  }();
  var mr = function() {
    function t2(t3, e) {
      var n2 = this;
      this.action = t3, this.transaction = e, this.aborted = false, this.qn = new vr(), this.transaction.oncomplete = function() {
        n2.qn.resolve();
      }, this.transaction.onabort = function() {
        e.error ? n2.qn.reject(new br(t3, e.error)) : n2.qn.resolve();
      }, this.transaction.onerror = function(e2) {
        var r2 = Nr(e2.target.error);
        n2.qn.reject(new br(t3, r2));
      };
    }
    return t2.open = function(e, n2, r2, i2) {
      try {
        return new t2(n2, e.transaction(i2, r2));
      } catch (e2) {
        throw new br(n2, e2);
      }
    }, Object.defineProperty(t2.prototype, "Un", {
      get: function() {
        return this.qn.promise;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.abort = function(t3) {
      t3 && this.qn.reject(t3), this.aborted || (E("SimpleDb", "Aborting transaction:", t3 ? t3.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
    }, t2.prototype.store = function(t3) {
      var e = this.transaction.objectStore(t3);
      return new Ir(e);
    }, t2;
  }();
  var gr = function() {
    function t2(e, r2, i2) {
      this.name = e, this.version = r2, this.Qn = i2, 12.2 === t2.Kn(getUA()) && T("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    return t2.delete = function(t3) {
      return E("SimpleDb", "Removing database:", t3), Er(window.indexedDB.deleteDatabase(t3)).Mn();
    }, t2.Wn = function() {
      if ("undefined" == typeof indexedDB)
        return false;
      if (t2.jn())
        return true;
      var e = getUA(), r2 = t2.Kn(e), i2 = 0 < r2 && r2 < 10, o = t2.Gn(e), u = 0 < o && o < 4.5;
      return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || i2 || u);
    }, t2.jn = function() {
      var t3;
      return "undefined" != typeof process && "YES" === (null === (t3 = process.env) || void 0 === t3 ? void 0 : t3.zn);
    }, t2.Hn = function(t3, e) {
      return t3.store(e);
    }, t2.Kn = function(t3) {
      var e = t3.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n2 = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }, t2.Gn = function(t3) {
      var e = t3.match(/Android ([\d.]+)/i), n2 = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }, t2.prototype.Jn = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        var e, n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              return this.db ? [3, 2] : (E("SimpleDb", "Opening database:", this.name), e = this, [4, new Promise(function(e2, r3) {
                var i2 = indexedDB.open(n2.name, n2.version);
                i2.onsuccess = function(t4) {
                  var n3 = t4.target.result;
                  e2(n3);
                }, i2.onblocked = function() {
                  r3(new br(t3, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, i2.onerror = function(e3) {
                  var n3 = e3.target.error;
                  "VersionError" === n3.name ? r3(new U(R.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r3(new br(t3, n3));
                }, i2.onupgradeneeded = function(t4) {
                  E("SimpleDb", 'Database "' + n2.name + '" requires upgrade from version:', t4.oldVersion);
                  var e3 = t4.target.result;
                  n2.Qn.Yn(e3, i2.transaction, t4.oldVersion, n2.version).next(function() {
                    E("SimpleDb", "Database upgrade to version " + n2.version + " complete");
                  });
                };
              })]);
            case 1:
              e.db = r2.sent(), r2.label = 2;
            case 2:
              return [2, (this.Xn && (this.db.onversionchange = function(t4) {
                return n2.Xn(t4);
              }), this.db)];
          }
        });
      });
    }, t2.prototype.Zn = function(t3) {
      this.Xn = t3, this.db && (this.db.onversionchange = function(e) {
        return t3(e);
      });
    }, t2.prototype.runTransaction = function(t3, e, n2, r2) {
      return __awaiter(this, void 0, void 0, function() {
        var i2, o, u, s, a;
        return __generator(this, function(c) {
          switch (c.label) {
            case 0:
              i2 = "readonly" === e, o = 0, u = function() {
                var e2, u2, a2, c2, f;
                return __generator(this, function(h2) {
                  switch (h2.label) {
                    case 0:
                      ++o, h2.label = 1;
                    case 1:
                      return h2.trys.push([1, 4, , 5]), [4, s.Jn(t3)];
                    case 2:
                      return s.db = h2.sent(), e2 = mr.open(s.db, t3, i2 ? "readonly" : "readwrite", n2), u2 = r2(e2).catch(function(t4) {
                        return e2.abort(t4), yr.reject(t4);
                      }).Mn(), a2 = {}, u2.catch(function() {
                      }), [4, e2.Un];
                    case 3:
                      return [2, (a2.value = (h2.sent(), u2), a2)];
                    case 4:
                      return c2 = h2.sent(), f = "FirebaseError" !== c2.name && o < 3, E("SimpleDb", "Transaction failed with error:", c2.message, "Retrying:", f), s.close(), f ? [3, 5] : [2, {
                        value: Promise.reject(c2)
                      }];
                    case 5:
                      return [2];
                  }
                });
              }, s = this, c.label = 1;
            case 1:
              return [5, u()];
            case 2:
              if ("object" == typeof (a = c.sent()))
                return [2, a.value];
              c.label = 3;
            case 3:
              return [3, 1];
            case 4:
              return [2];
          }
        });
      });
    }, t2.prototype.close = function() {
      this.db && this.db.close(), this.db = void 0;
    }, t2;
  }();
  var wr = function() {
    function t2(t3) {
      this.ts = t3, this.es = false, this.ns = null;
    }
    return Object.defineProperty(t2.prototype, "Nn", {
      get: function() {
        return this.es;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "ss", {
      get: function() {
        return this.ns;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "cursor", {
      set: function(t3) {
        this.ts = t3;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.done = function() {
      this.es = true;
    }, t2.prototype.rs = function(t3) {
      this.ns = t3;
    }, t2.prototype.delete = function() {
      return Er(this.ts.delete());
    }, t2;
  }();
  var br = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, R.UNAVAILABLE, "IndexedDB transaction '" + e2 + "' failed: " + n2) || this).name = "IndexedDbTransactionError", r2;
    }
    return __extends(e, t2), e;
  }(U);
  function _r(t2) {
    return "IndexedDbTransactionError" === t2.name;
  }
  var Ir = function() {
    function t2(t3) {
      this.store = t3;
    }
    return t2.prototype.put = function(t3, e) {
      var n2;
      return void 0 !== e ? (E("SimpleDb", "PUT", this.store.name, t3, e), n2 = this.store.put(e, t3)) : (E("SimpleDb", "PUT", this.store.name, "<auto-key>", t3), n2 = this.store.put(t3)), Er(n2);
    }, t2.prototype.add = function(t3) {
      return E("SimpleDb", "ADD", this.store.name, t3, t3), Er(this.store.add(t3));
    }, t2.prototype.get = function(t3) {
      var e = this;
      return Er(this.store.get(t3)).next(function(n2) {
        return void 0 === n2 && (n2 = null), E("SimpleDb", "GET", e.store.name, t3, n2), n2;
      });
    }, t2.prototype.delete = function(t3) {
      return E("SimpleDb", "DELETE", this.store.name, t3), Er(this.store.delete(t3));
    }, t2.prototype.count = function() {
      return E("SimpleDb", "COUNT", this.store.name), Er(this.store.count());
    }, t2.prototype.os = function(t3, e) {
      var n2 = this.cursor(this.options(t3, e)), r2 = [];
      return this.cs(n2, function(t4, e2) {
        r2.push(e2);
      }).next(function() {
        return r2;
      });
    }, t2.prototype.us = function(t3, e) {
      E("SimpleDb", "DELETE ALL", this.store.name);
      var n2 = this.options(t3, e);
      n2.hs = false;
      var r2 = this.cursor(n2);
      return this.cs(r2, function(t4, e2, n3) {
        return n3.delete();
      });
    }, t2.prototype.ls = function(t3, e) {
      var n2;
      e ? n2 = t3 : (n2 = {}, e = t3);
      var r2 = this.cursor(n2);
      return this.cs(r2, e);
    }, t2.prototype._s = function(t3) {
      var e = this.cursor({});
      return new yr(function(n2, r2) {
        e.onerror = function(t4) {
          var e2 = Nr(t4.target.error);
          r2(e2);
        }, e.onsuccess = function(e2) {
          var r3 = e2.target.result;
          r3 ? t3(r3.primaryKey, r3.value).next(function(t4) {
            t4 ? r3.continue() : n2();
          }) : n2();
        };
      });
    }, t2.prototype.cs = function(t3, e) {
      var n2 = [];
      return new yr(function(r2, i2) {
        t3.onerror = function(t4) {
          i2(t4.target.error);
        }, t3.onsuccess = function(t4) {
          var i3 = t4.target.result;
          if (i3) {
            var o = new wr(i3), u = e(i3.primaryKey, i3.value, o);
            if (u instanceof yr) {
              var s = u.catch(function(t5) {
                return o.done(), yr.reject(t5);
              });
              n2.push(s);
            }
            o.Nn ? r2() : null === o.ss ? i3.continue() : i3.continue(o.ss);
          } else
            r2();
        };
      }).next(function() {
        return yr.$n(n2);
      });
    }, t2.prototype.options = function(t3, e) {
      var n2 = void 0;
      return void 0 !== t3 && ("string" == typeof t3 ? n2 = t3 : e = t3), {
        index: n2,
        range: e
      };
    }, t2.prototype.cursor = function(t3) {
      var e = "next";
      if (t3.reverse && (e = "prev"), t3.index) {
        var n2 = this.store.index(t3.index);
        return t3.hs ? n2.openKeyCursor(t3.range, e) : n2.openCursor(t3.range, e);
      }
      return this.store.openCursor(t3.range, e);
    }, t2;
  }();
  function Er(t2) {
    return new yr(function(e, n2) {
      t2.onsuccess = function(t3) {
        var n3 = t3.target.result;
        e(n3);
      }, t2.onerror = function(t3) {
        var e2 = Nr(t3.target.error);
        n2(e2);
      };
    });
  }
  var Tr = false;
  function Nr(t2) {
    var e = gr.Kn(getUA());
    if (e >= 12.2 && e < 13) {
      var r2 = "An internal error was encountered in the Indexed Database server";
      if (t2.message.indexOf(r2) >= 0) {
        var i2 = new U("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + r2 + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        return Tr || (Tr = true, setTimeout(function() {
          throw i2;
        }, 0)), i2;
      }
    }
    return t2;
  }
  var Ar = function() {
    function t2(t3, e, n2, r2, i2) {
      this.fs = t3, this.ds = e, this.ws = n2, this.op = r2, this.Es = i2, this.Ts = new vr(), this.then = this.Ts.promise.then.bind(this.Ts.promise), this.Ts.promise.catch(function(t4) {
      });
    }
    return t2.Is = function(e, n2, r2, i2, o) {
      var u = new t2(e, n2, Date.now() + r2, i2, o);
      return u.start(r2), u;
    }, t2.prototype.start = function(t3) {
      var e = this;
      this.As = setTimeout(function() {
        return e.Rs();
      }, t3);
    }, t2.prototype.Ps = function() {
      return this.Rs();
    }, t2.prototype.cancel = function(t3) {
      null !== this.As && (this.clearTimeout(), this.Ts.reject(new U(R.CANCELLED, "Operation cancelled" + (t3 ? ": " + t3 : ""))));
    }, t2.prototype.Rs = function() {
      var t3 = this;
      this.fs.ys(function() {
        return null !== t3.As ? (t3.clearTimeout(), t3.op().then(function(e) {
          return t3.Ts.resolve(e);
        })) : Promise.resolve();
      });
    }, t2.prototype.clearTimeout = function() {
      null !== this.As && (this.Es(this), clearTimeout(this.As), this.As = null);
    }, t2;
  }();
  function Sr(t2, e) {
    if (T("AsyncQueue", e + ": " + t2), _r(t2))
      return new U(R.UNAVAILABLE, e + ": " + t2);
    throw t2;
  }
  var Dr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
  var xr = function() {
    function t2() {
      this.gs = [];
    }
    return t2.prototype.Vs = function(t3) {
      this.gs.push(t3);
    }, t2.prototype.ps = function() {
      this.gs.forEach(function(t3) {
        return t3();
      });
    }, t2;
  }();
  function kr(t2) {
    for (var e = "", n2 = 0; n2 < t2.length; n2++)
      e.length > 0 && (e = Pr(e)), e = Or(t2.get(n2), e);
    return Pr(e);
  }
  function Or(t2, e) {
    for (var n2 = e, r2 = t2.length, i2 = 0; i2 < r2; i2++) {
      var o = t2.charAt(i2);
      switch (o) {
        case "\0":
          n2 += "";
          break;
        case "":
          n2 += "";
          break;
        default:
          n2 += o;
      }
    }
    return n2;
  }
  function Pr(t2) {
    return t2 + "";
  }
  function Lr(t2) {
    var e = t2.length;
    if (D(e >= 2), 2 === e)
      return D("" === t2.charAt(0) && "" === t2.charAt(1)), et.at();
    for (var n2 = e - 2, r2 = [], i2 = "", o = 0; o < e; ) {
      var u = t2.indexOf("", o);
      switch ((u < 0 || u > n2) && S(), t2.charAt(u + 1)) {
        case "":
          var s = t2.substring(o, u), a = void 0;
          0 === i2.length ? a = s : (a = i2 += s, i2 = ""), r2.push(a);
          break;
        case "":
          i2 += t2.substring(o, u), i2 += "\0";
          break;
        case "":
          i2 += t2.substring(o, u + 1);
          break;
        default:
          S();
      }
      o = u + 2;
    }
    return new et(r2);
  }
  var Cr = function(t2, e) {
    this.seconds = t2, this.nanoseconds = e;
  };
  var Vr = function(t2, e, n2) {
    this.ownerId = t2, this.allowTabSynchronization = e, this.leaseTimestampMs = n2;
  };
  Vr.store = "owner", Vr.key = "owner";
  var Rr = function(t2, e, n2) {
    this.userId = t2, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n2;
  };
  Rr.store = "mutationQueues", Rr.keyPath = "userId";
  var Ur = function(t2, e, n2, r2, i2) {
    this.userId = t2, this.batchId = e, this.localWriteTimeMs = n2, this.baseMutations = r2, this.mutations = i2;
  };
  Ur.store = "mutations", Ur.keyPath = "batchId", Ur.userMutationsIndex = "userMutationsIndex", Ur.userMutationsKeyPath = ["userId", "batchId"];
  var Mr = function() {
    function t2() {
    }
    return t2.prefixForUser = function(t3) {
      return [t3];
    }, t2.prefixForPath = function(t3, e) {
      return [t3, kr(e)];
    }, t2.key = function(t3, e, n2) {
      return [t3, kr(e), n2];
    }, t2;
  }();
  Mr.store = "documentMutations", Mr.PLACEHOLDER = new Mr();
  var qr = function(t2, e) {
    this.path = t2, this.readTime = e;
  };
  var Fr = function(t2, e) {
    this.path = t2, this.version = e;
  };
  var jr = function(t2, e, n2, r2, i2, o) {
    this.unknownDocument = t2, this.noDocument = e, this.document = n2, this.hasCommittedMutations = r2, this.readTime = i2, this.parentPath = o;
  };
  jr.store = "remoteDocuments", jr.readTimeIndex = "readTimeIndex", jr.readTimeIndexPath = "readTime", jr.collectionReadTimeIndex = "collectionReadTimeIndex", jr.collectionReadTimeIndexPath = ["parentPath", "readTime"];
  var zr = function(t2) {
    this.byteSize = t2;
  };
  zr.store = "remoteDocumentGlobal", zr.key = "remoteDocumentGlobalKey";
  var Gr = function(t2, e, n2, r2, i2, o, u) {
    this.targetId = t2, this.canonicalId = e, this.readTime = n2, this.resumeToken = r2, this.lastListenSequenceNumber = i2, this.lastLimboFreeSnapshotVersion = o, this.query = u;
  };
  Gr.store = "targets", Gr.keyPath = "targetId", Gr.queryTargetsIndexName = "queryTargetsIndex", Gr.queryTargetsKeyPath = ["canonicalId", "targetId"];
  var Br = function(t2, e, n2) {
    this.targetId = t2, this.path = e, this.sequenceNumber = n2;
  };
  Br.store = "targetDocuments", Br.keyPath = ["targetId", "path"], Br.documentTargetsIndex = "documentTargetsIndex", Br.documentTargetsKeyPath = ["path", "targetId"];
  var Kr = function(t2, e, n2, r2) {
    this.highestTargetId = t2, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n2, this.targetCount = r2;
  };
  Kr.key = "targetGlobalKey", Kr.store = "targetGlobal";
  var Hr = function(t2, e) {
    this.collectionId = t2, this.parent = e;
  };
  Hr.store = "collectionParents", Hr.keyPath = ["collectionId", "parent"];
  var Jr = function(t2, e, n2, r2) {
    this.clientId = t2, this.updateTimeMs = e, this.networkEnabled = n2, this.inForeground = r2;
  };
  Jr.store = "clientMetadata", Jr.keyPath = "clientId";
  var Wr = function(t2, e, n2) {
    this.bundleId = t2, this.createTime = e, this.version = n2;
  };
  Wr.store = "bundles", Wr.keyPath = "bundleId";
  var Qr = function(t2, e, n2) {
    this.name = t2, this.readTime = e, this.bundledQuery = n2;
  };
  Qr.store = "namedQueries", Qr.keyPath = "name";
  var Yr = __spreadArrays(__spreadArrays(__spreadArrays(__spreadArrays([Rr.store, Ur.store, Mr.store, jr.store, Gr.store, Vr.store, Kr.store, Br.store], [Jr.store]), [zr.store]), [Hr.store]), [Wr.store, Qr.store]);
  var Xr = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).bs = e2, r2.vs = n2, r2;
    }
    return __extends(e, t2), e;
  }(xr);
  function $r(t2, e) {
    var n2 = x(t2);
    return gr.Hn(n2.bs, e);
  }
  var Zr = function() {
    function t2(t3, e, n2, r2) {
      this.batchId = t3, this.Ss = e, this.baseMutations = n2, this.mutations = r2;
    }
    return t2.prototype.Ds = function(t3, e, n2) {
      for (var r2 = n2.Cs, i2 = 0; i2 < this.mutations.length; i2++) {
        var o = this.mutations[i2];
        o.key.isEqual(t3) && (e = Ge(o, e, r2[i2]));
      }
      return e;
    }, t2.prototype.xs = function(t3, e) {
      for (var n2 = 0, r2 = this.baseMutations; n2 < r2.length; n2++) {
        (u = r2[n2]).key.isEqual(t3) && (e = Be(u, e, 0, this.Ss));
      }
      for (var i2 = 0, o = this.mutations; i2 < o.length; i2++) {
        var u;
        (u = o[i2]).key.isEqual(t3) && (e = Be(u, e, 0, this.Ss));
      }
      return e;
    }, t2.prototype.Ns = function(t3) {
      var e = this, n2 = t3;
      return this.mutations.forEach(function(r2) {
        var i2 = e.xs(r2.key, t3.get(r2.key));
        i2 && (n2 = n2.Ht(r2.key, i2));
      }), n2;
    }, t2.prototype.keys = function() {
      return this.mutations.reduce(function(t3, e) {
        return t3.add(e.key);
      }, _n());
    }, t2.prototype.isEqual = function(t3) {
      return this.batchId === t3.batchId && L(this.mutations, t3.mutations, function(t4, e) {
        return He(t4, e);
      }) && L(this.baseMutations, t3.baseMutations, function(t4, e) {
        return He(t4, e);
      });
    }, t2;
  }();
  var ti = function() {
    function t2(t3, e, n2, r2) {
      this.batch = t3, this.Fs = e, this.Cs = n2, this.Os = r2;
    }
    return t2.from = function(e, n2, r2) {
      D(e.mutations.length === r2.length);
      for (var i2 = wn(), o = e.mutations, u = 0; u < o.length; u++)
        i2 = i2.Ht(o[u].key, r2[u].version);
      return new t2(e, n2, r2, i2);
    }, t2;
  }();
  var ei = function(t2) {
    this.ks = t2;
  };
  function ni(t2, e) {
    if (e.document)
      return $n(t2.ks, e.document, !!e.hasCommittedMutations);
    if (e.noDocument) {
      var n2 = it.Tt(e.noDocument.path), r2 = si(e.noDocument.readTime);
      return new Ut(n2, r2, {
        hasCommittedMutations: !!e.hasCommittedMutations
      });
    }
    if (e.unknownDocument) {
      var i2 = it.Tt(e.unknownDocument.path);
      r2 = si(e.unknownDocument.version);
      return new Mt(i2, r2);
    }
    return S();
  }
  function ri(t2, e, n2) {
    var r2 = ii(n2), i2 = e.key.path.Z().rt();
    if (e instanceof Rt) {
      var o = function(t3, e2) {
        return {
          name: Kn(t3, e2.key),
          fields: e2.vt().mapValue.fields,
          updateTime: qn(t3, e2.version.G())
        };
      }(t2.ks, e), u = e.hasCommittedMutations;
      return new jr(null, null, o, u, r2, i2);
    }
    if (e instanceof Ut) {
      var s = e.key.path.rt(), a = ui(e.version);
      u = e.hasCommittedMutations;
      return new jr(null, new qr(s, a), null, u, r2, i2);
    }
    if (e instanceof Mt) {
      var c = e.key.path.rt(), f = ui(e.version);
      return new jr(new Fr(c, f), null, null, true, r2, i2);
    }
    return S();
  }
  function ii(t2) {
    var e = t2.G();
    return [e.seconds, e.nanoseconds];
  }
  function oi(t2) {
    var e = new $(t2[0], t2[1]);
    return Z.W(e);
  }
  function ui(t2) {
    var e = t2.G();
    return new Cr(e.seconds, e.nanoseconds);
  }
  function si(t2) {
    var e = new $(t2.seconds, t2.nanoseconds);
    return Z.W(e);
  }
  function ai(t2, e) {
    for (var n2 = (e.baseMutations || []).map(function(e2) {
      return tr(t2.ks, e2);
    }), r2 = e.mutations.length - 1; r2 >= 0; --r2) {
      var i2 = e.mutations[r2];
      void 0 !== (null == i2 ? void 0 : i2.transform) && (e.mutations[r2 - 1].updateTransforms = i2.transform.fieldTransforms, e.mutations.splice(r2, 1), --r2);
    }
    var o = e.mutations.map(function(e2) {
      return tr(t2.ks, e2);
    }), u = $.fromMillis(e.localWriteTimeMs);
    return new Zr(e.batchId, u, n2, o);
  }
  function ci(t2) {
    var e, n2, r2 = si(t2.readTime), i2 = void 0 !== t2.lastLimboFreeSnapshotVersion ? si(t2.lastLimboFreeSnapshotVersion) : Z.min();
    return void 0 !== t2.query.documents ? (D(1 === (n2 = t2.query).documents.length), e = de(se(Wn(n2.documents[0])))) : e = function(t3) {
      return de(rr(t3));
    }(t2.query), new Ie(e, t2.targetId, 0, t2.lastListenSequenceNumber, r2, i2, V.fromBase64String(t2.resumeToken));
  }
  function fi(t2, e) {
    var n2, r2 = ui(e.Mt), i2 = ui(e.lastLimboFreeSnapshotVersion);
    n2 = Gt(e.target) ? er(t2.ks, e.target) : nr(t2.ks, e.target);
    var o = e.resumeToken.toBase64();
    return new Gr(e.targetId, jt(e.target), r2, o, e.sequenceNumber, i2, n2);
  }
  function hi(t2) {
    var e = rr({
      parent: t2.parent,
      structuredQuery: t2.structuredQuery
    });
    return "LAST" === t2.limitType ? ve(e, e.limit, "L") : e;
  }
  var li = function() {
    function t2() {
    }
    return t2.prototype.Ms = function(t3, e) {
      return pi(t3).get(e).next(function(t4) {
        if (t4)
          return {
            id: (e2 = t4).bundleId,
            createTime: si(e2.createTime),
            version: e2.version
          };
        var e2;
      });
    }, t2.prototype.Ls = function(t3, e) {
      return pi(t3).put({
        bundleId: (n2 = e).id,
        createTime: ui(zn(n2.createTime)),
        version: n2.version
      });
      var n2;
    }, t2.prototype.$s = function(t3, e) {
      return di(t3).get(e).next(function(t4) {
        if (t4)
          return {
            name: (e2 = t4).name,
            query: hi(e2.bundledQuery),
            readTime: si(e2.readTime)
          };
        var e2;
      });
    }, t2.prototype.Bs = function(t3, e) {
      return di(t3).put(function(t4) {
        return {
          name: t4.name,
          readTime: ui(zn(t4.readTime)),
          bundledQuery: t4.bundledQuery
        };
      }(e));
    }, t2;
  }();
  function pi(t2) {
    return $r(t2, Wr.store);
  }
  function di(t2) {
    return $r(t2, Qr.store);
  }
  var vi = function() {
    function t2() {
      this.qs = new yi();
    }
    return t2.prototype.Us = function(t3, e) {
      return this.qs.add(e), yr.resolve();
    }, t2.prototype.Qs = function(t3, e) {
      return yr.resolve(this.qs.getEntries(e));
    }, t2;
  }();
  var yi = function() {
    function t2() {
      this.index = {};
    }
    return t2.prototype.add = function(t3) {
      var e = t3.et(), n2 = t3.Z(), r2 = this.index[e] || new hn(et.J), i2 = !r2.has(n2);
      return this.index[e] = r2.add(n2), i2;
    }, t2.prototype.has = function(t3) {
      var e = t3.et(), n2 = t3.Z(), r2 = this.index[e];
      return r2 && r2.has(n2);
    }, t2.prototype.getEntries = function(t3) {
      return (this.index[t3] || new hn(et.J)).rt();
    }, t2;
  }();
  var mi = function() {
    function t2() {
      this.Ks = new yi();
    }
    return t2.prototype.Us = function(t3, e) {
      var n2 = this;
      if (!this.Ks.has(e)) {
        var r2 = e.et(), i2 = e.Z();
        t3.Vs(function() {
          n2.Ks.add(e);
        });
        var o = {
          collectionId: r2,
          parent: kr(i2)
        };
        return gi(t3).put(o);
      }
      return yr.resolve();
    }, t2.prototype.Qs = function(t3, e) {
      var n2 = [], r2 = IDBKeyRange.bound([e, ""], [C(e), ""], false, true);
      return gi(t3).os(r2).next(function(t4) {
        for (var r3 = 0, i2 = t4; r3 < i2.length; r3++) {
          var o = i2[r3];
          if (o.collectionId !== e)
            break;
          n2.push(Lr(o.parent));
        }
        return n2;
      });
    }, t2;
  }();
  function gi(t2) {
    return $r(t2, Hr.store);
  }
  var wi = {
    Ws: false,
    js: 0,
    Gs: 0,
    zs: 0
  };
  var bi = function() {
    function t2(t3, e, n2) {
      this.Hs = t3, this.Js = e, this.Ys = n2;
    }
    return t2.Xs = function(e) {
      return new t2(e, t2.Zs, t2.ti);
    }, t2;
  }();
  function _i(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        if (t2.code !== R.FAILED_PRECONDITION || t2.message !== Dr)
          throw t2;
        return E("LocalStore", "Unexpectedly lost primary lease"), [2];
      });
    });
  }
  bi.Zs = 10, bi.ti = 1e3, bi.ei = new bi(41943040, bi.Zs, bi.ti), bi.ni = new bi(-1, 0, 0);
  var Ii = function() {
    function t2(t3, e) {
      this.si = t3, this.ii = e, this.ri = {};
    }
    return t2.prototype.get = function(t3) {
      var e = this.si(t3), n2 = this.ri[e];
      if (void 0 !== n2)
        for (var r2 = 0, i2 = n2; r2 < i2.length; r2++) {
          var o = i2[r2], u = o[0], s = o[1];
          if (this.ii(u, t3))
            return s;
        }
    }, t2.prototype.has = function(t3) {
      return void 0 !== this.get(t3);
    }, t2.prototype.set = function(t3, e) {
      var n2 = this.si(t3), r2 = this.ri[n2];
      if (void 0 !== r2) {
        for (var i2 = 0; i2 < r2.length; i2++)
          if (this.ii(r2[i2][0], t3))
            return void (r2[i2] = [t3, e]);
        r2.push([t3, e]);
      } else
        this.ri[n2] = [[t3, e]];
    }, t2.prototype.delete = function(t3) {
      var e = this.si(t3), n2 = this.ri[e];
      if (void 0 === n2)
        return false;
      for (var r2 = 0; r2 < n2.length; r2++)
        if (this.ii(n2[r2][0], t3))
          return 1 === n2.length ? delete this.ri[e] : n2.splice(r2, 1), true;
      return false;
    }, t2.prototype.forEach = function(t3) {
      ut(this.ri, function(e, n2) {
        for (var r2 = 0, i2 = n2; r2 < i2.length; r2++) {
          var o = i2[r2], u = o[0], s = o[1];
          t3(u, s);
        }
      });
    }, t2.prototype.nt = function() {
      return st(this.ri);
    }, t2;
  }();
  var Ei = function() {
    function t2() {
      this.oi = new Ii(function(t3) {
        return t3.toString();
      }, function(t3, e) {
        return t3.isEqual(e);
      }), this.ci = false;
    }
    return t2.prototype.ai = function(t3) {
      var e = this.oi.get(t3);
      return e ? e.readTime : Z.min();
    }, t2.prototype.ui = function(t3, e) {
      this.hi(), this.oi.set(t3.key, {
        li: t3,
        readTime: e
      });
    }, t2.prototype._i = function(t3, e) {
      void 0 === e && (e = null), this.hi(), this.oi.set(t3, {
        li: null,
        readTime: e
      });
    }, t2.prototype.fi = function(t3, e) {
      this.hi();
      var n2 = this.oi.get(e);
      return void 0 !== n2 ? yr.resolve(n2.li) : this.di(t3, e);
    }, t2.prototype.getEntries = function(t3, e) {
      return this.wi(t3, e);
    }, t2.prototype.apply = function(t3) {
      return this.hi(), this.ci = true, this.Ei(t3);
    }, t2.prototype.hi = function() {
    }, t2;
  }();
  function Ti(t2, e, n2) {
    var r2 = t2.store(Ur.store), i2 = t2.store(Mr.store), o = [], u = IDBKeyRange.only(n2.batchId), s = 0, a = r2.ls({
      range: u
    }, function(t3, e2, n3) {
      return s++, n3.delete();
    });
    o.push(a.next(function() {
      D(1 === s);
    }));
    for (var c = [], f = 0, h2 = n2.mutations; f < h2.length; f++) {
      var l = h2[f], p2 = Mr.key(e, l.key.path, n2.batchId);
      o.push(i2.delete(p2)), c.push(l.key);
    }
    return yr.$n(o).next(function() {
      return c;
    });
  }
  function Ni(t2) {
    var e;
    if (t2.document)
      e = t2.document;
    else if (t2.unknownDocument)
      e = t2.unknownDocument;
    else {
      if (!t2.noDocument)
        throw S();
      e = t2.noDocument;
    }
    return JSON.stringify(e).length;
  }
  var Ai = function() {
    function t2(t3, e, n2, r2) {
      this.userId = t3, this.Kt = e, this.Ti = n2, this.Ii = r2, this.mi = {};
    }
    return t2.Ai = function(e, n2, r2, i2) {
      return D("" !== e.uid), new t2(e.A() ? e.uid : "", n2, r2, i2);
    }, t2.prototype.Ri = function(t3) {
      var e = true, n2 = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
      return Di(t3).ls({
        index: Ur.userMutationsIndex,
        range: n2
      }, function(t4, n3, r2) {
        e = false, r2.done();
      }).next(function() {
        return e;
      });
    }, t2.prototype.Pi = function(t3, e, n2, r2) {
      var i2 = this, o = xi(t3), u = Di(t3);
      return u.add({}).next(function(s) {
        D("number" == typeof s);
        for (var a = new Zr(s, e, n2, r2), c = function(t4, e2, n3) {
          var r3 = n3.baseMutations.map(function(e3) {
            return Zn(t4.ks, e3);
          }), i3 = n3.mutations.map(function(e3) {
            return Zn(t4.ks, e3);
          });
          return new Ur(e2, n3.batchId, n3.Ss.toMillis(), r3, i3);
        }(i2.Kt, i2.userId, a), f = [], h2 = new hn(function(t4, e2) {
          return P2(t4.ot(), e2.ot());
        }), l = 0, p2 = r2; l < p2.length; l++) {
          var d = p2[l], v2 = Mr.key(i2.userId, d.key.path, s);
          h2 = h2.add(d.key.path.Z()), f.push(u.put(c)), f.push(o.put(v2, Mr.PLACEHOLDER));
        }
        return h2.forEach(function(e2) {
          f.push(i2.Ti.Us(t3, e2));
        }), t3.Vs(function() {
          i2.mi[s] = a.keys();
        }), yr.$n(f).next(function() {
          return a;
        });
      });
    }, t2.prototype.yi = function(t3, e) {
      var n2 = this;
      return Di(t3).get(e).next(function(t4) {
        return t4 ? (D(t4.userId === n2.userId), ai(n2.Kt, t4)) : null;
      });
    }, t2.prototype.gi = function(t3, e) {
      var n2 = this;
      return this.mi[e] ? yr.resolve(this.mi[e]) : this.yi(t3, e).next(function(t4) {
        if (t4) {
          var r2 = t4.keys();
          return n2.mi[e] = r2, r2;
        }
        return null;
      });
    }, t2.prototype.Vi = function(t3, e) {
      var n2 = this, r2 = e + 1, i2 = IDBKeyRange.lowerBound([this.userId, r2]), o = null;
      return Di(t3).ls({
        index: Ur.userMutationsIndex,
        range: i2
      }, function(t4, e2, i3) {
        e2.userId === n2.userId && (D(e2.batchId >= r2), o = ai(n2.Kt, e2)), i3.done();
      }).next(function() {
        return o;
      });
    }, t2.prototype.pi = function(t3) {
      var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]), n2 = -1;
      return Di(t3).ls({
        index: Ur.userMutationsIndex,
        range: e,
        reverse: true
      }, function(t4, e2, r2) {
        n2 = e2.batchId, r2.done();
      }).next(function() {
        return n2;
      });
    }, t2.prototype.bi = function(t3) {
      var e = this, n2 = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
      return Di(t3).os(Ur.userMutationsIndex, n2).next(function(t4) {
        return t4.map(function(t5) {
          return ai(e.Kt, t5);
        });
      });
    }, t2.prototype.vi = function(t3, e) {
      var n2 = this, r2 = Mr.prefixForPath(this.userId, e.path), i2 = IDBKeyRange.lowerBound(r2), o = [];
      return xi(t3).ls({
        range: i2
      }, function(r3, i3, u) {
        var s = r3[0], a = r3[1], c = r3[2], f = Lr(a);
        if (s === n2.userId && e.path.isEqual(f))
          return Di(t3).get(c).next(function(t4) {
            if (!t4)
              throw S();
            D(t4.userId === n2.userId), o.push(ai(n2.Kt, t4));
          });
        u.done();
      }).next(function() {
        return o;
      });
    }, t2.prototype.Si = function(t3, e) {
      var n2 = this, r2 = new hn(P2), i2 = [];
      return e.forEach(function(e2) {
        var o = Mr.prefixForPath(n2.userId, e2.path), u = IDBKeyRange.lowerBound(o), s = xi(t3).ls({
          range: u
        }, function(t4, i3, o2) {
          var u2 = t4[0], s2 = t4[1], a = t4[2], c = Lr(s2);
          u2 === n2.userId && e2.path.isEqual(c) ? r2 = r2.add(a) : o2.done();
        });
        i2.push(s);
      }), yr.$n(i2).next(function() {
        return n2.Di(t3, r2);
      });
    }, t2.prototype.Ci = function(t3, e) {
      var n2 = this, r2 = e.path, i2 = r2.length + 1, o = Mr.prefixForPath(this.userId, r2), u = IDBKeyRange.lowerBound(o), s = new hn(P2);
      return xi(t3).ls({
        range: u
      }, function(t4, e2, o2) {
        var u2 = t4[0], a = t4[1], c = t4[2], f = Lr(a);
        u2 === n2.userId && r2.st(f) ? f.length === i2 && (s = s.add(c)) : o2.done();
      }).next(function() {
        return n2.Di(t3, s);
      });
    }, t2.prototype.Di = function(t3, e) {
      var n2 = this, r2 = [], i2 = [];
      return e.forEach(function(e2) {
        i2.push(Di(t3).get(e2).next(function(t4) {
          if (null === t4)
            throw S();
          D(t4.userId === n2.userId), r2.push(ai(n2.Kt, t4));
        }));
      }), yr.$n(i2).next(function() {
        return r2;
      });
    }, t2.prototype.xi = function(t3, e) {
      var n2 = this;
      return Ti(t3.bs, this.userId, e).next(function(r2) {
        return t3.Vs(function() {
          n2.Ni(e.batchId);
        }), yr.forEach(r2, function(e2) {
          return n2.Ii.Fi(t3, e2);
        });
      });
    }, t2.prototype.Ni = function(t3) {
      delete this.mi[t3];
    }, t2.prototype.Oi = function(t3) {
      var e = this;
      return this.Ri(t3).next(function(n2) {
        if (!n2)
          return yr.resolve();
        var r2 = IDBKeyRange.lowerBound(Mr.prefixForUser(e.userId)), i2 = [];
        return xi(t3).ls({
          range: r2
        }, function(t4, n3, r3) {
          if (t4[0] === e.userId) {
            var o = Lr(t4[1]);
            i2.push(o);
          } else
            r3.done();
        }).next(function() {
          D(0 === i2.length);
        });
      });
    }, t2.prototype.ki = function(t3, e) {
      return Si(t3, this.userId, e);
    }, t2.prototype.Mi = function(t3) {
      var e = this;
      return ki(t3).get(this.userId).next(function(t4) {
        return t4 || new Rr(e.userId, -1, "");
      });
    }, t2;
  }();
  function Si(t2, e, n2) {
    var r2 = Mr.prefixForPath(e, n2.path), i2 = r2[1], o = IDBKeyRange.lowerBound(r2), u = false;
    return xi(t2).ls({
      range: o,
      hs: true
    }, function(t3, n3, r3) {
      var o2 = t3[0], s = t3[1];
      t3[2];
      o2 === e && s === i2 && (u = true), r3.done();
    }).next(function() {
      return u;
    });
  }
  function Di(t2) {
    return $r(t2, Ur.store);
  }
  function xi(t2) {
    return $r(t2, Mr.store);
  }
  function ki(t2) {
    return $r(t2, Rr.store);
  }
  var Oi = function() {
    function t2(t3) {
      this.Li = t3;
    }
    return t2.prototype.next = function() {
      return this.Li += 2, this.Li;
    }, t2.$i = function() {
      return new t2(0);
    }, t2.Bi = function() {
      return new t2(-1);
    }, t2;
  }();
  var Pi = function() {
    function t2(t3, e) {
      this.Ii = t3, this.Kt = e;
    }
    return t2.prototype.qi = function(t3) {
      var e = this;
      return this.Ui(t3).next(function(n2) {
        var r2 = new Oi(n2.highestTargetId);
        return n2.highestTargetId = r2.next(), e.Qi(t3, n2).next(function() {
          return n2.highestTargetId;
        });
      });
    }, t2.prototype.Ki = function(t3) {
      return this.Ui(t3).next(function(t4) {
        return Z.W(new $(t4.lastRemoteSnapshotVersion.seconds, t4.lastRemoteSnapshotVersion.nanoseconds));
      });
    }, t2.prototype.Wi = function(t3) {
      return this.Ui(t3).next(function(t4) {
        return t4.highestListenSequenceNumber;
      });
    }, t2.prototype.ji = function(t3, e, n2) {
      var r2 = this;
      return this.Ui(t3).next(function(i2) {
        return i2.highestListenSequenceNumber = e, n2 && (i2.lastRemoteSnapshotVersion = n2.G()), e > i2.highestListenSequenceNumber && (i2.highestListenSequenceNumber = e), r2.Qi(t3, i2);
      });
    }, t2.prototype.Gi = function(t3, e) {
      var n2 = this;
      return this.zi(t3, e).next(function() {
        return n2.Ui(t3).next(function(r2) {
          return r2.targetCount += 1, n2.Hi(e, r2), n2.Qi(t3, r2);
        });
      });
    }, t2.prototype.Ji = function(t3, e) {
      return this.zi(t3, e);
    }, t2.prototype.Yi = function(t3, e) {
      var n2 = this;
      return this.Xi(t3, e.targetId).next(function() {
        return Li(t3).delete(e.targetId);
      }).next(function() {
        return n2.Ui(t3);
      }).next(function(e2) {
        return D(e2.targetCount > 0), e2.targetCount -= 1, n2.Qi(t3, e2);
      });
    }, t2.prototype.Zi = function(t3, e, n2) {
      var r2 = this, i2 = 0, o = [];
      return Li(t3).ls(function(u, s) {
        var a = ci(s);
        a.sequenceNumber <= e && null === n2.get(a.targetId) && (i2++, o.push(r2.Yi(t3, a)));
      }).next(function() {
        return yr.$n(o);
      }).next(function() {
        return i2;
      });
    }, t2.prototype.mn = function(t3, e) {
      return Li(t3).ls(function(t4, n2) {
        var r2 = ci(n2);
        e(r2);
      });
    }, t2.prototype.Ui = function(t3) {
      return Ci(t3).get(Kr.key).next(function(t4) {
        return D(null !== t4), t4;
      });
    }, t2.prototype.Qi = function(t3, e) {
      return Ci(t3).put(Kr.key, e);
    }, t2.prototype.zi = function(t3, e) {
      return Li(t3).put(fi(this.Kt, e));
    }, t2.prototype.Hi = function(t3, e) {
      var n2 = false;
      return t3.targetId > e.highestTargetId && (e.highestTargetId = t3.targetId, n2 = true), t3.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t3.sequenceNumber, n2 = true), n2;
    }, t2.prototype.tr = function(t3) {
      return this.Ui(t3).next(function(t4) {
        return t4.targetCount;
      });
    }, t2.prototype.er = function(t3, e) {
      var n2 = jt(e), r2 = IDBKeyRange.bound([n2, Number.NEGATIVE_INFINITY], [n2, Number.POSITIVE_INFINITY]), i2 = null;
      return Li(t3).ls({
        range: r2,
        index: Gr.queryTargetsIndexName
      }, function(t4, n3, r3) {
        var o = ci(n3);
        zt(e, o.target) && (i2 = o, r3.done());
      }).next(function() {
        return i2;
      });
    }, t2.prototype.nr = function(t3, e, n2) {
      var r2 = this, i2 = [], o = Vi(t3);
      return e.forEach(function(e2) {
        var u = kr(e2.path);
        i2.push(o.put(new Br(n2, u))), i2.push(r2.Ii.sr(t3, n2, e2));
      }), yr.$n(i2);
    }, t2.prototype.ir = function(t3, e, n2) {
      var r2 = this, i2 = Vi(t3);
      return yr.forEach(e, function(e2) {
        var o = kr(e2.path);
        return yr.$n([i2.delete([n2, o]), r2.Ii.rr(t3, n2, e2)]);
      });
    }, t2.prototype.Xi = function(t3, e) {
      var n2 = Vi(t3), r2 = IDBKeyRange.bound([e], [e + 1], false, true);
      return n2.delete(r2);
    }, t2.prototype.cr = function(t3, e) {
      var n2 = IDBKeyRange.bound([e], [e + 1], false, true), r2 = Vi(t3), i2 = _n();
      return r2.ls({
        range: n2,
        hs: true
      }, function(t4, e2, n3) {
        var r3 = Lr(t4[1]), o = new it(r3);
        i2 = i2.add(o);
      }).next(function() {
        return i2;
      });
    }, t2.prototype.ki = function(t3, e) {
      var n2 = kr(e.path), r2 = IDBKeyRange.bound([n2], [C(n2)], false, true), i2 = 0;
      return Vi(t3).ls({
        index: Br.documentTargetsIndex,
        hs: true,
        range: r2
      }, function(t4, e2, n3) {
        var r3 = t4[0];
        t4[1];
        0 !== r3 && (i2++, n3.done());
      }).next(function() {
        return i2 > 0;
      });
    }, t2.prototype.Dn = function(t3, e) {
      return Li(t3).get(e).next(function(t4) {
        return t4 ? ci(t4) : null;
      });
    }, t2;
  }();
  function Li(t2) {
    return $r(t2, Gr.store);
  }
  function Ci(t2) {
    return $r(t2, Kr.store);
  }
  function Vi(t2) {
    return $r(t2, Br.store);
  }
  function Ri(t2, e) {
    var n2 = t2[0], r2 = t2[1], i2 = e[0], o = e[1], u = P2(n2, i2);
    return 0 === u ? P2(r2, o) : u;
  }
  var Ui = function() {
    function t2(t3) {
      this.ar = t3, this.buffer = new hn(Ri), this.ur = 0;
    }
    return t2.prototype.hr = function() {
      return ++this.ur;
    }, t2.prototype.lr = function(t3) {
      var e = [t3, this.hr()];
      if (this.buffer.size < this.ar)
        this.buffer = this.buffer.add(e);
      else {
        var n2 = this.buffer.last();
        Ri(e, n2) < 0 && (this.buffer = this.buffer.delete(n2).add(e));
      }
    }, Object.defineProperty(t2.prototype, "maxValue", {
      get: function() {
        return this.buffer.last()[0];
      },
      enumerable: false,
      configurable: true
    }), t2;
  }();
  var Mi = function() {
    function t2(t3, e) {
      this._r = t3, this.fs = e, this.dr = false, this.wr = null;
    }
    return t2.prototype.start = function(t3) {
      -1 !== this._r.params.Hs && this.Er(t3);
    }, t2.prototype.stop = function() {
      this.wr && (this.wr.cancel(), this.wr = null);
    }, Object.defineProperty(t2.prototype, "Tr", {
      get: function() {
        return null !== this.wr;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.Er = function(t3) {
      var e = this, n2 = this.dr ? 3e5 : 6e4;
      E("LruGarbageCollector", "Garbage collection scheduled in " + n2 + "ms"), this.wr = this.fs.Ir("lru_garbage_collection", n2, function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2;
          return __generator(this, function(n3) {
            switch (n3.label) {
              case 0:
                this.wr = null, this.dr = true, n3.label = 1;
              case 1:
                return n3.trys.push([1, 3, , 7]), [4, t3.mr(this._r)];
              case 2:
                return n3.sent(), [3, 7];
              case 3:
                return _r(e2 = n3.sent()) ? (E("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e2), [3, 6]) : [3, 4];
              case 4:
                return [4, _i(e2)];
              case 5:
                n3.sent(), n3.label = 6;
              case 6:
                return [3, 7];
              case 7:
                return [4, this.Er(t3)];
              case 8:
                return n3.sent(), [2];
            }
          });
        });
      });
    }, t2;
  }();
  var qi = function() {
    function t2(t3, e) {
      this.Ar = t3, this.params = e;
    }
    return t2.prototype.Rr = function(t3, e) {
      return this.Ar.Pr(t3).next(function(t4) {
        return Math.floor(e / 100 * t4);
      });
    }, t2.prototype.yr = function(t3, e) {
      var n2 = this;
      if (0 === e)
        return yr.resolve(X.U);
      var r2 = new Ui(e);
      return this.Ar.mn(t3, function(t4) {
        return r2.lr(t4.sequenceNumber);
      }).next(function() {
        return n2.Ar.gr(t3, function(t4) {
          return r2.lr(t4);
        });
      }).next(function() {
        return r2.maxValue;
      });
    }, t2.prototype.Zi = function(t3, e, n2) {
      return this.Ar.Zi(t3, e, n2);
    }, t2.prototype.Vr = function(t3, e) {
      return this.Ar.Vr(t3, e);
    }, t2.prototype.pr = function(t3, e) {
      var n2 = this;
      return -1 === this.params.Hs ? (E("LruGarbageCollector", "Garbage collection skipped; disabled"), yr.resolve(wi)) : this.br(t3).next(function(r2) {
        return r2 < n2.params.Hs ? (E("LruGarbageCollector", "Garbage collection skipped; Cache size " + r2 + " is lower than threshold " + n2.params.Hs), wi) : n2.vr(t3, e);
      });
    }, t2.prototype.br = function(t3) {
      return this.Ar.br(t3);
    }, t2.prototype.vr = function(t3, n2) {
      var r2, i2, o, u, s, a, c, f = this, h2 = Date.now();
      return this.Rr(t3, this.params.Js).next(function(e) {
        return e > f.params.Ys ? (E("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + f.params.Ys + " from " + e), i2 = f.params.Ys) : i2 = e, u = Date.now(), f.yr(t3, i2);
      }).next(function(e) {
        return r2 = e, s = Date.now(), f.Zi(t3, r2, n2);
      }).next(function(e) {
        return o = e, a = Date.now(), f.Vr(t3, r2);
      }).next(function(t4) {
        return c = Date.now(), I2() <= LogLevel.DEBUG && E("LruGarbageCollector", "LRU Garbage Collection\n	Counted targets in " + (u - h2) + "ms\n	Determined least recently used " + i2 + " in " + (s - u) + "ms\n	Removed " + o + " targets in " + (a - s) + "ms\n	Removed " + t4 + " documents in " + (c - a) + "ms\nTotal Duration: " + (c - h2) + "ms"), yr.resolve({
          Ws: true,
          js: i2,
          Gs: o,
          zs: t4
        });
      });
    }, t2;
  }();
  var Fi = function() {
    function t2(t3, e) {
      this.db = t3, this._r = function(t4, e2) {
        return new qi(t4, e2);
      }(this, e);
    }
    return t2.prototype.Pr = function(t3) {
      var e = this.Sr(t3);
      return this.db.Dr().tr(t3).next(function(t4) {
        return e.next(function(e2) {
          return t4 + e2;
        });
      });
    }, t2.prototype.Sr = function(t3) {
      var e = 0;
      return this.gr(t3, function(t4) {
        e++;
      }).next(function() {
        return e;
      });
    }, t2.prototype.mn = function(t3, e) {
      return this.db.Dr().mn(t3, e);
    }, t2.prototype.gr = function(t3, e) {
      return this.Cr(t3, function(t4, n2) {
        return e(n2);
      });
    }, t2.prototype.sr = function(t3, e, n2) {
      return ji(t3, n2);
    }, t2.prototype.rr = function(t3, e, n2) {
      return ji(t3, n2);
    }, t2.prototype.Zi = function(t3, e, n2) {
      return this.db.Dr().Zi(t3, e, n2);
    }, t2.prototype.Fi = function(t3, e) {
      return ji(t3, e);
    }, t2.prototype.Nr = function(t3, e) {
      return function(t4, e2) {
        var n2 = false;
        return ki(t4)._s(function(r2) {
          return Si(t4, r2, e2).next(function(t5) {
            return t5 && (n2 = true), yr.resolve(!t5);
          });
        }).next(function() {
          return n2;
        });
      }(t3, e);
    }, t2.prototype.Vr = function(t3, e) {
      var n2 = this, r2 = this.db.Or().Fr(), i2 = [], o = 0;
      return this.Cr(t3, function(u, s) {
        if (s <= e) {
          var a = n2.Nr(t3, u).next(function(e2) {
            if (!e2)
              return o++, r2.fi(t3, u).next(function() {
                return r2._i(u), Vi(t3).delete([0, kr(u.path)]);
              });
          });
          i2.push(a);
        }
      }).next(function() {
        return yr.$n(i2);
      }).next(function() {
        return r2.apply(t3);
      }).next(function() {
        return o;
      });
    }, t2.prototype.removeTarget = function(t3, e) {
      var n2 = e.Lt(t3.vs);
      return this.db.Dr().Ji(t3, n2);
    }, t2.prototype.kr = function(t3, e) {
      return ji(t3, e);
    }, t2.prototype.Cr = function(t3, e) {
      var n2, r2 = Vi(t3), i2 = X.U;
      return r2.ls({
        index: Br.documentTargetsIndex
      }, function(t4, r3) {
        var o = t4[0], u = (t4[1], r3.path), s = r3.sequenceNumber;
        0 === o ? (i2 !== X.U && e(new it(Lr(n2)), i2), i2 = s, n2 = u) : i2 = X.U;
      }).next(function() {
        i2 !== X.U && e(new it(Lr(n2)), i2);
      });
    }, t2.prototype.br = function(t3) {
      return this.db.Or().Mr(t3);
    }, t2;
  }();
  function ji(t2, e) {
    return Vi(t2).put(function(t3, e2) {
      return new Br(0, kr(t3.path), e2);
    }(e, t2.vs));
  }
  var zi = function() {
    function t2(t3, e) {
      this.Kt = t3, this.Ti = e;
    }
    return t2.prototype.ui = function(t3, e, n2) {
      return Ki(t3).put(Hi(e), n2);
    }, t2.prototype._i = function(t3, e) {
      var n2 = Ki(t3), r2 = Hi(e);
      return n2.delete(r2);
    }, t2.prototype.updateMetadata = function(t3, e) {
      var n2 = this;
      return this.getMetadata(t3).next(function(r2) {
        return r2.byteSize += e, n2.Lr(t3, r2);
      });
    }, t2.prototype.fi = function(t3, e) {
      var n2 = this;
      return Ki(t3).get(Hi(e)).next(function(t4) {
        return n2.$r(t4);
      });
    }, t2.prototype.Br = function(t3, e) {
      var n2 = this;
      return Ki(t3).get(Hi(e)).next(function(t4) {
        var e2 = n2.$r(t4);
        return e2 ? {
          li: e2,
          size: Ni(t4)
        } : null;
      });
    }, t2.prototype.getEntries = function(t3, e) {
      var n2 = this, r2 = vn();
      return this.qr(t3, e, function(t4, e2) {
        var i2 = n2.$r(e2);
        r2 = r2.Ht(t4, i2);
      }).next(function() {
        return r2;
      });
    }, t2.prototype.Ur = function(t3, e) {
      var n2 = this, r2 = vn(), i2 = new an(it.J);
      return this.qr(t3, e, function(t4, e2) {
        var o = n2.$r(e2);
        o ? (r2 = r2.Ht(t4, o), i2 = i2.Ht(t4, Ni(e2))) : (r2 = r2.Ht(t4, null), i2 = i2.Ht(t4, 0));
      }).next(function() {
        return {
          Qr: r2,
          Kr: i2
        };
      });
    }, t2.prototype.qr = function(t3, e, n2) {
      if (e.nt())
        return yr.resolve();
      var r2 = IDBKeyRange.bound(e.first().path.rt(), e.last().path.rt()), i2 = e.ee(), o = i2.ce();
      return Ki(t3).ls({
        range: r2
      }, function(t4, e2, r3) {
        for (var u = it.Tt(t4); o && it.J(o, u) < 0; )
          n2(o, null), o = i2.ce();
        o && o.isEqual(u) && (n2(o, e2), o = i2.ae() ? i2.ce() : null), o ? r3.rs(o.path.rt()) : r3.done();
      }).next(function() {
        for (; o; )
          n2(o, null), o = i2.ae() ? i2.ce() : null;
      });
    }, t2.prototype.Wr = function(t3, e, n2) {
      var r2 = this, i2 = mn(), o = e.path.length + 1, u = {};
      if (n2.isEqual(Z.min())) {
        var s = e.path.rt();
        u.range = IDBKeyRange.lowerBound(s);
      } else {
        var a = e.path.rt(), c = ii(n2);
        u.range = IDBKeyRange.lowerBound([a, c], true), u.index = jr.collectionReadTimeIndex;
      }
      return Ki(t3).ls(u, function(t4, n3, u2) {
        if (t4.length === o) {
          var s2 = ni(r2.Kt, n3);
          e.path.st(s2.key.path) ? s2 instanceof Rt && we(e, s2) && (i2 = i2.Ht(s2.key, s2)) : u2.done();
        }
      }).next(function() {
        return i2;
      });
    }, t2.prototype.Fr = function(t3) {
      return new Gi(this, !!t3 && t3.jr);
    }, t2.prototype.Mr = function(t3) {
      return this.getMetadata(t3).next(function(t4) {
        return t4.byteSize;
      });
    }, t2.prototype.getMetadata = function(t3) {
      return Bi(t3).get(zr.key).next(function(t4) {
        return D(!!t4), t4;
      });
    }, t2.prototype.Lr = function(t3, e) {
      return Bi(t3).put(zr.key, e);
    }, t2.prototype.$r = function(t3) {
      if (t3) {
        var e = ni(this.Kt, t3);
        return e instanceof Ut && e.version.isEqual(Z.min()) ? null : e;
      }
      return null;
    }, t2;
  }();
  var Gi = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Gr = e2, r2.jr = n2, r2.zr = new Ii(function(t3) {
        return t3.toString();
      }, function(t3, e3) {
        return t3.isEqual(e3);
      }), r2;
    }
    return __extends(e, t2), e.prototype.Ei = function(t3) {
      var e2 = this, n2 = [], r2 = 0, i2 = new hn(function(t4, e3) {
        return P2(t4.ot(), e3.ot());
      });
      return this.oi.forEach(function(o, u) {
        var s = e2.zr.get(o);
        if (u.li) {
          var a = ri(e2.Gr.Kt, u.li, e2.ai(o));
          i2 = i2.add(o.path.Z());
          var c = Ni(a);
          r2 += c - s, n2.push(e2.Gr.ui(t3, o, a));
        } else if (r2 -= s, e2.jr) {
          var f = ri(e2.Gr.Kt, new Ut(o, Z.min()), e2.ai(o));
          n2.push(e2.Gr.ui(t3, o, f));
        } else
          n2.push(e2.Gr._i(t3, o));
      }), i2.forEach(function(r3) {
        n2.push(e2.Gr.Ti.Us(t3, r3));
      }), n2.push(this.Gr.updateMetadata(t3, r2)), yr.$n(n2);
    }, e.prototype.di = function(t3, e2) {
      var n2 = this;
      return this.Gr.Br(t3, e2).next(function(t4) {
        return null === t4 ? (n2.zr.set(e2, 0), null) : (n2.zr.set(e2, t4.size), t4.li);
      });
    }, e.prototype.wi = function(t3, e2) {
      var n2 = this;
      return this.Gr.Ur(t3, e2).next(function(t4) {
        var e3 = t4.Qr;
        return t4.Kr.forEach(function(t5, e4) {
          n2.zr.set(t5, e4);
        }), e3;
      });
    }, e;
  }(Ei);
  function Bi(t2) {
    return $r(t2, zr.store);
  }
  function Ki(t2) {
    return $r(t2, jr.store);
  }
  function Hi(t2) {
    return t2.path.rt();
  }
  var Ji = function() {
    function t2(t3) {
      this.Kt = t3;
    }
    return t2.prototype.Yn = function(t3, e, n2, r2) {
      var i2 = this;
      D(n2 < r2 && n2 >= 0 && r2 <= 11);
      var o = new mr("createOrUpgrade", e);
      n2 < 1 && r2 >= 1 && (function(t4) {
        t4.createObjectStore(Vr.store);
      }(t3), function(t4) {
        t4.createObjectStore(Rr.store, {
          keyPath: Rr.keyPath
        }), t4.createObjectStore(Ur.store, {
          keyPath: Ur.keyPath,
          autoIncrement: true
        }).createIndex(Ur.userMutationsIndex, Ur.userMutationsKeyPath, {
          unique: true
        }), t4.createObjectStore(Mr.store);
      }(t3), Wi(t3), function(t4) {
        t4.createObjectStore(jr.store);
      }(t3));
      var u = yr.resolve();
      return n2 < 3 && r2 >= 3 && (0 !== n2 && (function(t4) {
        t4.deleteObjectStore(Br.store), t4.deleteObjectStore(Gr.store), t4.deleteObjectStore(Kr.store);
      }(t3), Wi(t3)), u = u.next(function() {
        return function(t4) {
          var e2 = t4.store(Kr.store), n3 = new Kr(0, 0, Z.min().G(), 0);
          return e2.put(Kr.key, n3);
        }(o);
      })), n2 < 4 && r2 >= 4 && (0 !== n2 && (u = u.next(function() {
        return function(t4, e2) {
          return e2.store(Ur.store).os().next(function(n3) {
            t4.deleteObjectStore(Ur.store), t4.createObjectStore(Ur.store, {
              keyPath: Ur.keyPath,
              autoIncrement: true
            }).createIndex(Ur.userMutationsIndex, Ur.userMutationsKeyPath, {
              unique: true
            });
            var r3 = e2.store(Ur.store), i3 = n3.map(function(t5) {
              return r3.put(t5);
            });
            return yr.$n(i3);
          });
        }(t3, o);
      })), u = u.next(function() {
        !function(t4) {
          t4.createObjectStore(Jr.store, {
            keyPath: Jr.keyPath
          });
        }(t3);
      })), n2 < 5 && r2 >= 5 && (u = u.next(function() {
        return i2.Hr(o);
      })), n2 < 6 && r2 >= 6 && (u = u.next(function() {
        return function(t4) {
          t4.createObjectStore(zr.store);
        }(t3), i2.Jr(o);
      })), n2 < 7 && r2 >= 7 && (u = u.next(function() {
        return i2.Yr(o);
      })), n2 < 8 && r2 >= 8 && (u = u.next(function() {
        return i2.Xr(t3, o);
      })), n2 < 9 && r2 >= 9 && (u = u.next(function() {
        !function(t4) {
          t4.objectStoreNames.contains("remoteDocumentChanges") && t4.deleteObjectStore("remoteDocumentChanges");
        }(t3), function(t4) {
          var e2 = t4.objectStore(jr.store);
          e2.createIndex(jr.readTimeIndex, jr.readTimeIndexPath, {
            unique: false
          }), e2.createIndex(jr.collectionReadTimeIndex, jr.collectionReadTimeIndexPath, {
            unique: false
          });
        }(e);
      })), n2 < 10 && r2 >= 10 && (u = u.next(function() {
        return i2.Zr(o);
      })), n2 < 11 && r2 >= 11 && (u = u.next(function() {
        !function(t4) {
          t4.createObjectStore(Wr.store, {
            keyPath: Wr.keyPath
          });
        }(t3), function(t4) {
          t4.createObjectStore(Qr.store, {
            keyPath: Qr.keyPath
          });
        }(t3);
      })), u;
    }, t2.prototype.Jr = function(t3) {
      var e = 0;
      return t3.store(jr.store).ls(function(t4, n2) {
        e += Ni(n2);
      }).next(function() {
        var n2 = new zr(e);
        return t3.store(zr.store).put(zr.key, n2);
      });
    }, t2.prototype.Hr = function(t3) {
      var e = this, n2 = t3.store(Rr.store), r2 = t3.store(Ur.store);
      return n2.os().next(function(n3) {
        return yr.forEach(n3, function(n4) {
          var i2 = IDBKeyRange.bound([n4.userId, -1], [n4.userId, n4.lastAcknowledgedBatchId]);
          return r2.os(Ur.userMutationsIndex, i2).next(function(r3) {
            return yr.forEach(r3, function(r4) {
              D(r4.userId === n4.userId);
              var i3 = ai(e.Kt, r4);
              return Ti(t3, n4.userId, i3).next(function() {
              });
            });
          });
        });
      });
    }, t2.prototype.Yr = function(t3) {
      var e = t3.store(Br.store), n2 = t3.store(jr.store);
      return t3.store(Kr.store).get(Kr.key).next(function(t4) {
        var r2 = [];
        return n2.ls(function(n3, i2) {
          var o = new et(n3), u = function(t5) {
            return [0, kr(t5)];
          }(o);
          r2.push(e.get(u).next(function(n4) {
            return n4 ? yr.resolve() : function(n5) {
              return e.put(new Br(0, kr(n5), t4.highestListenSequenceNumber));
            }(o);
          }));
        }).next(function() {
          return yr.$n(r2);
        });
      });
    }, t2.prototype.Xr = function(t3, e) {
      t3.createObjectStore(Hr.store, {
        keyPath: Hr.keyPath
      });
      var n2 = e.store(Hr.store), r2 = new yi(), i2 = function(t4) {
        if (r2.add(t4)) {
          var e2 = t4.et(), i3 = t4.Z();
          return n2.put({
            collectionId: e2,
            parent: kr(i3)
          });
        }
      };
      return e.store(jr.store).ls({
        hs: true
      }, function(t4, e2) {
        var n3 = new et(t4);
        return i2(n3.Z());
      }).next(function() {
        return e.store(Mr.store).ls({
          hs: true
        }, function(t4, e2) {
          t4[0];
          var n3 = t4[1], r3 = (t4[2], Lr(n3));
          return i2(r3.Z());
        });
      });
    }, t2.prototype.Zr = function(t3) {
      var e = this, n2 = t3.store(Gr.store);
      return n2.ls(function(t4, r2) {
        var i2 = ci(r2), o = fi(e.Kt, i2);
        return n2.put(o);
      });
    }, t2;
  }();
  function Wi(t2) {
    t2.createObjectStore(Br.store, {
      keyPath: Br.keyPath
    }).createIndex(Br.documentTargetsIndex, Br.documentTargetsKeyPath, {
      unique: true
    }), t2.createObjectStore(Gr.store, {
      keyPath: Gr.keyPath
    }).createIndex(Gr.queryTargetsIndexName, Gr.queryTargetsKeyPath, {
      unique: true
    }), t2.createObjectStore(Kr.store);
  }
  var Qi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
  var Yi = function() {
    function t2(e, n2, r2, i2, o, u, s, a, c, f) {
      if (this.allowTabSynchronization = e, this.persistenceKey = n2, this.clientId = r2, this.eo = o, this.window = u, this.document = s, this.no = c, this.so = f, this.io = null, this.ro = false, this.isPrimary = false, this.networkEnabled = true, this.oo = null, this.inForeground = false, this.co = null, this.ao = null, this.uo = Number.NEGATIVE_INFINITY, this.ho = function(t3) {
        return Promise.resolve();
      }, !t2.Wn())
        throw new U(R.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
      this.Ii = new Fi(this, i2), this.lo = n2 + "main", this.Kt = new ei(a), this._o = new gr(this.lo, 11, new Ji(this.Kt)), this.fo = new Pi(this.Ii, this.Kt), this.Ti = new mi(), this.wo = function(t3, e2) {
        return new zi(t3, e2);
      }(this.Kt, this.Ti), this.Eo = new li(), this.window && this.window.localStorage ? this.To = this.window.localStorage : (this.To = null, false === f && T("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    return t2.prototype.start = function() {
      var t3 = this;
      return this.Io().then(function() {
        if (!t3.isPrimary && !t3.allowTabSynchronization)
          throw new U(R.FAILED_PRECONDITION, Qi);
        return t3.mo(), t3.Ao(), t3.Ro(), t3.runTransaction("getHighestListenSequenceNumber", "readonly", function(e) {
          return t3.fo.Wi(e);
        });
      }).then(function(e) {
        t3.io = new X(e, t3.no);
      }).then(function() {
        t3.ro = true;
      }).catch(function(e) {
        return t3._o && t3._o.close(), Promise.reject(e);
      });
    }, t2.prototype.Po = function(t3) {
      var e = this;
      return this.ho = function(n2) {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e2) {
            return this.Tr ? [2, t3(n2)] : [2];
          });
        });
      }, t3(this.isPrimary);
    }, t2.prototype.yo = function(t3) {
      var e = this;
      this._o.Zn(function(n2) {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e2) {
            switch (e2.label) {
              case 0:
                return null === n2.newVersion ? [4, t3()] : [3, 2];
              case 1:
                e2.sent(), e2.label = 2;
              case 2:
                return [2];
            }
          });
        });
      });
    }, t2.prototype.Vo = function(t3) {
      var e = this;
      this.networkEnabled !== t3 && (this.networkEnabled = t3, this.eo.ys(function() {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(t4) {
            switch (t4.label) {
              case 0:
                return this.Tr ? [4, this.Io()] : [3, 2];
              case 1:
                t4.sent(), t4.label = 2;
              case 2:
                return [2];
            }
          });
        });
      }));
    }, t2.prototype.Io = function() {
      var t3 = this;
      return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(e) {
        return $i(e).put(new Jr(t3.clientId, Date.now(), t3.networkEnabled, t3.inForeground)).next(function() {
          if (t3.isPrimary)
            return t3.po(e).next(function(e2) {
              e2 || (t3.isPrimary = false, t3.eo.bo(function() {
                return t3.ho(false);
              }));
            });
        }).next(function() {
          return t3.vo(e);
        }).next(function(n2) {
          return t3.isPrimary && !n2 ? t3.So(e).next(function() {
            return false;
          }) : !!n2 && t3.Do(e).next(function() {
            return true;
          });
        });
      }).catch(function(e) {
        if (_r(e))
          return E("IndexedDbPersistence", "Failed to extend owner lease: ", e), t3.isPrimary;
        if (!t3.allowTabSynchronization)
          throw e;
        return E("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), false;
      }).then(function(e) {
        t3.isPrimary !== e && t3.eo.bo(function() {
          return t3.ho(e);
        }), t3.isPrimary = e;
      });
    }, t2.prototype.po = function(t3) {
      var e = this;
      return Xi(t3).get(Vr.key).next(function(t4) {
        return yr.resolve(e.Co(t4));
      });
    }, t2.prototype.xo = function(t3) {
      return $i(t3).delete(this.clientId);
    }, t2.prototype.No = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i2 = this;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return !this.isPrimary || this.Fo(this.uo, 18e5) ? [3, 2] : (this.uo = Date.now(), [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(t4) {
                var e2 = $r(t4, Jr.store);
                return e2.os().next(function(t5) {
                  var n3 = i2.Oo(t5, 18e5), r3 = t5.filter(function(t6) {
                    return -1 === n3.indexOf(t6);
                  });
                  return yr.forEach(r3, function(t6) {
                    return e2.delete(t6.clientId);
                  }).next(function() {
                    return r3;
                  });
                });
              }).catch(function() {
                return [];
              })]);
            case 1:
              if (t3 = o.sent(), this.To)
                for (e = 0, n2 = t3; e < n2.length; e++)
                  r2 = n2[e], this.To.removeItem(this.ko(r2.clientId));
              o.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, t2.prototype.Ro = function() {
      var t3 = this;
      this.ao = this.eo.Ir("client_metadata_refresh", 4e3, function() {
        return t3.Io().then(function() {
          return t3.No();
        }).then(function() {
          return t3.Ro();
        });
      });
    }, t2.prototype.Co = function(t3) {
      return !!t3 && t3.ownerId === this.clientId;
    }, t2.prototype.vo = function(t3) {
      var e = this;
      return this.so ? yr.resolve(true) : Xi(t3).get(Vr.key).next(function(n2) {
        if (null !== n2 && e.Fo(n2.leaseTimestampMs, 5e3) && !e.Mo(n2.ownerId)) {
          if (e.Co(n2) && e.networkEnabled)
            return true;
          if (!e.Co(n2)) {
            if (!n2.allowTabSynchronization)
              throw new U(R.FAILED_PRECONDITION, Qi);
            return false;
          }
        }
        return !(!e.networkEnabled || !e.inForeground) || $i(t3).os().next(function(t4) {
          return void 0 === e.Oo(t4, 5e3).find(function(t5) {
            if (e.clientId !== t5.clientId) {
              var n3 = !e.networkEnabled && t5.networkEnabled, r2 = !e.inForeground && t5.inForeground, i2 = e.networkEnabled === t5.networkEnabled;
              if (n3 || r2 && i2)
                return true;
            }
            return false;
          });
        });
      }).next(function(t4) {
        return e.isPrimary !== t4 && E("IndexedDbPersistence", "Client " + (t4 ? "is" : "is not") + " eligible for a primary lease."), t4;
      });
    }, t2.prototype.Lo = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3 = this;
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return this.ro = false, this.$o(), this.ao && (this.ao.cancel(), this.ao = null), this.Bo(), this.qo(), [4, this._o.runTransaction("shutdown", "readwrite", [Vr.store, Jr.store], function(e2) {
                var n2 = new Xr(e2, X.U);
                return t3.So(n2).next(function() {
                  return t3.xo(n2);
                });
              })];
            case 1:
              return e.sent(), this._o.close(), this.Uo(), [2];
          }
        });
      });
    }, t2.prototype.Oo = function(t3, e) {
      var n2 = this;
      return t3.filter(function(t4) {
        return n2.Fo(t4.updateTimeMs, e) && !n2.Mo(t4.clientId);
      });
    }, t2.prototype.Qo = function() {
      var t3 = this;
      return this.runTransaction("getActiveClients", "readonly", function(e) {
        return $i(e).os().next(function(e2) {
          return t3.Oo(e2, 18e5).map(function(t4) {
            return t4.clientId;
          });
        });
      });
    }, Object.defineProperty(t2.prototype, "Tr", {
      get: function() {
        return this.ro;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.Ko = function(t3) {
      return Ai.Ai(t3, this.Kt, this.Ti, this.Ii);
    }, t2.prototype.Dr = function() {
      return this.fo;
    }, t2.prototype.Or = function() {
      return this.wo;
    }, t2.prototype.Wo = function() {
      return this.Ti;
    }, t2.prototype.jo = function() {
      return this.Eo;
    }, t2.prototype.runTransaction = function(t3, e, n2) {
      var r2 = this;
      E("IndexedDbPersistence", "Starting transaction:", t3);
      var i2, o = "readonly" === e ? "readonly" : "readwrite";
      return this._o.runTransaction(t3, o, Yr, function(o2) {
        return i2 = new Xr(o2, r2.io ? r2.io.next() : X.U), "readwrite-primary" === e ? r2.po(i2).next(function(t4) {
          return !!t4 || r2.vo(i2);
        }).next(function(e2) {
          if (!e2)
            throw T("Failed to obtain primary lease for action '" + t3 + "'."), r2.isPrimary = false, r2.eo.bo(function() {
              return r2.ho(false);
            }), new U(R.FAILED_PRECONDITION, Dr);
          return n2(i2);
        }).next(function(t4) {
          return r2.Do(i2).next(function() {
            return t4;
          });
        }) : r2.Go(i2).next(function() {
          return n2(i2);
        });
      }).then(function(t4) {
        return i2.ps(), t4;
      });
    }, t2.prototype.Go = function(t3) {
      var e = this;
      return Xi(t3).get(Vr.key).next(function(t4) {
        if (null !== t4 && e.Fo(t4.leaseTimestampMs, 5e3) && !e.Mo(t4.ownerId) && !e.Co(t4) && !(e.so || e.allowTabSynchronization && t4.allowTabSynchronization))
          throw new U(R.FAILED_PRECONDITION, Qi);
      });
    }, t2.prototype.Do = function(t3) {
      var e = new Vr(this.clientId, this.allowTabSynchronization, Date.now());
      return Xi(t3).put(Vr.key, e);
    }, t2.Wn = function() {
      return gr.Wn();
    }, t2.prototype.So = function(t3) {
      var e = this, n2 = Xi(t3);
      return n2.get(Vr.key).next(function(t4) {
        return e.Co(t4) ? (E("IndexedDbPersistence", "Releasing primary lease."), n2.delete(Vr.key)) : yr.resolve();
      });
    }, t2.prototype.Fo = function(t3, e) {
      var n2 = Date.now();
      return !(t3 < n2 - e || t3 > n2 && (T("Detected an update time that is in the future: " + t3 + " > " + n2), 1));
    }, t2.prototype.mo = function() {
      var t3 = this;
      null !== this.document && "function" == typeof this.document.addEventListener && (this.co = function() {
        t3.eo.ys(function() {
          return t3.inForeground = "visible" === t3.document.visibilityState, t3.Io();
        });
      }, this.document.addEventListener("visibilitychange", this.co), this.inForeground = "visible" === this.document.visibilityState);
    }, t2.prototype.Bo = function() {
      this.co && (this.document.removeEventListener("visibilitychange", this.co), this.co = null);
    }, t2.prototype.Ao = function() {
      var t3, e = this;
      "function" == typeof (null === (t3 = this.window) || void 0 === t3 ? void 0 : t3.addEventListener) && (this.oo = function() {
        e.$o(), e.eo.ys(function() {
          return e.Lo();
        });
      }, this.window.addEventListener("unload", this.oo));
    }, t2.prototype.qo = function() {
      this.oo && (this.window.removeEventListener("unload", this.oo), this.oo = null);
    }, t2.prototype.Mo = function(t3) {
      var e;
      try {
        var n2 = null !== (null === (e = this.To) || void 0 === e ? void 0 : e.getItem(this.ko(t3)));
        return E("IndexedDbPersistence", "Client '" + t3 + "' " + (n2 ? "is" : "is not") + " zombied in LocalStorage"), n2;
      } catch (t4) {
        return T("IndexedDbPersistence", "Failed to get zombied client id.", t4), false;
      }
    }, t2.prototype.$o = function() {
      if (this.To)
        try {
          this.To.setItem(this.ko(this.clientId), String(Date.now()));
        } catch (t3) {
          T("Failed to set zombie client id.", t3);
        }
    }, t2.prototype.Uo = function() {
      if (this.To)
        try {
          this.To.removeItem(this.ko(this.clientId));
        } catch (t3) {
        }
    }, t2.prototype.ko = function(t3) {
      return "firestore_zombie_" + this.persistenceKey + "_" + t3;
    }, t2;
  }();
  function Xi(t2) {
    return $r(t2, Vr.store);
  }
  function $i(t2) {
    return $r(t2, Jr.store);
  }
  function Zi(t2, e) {
    var n2 = t2.projectId;
    return t2.m || (n2 += "." + t2.database), "firestore/" + e + "/" + n2 + "/";
  }
  var to = function(t2, e) {
    this.progress = t2, this.zo = e;
  };
  var eo = function() {
    function t2(t3, e, n2) {
      this.wo = t3, this.Ho = e, this.Ti = n2;
    }
    return t2.prototype.Jo = function(t3, e) {
      var n2 = this;
      return this.Ho.vi(t3, e).next(function(r2) {
        return n2.Yo(t3, e, r2);
      });
    }, t2.prototype.Yo = function(t3, e, n2) {
      return this.wo.fi(t3, e).next(function(t4) {
        for (var r2 = 0, i2 = n2; r2 < i2.length; r2++) {
          t4 = i2[r2].xs(e, t4);
        }
        return t4;
      });
    }, t2.prototype.Xo = function(t3, e, n2) {
      var r2 = vn();
      return e.forEach(function(t4, e2) {
        for (var i2 = 0, o = n2; i2 < o.length; i2++) {
          e2 = o[i2].xs(t4, e2);
        }
        r2 = r2.Ht(t4, e2);
      }), r2;
    }, t2.prototype.Zo = function(t3, e) {
      var n2 = this;
      return this.wo.getEntries(t3, e).next(function(e2) {
        return n2.tc(t3, e2);
      });
    }, t2.prototype.tc = function(t3, e) {
      var n2 = this;
      return this.Ho.Si(t3, e).next(function(r2) {
        var i2 = n2.Xo(t3, e, r2), o = dn();
        return i2.forEach(function(t4, e2) {
          e2 || (e2 = new Ut(t4, Z.min())), o = o.Ht(t4, e2);
        }), o;
      });
    }, t2.prototype.Wr = function(t3, e, n2) {
      return function(t4) {
        return it.Et(t4.path) && null === t4.collectionGroup && 0 === t4.filters.length;
      }(e) ? this.ec(t3, e.path) : le(e) ? this.nc(t3, e, n2) : this.sc(t3, e, n2);
    }, t2.prototype.ec = function(t3, e) {
      return this.Jo(t3, new it(e)).next(function(t4) {
        var e2 = mn();
        return t4 instanceof Rt && (e2 = e2.Ht(t4.key, t4)), e2;
      });
    }, t2.prototype.nc = function(t3, e, n2) {
      var r2 = this, i2 = e.collectionGroup, o = mn();
      return this.Ti.Qs(t3, i2).next(function(u) {
        return yr.forEach(u, function(u2) {
          var s = function(t4, e2) {
            return new oe(e2, null, t4.Nt.slice(), t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, t4.endAt);
          }(e, u2.child(i2));
          return r2.sc(t3, s, n2).next(function(t4) {
            t4.forEach(function(t5, e2) {
              o = o.Ht(t5, e2);
            });
          });
        }).next(function() {
          return o;
        });
      });
    }, t2.prototype.sc = function(t3, e, n2) {
      var r2, i2, o = this;
      return this.wo.Wr(t3, e, n2).next(function(n3) {
        return r2 = n3, o.Ho.Ci(t3, e);
      }).next(function(e2) {
        return i2 = e2, o.ic(t3, i2, r2).next(function(t4) {
          r2 = t4;
          for (var e3 = 0, n3 = i2; e3 < n3.length; e3++)
            for (var o2 = n3[e3], u = 0, s = o2.mutations; u < s.length; u++) {
              var a = s[u], c = a.key, f = Be(a, r2.get(c), 0, o2.Ss);
              r2 = f instanceof Rt ? r2.Ht(c, f) : r2.remove(c);
            }
        });
      }).next(function() {
        return r2.forEach(function(t4, n3) {
          we(e, n3) || (r2 = r2.remove(t4));
        }), r2;
      });
    }, t2.prototype.ic = function(t3, e, n2) {
      for (var r2 = _n(), i2 = 0, o = e; i2 < o.length; i2++)
        for (var u = 0, s = o[i2].mutations; u < s.length; u++) {
          var a = s[u];
          a instanceof Qe && null === n2.get(a.key) && (r2 = r2.add(a.key));
        }
      var c = n2;
      return this.wo.getEntries(t3, r2).next(function(t4) {
        return t4.forEach(function(t5, e2) {
          null !== e2 && e2 instanceof Rt && (c = c.Ht(t5, e2));
        }), c;
      });
    }, t2;
  }();
  var no = function() {
    function t2(t3, e, n2, r2) {
      this.targetId = t3, this.fromCache = e, this.rc = n2, this.oc = r2;
    }
    return t2.cc = function(e, n2) {
      for (var r2 = _n(), i2 = _n(), o = 0, u = n2.docChanges; o < u.length; o++) {
        var s = u[o];
        switch (s.type) {
          case 0:
            r2 = r2.add(s.doc.key);
            break;
          case 1:
            i2 = i2.add(s.doc.key);
        }
      }
      return new t2(e, n2.fromCache, r2, i2);
    }, t2;
  }();
  var ro = function() {
    function t2() {
    }
    return t2.prototype.ac = function(t3) {
      this.uc = t3;
    }, t2.prototype.Wr = function(t3, n2, r2, i2) {
      var o = this;
      return function(t4) {
        return 0 === t4.filters.length && null === t4.limit && null == t4.startAt && null == t4.endAt && (0 === t4.Nt.length || 1 === t4.Nt.length && t4.Nt[0].field.ht());
      }(n2) || r2.isEqual(Z.min()) ? this.hc(t3, n2) : this.uc.Zo(t3, i2).next(function(u) {
        var s = o.lc(n2, u);
        return (ae(n2) || ce(n2)) && o._c(n2.limitType, s, i2, r2) ? o.hc(t3, n2) : (I2() <= LogLevel.DEBUG && E("QueryEngine", "Re-using previous result from %s to execute query: %s", r2.toString(), ge(n2)), o.uc.Wr(t3, n2, r2).next(function(t4) {
          return s.forEach(function(e) {
            t4 = t4.Ht(e.key, e);
          }), t4;
        }));
      });
    }, t2.prototype.lc = function(t3, e) {
      var n2 = new hn(be(t3));
      return e.forEach(function(e2, r2) {
        r2 instanceof Rt && we(t3, r2) && (n2 = n2.add(r2));
      }), n2;
    }, t2.prototype._c = function(t3, e, n2, r2) {
      if (n2.size !== e.size)
        return true;
      var i2 = "F" === t3 ? e.last() : e.first();
      return !!i2 && (i2.hasPendingWrites || i2.version.u(r2) > 0);
    }, t2.prototype.hc = function(t3, n2) {
      return I2() <= LogLevel.DEBUG && E("QueryEngine", "Using full collection scan to execute query:", ge(n2)), this.uc.Wr(t3, n2, Z.min());
    }, t2;
  }();
  var io = function() {
    function t2(t3, e, n2, r2) {
      this.persistence = t3, this.fc = e, this.Kt = r2, this.dc = new an(P2), this.wc = new Ii(function(t4) {
        return jt(t4);
      }, zt), this.Ec = Z.min(), this.Ho = t3.Ko(n2), this.Tc = t3.Or(), this.fo = t3.Dr(), this.Ic = new eo(this.Tc, this.Ho, this.persistence.Wo()), this.Eo = t3.jo(), this.fc.ac(this.Ic);
    }
    return t2.prototype.mr = function(t3) {
      var e = this;
      return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(n2) {
        return t3.pr(n2, e.dc);
      });
    }, t2;
  }();
  function oo(t2, e, n2, r2) {
    return new io(t2, e, n2, r2);
  }
  function uo(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o;
      return __generator(this, function(u) {
        switch (u.label) {
          case 0:
            return n2 = x(t2), r2 = n2.Ho, i2 = n2.Ic, [4, n2.persistence.runTransaction("Handle user change", "readonly", function(t3) {
              var o2;
              return n2.Ho.bi(t3).next(function(u2) {
                return o2 = u2, r2 = n2.persistence.Ko(e), i2 = new eo(n2.Tc, r2, n2.persistence.Wo()), r2.bi(t3);
              }).next(function(e2) {
                for (var n3 = [], r3 = [], u2 = _n(), s = 0, a = o2; s < a.length; s++) {
                  var c = a[s];
                  n3.push(c.batchId);
                  for (var f = 0, h2 = c.mutations; f < h2.length; f++) {
                    var l = h2[f];
                    u2 = u2.add(l.key);
                  }
                }
                for (var p2 = 0, d = e2; p2 < d.length; p2++) {
                  var v2 = d[p2];
                  r3.push(v2.batchId);
                  for (var y2 = 0, m = v2.mutations; y2 < m.length; y2++) {
                    var g = m[y2];
                    u2 = u2.add(g.key);
                  }
                }
                return i2.Zo(t3, u2).next(function(t4) {
                  return {
                    mc: t4,
                    Ac: n3,
                    Rc: r3
                  };
                });
              });
            })];
          case 1:
            return o = u.sent(), [2, (n2.Ho = r2, n2.Ic = i2, n2.fc.ac(n2.Ic), o)];
        }
      });
    });
  }
  function so(t2, e) {
    var n2 = x(t2);
    return n2.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(t3) {
      var r2 = e.batch.keys(), i2 = n2.Tc.Fr({
        jr: true
      });
      return function(t4, e2, n3, r3) {
        var i3 = n3.batch, o = i3.keys(), u = yr.resolve();
        return o.forEach(function(t5) {
          u = u.next(function() {
            return r3.fi(e2, t5);
          }).next(function(e3) {
            var o2 = e3, u2 = n3.Os.get(t5);
            D(null !== u2), (!o2 || o2.version.u(u2) < 0) && ((o2 = i3.Ds(t5, o2, n3)) && r3.ui(o2, n3.Fs));
          });
        }), u.next(function() {
          return t4.Ho.xi(e2, i3);
        });
      }(n2, t3, e, i2).next(function() {
        return i2.apply(t3);
      }).next(function() {
        return n2.Ho.Oi(t3);
      }).next(function() {
        return n2.Ic.Zo(t3, r2);
      });
    });
  }
  function ao(t2) {
    var e = x(t2);
    return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function(t3) {
      return e.fo.Ki(t3);
    });
  }
  function co(t2, e) {
    var n2 = x(t2), r2 = e.Mt, i2 = n2.dc;
    return n2.persistence.runTransaction("Apply remote event", "readwrite-primary", function(t3) {
      var o = n2.Tc.Fr({
        jr: true
      });
      i2 = n2.dc;
      var u = [];
      e.Oe.forEach(function(e2, o2) {
        var s2 = i2.get(o2);
        if (s2) {
          u.push(n2.fo.ir(t3, e2.Ke, o2).next(function() {
            return n2.fo.nr(t3, e2.Ue, o2);
          }));
          var a2 = e2.resumeToken;
          if (a2.o() > 0) {
            var c = s2.$t(a2, r2).Lt(t3.vs);
            i2 = i2.Ht(o2, c), function(t4, e3, n3) {
              return D(e3.resumeToken.o() > 0), 0 === t4.resumeToken.o() || (e3.Mt.j() - t4.Mt.j() >= 3e8 || n3.Ue.size + n3.Qe.size + n3.Ke.size > 0);
            }(s2, c, e2) && u.push(n2.fo.Ji(t3, c));
          }
        }
      });
      var s = dn();
      if (e.Me.forEach(function(r3, i3) {
        e.Le.has(r3) && u.push(n2.persistence.Ii.kr(t3, r3));
      }), u.push(fo(t3, o, e.Me, r2, void 0).next(function(t4) {
        s = t4;
      })), !r2.isEqual(Z.min())) {
        var a = n2.fo.Ki(t3).next(function(e2) {
          return n2.fo.ji(t3, t3.vs, r2);
        });
        u.push(a);
      }
      return yr.$n(u).next(function() {
        return o.apply(t3);
      }).next(function() {
        return n2.Ic.tc(t3, s);
      });
    }).then(function(t3) {
      return n2.dc = i2, t3;
    });
  }
  function fo(t2, e, n2, r2, i2) {
    var o = _n();
    return n2.forEach(function(t3) {
      return o = o.add(t3);
    }), e.getEntries(t2, o).next(function(t3) {
      var o2 = dn();
      return n2.forEach(function(n3, u) {
        var s = t3.get(n3), a = (null == i2 ? void 0 : i2.get(n3)) || r2;
        u instanceof Ut && u.version.isEqual(Z.min()) ? (e._i(n3, a), o2 = o2.Ht(n3, u)) : null == s || u.version.u(s.version) > 0 || 0 === u.version.u(s.version) && s.hasPendingWrites ? (e.ui(u, a), o2 = o2.Ht(n3, u)) : E("LocalStore", "Ignoring outdated watch update for ", n3, ". Current version:", s.version, " Watch version:", u.version);
      }), o2;
    });
  }
  function ho(t2, e) {
    var n2 = x(t2);
    return n2.persistence.runTransaction("Get next mutation batch", "readonly", function(t3) {
      return void 0 === e && (e = -1), n2.Ho.Vi(t3, e);
    });
  }
  function lo(t2, e) {
    var n2 = x(t2);
    return n2.persistence.runTransaction("Allocate target", "readwrite", function(t3) {
      var r2;
      return n2.fo.er(t3, e).next(function(i2) {
        return i2 ? (r2 = i2, yr.resolve(r2)) : n2.fo.qi(t3).next(function(i3) {
          return r2 = new Ie(e, i3, 0, t3.vs), n2.fo.Gi(t3, r2).next(function() {
            return r2;
          });
        });
      });
    }).then(function(t3) {
      var r2 = n2.dc.get(t3.targetId);
      return (null === r2 || t3.Mt.u(r2.Mt) > 0) && (n2.dc = n2.dc.Ht(t3.targetId, t3), n2.wc.set(e, t3.targetId)), t3;
    });
  }
  function po(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o, u;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            r2 = x(t2), i2 = r2.dc.get(e), o = n2 ? "readwrite" : "readwrite-primary", s.label = 1;
          case 1:
            return s.trys.push([1, 4, , 5]), n2 ? [3, 3] : [4, r2.persistence.runTransaction("Release target", o, function(t3) {
              return r2.persistence.Ii.removeTarget(t3, i2);
            })];
          case 2:
            s.sent(), s.label = 3;
          case 3:
            return [3, 5];
          case 4:
            if (!_r(u = s.sent()))
              throw u;
            return E("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), [3, 5];
          case 5:
            return r2.dc = r2.dc.remove(e), r2.wc.delete(i2.target), [2];
        }
      });
    });
  }
  function vo(t2, e, n2) {
    var r2 = x(t2), i2 = Z.min(), o = _n();
    return r2.persistence.runTransaction("Execute query", "readonly", function(t3) {
      return function(t4, e2, n3) {
        var r3 = x(t4), i3 = r3.wc.get(n3);
        return void 0 !== i3 ? yr.resolve(r3.dc.get(i3)) : r3.fo.er(e2, n3);
      }(r2, t3, de(e)).next(function(e2) {
        if (e2)
          return i2 = e2.lastLimboFreeSnapshotVersion, r2.fo.cr(t3, e2.targetId).next(function(t4) {
            o = t4;
          });
      }).next(function() {
        return r2.fc.Wr(t3, e, n2 ? i2 : Z.min(), n2 ? o : _n());
      }).next(function(t4) {
        return {
          documents: t4,
          Pc: o
        };
      });
    });
  }
  function yo(t2, e) {
    var n2 = x(t2), r2 = x(n2.fo), i2 = n2.dc.get(e);
    return i2 ? Promise.resolve(i2.target) : n2.persistence.runTransaction("Get target data", "readonly", function(t3) {
      return r2.Dn(t3, e).next(function(t4) {
        return t4 ? t4.target : null;
      });
    });
  }
  function mo(t2) {
    var e = x(t2);
    return e.persistence.runTransaction("Get new document changes", "readonly", function(t3) {
      return function(t4, e2, n2) {
        var r2 = x(t4), i2 = dn(), o = ii(n2), u = Ki(e2), s = IDBKeyRange.lowerBound(o, true);
        return u.ls({
          index: jr.readTimeIndex,
          range: s
        }, function(t5, e3) {
          var n3 = ni(r2.Kt, e3);
          i2 = i2.Ht(n3.key, n3), o = e3.readTime;
        }).next(function() {
          return {
            zo: i2,
            readTime: oi(o)
          };
        });
      }(e.Tc, t3, e.Ec);
    }).then(function(t3) {
      var n2 = t3.zo, r2 = t3.readTime;
      return e.Ec = r2, n2;
    });
  }
  function go(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e;
      return __generator(this, function(n2) {
        return [2, (e = x(t2)).persistence.runTransaction("Synchronize last document change read time", "readonly", function(t3) {
          return function(t4) {
            var e2 = Ki(t4), n3 = Z.min();
            return e2.ls({
              index: jr.readTimeIndex,
              reverse: true
            }, function(t5, e3, r2) {
              e3.readTime && (n3 = oi(e3.readTime)), r2.done();
            }).next(function() {
              return n3;
            });
          }(t3);
        }).then(function(t3) {
          e.Ec = t3;
        })];
      });
    });
  }
  function wo(t2, e, n2, r2) {
    return __awaiter(this, void 0, void 0, function() {
      var i2, o, u, s, a, c, f, h2, l, p2;
      return __generator(this, function(d) {
        switch (d.label) {
          case 0:
            for (i2 = x(t2), o = _n(), u = dn(), s = wn(), a = 0, c = n2; a < c.length; a++)
              f = c[a], h2 = e.yc(f.metadata.name), f.document && (o = o.add(h2)), u = u.Ht(h2, e.gc(f)), s = s.Ht(h2, e.Vc(f.metadata.readTime));
            return l = i2.Tc.Fr({
              jr: true
            }), [4, lo(i2, function(t3) {
              return de(se(et.ct("__bundle__/docs/" + t3)));
            }(r2))];
          case 1:
            return p2 = d.sent(), [2, i2.persistence.runTransaction("Apply bundle documents", "readwrite", function(t3) {
              return fo(t3, l, u, Z.min(), s).next(function(e2) {
                return l.apply(t3), e2;
              }).next(function(e2) {
                return i2.fo.Xi(t3, p2.targetId).next(function() {
                  return i2.fo.nr(t3, o, p2.targetId);
                }).next(function() {
                  return i2.Ic.tc(t3, e2);
                });
              });
            })];
        }
      });
    });
  }
  function bo(t2, e, n2) {
    return void 0 === n2 && (n2 = _n()), __awaiter(this, void 0, void 0, function() {
      var r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return [4, lo(t2, de(hi(e.bundledQuery)))];
          case 1:
            return r2 = o.sent(), [2, (i2 = x(t2)).persistence.runTransaction("Save named query", "readwrite", function(t3) {
              var o2 = zn(e.readTime);
              if (r2.Mt.u(o2) >= 0)
                return i2.Eo.Bs(t3, e);
              var u = r2.$t(V.h, o2);
              return i2.dc = i2.dc.Ht(u.targetId, u), i2.fo.Ji(t3, u).next(function() {
                return i2.fo.Xi(t3, r2.targetId);
              }).next(function() {
                return i2.fo.nr(t3, n2, r2.targetId);
              }).next(function() {
                return i2.Eo.Bs(t3, e);
              });
            })];
        }
      });
    });
  }
  var _o = function() {
    function t2(t3) {
      this.Kt = t3, this.bc = new Map(), this.vc = new Map();
    }
    return t2.prototype.Ms = function(t3, e) {
      return yr.resolve(this.bc.get(e));
    }, t2.prototype.Ls = function(t3, e) {
      var n2;
      return this.bc.set(e.id, {
        id: (n2 = e).id,
        version: n2.version,
        createTime: zn(n2.createTime)
      }), yr.resolve();
    }, t2.prototype.$s = function(t3, e) {
      return yr.resolve(this.vc.get(e));
    }, t2.prototype.Bs = function(t3, e) {
      return this.vc.set(e.name, function(t4) {
        return {
          name: t4.name,
          query: hi(t4.bundledQuery),
          readTime: zn(t4.readTime)
        };
      }(e)), yr.resolve();
    }, t2;
  }();
  var Io = function() {
    function t2() {
      this.Sc = new hn(Eo.Dc), this.Cc = new hn(Eo.xc);
    }
    return t2.prototype.nt = function() {
      return this.Sc.nt();
    }, t2.prototype.sr = function(t3, e) {
      var n2 = new Eo(t3, e);
      this.Sc = this.Sc.add(n2), this.Cc = this.Cc.add(n2);
    }, t2.prototype.Nc = function(t3, e) {
      var n2 = this;
      t3.forEach(function(t4) {
        return n2.sr(t4, e);
      });
    }, t2.prototype.rr = function(t3, e) {
      this.Fc(new Eo(t3, e));
    }, t2.prototype.Oc = function(t3, e) {
      var n2 = this;
      t3.forEach(function(t4) {
        return n2.rr(t4, e);
      });
    }, t2.prototype.kc = function(t3) {
      var e = this, n2 = new it(new et([])), r2 = new Eo(n2, t3), i2 = new Eo(n2, t3 + 1), o = [];
      return this.Cc.Ae([r2, i2], function(t4) {
        e.Fc(t4), o.push(t4.key);
      }), o;
    }, t2.prototype.Mc = function() {
      var t3 = this;
      this.Sc.forEach(function(e) {
        return t3.Fc(e);
      });
    }, t2.prototype.Fc = function(t3) {
      this.Sc = this.Sc.delete(t3), this.Cc = this.Cc.delete(t3);
    }, t2.prototype.Lc = function(t3) {
      var e = new it(new et([])), n2 = new Eo(e, t3), r2 = new Eo(e, t3 + 1), i2 = _n();
      return this.Cc.Ae([n2, r2], function(t4) {
        i2 = i2.add(t4.key);
      }), i2;
    }, t2.prototype.ki = function(t3) {
      var e = new Eo(t3, 0), n2 = this.Sc.Pe(e);
      return null !== n2 && t3.isEqual(n2.key);
    }, t2;
  }();
  var Eo = function() {
    function t2(t3, e) {
      this.key = t3, this.$c = e;
    }
    return t2.Dc = function(t3, e) {
      return it.J(t3.key, e.key) || P2(t3.$c, e.$c);
    }, t2.xc = function(t3, e) {
      return P2(t3.$c, e.$c) || it.J(t3.key, e.key);
    }, t2;
  }();
  var To = function() {
    function t2(t3, e) {
      this.Ti = t3, this.Ii = e, this.Ho = [], this.Bc = 1, this.qc = new hn(Eo.Dc);
    }
    return t2.prototype.Ri = function(t3) {
      return yr.resolve(0 === this.Ho.length);
    }, t2.prototype.Pi = function(t3, e, n2, r2) {
      var i2 = this.Bc;
      this.Bc++, this.Ho.length > 0 && this.Ho[this.Ho.length - 1];
      var o = new Zr(i2, e, n2, r2);
      this.Ho.push(o);
      for (var u = 0, s = r2; u < s.length; u++) {
        var a = s[u];
        this.qc = this.qc.add(new Eo(a.key, i2)), this.Ti.Us(t3, a.key.path.Z());
      }
      return yr.resolve(o);
    }, t2.prototype.yi = function(t3, e) {
      return yr.resolve(this.Uc(e));
    }, t2.prototype.Vi = function(t3, e) {
      var n2 = e + 1, r2 = this.Qc(n2), i2 = r2 < 0 ? 0 : r2;
      return yr.resolve(this.Ho.length > i2 ? this.Ho[i2] : null);
    }, t2.prototype.pi = function() {
      return yr.resolve(0 === this.Ho.length ? -1 : this.Bc - 1);
    }, t2.prototype.bi = function(t3) {
      return yr.resolve(this.Ho.slice());
    }, t2.prototype.vi = function(t3, e) {
      var n2 = this, r2 = new Eo(e, 0), i2 = new Eo(e, Number.POSITIVE_INFINITY), o = [];
      return this.qc.Ae([r2, i2], function(t4) {
        var e2 = n2.Uc(t4.$c);
        o.push(e2);
      }), yr.resolve(o);
    }, t2.prototype.Si = function(t3, e) {
      var n2 = this, r2 = new hn(P2);
      return e.forEach(function(t4) {
        var e2 = new Eo(t4, 0), i2 = new Eo(t4, Number.POSITIVE_INFINITY);
        n2.qc.Ae([e2, i2], function(t5) {
          r2 = r2.add(t5.$c);
        });
      }), yr.resolve(this.Kc(r2));
    }, t2.prototype.Ci = function(t3, e) {
      var n2 = e.path, r2 = n2.length + 1, i2 = n2;
      it.Et(i2) || (i2 = i2.child(""));
      var o = new Eo(new it(i2), 0), u = new hn(P2);
      return this.qc.Re(function(t4) {
        var e2 = t4.key.path;
        return !!n2.st(e2) && (e2.length === r2 && (u = u.add(t4.$c)), true);
      }, o), yr.resolve(this.Kc(u));
    }, t2.prototype.Kc = function(t3) {
      var e = this, n2 = [];
      return t3.forEach(function(t4) {
        var r2 = e.Uc(t4);
        null !== r2 && n2.push(r2);
      }), n2;
    }, t2.prototype.xi = function(t3, e) {
      var n2 = this;
      D(0 === this.Wc(e.batchId, "removed")), this.Ho.shift();
      var r2 = this.qc;
      return yr.forEach(e.mutations, function(i2) {
        var o = new Eo(i2.key, e.batchId);
        return r2 = r2.delete(o), n2.Ii.Fi(t3, i2.key);
      }).next(function() {
        n2.qc = r2;
      });
    }, t2.prototype.Ni = function(t3) {
    }, t2.prototype.ki = function(t3, e) {
      var n2 = new Eo(e, 0), r2 = this.qc.Pe(n2);
      return yr.resolve(e.isEqual(r2 && r2.key));
    }, t2.prototype.Oi = function(t3) {
      return this.Ho.length, yr.resolve();
    }, t2.prototype.Wc = function(t3, e) {
      return this.Qc(t3);
    }, t2.prototype.Qc = function(t3) {
      return 0 === this.Ho.length ? 0 : t3 - this.Ho[0].batchId;
    }, t2.prototype.Uc = function(t3) {
      var e = this.Qc(t3);
      return e < 0 || e >= this.Ho.length ? null : this.Ho[e];
    }, t2;
  }();
  var No = function() {
    function t2(t3, e) {
      this.Ti = t3, this.jc = e, this.docs = new an(it.J), this.size = 0;
    }
    return t2.prototype.ui = function(t3, e, n2) {
      var r2 = e.key, i2 = this.docs.get(r2), o = i2 ? i2.size : 0, u = this.jc(e);
      return this.docs = this.docs.Ht(r2, {
        li: e,
        size: u,
        readTime: n2
      }), this.size += u - o, this.Ti.Us(t3, r2.path.Z());
    }, t2.prototype._i = function(t3) {
      var e = this.docs.get(t3);
      e && (this.docs = this.docs.remove(t3), this.size -= e.size);
    }, t2.prototype.fi = function(t3, e) {
      var n2 = this.docs.get(e);
      return yr.resolve(n2 ? n2.li : null);
    }, t2.prototype.getEntries = function(t3, e) {
      var n2 = this, r2 = vn();
      return e.forEach(function(t4) {
        var e2 = n2.docs.get(t4);
        r2 = r2.Ht(t4, e2 ? e2.li : null);
      }), yr.resolve(r2);
    }, t2.prototype.Wr = function(t3, e, n2) {
      for (var r2 = mn(), i2 = new it(e.path.child("")), o = this.docs.ne(i2); o.ae(); ) {
        var u = o.ce(), s = u.key, a = u.value, c = a.li, f = a.readTime;
        if (!e.path.st(s.path))
          break;
        f.u(n2) <= 0 || c instanceof Rt && we(e, c) && (r2 = r2.Ht(c.key, c));
      }
      return yr.resolve(r2);
    }, t2.prototype.Gc = function(t3, e) {
      return yr.forEach(this.docs, function(t4) {
        return e(t4);
      });
    }, t2.prototype.Fr = function(t3) {
      return new Ao(this);
    }, t2.prototype.Mr = function(t3) {
      return yr.resolve(this.size);
    }, t2;
  }();
  var Ao = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).Gr = e2, n2;
    }
    return __extends(e, t2), e.prototype.Ei = function(t3) {
      var e2 = this, n2 = [];
      return this.oi.forEach(function(r2, i2) {
        i2 && i2.li ? n2.push(e2.Gr.ui(t3, i2.li, e2.ai(r2))) : e2.Gr._i(r2);
      }), yr.$n(n2);
    }, e.prototype.di = function(t3, e2) {
      return this.Gr.fi(t3, e2);
    }, e.prototype.wi = function(t3, e2) {
      return this.Gr.getEntries(t3, e2);
    }, e;
  }(Ei);
  var So = function() {
    function t2(t3) {
      this.persistence = t3, this.zc = new Ii(function(t4) {
        return jt(t4);
      }, zt), this.lastRemoteSnapshotVersion = Z.min(), this.highestTargetId = 0, this.Hc = 0, this.Jc = new Io(), this.targetCount = 0, this.Yc = Oi.$i();
    }
    return t2.prototype.mn = function(t3, e) {
      return this.zc.forEach(function(t4, n2) {
        return e(n2);
      }), yr.resolve();
    }, t2.prototype.Ki = function(t3) {
      return yr.resolve(this.lastRemoteSnapshotVersion);
    }, t2.prototype.Wi = function(t3) {
      return yr.resolve(this.Hc);
    }, t2.prototype.qi = function(t3) {
      return this.highestTargetId = this.Yc.next(), yr.resolve(this.highestTargetId);
    }, t2.prototype.ji = function(t3, e, n2) {
      return n2 && (this.lastRemoteSnapshotVersion = n2), e > this.Hc && (this.Hc = e), yr.resolve();
    }, t2.prototype.zi = function(t3) {
      this.zc.set(t3.target, t3);
      var e = t3.targetId;
      e > this.highestTargetId && (this.Yc = new Oi(e), this.highestTargetId = e), t3.sequenceNumber > this.Hc && (this.Hc = t3.sequenceNumber);
    }, t2.prototype.Gi = function(t3, e) {
      return this.zi(e), this.targetCount += 1, yr.resolve();
    }, t2.prototype.Ji = function(t3, e) {
      return this.zi(e), yr.resolve();
    }, t2.prototype.Yi = function(t3, e) {
      return this.zc.delete(e.target), this.Jc.kc(e.targetId), this.targetCount -= 1, yr.resolve();
    }, t2.prototype.Zi = function(t3, e, n2) {
      var r2 = this, i2 = 0, o = [];
      return this.zc.forEach(function(u, s) {
        s.sequenceNumber <= e && null === n2.get(s.targetId) && (r2.zc.delete(u), o.push(r2.Xi(t3, s.targetId)), i2++);
      }), yr.$n(o).next(function() {
        return i2;
      });
    }, t2.prototype.tr = function(t3) {
      return yr.resolve(this.targetCount);
    }, t2.prototype.er = function(t3, e) {
      var n2 = this.zc.get(e) || null;
      return yr.resolve(n2);
    }, t2.prototype.nr = function(t3, e, n2) {
      return this.Jc.Nc(e, n2), yr.resolve();
    }, t2.prototype.ir = function(t3, e, n2) {
      this.Jc.Oc(e, n2);
      var r2 = this.persistence.Ii, i2 = [];
      return r2 && e.forEach(function(e2) {
        i2.push(r2.Fi(t3, e2));
      }), yr.$n(i2);
    }, t2.prototype.Xi = function(t3, e) {
      return this.Jc.kc(e), yr.resolve();
    }, t2.prototype.cr = function(t3, e) {
      var n2 = this.Jc.Lc(e);
      return yr.resolve(n2);
    }, t2.prototype.ki = function(t3, e) {
      return yr.resolve(this.Jc.ki(e));
    }, t2;
  }();
  var Do = function() {
    function t2(t3, e) {
      var n2 = this;
      this.Xc = {}, this.io = new X(0), this.ro = false, this.ro = true, this.Ii = t3(this), this.fo = new So(this), this.Ti = new vi(), this.wo = function(t4, e2) {
        return new No(t4, function(t5) {
          return n2.Ii.Zc(t5);
        });
      }(this.Ti), this.Kt = new ei(e), this.Eo = new _o(this.Kt);
    }
    return t2.prototype.start = function() {
      return Promise.resolve();
    }, t2.prototype.Lo = function() {
      return this.ro = false, Promise.resolve();
    }, Object.defineProperty(t2.prototype, "Tr", {
      get: function() {
        return this.ro;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.yo = function() {
    }, t2.prototype.Vo = function() {
    }, t2.prototype.Wo = function() {
      return this.Ti;
    }, t2.prototype.Ko = function(t3) {
      var e = this.Xc[t3.R()];
      return e || (e = new To(this.Ti, this.Ii), this.Xc[t3.R()] = e), e;
    }, t2.prototype.Dr = function() {
      return this.fo;
    }, t2.prototype.Or = function() {
      return this.wo;
    }, t2.prototype.jo = function() {
      return this.Eo;
    }, t2.prototype.runTransaction = function(t3, e, n2) {
      var r2 = this;
      E("MemoryPersistence", "Starting transaction:", t3);
      var i2 = new xo(this.io.next());
      return this.Ii.ta(), n2(i2).next(function(t4) {
        return r2.Ii.ea(i2).next(function() {
          return t4;
        });
      }).Mn().then(function(t4) {
        return i2.ps(), t4;
      });
    }, t2.prototype.na = function(t3, e) {
      return yr.Bn(Object.values(this.Xc).map(function(n2) {
        return function() {
          return n2.ki(t3, e);
        };
      }));
    }, t2;
  }();
  var xo = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).vs = e2, n2;
    }
    return __extends(e, t2), e;
  }(xr);
  var ko = function() {
    function t2(t3) {
      this.persistence = t3, this.sa = new Io(), this.ia = null;
    }
    return t2.ra = function(e) {
      return new t2(e);
    }, Object.defineProperty(t2.prototype, "oa", {
      get: function() {
        if (this.ia)
          return this.ia;
        throw S();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.sr = function(t3, e, n2) {
      return this.sa.sr(n2, e), this.oa.delete(n2.toString()), yr.resolve();
    }, t2.prototype.rr = function(t3, e, n2) {
      return this.sa.rr(n2, e), this.oa.add(n2.toString()), yr.resolve();
    }, t2.prototype.Fi = function(t3, e) {
      return this.oa.add(e.toString()), yr.resolve();
    }, t2.prototype.removeTarget = function(t3, e) {
      var n2 = this;
      this.sa.kc(e.targetId).forEach(function(t4) {
        return n2.oa.add(t4.toString());
      });
      var r2 = this.persistence.Dr();
      return r2.cr(t3, e.targetId).next(function(t4) {
        t4.forEach(function(t5) {
          return n2.oa.add(t5.toString());
        });
      }).next(function() {
        return r2.Yi(t3, e);
      });
    }, t2.prototype.ta = function() {
      this.ia = new Set();
    }, t2.prototype.ea = function(t3) {
      var e = this, n2 = this.persistence.Or().Fr();
      return yr.forEach(this.oa, function(r2) {
        var i2 = it.ft(r2);
        return e.ca(t3, i2).next(function(t4) {
          t4 || n2._i(i2);
        });
      }).next(function() {
        return e.ia = null, n2.apply(t3);
      });
    }, t2.prototype.kr = function(t3, e) {
      var n2 = this;
      return this.ca(t3, e).next(function(t4) {
        t4 ? n2.oa.delete(e.toString()) : n2.oa.add(e.toString());
      });
    }, t2.prototype.Zc = function(t3) {
      return 0;
    }, t2.prototype.ca = function(t3, e) {
      var n2 = this;
      return yr.Bn([function() {
        return yr.resolve(n2.sa.ki(e));
      }, function() {
        return n2.persistence.Dr().ki(t3, e);
      }, function() {
        return n2.persistence.na(t3, e);
      }]);
    }, t2;
  }();
  function Oo(t2, e) {
    return "firestore_clients_" + t2 + "_" + e;
  }
  function Po(t2, e, n2) {
    var r2 = "firestore_mutations_" + t2 + "_" + n2;
    return e.A() && (r2 += "_" + e.uid), r2;
  }
  function Lo(t2, e) {
    return "firestore_targets_" + t2 + "_" + e;
  }
  var Co = function() {
    function t2(t3, e, n2, r2) {
      this.user = t3, this.batchId = e, this.state = n2, this.error = r2;
    }
    return t2.aa = function(e, n2, r2) {
      var i2 = JSON.parse(r2), o = "object" == typeof i2 && -1 !== ["pending", "acknowledged", "rejected"].indexOf(i2.state) && (void 0 === i2.error || "object" == typeof i2.error), u = void 0;
      return o && i2.error && ((o = "string" == typeof i2.error.message && "string" == typeof i2.error.code) && (u = new U(i2.error.code, i2.error.message))), o ? new t2(e, n2, i2.state, u) : (T("SharedClientState", "Failed to parse mutation state for ID '" + n2 + "': " + r2), null);
    }, t2.prototype.ua = function() {
      var t3 = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t3.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t3);
    }, t2;
  }();
  var Vo = function() {
    function t2(t3, e, n2) {
      this.targetId = t3, this.state = e, this.error = n2;
    }
    return t2.aa = function(e, n2) {
      var r2 = JSON.parse(n2), i2 = "object" == typeof r2 && -1 !== ["not-current", "current", "rejected"].indexOf(r2.state) && (void 0 === r2.error || "object" == typeof r2.error), o = void 0;
      return i2 && r2.error && ((i2 = "string" == typeof r2.error.message && "string" == typeof r2.error.code) && (o = new U(r2.error.code, r2.error.message))), i2 ? new t2(e, r2.state, o) : (T("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n2), null);
    }, t2.prototype.ua = function() {
      var t3 = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t3.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t3);
    }, t2;
  }();
  var Ro = function() {
    function t2(t3, e) {
      this.clientId = t3, this.activeTargetIds = e;
    }
    return t2.aa = function(e, n2) {
      for (var r2 = JSON.parse(n2), i2 = "object" == typeof r2 && r2.activeTargetIds instanceof Array, o = En(), u = 0; i2 && u < r2.activeTargetIds.length; ++u)
        i2 = gt(r2.activeTargetIds[u]), o = o.add(r2.activeTargetIds[u]);
      return i2 ? new t2(e, o) : (T("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n2), null);
    }, t2;
  }();
  var Uo = function() {
    function t2(t3, e) {
      this.clientId = t3, this.onlineState = e;
    }
    return t2.aa = function(e) {
      var n2 = JSON.parse(e);
      return "object" == typeof n2 && -1 !== ["Unknown", "Online", "Offline"].indexOf(n2.onlineState) && "string" == typeof n2.clientId ? new t2(n2.clientId, n2.onlineState) : (T("SharedClientState", "Failed to parse online state: " + e), null);
    }, t2;
  }();
  var Mo = function() {
    function t2() {
      this.activeTargetIds = En();
    }
    return t2.prototype.ha = function(t3) {
      this.activeTargetIds = this.activeTargetIds.add(t3);
    }, t2.prototype.la = function(t3) {
      this.activeTargetIds = this.activeTargetIds.delete(t3);
    }, t2.prototype.ua = function() {
      var t3 = {
        activeTargetIds: this.activeTargetIds.rt(),
        updateTimeMs: Date.now()
      };
      return JSON.stringify(t3);
    }, t2;
  }();
  var qo = function() {
    function t2(t3, e, n2, r2, i2) {
      this.window = t3, this.eo = e, this.persistenceKey = n2, this._a = r2, this.fa = null, this.da = null, this.L = null, this.wa = this.Ea.bind(this), this.Ta = new an(P2), this.Tr = false, this.Ia = [];
      var o = n2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      this.storage = this.window.localStorage, this.currentUser = i2, this.ma = Oo(this.persistenceKey, this._a), this.Aa = function(t4) {
        return "firestore_sequence_number_" + t4;
      }(this.persistenceKey), this.Ta = this.Ta.Ht(this._a, new Mo()), this.Ra = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), this.Pa = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.ya = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), this.ga = function(t4) {
        return "firestore_online_state_" + t4;
      }(this.persistenceKey), this.Va = function(t4) {
        return "firestore_bundle_loaded_" + t4;
      }(this.persistenceKey), this.window.addEventListener("storage", this.wa);
    }
    return t2.Wn = function(t3) {
      return !(!t3 || !t3.localStorage);
    }, t2.prototype.start = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i2, o, u, s, a, c, f, h2 = this;
        return __generator(this, function(l) {
          switch (l.label) {
            case 0:
              return [4, this.fa.Qo()];
            case 1:
              for (t3 = l.sent(), e = 0, n2 = t3; e < n2.length; e++)
                (r2 = n2[e]) !== this._a && (i2 = this.getItem(Oo(this.persistenceKey, r2))) && (o = Ro.aa(r2, i2)) && (this.Ta = this.Ta.Ht(o.clientId, o));
              for (this.pa(), (u = this.storage.getItem(this.ga)) && (s = this.ba(u)) && this.va(s), a = 0, c = this.Ia; a < c.length; a++)
                f = c[a], this.Ea(f);
              return this.Ia = [], this.window.addEventListener("unload", function() {
                return h2.Lo();
              }), this.Tr = true, [2];
          }
        });
      });
    }, t2.prototype.q = function(t3) {
      this.setItem(this.Aa, JSON.stringify(t3));
    }, t2.prototype.Sa = function() {
      return this.Da(this.Ta);
    }, t2.prototype.Ca = function(t3) {
      var e = false;
      return this.Ta.forEach(function(n2, r2) {
        r2.activeTargetIds.has(t3) && (e = true);
      }), e;
    }, t2.prototype.xa = function(t3) {
      this.Na(t3, "pending");
    }, t2.prototype.Fa = function(t3, e, n2) {
      this.Na(t3, e, n2), this.Oa(t3);
    }, t2.prototype.ka = function(t3) {
      var e = "not-current";
      if (this.Ca(t3)) {
        var n2 = this.storage.getItem(Lo(this.persistenceKey, t3));
        if (n2) {
          var r2 = Vo.aa(t3, n2);
          r2 && (e = r2.state);
        }
      }
      return this.Ma.ha(t3), this.pa(), e;
    }, t2.prototype.La = function(t3) {
      this.Ma.la(t3), this.pa();
    }, t2.prototype.$a = function(t3) {
      return this.Ma.activeTargetIds.has(t3);
    }, t2.prototype.Ba = function(t3) {
      this.removeItem(Lo(this.persistenceKey, t3));
    }, t2.prototype.qa = function(t3, e, n2) {
      this.Ua(t3, e, n2);
    }, t2.prototype.Qa = function(t3, e, n2) {
      var r2 = this;
      e.forEach(function(t4) {
        r2.Oa(t4);
      }), this.currentUser = t3, n2.forEach(function(t4) {
        r2.xa(t4);
      });
    }, t2.prototype.Ka = function(t3) {
      this.Wa(t3);
    }, t2.prototype.ja = function() {
      this.Ga();
    }, t2.prototype.Lo = function() {
      this.Tr && (this.window.removeEventListener("storage", this.wa), this.removeItem(this.ma), this.Tr = false);
    }, t2.prototype.getItem = function(t3) {
      var e = this.storage.getItem(t3);
      return E("SharedClientState", "READ", t3, e), e;
    }, t2.prototype.setItem = function(t3, e) {
      E("SharedClientState", "SET", t3, e), this.storage.setItem(t3, e);
    }, t2.prototype.removeItem = function(t3) {
      E("SharedClientState", "REMOVE", t3), this.storage.removeItem(t3);
    }, t2.prototype.Ea = function(t3) {
      var e = this, n2 = t3;
      if (n2.storageArea === this.storage) {
        if (E("SharedClientState", "EVENT", n2.key, n2.newValue), n2.key === this.ma)
          return void T("Received WebStorage notification for local change. Another client might have garbage-collected our state");
        this.eo.bo(function() {
          return __awaiter(e, void 0, void 0, function() {
            var t4, e2, r2, i2, o, u;
            return __generator(this, function(s) {
              if (this.Tr) {
                if (null !== n2.key) {
                  if (this.Ra.test(n2.key)) {
                    if (null == n2.newValue)
                      return t4 = this.za(n2.key), [2, this.Ha(t4, null)];
                    if (e2 = this.Ja(n2.key, n2.newValue))
                      return [2, this.Ha(e2.clientId, e2)];
                  } else if (this.Pa.test(n2.key)) {
                    if (null !== n2.newValue && (r2 = this.Ya(n2.key, n2.newValue)))
                      return [2, this.Xa(r2)];
                  } else if (this.ya.test(n2.key)) {
                    if (null !== n2.newValue && (i2 = this.Za(n2.key, n2.newValue)))
                      return [2, this.tu(i2)];
                  } else if (n2.key === this.ga) {
                    if (null !== n2.newValue && (o = this.ba(n2.newValue)))
                      return [2, this.va(o)];
                  } else if (n2.key === this.Aa)
                    (u = function(t5) {
                      var e3 = X.U;
                      if (null != t5)
                        try {
                          var n3 = JSON.parse(t5);
                          D("number" == typeof n3), e3 = n3;
                        } catch (t6) {
                          T("SharedClientState", "Failed to read sequence number from WebStorage", t6);
                        }
                      return e3;
                    }(n2.newValue)) !== X.U && this.L(u);
                  else if (n2.key === this.Va)
                    return [2, this.fa.eu()];
                }
              } else
                this.Ia.push(n2);
              return [2];
            });
          });
        });
      }
    }, Object.defineProperty(t2.prototype, "Ma", {
      get: function() {
        return this.Ta.get(this._a);
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.pa = function() {
      this.setItem(this.ma, this.Ma.ua());
    }, t2.prototype.Na = function(t3, e, n2) {
      var r2 = new Co(this.currentUser, t3, e, n2), i2 = Po(this.persistenceKey, this.currentUser, t3);
      this.setItem(i2, r2.ua());
    }, t2.prototype.Oa = function(t3) {
      var e = Po(this.persistenceKey, this.currentUser, t3);
      this.removeItem(e);
    }, t2.prototype.Wa = function(t3) {
      var e = {
        clientId: this._a,
        onlineState: t3
      };
      this.storage.setItem(this.ga, JSON.stringify(e));
    }, t2.prototype.Ua = function(t3, e, n2) {
      var r2 = Lo(this.persistenceKey, t3), i2 = new Vo(t3, e, n2);
      this.setItem(r2, i2.ua());
    }, t2.prototype.Ga = function() {
      this.setItem(this.Va, "value-not-used");
    }, t2.prototype.za = function(t3) {
      var e = this.Ra.exec(t3);
      return e ? e[1] : null;
    }, t2.prototype.Ja = function(t3, e) {
      var n2 = this.za(t3);
      return Ro.aa(n2, e);
    }, t2.prototype.Ya = function(t3, e) {
      var n2 = this.Pa.exec(t3), r2 = Number(n2[1]), i2 = void 0 !== n2[2] ? n2[2] : null;
      return Co.aa(new K(i2), r2, e);
    }, t2.prototype.Za = function(t3, e) {
      var n2 = this.ya.exec(t3), r2 = Number(n2[1]);
      return Vo.aa(r2, e);
    }, t2.prototype.ba = function(t3) {
      return Uo.aa(t3);
    }, t2.prototype.Xa = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          return t3.user.uid === this.currentUser.uid ? [2, this.fa.nu(t3.batchId, t3.state, t3.error)] : (E("SharedClientState", "Ignoring mutation for non-active user " + t3.user.uid), [2]);
        });
      });
    }, t2.prototype.tu = function(t3) {
      return this.fa.su(t3.targetId, t3.state, t3.error);
    }, t2.prototype.Ha = function(t3, e) {
      var n2 = this, r2 = e ? this.Ta.Ht(t3, e) : this.Ta.remove(t3), i2 = this.Da(this.Ta), o = this.Da(r2), u = [], s = [];
      return o.forEach(function(t4) {
        i2.has(t4) || u.push(t4);
      }), i2.forEach(function(t4) {
        o.has(t4) || s.push(t4);
      }), this.fa.iu(u, s).then(function() {
        n2.Ta = r2;
      });
    }, t2.prototype.va = function(t3) {
      this.Ta.get(t3.clientId) && this.da(t3.onlineState);
    }, t2.prototype.Da = function(t3) {
      var e = En();
      return t3.forEach(function(t4, n2) {
        e = e.ye(n2.activeTargetIds);
      }), e;
    }, t2;
  }();
  var Fo = function() {
    function t2() {
      this.ru = new Mo(), this.ou = {}, this.da = null, this.L = null;
    }
    return t2.prototype.xa = function(t3) {
    }, t2.prototype.Fa = function(t3, e, n2) {
    }, t2.prototype.ka = function(t3) {
      return this.ru.ha(t3), this.ou[t3] || "not-current";
    }, t2.prototype.qa = function(t3, e, n2) {
      this.ou[t3] = e;
    }, t2.prototype.La = function(t3) {
      this.ru.la(t3);
    }, t2.prototype.$a = function(t3) {
      return this.ru.activeTargetIds.has(t3);
    }, t2.prototype.Ba = function(t3) {
      delete this.ou[t3];
    }, t2.prototype.Sa = function() {
      return this.ru.activeTargetIds;
    }, t2.prototype.Ca = function(t3) {
      return this.ru.activeTargetIds.has(t3);
    }, t2.prototype.start = function() {
      return this.ru = new Mo(), Promise.resolve();
    }, t2.prototype.Qa = function(t3, e, n2) {
    }, t2.prototype.Ka = function(t3) {
    }, t2.prototype.Lo = function() {
    }, t2.prototype.q = function(t3) {
    }, t2.prototype.ja = function() {
    }, t2;
  }();
  var jo = function() {
    function t2() {
    }
    return t2.prototype.cu = function(t3) {
    }, t2.prototype.Lo = function() {
    }, t2;
  }();
  var zo = function() {
    function t2() {
      var t3 = this;
      this.au = function() {
        return t3.uu();
      }, this.hu = function() {
        return t3.lu();
      }, this._u = [], this.fu();
    }
    return t2.prototype.cu = function(t3) {
      this._u.push(t3);
    }, t2.prototype.Lo = function() {
      window.removeEventListener("online", this.au), window.removeEventListener("offline", this.hu);
    }, t2.prototype.fu = function() {
      window.addEventListener("online", this.au), window.addEventListener("offline", this.hu);
    }, t2.prototype.uu = function() {
      E("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
      for (var t3 = 0, e = this._u; t3 < e.length; t3++) {
        (0, e[t3])(0);
      }
    }, t2.prototype.lu = function() {
      E("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
      for (var t3 = 0, e = this._u; t3 < e.length; t3++) {
        (0, e[t3])(1);
      }
    }, t2.Wn = function() {
      return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }, t2;
  }();
  var Go = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
  };
  var Bo = function() {
    function t2(t3) {
      this.du = t3.du, this.wu = t3.wu;
    }
    return t2.prototype.Eu = function(t3) {
      this.Tu = t3;
    }, t2.prototype.Iu = function(t3) {
      this.mu = t3;
    }, t2.prototype.onMessage = function(t3) {
      this.Au = t3;
    }, t2.prototype.close = function() {
      this.wu();
    }, t2.prototype.send = function(t3) {
      this.du(t3);
    }, t2.prototype.Ru = function() {
      this.Tu();
    }, t2.prototype.Pu = function(t3) {
      this.mu(t3);
    }, t2.prototype.yu = function(t3) {
      this.Au(t3);
    }, t2;
  }();
  var Ko = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this, e2) || this).forceLongPolling = e2.forceLongPolling, n2.I = e2.I, n2;
    }
    return __extends(e, t2), e.prototype.Du = function(t3, e2, n2, r2) {
      return new Promise(function(i2, o) {
        var u = new XhrIo();
        u.listenOnce(EventType.COMPLETE, function() {
          try {
            switch (u.getLastErrorCode()) {
              case ErrorCode.NO_ERROR:
                var e3 = u.getResponseJson();
                E("Connection", "XHR received:", JSON.stringify(e3)), i2(e3);
                break;
              case ErrorCode.TIMEOUT:
                E("Connection", 'RPC "' + t3 + '" timed out'), o(new U(R.DEADLINE_EXCEEDED, "Request time out"));
                break;
              case ErrorCode.HTTP_ERROR:
                var n3 = u.getStatus();
                if (E("Connection", 'RPC "' + t3 + '" failed with status:', n3, "response text:", u.getResponseText()), n3 > 0) {
                  var r3 = u.getResponseJson().error;
                  if (r3 && r3.status && r3.message) {
                    var s2 = function(t4) {
                      var e4 = t4.toLowerCase().replace(/_/g, "-");
                      return Object.values(R).indexOf(e4) >= 0 ? e4 : R.UNKNOWN;
                    }(r3.status);
                    o(new U(s2, r3.message));
                  } else
                    o(new U(R.UNKNOWN, "Server responded with status " + u.getStatus()));
                } else
                  o(new U(R.UNAVAILABLE, "Connection failed."));
                break;
              default:
                S();
            }
          } finally {
            E("Connection", 'RPC "' + t3 + '" completed.');
          }
        });
        var s = JSON.stringify(r2);
        u.send(e2, "POST", s, n2, 15);
      });
    }, e.prototype.xu = function(t3, e2) {
      var n2 = [this.Vu, "/", "google.firestore.v1.Firestore", "/", t3, "/channel"], c = createWebChannelTransport(), f = getStatEventTarget(), h2 = {
        httpSessionIdParam: "gsessionid",
        initMessageHeaders: {},
        messageUrlParams: {
          database: "projects/" + this.T.projectId + "/databases/" + this.T.database
        },
        sendRawJson: true,
        supportsCrossDomainXhr: true,
        internalChannelParams: {
          forwardChannelRequestTimeoutMs: 6e5
        },
        forceLongPolling: this.forceLongPolling,
        detectBufferingProxy: this.I
      };
      this.Su(h2.initMessageHeaders, e2), isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (h2.httpHeadersOverwriteParam = "$httpHeaders");
      var m = n2.join("");
      E("Connection", "Creating WebChannel: " + m, h2);
      var g = c.createWebChannel(m, h2), w2 = false, b = false, _2 = new Bo({
        du: function(t4) {
          b ? E("Connection", "Not sending because WebChannel is closed:", t4) : (w2 || (E("Connection", "Opening WebChannel transport."), g.open(), w2 = true), E("Connection", "WebChannel sending:", t4), g.send(t4));
        },
        wu: function() {
          return g.close();
        }
      }), I4 = function(t4, e3, n3) {
        t4.listen(e3, function(t5) {
          try {
            n3(t5);
          } catch (t6) {
            setTimeout(function() {
              throw t6;
            }, 0);
          }
        });
      };
      return I4(g, WebChannel.EventType.OPEN, function() {
        b || E("Connection", "WebChannel transport opened.");
      }), I4(g, WebChannel.EventType.CLOSE, function() {
        b || (b = true, E("Connection", "WebChannel transport closed"), _2.Pu());
      }), I4(g, WebChannel.EventType.ERROR, function(t4) {
        b || (b = true, N("Connection", "WebChannel transport errored:", t4), _2.Pu(new U(R.UNAVAILABLE, "The operation could not be completed")));
      }), I4(g, WebChannel.EventType.MESSAGE, function(t4) {
        var e3;
        if (!b) {
          var n3 = t4.data[0];
          D(!!n3);
          var r2 = n3, i2 = r2.error || (null === (e3 = r2[0]) || void 0 === e3 ? void 0 : e3.error);
          if (i2) {
            E("Connection", "WebChannel received error:", i2);
            var o = i2.status, u = function(t5) {
              var e4 = tn[t5];
              if (void 0 !== e4)
                return sn(e4);
            }(o), s = i2.message;
            void 0 === u && (u = R.INTERNAL, s = "Unknown error status: " + o + " with message " + i2.message), b = true, _2.Pu(new U(u, s)), g.close();
          } else
            E("Connection", "WebChannel received:", n3), _2.yu(n3);
        }
      }), I4(f, Event.STAT_EVENT, function(t4) {
        t4.stat === Stat.PROXY ? E("Connection", "Detected buffering proxy") : t4.stat === Stat.NOPROXY && E("Connection", "Detected no buffering proxy");
      }), setTimeout(function() {
        _2.Ru();
      }, 0), _2;
    }, e;
  }(function() {
    function t2(t3) {
      this.gu = t3, this.T = t3.T;
      var e = t3.ssl ? "https" : "http";
      this.Vu = e + "://" + t3.host, this.pu = "projects/" + this.T.projectId + "/databases/" + this.T.database + "/documents";
    }
    return t2.prototype.bu = function(t3, e, n2, r2) {
      var i2 = this.vu(t3, e);
      E("RestConnection", "Sending: ", i2, n2);
      var o = {};
      return this.Su(o, r2), this.Du(t3, i2, o, n2).then(function(t4) {
        return E("RestConnection", "Received: ", t4), t4;
      }, function(e2) {
        throw N("RestConnection", t3 + " failed with error: ", e2, "url: ", i2, "request:", n2), e2;
      });
    }, t2.prototype.Cu = function(t3, e, n2, r2) {
      return this.bu(t3, e, n2, r2);
    }, t2.prototype.Su = function(t3, e) {
      if (t3["X-Goog-Api-Client"] = "gl-js/ fire/8.2.4", t3["Content-Type"] = "text/plain", e)
        for (var n2 in e.V)
          e.V.hasOwnProperty(n2) && (t3[n2] = e.V[n2]);
    }, t2.prototype.vu = function(t3, e) {
      var n2 = Go[t3];
      return this.Vu + "/v1/" + e + ":" + n2;
    }, t2;
  }());
  function Ho() {
    return "undefined" != typeof window ? window : null;
  }
  function Jo() {
    return "undefined" != typeof document ? document : null;
  }
  function Wo(t2) {
    return new Mn(t2, true);
  }
  var Qo = function() {
    function t2(t3, e, n2, r2, i2) {
      void 0 === n2 && (n2 = 1e3), void 0 === r2 && (r2 = 1.5), void 0 === i2 && (i2 = 6e4), this.eo = t3, this.ds = e, this.Nu = n2, this.Fu = r2, this.Ou = i2, this.ku = 0, this.Mu = null, this.Lu = Date.now(), this.reset();
    }
    return t2.prototype.reset = function() {
      this.ku = 0;
    }, t2.prototype.$u = function() {
      this.ku = this.Ou;
    }, t2.prototype.Bu = function(t3) {
      var e = this;
      this.cancel();
      var n2 = Math.floor(this.ku + this.qu()), r2 = Math.max(0, Date.now() - this.Lu), i2 = Math.max(0, n2 - r2);
      i2 > 0 && E("ExponentialBackoff", "Backing off for " + i2 + " ms (base delay: " + this.ku + " ms, delay with jitter: " + n2 + " ms, last attempt: " + r2 + " ms ago)"), this.Mu = this.eo.Ir(this.ds, i2, function() {
        return e.Lu = Date.now(), t3();
      }), this.ku *= this.Fu, this.ku < this.Nu && (this.ku = this.Nu), this.ku > this.Ou && (this.ku = this.Ou);
    }, t2.prototype.Uu = function() {
      null !== this.Mu && (this.Mu.Ps(), this.Mu = null);
    }, t2.prototype.cancel = function() {
      null !== this.Mu && (this.Mu.cancel(), this.Mu = null);
    }, t2.prototype.qu = function() {
      return (Math.random() - 0.5) * this.ku;
    }, t2;
  }();
  var Yo = function() {
    function t2(t3, e, n2, r2, i2, o) {
      this.eo = t3, this.Qu = n2, this.Ku = r2, this.Wu = i2, this.listener = o, this.state = 0, this.ju = 0, this.Gu = null, this.stream = null, this.zu = new Qo(t3, e);
    }
    return t2.prototype.Hu = function() {
      return 1 === this.state || 2 === this.state || 4 === this.state;
    }, t2.prototype.Ju = function() {
      return 2 === this.state;
    }, t2.prototype.start = function() {
      3 !== this.state ? this.auth() : this.Yu();
    }, t2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return this.Hu() ? [4, this.close(0)] : [3, 2];
            case 1:
              t3.sent(), t3.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, t2.prototype.Xu = function() {
      this.state = 0, this.zu.reset();
    }, t2.prototype.Zu = function() {
      var t3 = this;
      this.Ju() && null === this.Gu && (this.Gu = this.eo.Ir(this.Qu, 6e4, function() {
        return t3.th();
      }));
    }, t2.prototype.eh = function(t3) {
      this.nh(), this.stream.send(t3);
    }, t2.prototype.th = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          return this.Ju() ? [2, this.close(0)] : [2];
        });
      });
    }, t2.prototype.nh = function() {
      this.Gu && (this.Gu.cancel(), this.Gu = null);
    }, t2.prototype.close = function(t3, e) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.nh(), this.zu.cancel(), this.ju++, 3 !== t3 ? this.zu.reset() : e && e.code === R.RESOURCE_EXHAUSTED ? (T(e.toString()), T("Using maximum backoff delay to prevent overloading the backend."), this.zu.$u()) : e && e.code === R.UNAUTHENTICATED && this.Wu.v(), null !== this.stream && (this.sh(), this.stream.close(), this.stream = null), this.state = t3, [4, this.listener.Iu(e)];
            case 1:
              return n2.sent(), [2];
          }
        });
      });
    }, t2.prototype.sh = function() {
    }, t2.prototype.auth = function() {
      var t3 = this;
      this.state = 1;
      var e = this.ih(this.ju), n2 = this.ju;
      this.Wu.getToken().then(function(e2) {
        t3.ju === n2 && t3.rh(e2);
      }, function(n3) {
        e(function() {
          var e2 = new U(R.UNKNOWN, "Fetching auth token failed: " + n3.message);
          return t3.oh(e2);
        });
      });
    }, t2.prototype.rh = function(t3) {
      var e = this, n2 = this.ih(this.ju);
      this.stream = this.ah(t3), this.stream.Eu(function() {
        n2(function() {
          return e.state = 2, e.listener.Eu();
        });
      }), this.stream.Iu(function(t4) {
        n2(function() {
          return e.oh(t4);
        });
      }), this.stream.onMessage(function(t4) {
        n2(function() {
          return e.onMessage(t4);
        });
      });
    }, t2.prototype.Yu = function() {
      var t3 = this;
      this.state = 4, this.zu.Bu(function() {
        return __awaiter(t3, void 0, void 0, function() {
          return __generator(this, function(t4) {
            return this.state = 0, this.start(), [2];
          });
        });
      });
    }, t2.prototype.oh = function(t3) {
      return E("PersistentStream", "close with error: " + t3), this.stream = null, this.close(3, t3);
    }, t2.prototype.ih = function(t3) {
      var e = this;
      return function(n2) {
        e.eo.ys(function() {
          return e.ju === t3 ? n2() : (E("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
        });
      };
    }, t2;
  }();
  var Xo = function(t2) {
    function e(e2, n2, r2, i2, o) {
      var u = this;
      return (u = t2.call(this, e2, "listen_stream_connection_backoff", "listen_stream_idle", n2, r2, o) || this).Kt = i2, u;
    }
    return __extends(e, t2), e.prototype.ah = function(t3) {
      return this.Ku.xu("Listen", t3);
    }, e.prototype.onMessage = function(t3) {
      this.zu.reset();
      var e2 = function(t4, e3) {
        var n3;
        if ("targetChange" in e3) {
          e3.targetChange;
          var r2 = function(t5) {
            return "NO_CHANGE" === t5 ? 0 : "ADD" === t5 ? 1 : "REMOVE" === t5 ? 2 : "CURRENT" === t5 ? 3 : "RESET" === t5 ? 4 : S();
          }(e3.targetChange.targetChangeType || "NO_CHANGE"), i2 = e3.targetChange.targetIds || [], o = function(t5, e4) {
            return t5.qt ? (D(void 0 === e4 || "string" == typeof e4), V.fromBase64String(e4 || "")) : (D(void 0 === e4 || e4 instanceof Uint8Array), V.fromUint8Array(e4 || new Uint8Array()));
          }(t4, e3.targetChange.resumeToken), u = (s = e3.targetChange.cause) && function(t5) {
            var e4 = void 0 === t5.code ? R.UNKNOWN : sn(t5.code);
            return new U(e4, t5.message || "");
          }(s);
          n3 = new On(r2, i2, o, u || null);
        } else if ("documentChange" in e3) {
          e3.documentChange, (r2 = e3.documentChange).document, r2.document.name, r2.document.updateTime, i2 = Hn(t4, r2.document.name), o = zn(r2.document.updateTime);
          var s = new Pt({
            mapValue: {
              fields: r2.document.fields
            }
          }), a = (u = new Rt(i2, o, s, {}), r2.targetIds || []), c = r2.removedTargetIds || [];
          n3 = new xn(a, c, u.key, u);
        } else if ("documentDelete" in e3)
          e3.documentDelete, (r2 = e3.documentDelete).document, i2 = Hn(t4, r2.document), o = r2.readTime ? zn(r2.readTime) : Z.min(), s = new Ut(i2, o), u = r2.removedTargetIds || [], n3 = new xn([], u, s.key, s);
        else if ("documentRemove" in e3)
          e3.documentRemove, (r2 = e3.documentRemove).document, i2 = Hn(t4, r2.document), o = r2.removedTargetIds || [], n3 = new xn([], o, i2, null);
        else {
          if (!("filter" in e3))
            return S();
          e3.filter;
          var f = e3.filter;
          f.targetId, r2 = f.count || 0, i2 = new on(r2), o = f.targetId, n3 = new kn(o, i2);
        }
        return n3;
      }(this.Kt, t3), n2 = function(t4) {
        if (!("targetChange" in t4))
          return Z.min();
        var e3 = t4.targetChange;
        return e3.targetIds && e3.targetIds.length ? Z.min() : e3.readTime ? zn(e3.readTime) : Z.min();
      }(t3);
      return this.listener.uh(e2, n2);
    }, e.prototype.hh = function(t3) {
      var e2 = {};
      e2.database = Qn(this.Kt), e2.addTarget = function(t4, e3) {
        var n3, r2 = e3.target;
        return (n3 = Gt(r2) ? {
          documents: er(t4, r2)
        } : {
          query: nr(t4, r2)
        }).targetId = e3.targetId, e3.resumeToken.o() > 0 ? n3.resumeToken = Fn(t4, e3.resumeToken) : e3.Mt.u(Z.min()) > 0 && (n3.readTime = qn(t4, e3.Mt.G())), n3;
      }(this.Kt, t3);
      var n2 = function(t4, e3) {
        var n3 = function(t5, e4) {
          switch (e4) {
            case 0:
              return null;
            case 1:
              return "existence-filter-mismatch";
            case 2:
              return "limbo-document";
            default:
              return S();
          }
        }(0, e3.kt);
        return null == n3 ? null : {
          "goog-listen-tags": n3
        };
      }(this.Kt, t3);
      n2 && (e2.labels = n2), this.eh(e2);
    }, e.prototype.lh = function(t3) {
      var e2 = {};
      e2.database = Qn(this.Kt), e2.removeTarget = t3, this.eh(e2);
    }, e;
  }(Yo);
  var $o = function(t2) {
    function e(e2, n2, r2, i2, o) {
      var u = this;
      return (u = t2.call(this, e2, "write_stream_connection_backoff", "write_stream_idle", n2, r2, o) || this).Kt = i2, u._h = false, u;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "fh", {
      get: function() {
        return this._h;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.start = function() {
      this._h = false, this.lastStreamToken = void 0, t2.prototype.start.call(this);
    }, e.prototype.sh = function() {
      this._h && this.dh([]);
    }, e.prototype.ah = function(t3) {
      return this.Ku.xu("Write", t3);
    }, e.prototype.onMessage = function(t3) {
      if (D(!!t3.streamToken), this.lastStreamToken = t3.streamToken, this._h) {
        this.zu.reset();
        var e2 = function(t4, e3) {
          return t4 && t4.length > 0 ? (D(void 0 !== e3), t4.map(function(t5) {
            return function(t6, e4) {
              var n3 = t6.updateTime ? zn(t6.updateTime) : zn(e4);
              n3.isEqual(Z.min()) && (n3 = zn(e4));
              var r2 = null;
              return t6.transformResults && t6.transformResults.length > 0 && (r2 = t6.transformResults), new qe(n3, r2);
            }(t5, e3);
          })) : [];
        }(t3.writeResults, t3.commitTime), n2 = zn(t3.commitTime);
        return this.listener.wh(n2, e2);
      }
      return D(!t3.writeResults || 0 === t3.writeResults.length), this._h = true, this.listener.Eh();
    }, e.prototype.Th = function() {
      var t3 = {};
      t3.database = Qn(this.Kt), this.eh(t3);
    }, e.prototype.dh = function(t3) {
      var e2 = this, n2 = {
        streamToken: this.lastStreamToken,
        writes: t3.map(function(t4) {
          return Zn(e2.Kt, t4);
        })
      };
      this.eh(n2);
    }, e;
  }(Yo);
  var Zo = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).credentials = e2, i2.Ku = n2, i2.Kt = r2, i2.Ih = false, i2;
    }
    return __extends(e, t2), e.prototype.mh = function() {
      if (this.Ih)
        throw new U(R.FAILED_PRECONDITION, "The client has already been terminated.");
    }, e.prototype.bu = function(t3, e2, n2) {
      var r2 = this;
      return this.mh(), this.credentials.getToken().then(function(i2) {
        return r2.Ku.bu(t3, e2, n2, i2);
      }).catch(function(t4) {
        throw t4.code === R.UNAUTHENTICATED && r2.credentials.v(), t4;
      });
    }, e.prototype.Cu = function(t3, e2, n2) {
      var r2 = this;
      return this.mh(), this.credentials.getToken().then(function(i2) {
        return r2.Ku.Cu(t3, e2, n2, i2);
      }).catch(function(t4) {
        throw t4.code === R.UNAUTHENTICATED && r2.credentials.v(), t4;
      });
    }, e.prototype.terminate = function() {
      this.Ih = false;
    }, e;
  }(function() {
  });
  var tu = function() {
    function t2(t3, e) {
      this.fs = t3, this.da = e, this.state = "Unknown", this.Ah = 0, this.Rh = null, this.Ph = true;
    }
    return t2.prototype.yh = function() {
      var t3 = this;
      0 === this.Ah && (this.gh("Unknown"), this.Rh = this.fs.Ir("online_state_timeout", 1e4, function() {
        return t3.Rh = null, t3.Vh("Backend didn't respond within 10 seconds."), t3.gh("Offline"), Promise.resolve();
      }));
    }, t2.prototype.ph = function(t3) {
      "Online" === this.state ? this.gh("Unknown") : (this.Ah++, this.Ah >= 1 && (this.bh(), this.Vh("Connection failed 1 times. Most recent error: " + t3.toString()), this.gh("Offline")));
    }, t2.prototype.set = function(t3) {
      this.bh(), this.Ah = 0, "Online" === t3 && (this.Ph = false), this.gh(t3);
    }, t2.prototype.gh = function(t3) {
      t3 !== this.state && (this.state = t3, this.da(t3));
    }, t2.prototype.Vh = function(t3) {
      var e = "Could not reach Cloud Firestore backend. " + t3 + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
      this.Ph ? (T(e), this.Ph = false) : E("OnlineStateTracker", e);
    }, t2.prototype.bh = function() {
      null !== this.Rh && (this.Rh.cancel(), this.Rh = null);
    }, t2;
  }();
  var eu = function(t2, e, n2, r2, i2) {
    var o = this;
    this.Sh = t2, this.Dh = e, this.fs = n2, this.Ch = {}, this.xh = [], this.Nh = new Map(), this.Fh = new Set(), this.Oh = [], this.kh = i2, this.kh.cu(function(t3) {
      n2.ys(function() {
        return __awaiter(o, void 0, void 0, function() {
          return __generator(this, function(t4) {
            switch (t4.label) {
              case 0:
                return fu(this) ? (E("RemoteStore", "Restarting streams for network reachability change."), [4, function(t5) {
                  return __awaiter(this, void 0, void 0, function() {
                    var e2;
                    return __generator(this, function(n3) {
                      switch (n3.label) {
                        case 0:
                          return (e2 = x(t5)).Fh.add(4), [4, ru(e2)];
                        case 1:
                          return n3.sent(), e2.Mh.set("Unknown"), e2.Fh.delete(4), [4, nu(e2)];
                        case 2:
                          return n3.sent(), [2];
                      }
                    });
                  });
                }(this)]) : [3, 2];
              case 1:
                t4.sent(), t4.label = 2;
              case 2:
                return [2];
            }
          });
        });
      });
    }), this.Mh = new tu(n2, r2);
  };
  function nu(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n2;
      return __generator(this, function(r2) {
        switch (r2.label) {
          case 0:
            if (!fu(t2))
              return [3, 4];
            e = 0, n2 = t2.Oh, r2.label = 1;
          case 1:
            return e < n2.length ? [4, (0, n2[e])(true)] : [3, 4];
          case 2:
            r2.sent(), r2.label = 3;
          case 3:
            return e++, [3, 1];
          case 4:
            return [2];
        }
      });
    });
  }
  function ru(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n2;
      return __generator(this, function(r2) {
        switch (r2.label) {
          case 0:
            e = 0, n2 = t2.Oh, r2.label = 1;
          case 1:
            return e < n2.length ? [4, (0, n2[e])(false)] : [3, 4];
          case 2:
            r2.sent(), r2.label = 3;
          case 3:
            return e++, [3, 1];
          case 4:
            return [2];
        }
      });
    });
  }
  function iu(t2, e) {
    var n2 = x(t2);
    n2.Nh.has(e.targetId) || (n2.Nh.set(e.targetId, e), cu(n2) ? au(n2) : Nu(n2).Ju() && uu(n2, e));
  }
  function ou(t2, e) {
    var n2 = x(t2), r2 = Nu(n2);
    n2.Nh.delete(e), r2.Ju() && su(n2, e), 0 === n2.Nh.size && (r2.Ju() ? r2.Zu() : fu(n2) && n2.Mh.set("Unknown"));
  }
  function uu(t2, e) {
    t2.Lh.cn(e.targetId), Nu(t2).hh(e);
  }
  function su(t2, e) {
    t2.Lh.cn(e), Nu(t2).lh(e);
  }
  function au(t2) {
    t2.Lh = new Ln({
      Sn: function(e) {
        return t2.Ch.Sn(e);
      },
      Dn: function(e) {
        return t2.Nh.get(e) || null;
      }
    }), Nu(t2).start(), t2.Mh.yh();
  }
  function cu(t2) {
    return fu(t2) && !Nu(t2).Hu() && t2.Nh.size > 0;
  }
  function fu(t2) {
    return 0 === x(t2).Fh.size;
  }
  function hu(t2) {
    t2.Lh = void 0;
  }
  function lu(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        return t2.Nh.forEach(function(e2, n2) {
          uu(t2, e2);
        }), [2];
      });
    });
  }
  function pu(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(n2) {
        return hu(t2), cu(t2) ? (t2.Mh.ph(e), au(t2)) : t2.Mh.set("Unknown"), [2];
      });
    });
  }
  function du(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o;
      return __generator(this, function(u) {
        switch (u.label) {
          case 0:
            if (t2.Mh.set("Online"), !(e instanceof On && 2 === e.state && e.cause))
              return [3, 6];
            u.label = 1;
          case 1:
            return u.trys.push([1, 3, , 5]), [
              4,
              function(t3, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n3, r3, i3, o2;
                  return __generator(this, function(u2) {
                    switch (u2.label) {
                      case 0:
                        n3 = e2.cause, r3 = 0, i3 = e2.targetIds, u2.label = 1;
                      case 1:
                        return r3 < i3.length ? (o2 = i3[r3], t3.Nh.has(o2) ? [4, t3.Ch.$h(o2, n3)] : [3, 3]) : [3, 5];
                      case 2:
                        u2.sent(), t3.Nh.delete(o2), t3.Lh.removeTarget(o2), u2.label = 3;
                      case 3:
                        u2.label = 4;
                      case 4:
                        return r3++, [3, 1];
                      case 5:
                        return [2];
                    }
                  });
                });
              }(t2, e)
            ];
          case 2:
            return u.sent(), [3, 5];
          case 3:
            return r2 = u.sent(), E("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r2), [4, vu(t2, r2)];
          case 4:
            return u.sent(), [3, 5];
          case 5:
            return [3, 13];
          case 6:
            if (e instanceof xn ? t2.Lh.wn(e) : e instanceof kn ? t2.Lh.yn(e) : t2.Lh.In(e), n2.isEqual(Z.min()))
              return [3, 13];
            u.label = 7;
          case 7:
            return u.trys.push([7, 11, , 13]), [4, ao(t2.Sh)];
          case 8:
            return i2 = u.sent(), n2.u(i2) >= 0 ? [
              4,
              function(t3, e2) {
                var n3 = t3.Lh.pn(e2);
                return n3.Oe.forEach(function(n4, r3) {
                  if (n4.resumeToken.o() > 0) {
                    var i3 = t3.Nh.get(r3);
                    i3 && t3.Nh.set(r3, i3.$t(n4.resumeToken, e2));
                  }
                }), n3.ke.forEach(function(e3) {
                  var n4 = t3.Nh.get(e3);
                  if (n4) {
                    t3.Nh.set(e3, n4.$t(V.h, n4.Mt)), su(t3, e3);
                    var r3 = new Ie(n4.target, e3, 1, n4.sequenceNumber);
                    uu(t3, r3);
                  }
                }), t3.Ch.Bh(n3);
              }(t2, n2)
            ] : [3, 10];
          case 9:
            u.sent(), u.label = 10;
          case 10:
            return [3, 13];
          case 11:
            return E("RemoteStore", "Failed to raise snapshot:", o = u.sent()), [4, vu(t2, o)];
          case 12:
            return u.sent(), [3, 13];
          case 13:
            return [2];
        }
      });
    });
  }
  function vu(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2 = this;
      return __generator(this, function(i2) {
        switch (i2.label) {
          case 0:
            if (!_r(e))
              throw e;
            return t2.Fh.add(1), [4, ru(t2)];
          case 1:
            return i2.sent(), t2.Mh.set("Offline"), n2 || (n2 = function() {
              return ao(t2.Sh);
            }), t2.fs.bo(function() {
              return __awaiter(r2, void 0, void 0, function() {
                return __generator(this, function(e2) {
                  switch (e2.label) {
                    case 0:
                      return E("RemoteStore", "Retrying IndexedDB access"), [4, n2()];
                    case 1:
                      return e2.sent(), t2.Fh.delete(1), [4, nu(t2)];
                    case 2:
                      return e2.sent(), [2];
                  }
                });
              });
            }), [2];
        }
      });
    });
  }
  function yu(t2, e) {
    return e().catch(function(n2) {
      return vu(t2, n2, e);
    });
  }
  function mu(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n2, r2, i2, o;
      return __generator(this, function(u) {
        switch (u.label) {
          case 0:
            e = x(t2), n2 = Au(e), r2 = e.xh.length > 0 ? e.xh[e.xh.length - 1].batchId : -1, u.label = 1;
          case 1:
            if (!function(t3) {
              return fu(t3) && t3.xh.length < 10;
            }(e))
              return [3, 7];
            u.label = 2;
          case 2:
            return u.trys.push([2, 4, , 6]), [4, ho(e.Sh, r2)];
          case 3:
            return null === (i2 = u.sent()) ? (0 === e.xh.length && n2.Zu(), [3, 7]) : (r2 = i2.batchId, function(t3, e2) {
              t3.xh.push(e2);
              var n3 = Au(t3);
              n3.Ju() && n3.fh && n3.dh(e2.mutations);
            }(e, i2), [3, 6]);
          case 4:
            return o = u.sent(), [4, vu(e, o)];
          case 5:
            return u.sent(), [3, 6];
          case 6:
            return [3, 1];
          case 7:
            return gu(e) && wu(e), [2];
        }
      });
    });
  }
  function gu(t2) {
    return fu(t2) && !Au(t2).Hu() && t2.xh.length > 0;
  }
  function wu(t2) {
    Au(t2).start();
  }
  function bu(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        return Au(t2).Th(), [2];
      });
    });
  }
  function _u(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n2, r2, i2;
      return __generator(this, function(o) {
        for (e = Au(t2), n2 = 0, r2 = t2.xh; n2 < r2.length; n2++)
          i2 = r2[n2], e.dh(i2.mutations);
        return [2];
      });
    });
  }
  function Iu(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return r2 = t2.xh.shift(), i2 = ti.from(r2, e, n2), [4, yu(t2, function() {
              return t2.Ch.qh(i2);
            })];
          case 1:
            return o.sent(), [4, mu(t2)];
          case 2:
            return o.sent(), [2];
        }
      });
    });
  }
  function Eu(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(n2) {
        switch (n2.label) {
          case 0:
            return e && Au(t2).fh ? [4, function(t3, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n3, r2;
                return __generator(this, function(i2) {
                  switch (i2.label) {
                    case 0:
                      return un(r2 = e2.code) && r2 !== R.ABORTED ? (n3 = t3.xh.shift(), Au(t3).Xu(), [4, yu(t3, function() {
                        return t3.Ch.Uh(n3.batchId, e2);
                      })]) : [3, 3];
                    case 1:
                      return i2.sent(), [4, mu(t3)];
                    case 2:
                      i2.sent(), i2.label = 3;
                    case 3:
                      return [2];
                  }
                });
              });
            }(t2, e)] : [3, 2];
          case 1:
            n2.sent(), n2.label = 2;
          case 2:
            return gu(t2) && wu(t2), [2];
        }
      });
    });
  }
  function Tu(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2;
      return __generator(this, function(i2) {
        switch (i2.label) {
          case 0:
            return n2 = x(t2), e ? (n2.Fh.delete(2), [4, nu(n2)]) : [3, 2];
          case 1:
            return i2.sent(), [3, 5];
          case 2:
            return (r2 = e) ? [3, 4] : (n2.Fh.add(2), [4, ru(n2)]);
          case 3:
            i2.sent(), r2 = n2.Mh.set("Unknown"), i2.label = 4;
          case 4:
            r2, i2.label = 5;
          case 5:
            return [2];
        }
      });
    });
  }
  function Nu(t2) {
    var e = this;
    return t2.Qh || (t2.Qh = function(t3, e2, n2) {
      var r2 = x(t3);
      return r2.mh(), new Xo(e2, r2.Ku, r2.credentials, r2.Kt, n2);
    }(t2.Dh, t2.fs, {
      Eu: lu.bind(null, t2),
      Iu: pu.bind(null, t2),
      uh: du.bind(null, t2)
    }), t2.Oh.push(function(n2) {
      return __awaiter(e, void 0, void 0, function() {
        return __generator(this, function(e2) {
          switch (e2.label) {
            case 0:
              return n2 ? (t2.Qh.Xu(), cu(t2) ? au(t2) : t2.Mh.set("Unknown"), [3, 3]) : [3, 1];
            case 1:
              return [4, t2.Qh.stop()];
            case 2:
              e2.sent(), hu(t2), e2.label = 3;
            case 3:
              return [2];
          }
        });
      });
    })), t2.Qh;
  }
  function Au(t2) {
    var e = this;
    return t2.Kh || (t2.Kh = function(t3, e2, n2) {
      var r2 = x(t3);
      return r2.mh(), new $o(e2, r2.Ku, r2.credentials, r2.Kt, n2);
    }(t2.Dh, t2.fs, {
      Eu: bu.bind(null, t2),
      Iu: Eu.bind(null, t2),
      Eh: _u.bind(null, t2),
      wh: Iu.bind(null, t2)
    }), t2.Oh.push(function(n2) {
      return __awaiter(e, void 0, void 0, function() {
        return __generator(this, function(e2) {
          switch (e2.label) {
            case 0:
              return n2 ? (t2.Kh.Xu(), [4, mu(t2)]) : [3, 2];
            case 1:
              return e2.sent(), [3, 4];
            case 2:
              return [4, t2.Kh.stop()];
            case 3:
              e2.sent(), t2.xh.length > 0 && (E("RemoteStore", "Stopping write stream with " + t2.xh.length + " pending writes"), t2.xh = []), e2.label = 4;
            case 4:
              return [2];
          }
        });
      });
    })), t2.Kh;
  }
  var Su = function() {
    this.Wh = void 0, this.listeners = [];
  };
  var Du = function() {
    this.queries = new Ii(function(t2) {
      return me(t2);
    }, ye), this.onlineState = "Unknown", this.jh = new Set();
  };
  function xu(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o, u, s, a;
      return __generator(this, function(c) {
        switch (c.label) {
          case 0:
            if (n2 = x(t2), r2 = e.query, i2 = false, (o = n2.queries.get(r2)) || (i2 = true, o = new Su()), !i2)
              return [3, 4];
            c.label = 1;
          case 1:
            return c.trys.push([1, 3, , 4]), u = o, [4, n2.Gh(r2)];
          case 2:
            return u.Wh = c.sent(), [3, 4];
          case 3:
            return s = c.sent(), a = Sr(s, "Initialization of query '" + ge(e.query) + "' failed"), [2, void e.onError(a)];
          case 4:
            return n2.queries.set(r2, o), o.listeners.push(e), e.zh(n2.onlineState), o.Wh && e.Hh(o.Wh) && Lu(n2), [2];
        }
      });
    });
  }
  function ku(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o, u;
      return __generator(this, function(s) {
        return n2 = x(t2), r2 = e.query, i2 = false, (o = n2.queries.get(r2)) && (u = o.listeners.indexOf(e)) >= 0 && (o.listeners.splice(u, 1), i2 = 0 === o.listeners.length), i2 ? [2, (n2.queries.delete(r2), n2.Jh(r2))] : [2];
      });
    });
  }
  function Ou(t2, e) {
    for (var n2 = x(t2), r2 = false, i2 = 0, o = e; i2 < o.length; i2++) {
      var u = o[i2], s = u.query, a = n2.queries.get(s);
      if (a) {
        for (var c = 0, f = a.listeners; c < f.length; c++) {
          f[c].Hh(u) && (r2 = true);
        }
        a.Wh = u;
      }
    }
    r2 && Lu(n2);
  }
  function Pu(t2, e, n2) {
    var r2 = x(t2), i2 = r2.queries.get(e);
    if (i2)
      for (var o = 0, u = i2.listeners; o < u.length; o++) {
        u[o].onError(n2);
      }
    r2.queries.delete(e);
  }
  function Lu(t2) {
    t2.jh.forEach(function(t3) {
      t3.next();
    });
  }
  var Cu = function() {
    function t2(t3, e, n2) {
      this.query = t3, this.Yh = e, this.Xh = false, this.Zh = null, this.onlineState = "Unknown", this.options = n2 || {};
    }
    return t2.prototype.Hh = function(t3) {
      if (!this.options.includeMetadataChanges) {
        for (var e = [], n2 = 0, r2 = t3.docChanges; n2 < r2.length; n2++) {
          var i2 = r2[n2];
          3 !== i2.type && e.push(i2);
        }
        t3 = new An(t3.query, t3.docs, t3.De, e, t3.Ce, t3.fromCache, t3.xe, true);
      }
      var o = false;
      return this.Xh ? this.tl(t3) && (this.Yh.next(t3), o = true) : this.el(t3, this.onlineState) && (this.nl(t3), o = true), this.Zh = t3, o;
    }, t2.prototype.onError = function(t3) {
      this.Yh.error(t3);
    }, t2.prototype.zh = function(t3) {
      this.onlineState = t3;
      var e = false;
      return this.Zh && !this.Xh && this.el(this.Zh, t3) && (this.nl(this.Zh), e = true), e;
    }, t2.prototype.el = function(t3, e) {
      if (!t3.fromCache)
        return true;
      var n2 = "Offline" !== e;
      return !(this.options.sl && n2 || t3.docs.nt() && "Offline" !== e);
    }, t2.prototype.tl = function(t3) {
      if (t3.docChanges.length > 0)
        return true;
      var e = this.Zh && this.Zh.hasPendingWrites !== t3.hasPendingWrites;
      return !(!t3.xe && !e) && true === this.options.includeMetadataChanges;
    }, t2.prototype.nl = function(t3) {
      t3 = An.Fe(t3.query, t3.docs, t3.Ce, t3.fromCache), this.Xh = true, this.Yh.next(t3);
    }, t2;
  }();
  var Vu = function() {
    function t2(t3, e) {
      this.payload = t3, this.byteLength = e;
    }
    return t2.prototype.il = function() {
      return "metadata" in this.payload;
    }, t2;
  }();
  var Ru = function() {
    function t2(t3) {
      this.Kt = t3;
    }
    return t2.prototype.yc = function(t3) {
      return Hn(this.Kt, t3);
    }, t2.prototype.gc = function(t3) {
      return t3.metadata.exists ? $n(this.Kt, t3.document, false) : new Ut(this.yc(t3.metadata.name), this.Vc(t3.metadata.readTime));
    }, t2.prototype.Vc = function(t3) {
      return zn(t3);
    }, t2;
  }();
  var Uu = function() {
    function t2(t3, e, n2) {
      this.rl = t3, this.Sh = e, this.Kt = n2, this.queries = [], this.documents = [], this.progress = Mu(t3);
    }
    return t2.prototype.ol = function(t3) {
      this.progress.bytesLoaded += t3.byteLength;
      var e = this.progress.documentsLoaded;
      return t3.payload.namedQuery ? this.queries.push(t3.payload.namedQuery) : t3.payload.documentMetadata ? (this.documents.push({
        metadata: t3.payload.documentMetadata
      }), t3.payload.documentMetadata.exists || ++e) : t3.payload.document && (this.documents[this.documents.length - 1].document = t3.payload.document, ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }, t2.prototype.cl = function(t3) {
      for (var e = new Map(), n2 = new Ru(this.Kt), r2 = 0, i2 = t3; r2 < i2.length; r2++) {
        var o = i2[r2];
        if (o.metadata.queries)
          for (var u = n2.yc(o.metadata.name), s = 0, a = o.metadata.queries; s < a.length; s++) {
            var c = a[s], f = (e.get(c) || _n()).add(u);
            e.set(c, f);
          }
      }
      return e;
    }, t2.prototype.complete = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i2;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return [4, wo(this.Sh, new Ru(this.Kt), this.documents, this.rl.id)];
            case 1:
              t3 = o.sent(), e = this.cl(this.documents), n2 = 0, r2 = this.queries, o.label = 2;
            case 2:
              return n2 < r2.length ? (i2 = r2[n2], [4, bo(this.Sh, i2, e.get(i2.name))]) : [3, 5];
            case 3:
              o.sent(), o.label = 4;
            case 4:
              return n2++, [3, 2];
            case 5:
              return [2, (this.progress.taskState = "Success", new to(Object.assign({}, this.progress), t3))];
          }
        });
      });
    }, t2;
  }();
  function Mu(t2) {
    return {
      taskState: "Running",
      documentsLoaded: 0,
      bytesLoaded: 0,
      totalDocuments: t2.totalDocuments,
      totalBytes: t2.totalBytes
    };
  }
  var qu = function(t2) {
    this.key = t2;
  };
  var Fu = function(t2) {
    this.key = t2;
  };
  var ju = function() {
    function t2(t3, e) {
      this.query = t3, this.al = e, this.ul = null, this.qe = false, this.hl = _n(), this.Ce = _n(), this.ll = be(t3), this._l = new Tn(this.ll);
    }
    return Object.defineProperty(t2.prototype, "fl", {
      get: function() {
        return this.al;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.dl = function(t3, e) {
      var n2 = this, r2 = e ? e.wl : new Nn(), i2 = e ? e._l : this._l, o = e ? e.Ce : this.Ce, u = i2, s = false, a = ae(this.query) && i2.size === this.query.limit ? i2.last() : null, c = ce(this.query) && i2.size === this.query.limit ? i2.first() : null;
      if (t3.Zt(function(t4, e2) {
        var f2 = i2.get(t4), h2 = e2 instanceof Rt ? e2 : null;
        h2 && (h2 = we(n2.query, h2) ? h2 : null);
        var l = !!f2 && n2.Ce.has(f2.key), p2 = !!h2 && (h2.bt || n2.Ce.has(h2.key) && h2.hasCommittedMutations), d = false;
        f2 && h2 ? f2.data().isEqual(h2.data()) ? l !== p2 && (r2.track({
          type: 3,
          doc: h2
        }), d = true) : n2.El(f2, h2) || (r2.track({
          type: 2,
          doc: h2
        }), d = true, (a && n2.ll(h2, a) > 0 || c && n2.ll(h2, c) < 0) && (s = true)) : !f2 && h2 ? (r2.track({
          type: 0,
          doc: h2
        }), d = true) : f2 && !h2 && (r2.track({
          type: 1,
          doc: f2
        }), d = true, (a || c) && (s = true)), d && (h2 ? (u = u.add(h2), o = p2 ? o.add(t4) : o.delete(t4)) : (u = u.delete(t4), o = o.delete(t4)));
      }), ae(this.query) || ce(this.query))
        for (; u.size > this.query.limit; ) {
          var f = ae(this.query) ? u.last() : u.first();
          u = u.delete(f.key), o = o.delete(f.key), r2.track({
            type: 1,
            doc: f
          });
        }
      return {
        _l: u,
        wl: r2,
        _c: s,
        Ce: o
      };
    }, t2.prototype.El = function(t3, e) {
      return t3.bt && e.hasCommittedMutations && !e.bt;
    }, t2.prototype.Ei = function(t3, e, n2) {
      var r2 = this, i2 = this._l;
      this._l = t3._l, this.Ce = t3.Ce;
      var o = t3.wl.Se();
      o.sort(function(t4, e2) {
        return function(t5, e3) {
          var n3 = function(t6) {
            switch (t6) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return S();
            }
          };
          return n3(t5) - n3(e3);
        }(t4.type, e2.type) || r2.ll(t4.doc, e2.doc);
      }), this.Tl(n2);
      var u = e ? this.Il() : [], s = 0 === this.hl.size && this.qe ? 1 : 0, a = s !== this.ul;
      return this.ul = s, 0 !== o.length || a ? {
        snapshot: new An(this.query, t3._l, i2, o, t3.Ce, 0 === s, a, false),
        ml: u
      } : {
        ml: u
      };
    }, t2.prototype.zh = function(t3) {
      return this.qe && "Offline" === t3 ? (this.qe = false, this.Ei({
        _l: this._l,
        wl: new Nn(),
        Ce: this.Ce,
        _c: false
      }, false)) : {
        ml: []
      };
    }, t2.prototype.Al = function(t3) {
      return !this.al.has(t3) && !!this._l.has(t3) && !this._l.get(t3).bt;
    }, t2.prototype.Tl = function(t3) {
      var e = this;
      t3 && (t3.Ue.forEach(function(t4) {
        return e.al = e.al.add(t4);
      }), t3.Qe.forEach(function(t4) {
      }), t3.Ke.forEach(function(t4) {
        return e.al = e.al.delete(t4);
      }), this.qe = t3.qe);
    }, t2.prototype.Il = function() {
      var t3 = this;
      if (!this.qe)
        return [];
      var e = this.hl;
      this.hl = _n(), this._l.forEach(function(e2) {
        t3.Al(e2.key) && (t3.hl = t3.hl.add(e2.key));
      });
      var n2 = [];
      return e.forEach(function(e2) {
        t3.hl.has(e2) || n2.push(new Fu(e2));
      }), this.hl.forEach(function(t4) {
        e.has(t4) || n2.push(new qu(t4));
      }), n2;
    }, t2.prototype.Rl = function(t3) {
      this.al = t3.Pc, this.hl = _n();
      var e = this.dl(t3.documents);
      return this.Ei(e, true);
    }, t2.prototype.Pl = function() {
      return An.Fe(this.query, this._l, this.Ce, 0 === this.ul);
    }, t2;
  }();
  var zu = function(t2, e, n2) {
    this.query = t2, this.targetId = e, this.view = n2;
  };
  var Gu = function(t2) {
    this.key = t2, this.yl = false;
  };
  var Bu = function() {
    function t2(t3, e, n2, r2, i2, o) {
      this.Sh = t3, this.gl = e, this.Vl = n2, this.pl = r2, this.currentUser = i2, this.bl = o, this.vl = {}, this.Sl = new Ii(function(t4) {
        return me(t4);
      }, ye), this.Dl = new Map(), this.Cl = [], this.xl = new an(it.J), this.Nl = new Map(), this.Fl = new Io(), this.Ol = {}, this.kl = new Map(), this.Ml = Oi.Bi(), this.onlineState = "Unknown", this.Ll = void 0;
    }
    return Object.defineProperty(t2.prototype, "$l", {
      get: function() {
        return true === this.Ll;
      },
      enumerable: false,
      configurable: true
    }), t2;
  }();
  function Ku(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o, u, s;
      return __generator(this, function(a) {
        switch (a.label) {
          case 0:
            return n2 = bs(t2), (o = n2.Sl.get(e)) ? (r2 = o.targetId, n2.pl.ka(r2), i2 = o.view.Pl(), [3, 4]) : [3, 1];
          case 1:
            return [4, lo(n2.Sh, de(e))];
          case 2:
            return u = a.sent(), s = n2.pl.ka(u.targetId), r2 = u.targetId, [4, Hu(n2, e, r2, "current" === s)];
          case 3:
            i2 = a.sent(), n2.$l && iu(n2.gl, u), a.label = 4;
          case 4:
            return [2, i2];
        }
      });
    });
  }
  function Hu(t2, e, n2, r2) {
    return __awaiter(this, void 0, void 0, function() {
      var i2, o, u, s, a, c;
      return __generator(this, function(f) {
        switch (f.label) {
          case 0:
            return t2.Bl = function(e2, n3, r3) {
              return function(t3, e3, n4, r4) {
                return __awaiter(this, void 0, void 0, function() {
                  var i3, o2, u2;
                  return __generator(this, function(s2) {
                    switch (s2.label) {
                      case 0:
                        return i3 = e3.view.dl(n4), i3._c ? [4, vo(t3.Sh, e3.query, false).then(function(t4) {
                          var n5 = t4.documents;
                          return e3.view.dl(n5, i3);
                        })] : [3, 2];
                      case 1:
                        i3 = s2.sent(), s2.label = 2;
                      case 2:
                        return o2 = r4 && r4.Oe.get(e3.targetId), u2 = e3.view.Ei(i3, t3.$l, o2), [2, (os(t3, e3.targetId, u2.ml), u2.snapshot)];
                    }
                  });
                });
              }(t2, e2, n3, r3);
            }, [4, vo(t2.Sh, e, true)];
          case 1:
            return i2 = f.sent(), o = new ju(e, i2.Pc), u = o.dl(i2.documents), s = Dn.Be(n2, r2 && "Offline" !== t2.onlineState), a = o.Ei(u, t2.$l, s), os(t2, n2, a.ml), c = new zu(e, n2, o), [2, (t2.Sl.set(e, c), t2.Dl.has(n2) ? t2.Dl.get(n2).push(e) : t2.Dl.set(n2, [e]), a.snapshot)];
        }
      });
    });
  }
  function Ju(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return n2 = x(t2), r2 = n2.Sl.get(e), (i2 = n2.Dl.get(r2.targetId)).length > 1 ? [2, (n2.Dl.set(r2.targetId, i2.filter(function(t3) {
              return !ye(t3, e);
            })), void n2.Sl.delete(e))] : n2.$l ? (n2.pl.La(r2.targetId), n2.pl.Ca(r2.targetId) ? [3, 2] : [4, po(n2.Sh, r2.targetId, false).then(function() {
              n2.pl.Ba(r2.targetId), ou(n2.gl, r2.targetId), rs(n2, r2.targetId);
            }).catch(_i)]) : [3, 3];
          case 1:
            o.sent(), o.label = 2;
          case 2:
            return [3, 5];
          case 3:
            return rs(n2, r2.targetId), [4, po(n2.Sh, r2.targetId, true)];
          case 4:
            o.sent(), o.label = 5;
          case 5:
            return [2];
        }
      });
    });
  }
  function Wu(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o, u;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            r2 = _s(t2), s.label = 1;
          case 1:
            return s.trys.push([1, 5, , 6]), [4, function(t3, e2) {
              var n3, r3 = x(t3), i3 = $.now(), o2 = e2.reduce(function(t4, e3) {
                return t4.add(e3.key);
              }, _n());
              return r3.persistence.runTransaction("Locally write mutations", "readwrite", function(t4) {
                return r3.Ic.Zo(t4, o2).next(function(o3) {
                  n3 = o3;
                  for (var u2 = [], s2 = 0, a = e2; s2 < a.length; s2++) {
                    var c = a[s2], f = Ke(c, n3.get(c.key));
                    null != f && u2.push(new Qe(c.key, f, Ct(f.proto.mapValue), Fe.exists(true)));
                  }
                  return r3.Ho.Pi(t4, i3, u2, e2);
                });
              }).then(function(t4) {
                var e3 = t4.Ns(n3);
                return {
                  batchId: t4.batchId,
                  oi: e3
                };
              });
            }(r2.Sh, e)];
          case 2:
            return i2 = s.sent(), r2.pl.xa(i2.batchId), function(t3, e2, n3) {
              var r3 = t3.Ol[t3.currentUser.R()];
              r3 || (r3 = new an(P2)), r3 = r3.Ht(e2, n3), t3.Ol[t3.currentUser.R()] = r3;
            }(r2, i2.batchId, n2), [4, as(r2, i2.oi)];
          case 3:
            return s.sent(), [4, mu(r2.gl)];
          case 4:
            return s.sent(), [3, 6];
          case 5:
            return o = s.sent(), u = Sr(o, "Failed to persist write"), n2.reject(u), [3, 6];
          case 6:
            return [2];
        }
      });
    });
  }
  function Qu(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2;
      return __generator(this, function(i2) {
        switch (i2.label) {
          case 0:
            n2 = x(t2), i2.label = 1;
          case 1:
            return i2.trys.push([1, 4, , 6]), [4, co(n2.Sh, e)];
          case 2:
            return r2 = i2.sent(), e.Oe.forEach(function(t3, e2) {
              var r3 = n2.Nl.get(e2);
              r3 && (D(t3.Ue.size + t3.Qe.size + t3.Ke.size <= 1), t3.Ue.size > 0 ? r3.yl = true : t3.Qe.size > 0 ? D(r3.yl) : t3.Ke.size > 0 && (D(r3.yl), r3.yl = false));
            }), [4, as(n2, r2, e)];
          case 3:
            return i2.sent(), [3, 6];
          case 4:
            return [4, _i(i2.sent())];
          case 5:
            return i2.sent(), [3, 6];
          case 6:
            return [2];
        }
      });
    });
  }
  function Yu(t2, e, n2) {
    var r2 = x(t2);
    if (r2.$l && 0 === n2 || !r2.$l && 1 === n2) {
      var i2 = [];
      r2.Sl.forEach(function(t3, n3) {
        var r3 = n3.view.zh(e);
        r3.snapshot && i2.push(r3.snapshot);
      }), function(t3, e2) {
        var n3 = x(t3);
        n3.onlineState = e2;
        var r3 = false;
        n3.queries.forEach(function(t4, n4) {
          for (var i3 = 0, o = n4.listeners; i3 < o.length; i3++) {
            o[i3].zh(e2) && (r3 = true);
          }
        }), r3 && Lu(n3);
      }(r2.Vl, e), i2.length && r2.vl.uh(i2), r2.onlineState = e, r2.$l && r2.pl.Ka(e);
    }
  }
  function Xu(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o, u, s, a;
      return __generator(this, function(c) {
        switch (c.label) {
          case 0:
            return (r2 = x(t2)).pl.qa(e, "rejected", n2), i2 = r2.Nl.get(e), (o = i2 && i2.key) ? (u = (u = new an(it.J)).Ht(o, new Ut(o, Z.min())), s = _n().add(o), a = new Sn(Z.min(), new Map(), new hn(P2), u, s), [4, Qu(r2, a)]) : [3, 2];
          case 1:
            return c.sent(), r2.xl = r2.xl.remove(o), r2.Nl.delete(e), ss(r2), [3, 4];
          case 2:
            return [4, po(r2.Sh, e, false).then(function() {
              return rs(r2, e, n2);
            }).catch(_i)];
          case 3:
            c.sent(), c.label = 4;
          case 4:
            return [2];
        }
      });
    });
  }
  function $u(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            n2 = x(t2), r2 = e.batch.batchId, o.label = 1;
          case 1:
            return o.trys.push([1, 4, , 6]), [4, so(n2.Sh, e)];
          case 2:
            return i2 = o.sent(), ns(n2, r2, null), es(n2, r2), n2.pl.Fa(r2, "acknowledged"), [4, as(n2, i2)];
          case 3:
            return o.sent(), [3, 6];
          case 4:
            return [4, _i(o.sent())];
          case 5:
            return o.sent(), [3, 6];
          case 6:
            return [2];
        }
      });
    });
  }
  function Zu(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            r2 = x(t2), o.label = 1;
          case 1:
            return o.trys.push([1, 4, , 6]), [4, function(t3, e2) {
              var n3 = x(t3);
              return n3.persistence.runTransaction("Reject batch", "readwrite-primary", function(t4) {
                var r3;
                return n3.Ho.yi(t4, e2).next(function(e3) {
                  return D(null !== e3), r3 = e3.keys(), n3.Ho.xi(t4, e3);
                }).next(function() {
                  return n3.Ho.Oi(t4);
                }).next(function() {
                  return n3.Ic.Zo(t4, r3);
                });
              });
            }(r2.Sh, e)];
          case 2:
            return i2 = o.sent(), ns(r2, e, n2), es(r2, e), r2.pl.Fa(e, "rejected", n2), [4, as(r2, i2)];
          case 3:
            return o.sent(), [3, 6];
          case 4:
            return [4, _i(o.sent())];
          case 5:
            return o.sent(), [3, 6];
          case 6:
            return [2];
        }
      });
    });
  }
  function ts(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o, u;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            fu((n2 = x(t2)).gl) || E("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), s.label = 1;
          case 1:
            return s.trys.push([1, 3, , 4]), [4, function(t3) {
              var e2 = x(t3);
              return e2.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(t4) {
                return e2.Ho.pi(t4);
              });
            }(n2.Sh)];
          case 2:
            return -1 === (r2 = s.sent()) ? [2, void e.resolve()] : ((i2 = n2.kl.get(r2) || []).push(e), n2.kl.set(r2, i2), [3, 4]);
          case 3:
            return o = s.sent(), u = Sr(o, "Initialization of waitForPendingWrites() operation failed"), e.reject(u), [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }
  function es(t2, e) {
    (t2.kl.get(e) || []).forEach(function(t3) {
      t3.resolve();
    }), t2.kl.delete(e);
  }
  function ns(t2, e, n2) {
    var r2 = x(t2), i2 = r2.Ol[r2.currentUser.R()];
    if (i2) {
      var o = i2.get(e);
      o && (n2 ? o.reject(n2) : o.resolve(), i2 = i2.remove(e)), r2.Ol[r2.currentUser.R()] = i2;
    }
  }
  function rs(t2, e, n2) {
    void 0 === n2 && (n2 = null), t2.pl.La(e);
    for (var r2 = 0, i2 = t2.Dl.get(e); r2 < i2.length; r2++) {
      var o = i2[r2];
      t2.Sl.delete(o), n2 && t2.vl.ql(o, n2);
    }
    t2.Dl.delete(e), t2.$l && t2.Fl.kc(e).forEach(function(e2) {
      t2.Fl.ki(e2) || is(t2, e2);
    });
  }
  function is(t2, e) {
    var n2 = t2.xl.get(e);
    null !== n2 && (ou(t2.gl, n2), t2.xl = t2.xl.remove(e), t2.Nl.delete(n2), ss(t2));
  }
  function os(t2, e, n2) {
    for (var r2 = 0, i2 = n2; r2 < i2.length; r2++) {
      var o = i2[r2];
      o instanceof qu ? (t2.Fl.sr(o.key, e), us(t2, o)) : o instanceof Fu ? (E("SyncEngine", "Document no longer in limbo: " + o.key), t2.Fl.rr(o.key, e), t2.Fl.ki(o.key) || is(t2, o.key)) : S();
    }
  }
  function us(t2, e) {
    var n2 = e.key;
    t2.xl.get(n2) || (E("SyncEngine", "New document in limbo: " + n2), t2.Cl.push(n2), ss(t2));
  }
  function ss(t2) {
    for (; t2.Cl.length > 0 && t2.xl.size < t2.bl; ) {
      var e = t2.Cl.shift(), n2 = t2.Ml.next();
      t2.Nl.set(n2, new Gu(e)), t2.xl = t2.xl.Ht(e, n2), iu(t2.gl, new Ie(de(se(e.path)), n2, 2, X.U));
    }
  }
  function as(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o, u;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            return r2 = x(t2), i2 = [], o = [], u = [], r2.Sl.nt() ? [3, 3] : (r2.Sl.forEach(function(t3, s2) {
              u.push(r2.Bl(s2, e, n2).then(function(t4) {
                if (t4) {
                  r2.$l && r2.pl.qa(s2.targetId, t4.fromCache ? "not-current" : "current"), i2.push(t4);
                  var e2 = no.cc(s2.targetId, t4);
                  o.push(e2);
                }
              }));
            }), [4, Promise.all(u)]);
          case 1:
            return s.sent(), r2.vl.uh(i2), [4, function(t3, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n3, r3, i3, o2, u2, s2, a, c, f;
                return __generator(this, function(h2) {
                  switch (h2.label) {
                    case 0:
                      n3 = x(t3), h2.label = 1;
                    case 1:
                      return h2.trys.push([1, 3, , 4]), [4, n3.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(t4) {
                        return yr.forEach(e2, function(e3) {
                          return yr.forEach(e3.rc, function(r4) {
                            return n3.persistence.Ii.sr(t4, e3.targetId, r4);
                          }).next(function() {
                            return yr.forEach(e3.oc, function(r4) {
                              return n3.persistence.Ii.rr(t4, e3.targetId, r4);
                            });
                          });
                        });
                      })];
                    case 2:
                      return h2.sent(), [3, 4];
                    case 3:
                      if (!_r(r3 = h2.sent()))
                        throw r3;
                      return E("LocalStore", "Failed to update sequence numbers: " + r3), [3, 4];
                    case 4:
                      for (i3 = 0, o2 = e2; i3 < o2.length; i3++)
                        u2 = o2[i3], s2 = u2.targetId, u2.fromCache || (a = n3.dc.get(s2), c = a.Mt, f = a.Bt(c), n3.dc = n3.dc.Ht(s2, f));
                      return [2];
                  }
                });
              });
            }(r2.Sh, o)];
          case 2:
            s.sent(), s.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function cs(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2;
      return __generator(this, function(i2) {
        switch (i2.label) {
          case 0:
            return (n2 = x(t2)).currentUser.isEqual(e) ? [3, 3] : (E("SyncEngine", "User change. New user:", e.R()), [4, uo(n2.Sh, e)]);
          case 1:
            return r2 = i2.sent(), n2.currentUser = e, function(t3, e2) {
              t3.kl.forEach(function(t4) {
                t4.forEach(function(t5) {
                  t5.reject(new U(R.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                });
              }), t3.kl.clear();
            }(n2), n2.pl.Qa(e, r2.Ac, r2.Rc), [4, as(n2, r2.mc)];
          case 2:
            i2.sent(), i2.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function fs(t2, e) {
    var n2 = x(t2), r2 = n2.Nl.get(e);
    if (r2 && r2.yl)
      return _n().add(r2.key);
    var i2 = _n(), o = n2.Dl.get(e);
    if (!o)
      return i2;
    for (var u = 0, s = o; u < s.length; u++) {
      var a = s[u], c = n2.Sl.get(a);
      i2 = i2.ye(c.view.fl);
    }
    return i2;
  }
  function hs(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return [4, vo((n2 = x(t2)).Sh, e.query, true)];
          case 1:
            return r2 = o.sent(), i2 = e.view.Rl(r2), [2, (n2.$l && os(n2, e.targetId, i2.ml), i2)];
        }
      });
    });
  }
  function ls(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e;
      return __generator(this, function(n2) {
        return [2, mo((e = x(t2)).Sh).then(function(t3) {
          return as(e, t3);
        })];
      });
    });
  }
  function ps(t2, e, n2, r2) {
    return __awaiter(this, void 0, void 0, function() {
      var i2, o;
      return __generator(this, function(u) {
        switch (u.label) {
          case 0:
            return [4, function(t3, e2) {
              var n3 = x(t3), r3 = x(n3.Ho);
              return n3.persistence.runTransaction("Lookup mutation documents", "readonly", function(t4) {
                return r3.gi(t4, e2).next(function(e3) {
                  return e3 ? n3.Ic.Zo(t4, e3) : yr.resolve(null);
                });
              });
            }((i2 = x(t2)).Sh, e)];
          case 1:
            return null === (o = u.sent()) ? [3, 6] : "pending" !== n2 ? [3, 3] : [4, mu(i2.gl)];
          case 2:
            return u.sent(), [3, 4];
          case 3:
            "acknowledged" === n2 || "rejected" === n2 ? (ns(i2, e, r2 || null), es(i2, e), function(t3, e2) {
              x(x(t3).Ho).Ni(e2);
            }(i2.Sh, e)) : S(), u.label = 4;
          case 4:
            return [4, as(i2, o)];
          case 5:
            return u.sent(), [3, 7];
          case 6:
            E("SyncEngine", "Cannot apply mutation batch with id: " + e), u.label = 7;
          case 7:
            return [2];
        }
      });
    });
  }
  function ds(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2, o, u, s, a, c;
      return __generator(this, function(f) {
        switch (f.label) {
          case 0:
            return bs(n2 = x(t2)), _s(n2), true !== e || true === n2.Ll ? [3, 3] : (r2 = n2.pl.Sa(), [4, vs(n2, r2.rt())]);
          case 1:
            return i2 = f.sent(), n2.Ll = true, [4, Tu(n2.gl, true)];
          case 2:
            for (f.sent(), o = 0, u = i2; o < u.length; o++)
              s = u[o], iu(n2.gl, s);
            return [3, 7];
          case 3:
            return false !== e || false === n2.Ll ? [3, 7] : (a = [], c = Promise.resolve(), n2.Dl.forEach(function(t3, e2) {
              n2.pl.$a(e2) ? a.push(e2) : c = c.then(function() {
                return rs(n2, e2), po(n2.Sh, e2, true);
              }), ou(n2.gl, e2);
            }), [4, c]);
          case 4:
            return f.sent(), [4, vs(n2, a)];
          case 5:
            return f.sent(), function(t3) {
              var e2 = x(t3);
              e2.Nl.forEach(function(t4, n3) {
                ou(e2.gl, n3);
              }), e2.Fl.Mc(), e2.Nl = new Map(), e2.xl = new an(it.J);
            }(n2), n2.Ll = false, [4, Tu(n2.gl, false)];
          case 6:
            f.sent(), f.label = 7;
          case 7:
            return [2];
        }
      });
    });
  }
  function vs(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var n3, r2, i2, o, u, s, a, c, f, h2, l, p2, d, v2;
      return __generator(this, function(y2) {
        switch (y2.label) {
          case 0:
            n3 = x(t2), r2 = [], i2 = [], o = 0, u = e, y2.label = 1;
          case 1:
            return o < u.length ? (s = u[o], a = void 0, (c = n3.Dl.get(s)) && 0 !== c.length ? [4, lo(n3.Sh, de(c[0]))] : [3, 7]) : [3, 13];
          case 2:
            a = y2.sent(), f = 0, h2 = c, y2.label = 3;
          case 3:
            return f < h2.length ? (l = h2[f], p2 = n3.Sl.get(l), [4, hs(n3, p2)]) : [3, 6];
          case 4:
            (d = y2.sent()).snapshot && i2.push(d.snapshot), y2.label = 5;
          case 5:
            return f++, [3, 3];
          case 6:
            return [3, 11];
          case 7:
            return [4, yo(n3.Sh, s)];
          case 8:
            return v2 = y2.sent(), [4, lo(n3.Sh, v2)];
          case 9:
            return a = y2.sent(), [4, Hu(n3, ys(v2), s, false)];
          case 10:
            y2.sent(), y2.label = 11;
          case 11:
            r2.push(a), y2.label = 12;
          case 12:
            return o++, [3, 1];
          case 13:
            return [2, (n3.vl.uh(i2), r2)];
        }
      });
    });
  }
  function ys(t2) {
    return ue(t2.path, t2.collectionGroup, t2.orderBy, t2.filters, t2.limit, "F", t2.startAt, t2.endAt);
  }
  function ms(t2) {
    var e = x(t2);
    return x(x(e.Sh).persistence).Qo();
  }
  function gs(t2, e, n2, r2) {
    return __awaiter(this, void 0, void 0, function() {
      var i2, o, u;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            return (i2 = x(t2)).Ll ? (E("SyncEngine", "Ignoring unexpected query state notification."), [3, 8]) : [3, 1];
          case 1:
            if (!i2.Dl.has(e))
              return [3, 8];
            switch (n2) {
              case "current":
              case "not-current":
                return [3, 2];
              case "rejected":
                return [3, 5];
            }
            return [3, 7];
          case 2:
            return [4, mo(i2.Sh)];
          case 3:
            return o = s.sent(), u = Sn.$e(e, "current" === n2), [4, as(i2, o, u)];
          case 4:
            return s.sent(), [3, 8];
          case 5:
            return [4, po(i2.Sh, e, true)];
          case 6:
            return s.sent(), rs(i2, e, r2), [3, 8];
          case 7:
            S(), s.label = 8;
          case 8:
            return [2];
        }
      });
    });
  }
  function ws(t2, e, n2) {
    return __awaiter(this, void 0, void 0, function() {
      var r2, i2, o, u, s, a, c, f, h2, l;
      return __generator(this, function(p2) {
        switch (p2.label) {
          case 0:
            if (!(r2 = bs(t2)).Ll)
              return [3, 10];
            i2 = 0, o = e, p2.label = 1;
          case 1:
            return i2 < o.length ? (u = o[i2], r2.Dl.has(u) ? (E("SyncEngine", "Adding an already active target " + u), [3, 5]) : [4, yo(r2.Sh, u)]) : [3, 6];
          case 2:
            return s = p2.sent(), [4, lo(r2.Sh, s)];
          case 3:
            return a = p2.sent(), [4, Hu(r2, ys(s), a.targetId, false)];
          case 4:
            p2.sent(), iu(r2.gl, a), p2.label = 5;
          case 5:
            return i2++, [3, 1];
          case 6:
            c = function(t3) {
              return __generator(this, function(e2) {
                switch (e2.label) {
                  case 0:
                    return r2.Dl.has(t3) ? [4, po(r2.Sh, t3, false).then(function() {
                      ou(r2.gl, t3), rs(r2, t3);
                    }).catch(_i)] : [3, 2];
                  case 1:
                    e2.sent(), e2.label = 2;
                  case 2:
                    return [2];
                }
              });
            }, f = 0, h2 = n2, p2.label = 7;
          case 7:
            return f < h2.length ? (l = h2[f], [5, c(l)]) : [3, 10];
          case 8:
            p2.sent(), p2.label = 9;
          case 9:
            return f++, [3, 7];
          case 10:
            return [2];
        }
      });
    });
  }
  function bs(t2) {
    var e = x(t2);
    return e.gl.Ch.Bh = Qu.bind(null, e), e.gl.Ch.Sn = fs.bind(null, e), e.gl.Ch.$h = Xu.bind(null, e), e.vl.uh = Ou.bind(null, e.Vl), e.vl.ql = Pu.bind(null, e.Vl), e;
  }
  function _s(t2) {
    var e = x(t2);
    return e.gl.Ch.qh = $u.bind(null, e), e.gl.Ch.Uh = Zu.bind(null, e), e;
  }
  function Is(t2, e, n2) {
    var r2 = x(t2);
    (function(t3, e2, n3) {
      return __awaiter(this, void 0, void 0, function() {
        var r3, i2, o, u, s, a;
        return __generator(this, function(c) {
          switch (c.label) {
            case 0:
              return c.trys.push([0, 14, , 15]), [4, e2.getMetadata()];
            case 1:
              return r3 = c.sent(), [4, function(t4, e3) {
                var n4 = x(t4), r4 = zn(e3.createTime);
                return n4.persistence.runTransaction("hasNewerBundle", "readonly", function(t5) {
                  return n4.Eo.Ms(t5, e3.id);
                }).then(function(t5) {
                  return !!t5 && t5.createTime.u(r4) >= 0;
                });
              }(t3.Sh, r3)];
            case 2:
              return c.sent() ? [4, e2.close()] : [3, 4];
            case 3:
              return [2, (c.sent(), void n3.Ul(function(t4) {
                return {
                  taskState: "Success",
                  documentsLoaded: t4.totalDocuments,
                  bytesLoaded: t4.totalBytes,
                  totalDocuments: t4.totalDocuments,
                  totalBytes: t4.totalBytes
                };
              }(r3)))];
            case 4:
              return n3.Ql(Mu(r3)), i2 = new Uu(r3, t3.Sh, e2.Kt), [4, e2.Kl()];
            case 5:
              o = c.sent(), c.label = 6;
            case 6:
              return o ? [4, i2.ol(o)] : [3, 10];
            case 7:
              return (u = c.sent()) && n3.Ql(u), [4, e2.Kl()];
            case 8:
              o = c.sent(), c.label = 9;
            case 9:
              return [3, 6];
            case 10:
              return [4, i2.complete()];
            case 11:
              return s = c.sent(), [4, as(t3, s.zo, void 0)];
            case 12:
              return c.sent(), [4, function(t4, e3) {
                var n4 = x(t4);
                return n4.persistence.runTransaction("Save bundle", "readwrite", function(t5) {
                  return n4.Eo.Ls(t5, e3);
                });
              }(t3.Sh, r3)];
            case 13:
              return c.sent(), n3.Ul(s.progress), [3, 15];
            case 14:
              return N("SyncEngine", "Loading bundle failed with " + (a = c.sent())), n3.Wl(a), [3, 15];
            case 15:
              return [2];
          }
        });
      });
    })(r2, e, n2).then(function() {
      r2.pl.ja();
    });
  }
  var Es = function() {
    function t2() {
      this.synchronizeTabs = false;
    }
    return t2.prototype.initialize = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return this.Kt = Wo(t3.gu.T), this.pl = this.jl(t3), this.persistence = this.Gl(t3), [4, this.persistence.start()];
            case 1:
              return e.sent(), this.zl = this.Hl(t3), this.Sh = this.Jl(t3), [2];
          }
        });
      });
    }, t2.prototype.Hl = function(t3) {
      return null;
    }, t2.prototype.Jl = function(t3) {
      return oo(this.persistence, new ro(), t3.Yl, this.Kt);
    }, t2.prototype.Gl = function(t3) {
      return new Do(ko.ra, this.Kt);
    }, t2.prototype.jl = function(t3) {
      return new Fo();
    }, t2.prototype.terminate = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return this.zl && this.zl.stop(), [4, this.pl.Lo()];
            case 1:
              return t3.sent(), [4, this.persistence.Lo()];
            case 2:
              return t3.sent(), [2];
          }
        });
      });
    }, t2;
  }();
  var Ts = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).Xl = e2, i2.cacheSizeBytes = n2, i2.forceOwnership = r2, i2.synchronizeTabs = false, i2;
    }
    return __extends(e, t2), e.prototype.initialize = function(e2) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return [4, t2.prototype.initialize.call(this, e2)];
            case 1:
              return n2.sent(), [4, go(this.Sh)];
            case 2:
              return n2.sent(), [4, this.Xl.initialize(this, e2)];
            case 3:
              return n2.sent(), [4, _s(this.Xl.fa)];
            case 4:
              return n2.sent(), [4, mu(this.Xl.gl)];
            case 5:
              return n2.sent(), [2];
          }
        });
      });
    }, e.prototype.Jl = function(t3) {
      return oo(this.persistence, new ro(), t3.Yl, this.Kt);
    }, e.prototype.Hl = function(t3) {
      var e2 = this.persistence.Ii._r;
      return new Mi(e2, t3.fs);
    }, e.prototype.Gl = function(t3) {
      var e2 = Zi(t3.gu.T, t3.gu.persistenceKey), n2 = void 0 !== this.cacheSizeBytes ? bi.Xs(this.cacheSizeBytes) : bi.ei;
      return new Yi(this.synchronizeTabs, e2, t3.clientId, n2, t3.fs, Ho(), Jo(), this.Kt, this.pl, !!this.forceOwnership);
    }, e.prototype.jl = function(t3) {
      return new Fo();
    }, e;
  }(Es);
  var Ns = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2, false) || this).Xl = e2, r2.cacheSizeBytes = n2, r2.synchronizeTabs = true, r2;
    }
    return __extends(e, t2), e.prototype.initialize = function(e2) {
      return __awaiter(this, void 0, void 0, function() {
        var n2, r2 = this;
        return __generator(this, function(i2) {
          switch (i2.label) {
            case 0:
              return [4, t2.prototype.initialize.call(this, e2)];
            case 1:
              return i2.sent(), n2 = this.Xl.fa, this.pl instanceof qo ? (this.pl.fa = {
                nu: ps.bind(null, n2),
                su: gs.bind(null, n2),
                iu: ws.bind(null, n2),
                Qo: ms.bind(null, n2),
                eu: ls.bind(null, n2)
              }, [4, this.pl.start()]) : [3, 3];
            case 2:
              i2.sent(), i2.label = 3;
            case 3:
              return [4, this.persistence.Po(function(t3) {
                return __awaiter(r2, void 0, void 0, function() {
                  return __generator(this, function(e3) {
                    switch (e3.label) {
                      case 0:
                        return [4, ds(this.Xl.fa, t3)];
                      case 1:
                        return e3.sent(), this.zl && (t3 && !this.zl.Tr ? this.zl.start(this.Sh) : t3 || this.zl.stop()), [2];
                    }
                  });
                });
              })];
            case 4:
              return i2.sent(), [2];
          }
        });
      });
    }, e.prototype.jl = function(t3) {
      var e2 = Ho();
      if (!qo.Wn(e2))
        throw new U(R.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
      var n2 = Zi(t3.gu.T, t3.gu.persistenceKey);
      return new qo(e2, t3.fs, n2, t3.clientId, t3.Yl);
    }, e;
  }(Ts);
  var As = function() {
    function t2() {
    }
    return t2.prototype.initialize = function(t3, e) {
      return __awaiter(this, void 0, void 0, function() {
        var n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              return this.Sh ? [3, 2] : (this.Sh = t3.Sh, this.pl = t3.pl, this.Dh = this.Zl(e), this.gl = this.t_(e), this.Vl = this.e_(e), this.fa = this.n_(e, !t3.synchronizeTabs), this.pl.da = function(t4) {
                return Yu(n2.fa, t4, 1);
              }, this.gl.Ch.s_ = cs.bind(null, this.fa), [4, Tu(this.gl, this.fa.$l)]);
            case 1:
              r2.sent(), r2.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }, t2.prototype.e_ = function(t3) {
      return new Du();
    }, t2.prototype.Zl = function(t3) {
      var e, n2 = Wo(t3.gu.T), r2 = (e = t3.gu, new Ko(e));
      return function(t4, e2, n3) {
        return new Zo(t4, e2, n3);
      }(t3.credentials, r2, n2);
    }, t2.prototype.t_ = function(t3) {
      var e, n2, r2, i2, o, u = this;
      return e = this.Sh, n2 = this.Dh, r2 = t3.fs, i2 = function(t4) {
        return Yu(u.fa, t4, 0);
      }, o = zo.Wn() ? new zo() : new jo(), new eu(e, n2, r2, i2, o);
    }, t2.prototype.n_ = function(t3, e) {
      return function(t4, e2, n2, r2, i2, o, u) {
        var s = new Bu(t4, e2, n2, r2, i2, o);
        return u && (s.Ll = true), s;
      }(this.Sh, this.gl, this.Vl, this.pl, t3.Yl, t3.bl, e);
    }, t2.prototype.terminate = function() {
      return function(t3) {
        return __awaiter(this, void 0, void 0, function() {
          var e;
          return __generator(this, function(n2) {
            switch (n2.label) {
              case 0:
                return e = x(t3), E("RemoteStore", "RemoteStore shutting down."), e.Fh.add(5), [4, ru(e)];
              case 1:
                return n2.sent(), e.kh.Lo(), e.Mh.set("Unknown"), [2];
            }
          });
        });
      }(this.gl);
    }, t2;
  }();
  function Ss(t2, e) {
    void 0 === e && (e = 10240);
    var n2 = 0;
    return {
      read: function() {
        return __awaiter(this, void 0, void 0, function() {
          var r2;
          return __generator(this, function(i2) {
            return n2 < t2.byteLength ? (r2 = {
              value: t2.slice(n2, n2 + e),
              done: false
            }, [2, (n2 += e, r2)]) : [2, {
              done: true
            }];
          });
        });
      },
      cancel: function() {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(t3) {
            return [2];
          });
        });
      },
      releaseLock: function() {
      }
    };
  }
  var Ds = function() {
    function t2(t3) {
      this.observer = t3, this.muted = false;
    }
    return t2.prototype.next = function(t3) {
      this.observer.next && this.i_(this.observer.next, t3);
    }, t2.prototype.error = function(t3) {
      this.observer.error ? this.i_(this.observer.error, t3) : console.error("Uncaught Error in snapshot listener:", t3);
    }, t2.prototype.r_ = function() {
      this.muted = true;
    }, t2.prototype.i_ = function(t3, e) {
      var n2 = this;
      this.muted || setTimeout(function() {
        n2.muted || t3(e);
      }, 0);
    }, t2;
  }();
  var xs = function() {
    function t2(t3, e) {
      var n2 = this;
      this.o_ = t3, this.Kt = e, this.metadata = new vr(), this.buffer = new Uint8Array(), this.c_ = new TextDecoder("utf-8"), this.a_().then(function(t4) {
        t4 && t4.il() ? n2.metadata.resolve(t4.payload.metadata) : n2.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(null == t4 ? void 0 : t4.payload)));
      }, function(t4) {
        return n2.metadata.reject(t4);
      });
    }
    return t2.prototype.close = function() {
      return this.o_.cancel();
    }, t2.prototype.getMetadata = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          return [2, this.metadata.promise];
        });
      });
    }, t2.prototype.Kl = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, this.getMetadata()];
            case 1:
              return [2, (t3.sent(), this.a_())];
          }
        });
      });
    }, t2.prototype.a_ = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2;
        return __generator(this, function(i2) {
          switch (i2.label) {
            case 0:
              return [4, this.u_()];
            case 1:
              return null === (t3 = i2.sent()) ? [2, null] : (e = this.c_.decode(t3), n2 = Number(e), isNaN(n2) && this.h_("length string (" + e + ") is not valid number"), [4, this.l_(n2)]);
            case 2:
              return r2 = i2.sent(), [2, new Vu(JSON.parse(r2), t3.length + n2)];
          }
        });
      });
    }, t2.prototype.__ = function() {
      return this.buffer.findIndex(function(t3) {
        return t3 === "{".charCodeAt(0);
      });
    }, t2.prototype.u_ = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.__() < 0 ? [4, this.f_()] : [3, 3];
            case 1:
              if (n2.sent())
                return [3, 3];
              n2.label = 2;
            case 2:
              return [3, 0];
            case 3:
              return 0 === this.buffer.length ? [2, null] : ((t3 = this.__()) < 0 && this.h_("Reached the end of bundle when a length string is expected."), e = this.buffer.slice(0, t3), [2, (this.buffer = this.buffer.slice(t3), e)]);
          }
        });
      });
    }, t2.prototype.l_ = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.buffer.length < t3 ? [4, this.f_()] : [3, 3];
            case 1:
              n2.sent() && this.h_("Reached the end of bundle when more is expected."), n2.label = 2;
            case 2:
              return [3, 0];
            case 3:
              return e = this.c_.decode(this.buffer.slice(0, t3)), [2, (this.buffer = this.buffer.slice(t3), e)];
          }
        });
      });
    }, t2.prototype.h_ = function(t3) {
      throw this.o_.cancel(), new Error("Invalid bundle format: " + t3);
    }, t2.prototype.f_ = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return [4, this.o_.read()];
            case 1:
              return (t3 = n2.sent()).done || ((e = new Uint8Array(this.buffer.length + t3.value.length)).set(this.buffer), e.set(t3.value, this.buffer.length), this.buffer = e), [2, t3.done];
          }
        });
      });
    }, t2;
  }();
  var ks = function() {
    function t2() {
      for (var t3 = [], e = 0; e < arguments.length; e++)
        t3[e] = arguments[e];
      for (var n2 = 0; n2 < t3.length; ++n2)
        if (0 === t3[n2].length)
          throw new U(R.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
      this.d_ = new rt(t3);
    }
    return t2.prototype.isEqual = function(t3) {
      return this.d_.isEqual(t3.d_);
    }, t2;
  }();
  var Os = function(t2) {
    this._methodName = t2;
  };
  function Ps(t2, e, n2) {
    if (!n2)
      throw new U(R.INVALID_ARGUMENT, "Function " + t2 + "() cannot be called with an empty " + e + ".");
  }
  function Ls(t2, e) {
    if (void 0 === e)
      return {
        merge: false
      };
    if (void 0 !== e.mergeFields && void 0 !== e.merge)
      throw new U(R.INVALID_ARGUMENT, "Invalid options passed to function " + t2 + '(): You cannot specify both "merge" and "mergeFields".');
    return e;
  }
  function Cs(t2, e, n2, r2) {
    if (true === e && true === r2)
      throw new U(R.INVALID_ARGUMENT, t2 + " and " + n2 + " cannot be used together.");
  }
  function Vs(t2) {
    if (!it.Et(t2))
      throw new U(R.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t2 + " has " + t2.length + ".");
  }
  function Rs(t2) {
    if (it.Et(t2))
      throw new U(R.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t2 + " has " + t2.length + ".");
  }
  function Us(t2) {
    if (void 0 === t2)
      return "undefined";
    if (null === t2)
      return "null";
    if ("string" == typeof t2)
      return t2.length > 20 && (t2 = t2.substring(0, 20) + "..."), JSON.stringify(t2);
    if ("number" == typeof t2 || "boolean" == typeof t2)
      return "" + t2;
    if ("object" == typeof t2) {
      if (t2 instanceof Array)
        return "an array";
      var e = function(t3) {
        if (t3.constructor) {
          var e2 = /function\s+([^\s(]+)\s*\(/.exec(t3.constructor.toString());
          if (e2 && e2.length > 1)
            return e2[1];
        }
        return null;
      }(t2);
      return e ? "a custom " + e + " object" : "an object";
    }
    return "function" == typeof t2 ? "a function" : S();
  }
  function Ms(t2, e) {
    if ("_delegate" in t2 && (t2 = t2._), !(t2 instanceof e)) {
      if (e.name === t2.constructor.name)
        throw new U(R.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
      var n2 = Us(t2);
      throw new U(R.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n2);
    }
    return t2;
  }
  function qs(t2, e) {
    if (e <= 0)
      throw new U(R.INVALID_ARGUMENT, "Function " + t2 + "() requires a positive number, but it was: " + e + ".");
  }
  var Fs = function() {
    function t2(t3) {
      var e;
      if (void 0 === t3.host) {
        if (void 0 !== t3.ssl)
          throw new U(R.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
        this.host = "firestore.googleapis.com", this.ssl = true;
      } else
        this.host = t3.host, this.ssl = null === (e = t3.ssl) || void 0 === e || e;
      if (this.credentials = t3.credentials, this.ignoreUndefinedProperties = !!t3.ignoreUndefinedProperties, void 0 === t3.cacheSizeBytes)
        this.cacheSizeBytes = 41943040;
      else {
        if (-1 !== t3.cacheSizeBytes && t3.cacheSizeBytes < 1048576)
          throw new U(R.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
        this.cacheSizeBytes = t3.cacheSizeBytes;
      }
      this.experimentalForceLongPolling = !!t3.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t3.experimentalAutoDetectLongPolling, Cs("experimentalForceLongPolling", t3.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t3.experimentalAutoDetectLongPolling);
    }
    return t2.prototype.isEqual = function(t3) {
      return this.host === t3.host && this.ssl === t3.ssl && this.credentials === t3.credentials && this.cacheSizeBytes === t3.cacheSizeBytes && this.experimentalForceLongPolling === t3.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t3.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t3.ignoreUndefinedProperties;
    }, t2;
  }();
  var js = new Map();
  var zs = function() {
    function t2(t3, e) {
      this.w_ = "(lite)", this.E_ = new Fs({}), this.T_ = false, t3 instanceof B ? (this.I_ = t3, this.m_ = new J()) : (this.A_ = t3, this.I_ = function(t4) {
        if (!Object.prototype.hasOwnProperty.apply(t4.options, ["projectId"]))
          throw new U(R.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        return new B(t4.options.projectId);
      }(t3), this.m_ = new W(e));
    }
    return Object.defineProperty(t2.prototype, "app", {
      get: function() {
        if (!this.A_)
          throw new U(R.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this.A_;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "R_", {
      get: function() {
        return this.T_;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "P_", {
      get: function() {
        return void 0 !== this.y_;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.g_ = function(t3) {
      if (this.T_)
        throw new U(R.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
      this.E_ = new Fs(t3), void 0 !== t3.credentials && (this.m_ = function(t4) {
        if (!t4)
          return new J();
        switch (t4.type) {
          case "gapi":
            var e = t4.client;
            return D(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new Y(e, t4.sessionIndex || "0");
          case "provider":
            return t4.client;
          default:
            throw new U(R.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
        }
      }(t3.credentials));
    }, t2.prototype.V_ = function() {
      return this.E_;
    }, t2.prototype.p_ = function() {
      return this.T_ = true, this.E_;
    }, t2.prototype._delete = function() {
      return this.y_ || (this.y_ = this.b_()), this.y_;
    }, t2.prototype.b_ = function() {
      return t3 = this, (e = js.get(t3)) && (E("ComponentProvider", "Removing Datastore"), js.delete(t3), e.terminate()), Promise.resolve();
      var t3, e;
    }, t2;
  }();
  var Gs = function() {
    function t2(t3, e, n2) {
      this.v_ = e, this.S_ = n2, this.type = "document", this.firestore = t3;
    }
    return Object.defineProperty(t2.prototype, "D_", {
      get: function() {
        return this.S_.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "id", {
      get: function() {
        return this.S_.path.et();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "path", {
      get: function() {
        return this.S_.path.ot();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "parent", {
      get: function() {
        return new Ks(this.firestore, this.v_, this.S_.path.Z());
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e, this.S_);
    }, t2;
  }();
  var Bs = function() {
    function t2(t3, e, n2) {
      this.v_ = e, this.C_ = n2, this.type = "query", this.firestore = t3;
    }
    return t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e, this.C_);
    }, t2;
  }();
  var Ks = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this, e2, n2, se(r2)) || this).firestore = e2, i2.D_ = r2, i2.type = "collection", i2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "id", {
      get: function() {
        return this.C_.path.et();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "path", {
      get: function() {
        return this.C_.path.ot();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "parent", {
      get: function() {
        var t3 = this.D_.Z();
        return t3.nt() ? null : new Gs(this.firestore, null, new it(t3));
      },
      enumerable: false,
      configurable: true
    }), e.prototype.withConverter = function(t3) {
      return new e(this.firestore, t3, this.D_);
    }, e;
  }(Bs);
  function Hs(t2, e) {
    for (var n2, r2 = [], i2 = 2; i2 < arguments.length; i2++)
      r2[i2 - 2] = arguments[i2];
    if (t2 instanceof q && (t2 = t2._), Ps("collection", "path", e), t2 instanceof zs)
      return Rs(n2 = et.ct.apply(et, __spreadArrays([e], r2))), new Ks(t2, null, n2);
    if (!(t2 instanceof Gs || t2 instanceof Ks))
      throw new U(R.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    return Rs(n2 = et.ct.apply(et, __spreadArrays([t2.path], r2)).child(et.ct(e))), new Ks(t2.firestore, null, n2);
  }
  function Js(t2, e) {
    for (var n2, r2 = [], i2 = 2; i2 < arguments.length; i2++)
      r2[i2 - 2] = arguments[i2];
    if (t2 instanceof q && (t2 = t2._), 1 === arguments.length && (e = O.t()), Ps("doc", "path", e), t2 instanceof zs)
      return Vs(n2 = et.ct.apply(et, __spreadArrays([e], r2))), new Gs(t2, null, new it(n2));
    if (!(t2 instanceof Gs || t2 instanceof Ks))
      throw new U(R.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    return Vs(n2 = t2.D_.child(et.ct.apply(et, __spreadArrays([e], r2)))), new Gs(t2.firestore, t2 instanceof Ks ? t2.v_ : null, new it(n2));
  }
  function Ws(t2, e) {
    return t2 instanceof q && (t2 = t2._), e instanceof q && (e = e._), (t2 instanceof Gs || t2 instanceof Ks) && (e instanceof Gs || e instanceof Ks) && t2.firestore === e.firestore && t2.path === e.path && t2.v_ === e.v_;
  }
  function Qs(t2, e) {
    return t2 instanceof q && (t2 = t2._), e instanceof q && (e = e._), t2 instanceof Bs && e instanceof Bs && t2.firestore === e.firestore && ye(t2.C_, e.C_) && t2.v_ === e.v_;
  }
  var Ys = function() {
    function t2(t3, e) {
      if (!isFinite(t3) || t3 < -90 || t3 > 90)
        throw new U(R.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t3);
      if (!isFinite(e) || e < -180 || e > 180)
        throw new U(R.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
      this.x_ = t3, this.N_ = e;
    }
    return Object.defineProperty(t2.prototype, "latitude", {
      get: function() {
        return this.x_;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "longitude", {
      get: function() {
        return this.N_;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(t3) {
      return this.x_ === t3.x_ && this.N_ === t3.N_;
    }, t2.prototype.toJSON = function() {
      return {
        latitude: this.x_,
        longitude: this.N_
      };
    }, t2.prototype.K = function(t3) {
      return P2(this.x_, t3.x_) || P2(this.N_, t3.N_);
    }, t2;
  }();
  var Xs = /^__.*__$/;
  var $s = function() {
    function t2(t3, e, n2) {
      this.data = t3, this.zt = e, this.fieldTransforms = n2;
    }
    return t2.prototype.F_ = function(t3, e) {
      return null !== this.zt ? new Qe(t3, this.data, this.zt, e, this.fieldTransforms) : new We(t3, this.data, e, this.fieldTransforms);
    }, t2;
  }();
  var Zs = function() {
    function t2(t3, e, n2) {
      this.data = t3, this.zt = e, this.fieldTransforms = n2;
    }
    return t2.prototype.F_ = function(t3, e) {
      return new Qe(t3, this.data, this.zt, e, this.fieldTransforms);
    }, t2;
  }();
  function ta(t2) {
    switch (t2) {
      case 0:
      case 2:
      case 1:
        return true;
      case 3:
      case 4:
        return false;
      default:
        throw S();
    }
  }
  var ea = function() {
    function t2(t3, e, n2, r2, i2, o) {
      this.settings = t3, this.T = e, this.Kt = n2, this.ignoreUndefinedProperties = r2, void 0 === i2 && this.O_(), this.fieldTransforms = i2 || [], this.zt = o || [];
    }
    return Object.defineProperty(t2.prototype, "path", {
      get: function() {
        return this.settings.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "k_", {
      get: function() {
        return this.settings.k_;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.M_ = function(e) {
      return new t2(Object.assign(Object.assign({}, this.settings), e), this.T, this.Kt, this.ignoreUndefinedProperties, this.fieldTransforms, this.zt);
    }, t2.prototype.L_ = function(t3) {
      var e, n2 = null === (e = this.path) || void 0 === e ? void 0 : e.child(t3), r2 = this.M_({
        path: n2,
        B_: false
      });
      return r2.q_(t3), r2;
    }, t2.prototype.U_ = function(t3) {
      var e, n2 = null === (e = this.path) || void 0 === e ? void 0 : e.child(t3), r2 = this.M_({
        path: n2,
        B_: false
      });
      return r2.O_(), r2;
    }, t2.prototype.Q_ = function(t3) {
      return this.M_({
        path: void 0,
        B_: true
      });
    }, t2.prototype.K_ = function(t3) {
      return _a3(t3, this.settings.methodName, this.settings.W_ || false, this.path, this.settings.j_);
    }, t2.prototype.contains = function(t3) {
      return void 0 !== this.zt.find(function(e) {
        return t3.st(e);
      }) || void 0 !== this.fieldTransforms.find(function(e) {
        return t3.st(e.field);
      });
    }, t2.prototype.O_ = function() {
      if (this.path)
        for (var t3 = 0; t3 < this.path.length; t3++)
          this.q_(this.path.get(t3));
    }, t2.prototype.q_ = function(t3) {
      if (0 === t3.length)
        throw this.K_("Document fields must not be empty");
      if (ta(this.k_) && Xs.test(t3))
        throw this.K_('Document fields cannot begin and end with "__"');
    }, t2;
  }();
  var na = function() {
    function t2(t3, e, n2) {
      this.T = t3, this.ignoreUndefinedProperties = e, this.Kt = n2 || Wo(t3);
    }
    return t2.prototype.G_ = function(t3, e, n2, r2) {
      return void 0 === r2 && (r2 = false), new ea({
        k_: t3,
        methodName: e,
        j_: n2,
        path: rt.at(),
        B_: false,
        W_: r2
      }, this.T, this.Kt, this.ignoreUndefinedProperties);
    }, t2;
  }();
  function ra(t2) {
    var e = t2.p_(), n2 = Wo(t2.I_);
    return new na(t2.I_, !!e.ignoreUndefinedProperties, n2);
  }
  function ia(t2, e, n2, r2, i2, o) {
    void 0 === o && (o = {});
    var u = t2.G_(o.merge || o.mergeFields ? 2 : 0, e, n2, i2);
    ma("Data must be an object, but it was:", u, r2);
    var s, a, c = va(r2, u);
    if (o.merge)
      s = new at(u.zt), a = u.fieldTransforms;
    else if (o.mergeFields) {
      for (var f = [], h2 = 0, l = o.mergeFields; h2 < l.length; h2++) {
        var p2 = ga(e, l[h2], n2);
        if (!u.contains(p2))
          throw new U(R.INVALID_ARGUMENT, "Field '" + p2 + "' is specified in your field mask but missing from your input data.");
        Ia(f, p2) || f.push(p2);
      }
      s = new at(f), a = u.fieldTransforms.filter(function(t3) {
        return s.It(t3.field);
      });
    } else
      s = null, a = u.fieldTransforms;
    return new $s(new Pt(c), s, a);
  }
  var oa = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.z_ = function(t3) {
      if (2 !== t3.k_)
        throw 1 === t3.k_ ? t3.K_(this._methodName + "() can only appear at the top level of your update data") : t3.K_(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
      return t3.zt.push(t3.path), null;
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof e;
    }, e;
  }(Os);
  function ua(t2, e, n2) {
    return new ea({
      k_: 3,
      j_: e.settings.j_,
      methodName: t2._methodName,
      B_: n2
    }, e.T, e.Kt, e.ignoreUndefinedProperties);
  }
  var sa = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.z_ = function(t3) {
      return new Me(t3.path, new ke());
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof e;
    }, e;
  }(Os);
  var aa = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).H_ = n2, r2;
    }
    return __extends(e, t2), e.prototype.z_ = function(t3) {
      var e2 = ua(this, t3, true), n2 = this.H_.map(function(t4) {
        return da(t4, e2);
      }), r2 = new Oe(n2);
      return new Me(t3.path, r2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(Os);
  var ca = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).H_ = n2, r2;
    }
    return __extends(e, t2), e.prototype.z_ = function(t3) {
      var e2 = ua(this, t3, true), n2 = this.H_.map(function(t4) {
        return da(t4, e2);
      }), r2 = new Le(n2);
      return new Me(t3.path, r2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(Os);
  var fa = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).J_ = n2, r2;
    }
    return __extends(e, t2), e.prototype.z_ = function(t3) {
      var e2 = new Ve(t3.Kt, Ne(t3.Kt, this.J_));
      return new Me(t3.path, e2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(Os);
  function ha(t2, e, n2, r2) {
    var i2 = t2.G_(1, e, n2);
    ma("Data must be an object, but it was:", i2, r2);
    var o = [], u = new Lt();
    ut(r2, function(t3, r3) {
      var s2 = ba(e, t3, n2);
      r3 instanceof q && (r3 = r3._);
      var a = i2.U_(s2);
      if (r3 instanceof oa)
        o.push(s2);
      else {
        var c = da(r3, a);
        null != c && (o.push(s2), u.set(s2, c));
      }
    });
    var s = new at(o);
    return new Zs(u.yt(), s, i2.fieldTransforms);
  }
  function la(t2, e, n2, r2, i2, o) {
    var u = t2.G_(1, e, n2), s = [ga(e, r2, n2)], a = [i2];
    if (o.length % 2 != 0)
      throw new U(R.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
    for (var c = 0; c < o.length; c += 2)
      s.push(ga(e, o[c])), a.push(o[c + 1]);
    for (var f = [], h2 = new Lt(), l = s.length - 1; l >= 0; --l)
      if (!Ia(f, s[l])) {
        var p2 = s[l], d = a[l];
        d instanceof q && (d = d._);
        var v2 = u.U_(p2);
        if (d instanceof oa)
          f.push(p2);
        else {
          var y2 = da(d, v2);
          null != y2 && (f.push(p2), h2.set(p2, y2));
        }
      }
    var m = new at(f);
    return new Zs(h2.yt(), m, u.fieldTransforms);
  }
  function pa(t2, e, n2, r2) {
    return void 0 === r2 && (r2 = false), da(n2, t2.G_(r2 ? 4 : 3, e));
  }
  function da(t2, e) {
    if (t2 instanceof q && (t2 = t2._), ya(t2))
      return ma("Unsupported field value:", e, t2), va(t2, e);
    if (t2 instanceof Os)
      return function(t3, e2) {
        if (!ta(e2.k_))
          throw e2.K_(t3._methodName + "() can only be used with update() and set()");
        if (!e2.path)
          throw e2.K_(t3._methodName + "() is not currently supported inside arrays");
        var n2 = t3.z_(e2);
        n2 && e2.fieldTransforms.push(n2);
      }(t2, e), null;
    if (e.path && e.zt.push(e.path), t2 instanceof Array) {
      if (e.settings.B_ && 4 !== e.k_)
        throw e.K_("Nested arrays are not supported");
      return function(t3, e2) {
        for (var n2 = [], r2 = 0, i2 = 0, o = t3; i2 < o.length; i2++) {
          var u = da(o[i2], e2.Q_(r2));
          null == u && (u = {
            nullValue: "NULL_VALUE"
          }), n2.push(u), r2++;
        }
        return {
          arrayValue: {
            values: n2
          }
        };
      }(t2, e);
    }
    return function(t3, e2) {
      if (t3 instanceof q && (t3 = t3._), null === t3)
        return {
          nullValue: "NULL_VALUE"
        };
      if ("number" == typeof t3)
        return Ne(e2.Kt, t3);
      if ("boolean" == typeof t3)
        return {
          booleanValue: t3
        };
      if ("string" == typeof t3)
        return {
          stringValue: t3
        };
      if (t3 instanceof Date) {
        var n2 = $.fromDate(t3);
        return {
          timestampValue: qn(e2.Kt, n2)
        };
      }
      if (t3 instanceof $) {
        n2 = new $(t3.seconds, 1e3 * Math.floor(t3.nanoseconds / 1e3));
        return {
          timestampValue: qn(e2.Kt, n2)
        };
      }
      if (t3 instanceof Ys)
        return {
          geoPointValue: {
            latitude: t3.latitude,
            longitude: t3.longitude
          }
        };
      if (t3 instanceof M)
        return {
          bytesValue: Fn(e2.Kt, t3.l)
        };
      if (t3 instanceof Gs) {
        n2 = e2.T;
        var r2 = t3.firestore.I_;
        if (!r2.isEqual(n2))
          throw e2.K_("Document reference is for database " + r2.projectId + "/" + r2.database + " but should be for database " + n2.projectId + "/" + n2.database);
        return {
          referenceValue: Gn(t3.firestore.I_ || e2.T, t3.S_.path)
        };
      }
      if (void 0 === t3 && e2.ignoreUndefinedProperties)
        return null;
      throw e2.K_("Unsupported field value: " + Us(t3));
    }(t2, e);
  }
  function va(t2, e) {
    var n2 = {};
    return st(t2) ? e.path && e.path.length > 0 && e.zt.push(e.path) : ut(t2, function(t3, r2) {
      var i2 = da(r2, e.L_(t3));
      null != i2 && (n2[t3] = i2);
    }), {
      mapValue: {
        fields: n2
      }
    };
  }
  function ya(t2) {
    return !("object" != typeof t2 || null === t2 || t2 instanceof Array || t2 instanceof Date || t2 instanceof $ || t2 instanceof Ys || t2 instanceof M || t2 instanceof Gs || t2 instanceof Os);
  }
  function ma(t2, e, n2) {
    if (!ya(n2) || !function(t3) {
      return "object" == typeof t3 && null !== t3 && (Object.getPrototypeOf(t3) === Object.prototype || null === Object.getPrototypeOf(t3));
    }(n2)) {
      var r2 = Us(n2);
      throw "an object" === r2 ? e.K_(t2 + " a custom object") : e.K_(t2 + " " + r2);
    }
  }
  function ga(t2, e, n2) {
    if (e instanceof q && (e = e._), e instanceof ks)
      return e.d_;
    if ("string" == typeof e)
      return ba(t2, e);
    throw _a3("Field path arguments must be of type string or FieldPath.", t2, false, void 0, n2);
  }
  var wa = new RegExp("[~\\*/\\[\\]]");
  function ba(t2, e, n2) {
    if (e.search(wa) >= 0)
      throw _a3("Invalid field path (" + e + "). Paths must not contain '~', '*', '/', '[', or ']'", t2, false, void 0, n2);
    try {
      return new (ks.bind.apply(ks, __spreadArrays([void 0], e.split("."))))().d_;
    } catch (r2) {
      throw _a3("Invalid field path (" + e + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t2, false, void 0, n2);
    }
  }
  function _a3(t2, e, n2, r2, i2) {
    var o = r2 && !r2.nt(), u = void 0 !== i2, s = "Function " + e + "() called with invalid data";
    n2 && (s += " (via `toFirestore()`)");
    var a = "";
    return (o || u) && (a += " (found", o && (a += " in field " + r2), u && (a += " in document " + i2), a += ")"), new U(R.INVALID_ARGUMENT, (s += ". ") + t2 + a);
  }
  function Ia(t2, e) {
    return t2.some(function(t3) {
      return t3.isEqual(e);
    });
  }
  var Ea = function() {
    function t2(t3) {
      this.Dh = t3, this.Y_ = new Map(), this.mutations = [], this.X_ = false, this.Z_ = null, this.tf = new Set();
    }
    return t2.prototype.ef = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        var e, n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              if (this.nf(), this.mutations.length > 0)
                throw new U(R.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
              return [4, function(t4, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n3, r3, i2, o, u, s;
                  return __generator(this, function(a) {
                    switch (a.label) {
                      case 0:
                        return n3 = x(t4), r3 = Qn(n3.Kt) + "/documents", i2 = {
                          documents: e2.map(function(t5) {
                            return Kn(n3.Kt, t5);
                          })
                        }, [4, n3.Cu("BatchGetDocuments", r3, i2)];
                      case 1:
                        return o = a.sent(), u = new Map(), o.forEach(function(t5) {
                          var e3 = function(t6, e4) {
                            return "found" in e4 ? function(t7, e5) {
                              D(!!e5.found), e5.found.name, e5.found.updateTime;
                              var n4 = Hn(t7, e5.found.name), r4 = zn(e5.found.updateTime), i3 = new Pt({
                                mapValue: {
                                  fields: e5.found.fields
                                }
                              });
                              return new Rt(n4, r4, i3, {});
                            }(t6, e4) : "missing" in e4 ? function(t7, e5) {
                              D(!!e5.missing), D(!!e5.readTime);
                              var n4 = Hn(t7, e5.missing), r4 = zn(e5.readTime);
                              return new Ut(n4, r4);
                            }(t6, e4) : S();
                          }(n3.Kt, t5);
                          u.set(e3.key.toString(), e3);
                        }), s = [], [2, (e2.forEach(function(t5) {
                          var e3 = u.get(t5.toString());
                          D(!!e3), s.push(e3);
                        }), s)];
                    }
                  });
                });
              }(this.Dh, t3)];
            case 1:
              return [2, ((e = r2.sent()).forEach(function(t4) {
                t4 instanceof Ut || t4 instanceof Rt ? n2.sf(t4) : S();
              }), e)];
          }
        });
      });
    }, t2.prototype.set = function(t3, e) {
      this.write(e.F_(t3, this.Gt(t3))), this.tf.add(t3.toString());
    }, t2.prototype.update = function(t3, e) {
      try {
        this.write(e.F_(t3, this.rf(t3)));
      } catch (t4) {
        this.Z_ = t4;
      }
      this.tf.add(t3.toString());
    }, t2.prototype.delete = function(t3) {
      this.write(new nn(t3, this.Gt(t3))), this.tf.add(t3.toString());
    }, t2.prototype.commit = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e = this;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              if (this.nf(), this.Z_)
                throw this.Z_;
              return t3 = this.Y_, this.mutations.forEach(function(e2) {
                t3.delete(e2.key.toString());
              }), t3.forEach(function(t4, n3) {
                var r2 = it.ft(n3);
                e.mutations.push(new rn(r2, e.Gt(r2)));
              }), [4, function(t4, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n3, r2, i2;
                  return __generator(this, function(o) {
                    switch (o.label) {
                      case 0:
                        return n3 = x(t4), r2 = Qn(n3.Kt) + "/documents", i2 = {
                          writes: e2.map(function(t5) {
                            return Zn(n3.Kt, t5);
                          })
                        }, [4, n3.bu("Commit", r2, i2)];
                      case 1:
                        return o.sent(), [2];
                    }
                  });
                });
              }(this.Dh, this.mutations)];
            case 1:
              return n2.sent(), this.X_ = true, [2];
          }
        });
      });
    }, t2.prototype.sf = function(t3) {
      var e;
      if (t3 instanceof Rt)
        e = t3.version;
      else {
        if (!(t3 instanceof Ut))
          throw S();
        e = Z.min();
      }
      var n2 = this.Y_.get(t3.key.toString());
      if (n2) {
        if (!e.isEqual(n2))
          throw new U(R.ABORTED, "Document version changed between two reads.");
      } else
        this.Y_.set(t3.key.toString(), e);
    }, t2.prototype.Gt = function(t3) {
      var e = this.Y_.get(t3.toString());
      return !this.tf.has(t3.toString()) && e ? Fe.updateTime(e) : Fe.Wt();
    }, t2.prototype.rf = function(t3) {
      var e = this.Y_.get(t3.toString());
      if (!this.tf.has(t3.toString()) && e) {
        if (e.isEqual(Z.min()))
          throw new U(R.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
        return Fe.updateTime(e);
      }
      return Fe.exists(true);
    }, t2.prototype.write = function(t3) {
      this.nf(), this.mutations.push(t3);
    }, t2.prototype.nf = function() {
    }, t2;
  }();
  var Ta = function() {
    function t2(t3, e, n2, r2) {
      this.fs = t3, this.Dh = e, this.updateFunction = n2, this.Ts = r2, this.cf = 5, this.zu = new Qo(this.fs, "transaction_retry");
    }
    return t2.prototype.run = function() {
      this.af();
    }, t2.prototype.af = function() {
      var t3 = this;
      this.zu.Bu(function() {
        return __awaiter(t3, void 0, void 0, function() {
          var t4, e, n2 = this;
          return __generator(this, function(r2) {
            return t4 = new Ea(this.Dh), (e = this.uf(t4)) && e.then(function(e2) {
              n2.fs.ys(function() {
                return t4.commit().then(function() {
                  n2.Ts.resolve(e2);
                }).catch(function(t5) {
                  n2.hf(t5);
                });
              });
            }).catch(function(t5) {
              n2.hf(t5);
            }), [2];
          });
        });
      });
    }, t2.prototype.uf = function(t3) {
      try {
        var e = this.updateFunction(t3);
        return !yt(e) && e.catch && e.then ? e : (this.Ts.reject(Error("Transaction callback must return a Promise")), null);
      } catch (t4) {
        return this.Ts.reject(t4), null;
      }
    }, t2.prototype.hf = function(t3) {
      var e = this;
      this.cf > 0 && this.lf(t3) ? (this.cf -= 1, this.fs.ys(function() {
        return e.af(), Promise.resolve();
      })) : this.Ts.reject(t3);
    }, t2.prototype.lf = function(t3) {
      if ("FirebaseError" === t3.name) {
        var e = t3.code;
        return "aborted" === e || "failed-precondition" === e || !un(e);
      }
      return false;
    }, t2;
  }();
  var Na = function() {
    function t2(t3, e, n2) {
      var r2 = this;
      this.credentials = t3, this.fs = e, this.gu = n2, this.user = K.UNAUTHENTICATED, this.clientId = O.t(), this._f = function() {
      }, this.N = new vr(), this.credentials.S(function(t4) {
        E("FirestoreClient", "Received user=", t4.uid), r2.user = t4, r2._f(t4), r2.N.resolve();
      });
    }
    return t2.prototype.getConfiguration = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, this.N.promise];
            case 1:
              return [2, (t3.sent(), {
                fs: this.fs,
                gu: this.gu,
                clientId: this.clientId,
                credentials: this.credentials,
                Yl: this.user,
                bl: 100
              })];
          }
        });
      });
    }, t2.prototype.ff = function(t3) {
      var e = this;
      this._f = t3, this.N.promise.then(function() {
        return e._f(e.user);
      });
    }, t2.prototype.df = function() {
      if (this.fs.wf)
        throw new U(R.FAILED_PRECONDITION, "The client has already been terminated.");
    }, t2.prototype.terminate = function() {
      var t3 = this;
      this.fs.Ef();
      var e = new vr();
      return this.fs.Tf(function() {
        return __awaiter(t3, void 0, void 0, function() {
          var t4, n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return r2.trys.push([0, 5, , 6]), this.If ? [4, this.If.terminate()] : [3, 2];
              case 1:
                r2.sent(), r2.label = 2;
              case 2:
                return this.mf ? [4, this.mf.terminate()] : [3, 4];
              case 3:
                r2.sent(), r2.label = 4;
              case 4:
                return this.credentials.D(), e.resolve(), [3, 6];
              case 5:
                return t4 = r2.sent(), n2 = Sr(t4, "Failed to shutdown persistence"), e.reject(n2), [3, 6];
              case 6:
                return [2];
            }
          });
        });
      }), e.promise;
    }, t2;
  }();
  function Aa(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2, i2 = this;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return t2.fs.Af(), E("FirestoreClient", "Initializing OfflineComponentProvider"), [4, t2.getConfiguration()];
          case 1:
            return n2 = o.sent(), [4, e.initialize(n2)];
          case 2:
            return o.sent(), r2 = n2.Yl, t2.ff(function(n3) {
              r2.isEqual(n3) || (r2 = n3, t2.fs.bo(function() {
                return __awaiter(i2, void 0, void 0, function() {
                  return __generator(this, function(t3) {
                    switch (t3.label) {
                      case 0:
                        return [4, uo(e.Sh, n3)];
                      case 1:
                        return t3.sent(), [2];
                    }
                  });
                });
              }));
            }), e.persistence.yo(function() {
              return t2.terminate();
            }), t2.mf = e, [2];
        }
      });
    });
  }
  function Sa(t2, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n2, r2;
      return __generator(this, function(i2) {
        switch (i2.label) {
          case 0:
            return t2.fs.Af(), [4, Da(t2)];
          case 1:
            return n2 = i2.sent(), E("FirestoreClient", "Initializing OnlineComponentProvider"), [4, t2.getConfiguration()];
          case 2:
            return r2 = i2.sent(), [4, e.initialize(n2, r2)];
          case 3:
            return i2.sent(), t2.ff(function(n3) {
              return t2.fs.bo(function() {
                return function(t3, e2) {
                  return __awaiter(this, void 0, void 0, function() {
                    var n4, r3;
                    return __generator(this, function(i3) {
                      switch (i3.label) {
                        case 0:
                          return (n4 = x(t3)).fs.Af(), E("RemoteStore", "RemoteStore received new credentials"), r3 = fu(n4), n4.Fh.add(3), [4, ru(n4)];
                        case 1:
                          return i3.sent(), r3 && n4.Mh.set("Unknown"), [4, n4.Ch.s_(e2)];
                        case 2:
                          return i3.sent(), n4.Fh.delete(3), [4, nu(n4)];
                        case 3:
                          return i3.sent(), [2];
                      }
                    });
                  });
                }(e.gl, n3);
              });
            }), t2.If = e, [2];
        }
      });
    });
  }
  function Da(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            return t2.mf ? [3, 2] : (E("FirestoreClient", "Using default OfflineComponentProvider"), [4, Aa(t2, new Es())]);
          case 1:
            e.sent(), e.label = 2;
          case 2:
            return [2, t2.mf];
        }
      });
    });
  }
  function xa(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            return t2.If ? [3, 2] : (E("FirestoreClient", "Using default OnlineComponentProvider"), [4, Sa(t2, new As())]);
          case 1:
            e.sent(), e.label = 2;
          case 2:
            return [2, t2.If];
        }
      });
    });
  }
  function ka(t2) {
    return Da(t2).then(function(t3) {
      return t3.persistence;
    });
  }
  function Oa(t2) {
    return Da(t2).then(function(t3) {
      return t3.Sh;
    });
  }
  function Pa(t2) {
    return xa(t2).then(function(t3) {
      return t3.gl;
    });
  }
  function La(t2) {
    return xa(t2).then(function(t3) {
      return t3.fa;
    });
  }
  function Ca(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n2;
      return __generator(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, xa(t2)];
          case 1:
            return e = r2.sent(), [2, ((n2 = e.Vl).Gh = Ku.bind(null, e.fa), n2.Jh = Ju.bind(null, e.fa), n2)];
        }
      });
    });
  }
  function Va(t2, e, n2) {
    var r2 = this;
    void 0 === n2 && (n2 = {});
    var i2 = new vr();
    return t2.fs.ys(function() {
      return __awaiter(r2, void 0, void 0, function() {
        var r3;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return r3 = function(t3, e2, n3, r4, i3) {
                var o2 = new Ds({
                  next: function(o3) {
                    e2.ys(function() {
                      return ku(t3, u);
                    });
                    var s = o3.docs.has(n3);
                    !s && o3.fromCache ? i3.reject(new U(R.UNAVAILABLE, "Failed to get document because the client is offline.")) : s && o3.fromCache && r4 && "server" === r4.source ? i3.reject(new U(R.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i3.resolve(o3);
                  },
                  error: function(t4) {
                    return i3.reject(t4);
                  }
                }), u = new Cu(se(n3.path), o2, {
                  includeMetadataChanges: true,
                  sl: true
                });
                return xu(t3, u);
              }, [4, Ca(t2)];
            case 1:
              return [2, r3.apply(void 0, [o.sent(), t2.fs, e, n2, i2])];
          }
        });
      });
    }), i2.promise;
  }
  function Ra(t2, e, n2) {
    var r2 = this;
    void 0 === n2 && (n2 = {});
    var i2 = new vr();
    return t2.fs.ys(function() {
      return __awaiter(r2, void 0, void 0, function() {
        var r3;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return r3 = function(t3, e2, n3, r4, i3) {
                var o2 = new Ds({
                  next: function(n4) {
                    e2.ys(function() {
                      return ku(t3, u);
                    }), n4.fromCache && "server" === r4.source ? i3.reject(new U(R.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i3.resolve(n4);
                  },
                  error: function(t4) {
                    return i3.reject(t4);
                  }
                }), u = new Cu(n3, o2, {
                  includeMetadataChanges: true,
                  sl: true
                });
                return xu(t3, u);
              }, [4, Ca(t2)];
            case 1:
              return [2, r3.apply(void 0, [o.sent(), t2.fs, e, n2, i2])];
          }
        });
      });
    }), i2.promise;
  }
  var Ua = function() {
    function t2() {
      var t3 = this;
      this.Rf = Promise.resolve(), this.Pf = [], this.yf = false, this.gf = [], this.Vf = null, this.pf = false, this.bf = [], this.zu = new Qo(this, "async_queue_retry"), this.vf = function() {
        var e2 = Jo();
        e2 && E("AsyncQueue", "Visibility state changed to " + e2.visibilityState), t3.zu.Uu();
      };
      var e = Jo();
      e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.vf);
    }
    return Object.defineProperty(t2.prototype, "wf", {
      get: function() {
        return this.yf;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.ys = function(t3) {
      this.enqueue(t3);
    }, t2.prototype.Tf = function(t3) {
      this.Sf(), this.Df(t3);
    }, t2.prototype.Ef = function() {
      if (!this.yf) {
        this.yf = true;
        var t3 = Jo();
        t3 && "function" == typeof t3.removeEventListener && t3.removeEventListener("visibilitychange", this.vf);
      }
    }, t2.prototype.enqueue = function(t3) {
      return this.Sf(), this.yf ? new Promise(function(t4) {
      }) : this.Df(t3);
    }, t2.prototype.bo = function(t3) {
      var e = this;
      this.ys(function() {
        return e.Pf.push(t3), e.Cf();
      });
    }, t2.prototype.Cf = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e = this;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              if (0 === this.Pf.length)
                return [3, 5];
              n2.label = 1;
            case 1:
              return n2.trys.push([1, 3, , 4]), [4, this.Pf[0]()];
            case 2:
              return n2.sent(), this.Pf.shift(), this.zu.reset(), [3, 4];
            case 3:
              if (!_r(t3 = n2.sent()))
                throw t3;
              return E("AsyncQueue", "Operation failed with retryable error: " + t3), [3, 4];
            case 4:
              this.Pf.length > 0 && this.zu.Bu(function() {
                return e.Cf();
              }), n2.label = 5;
            case 5:
              return [2];
          }
        });
      });
    }, t2.prototype.Df = function(t3) {
      var e = this, n2 = this.Rf.then(function() {
        return e.pf = true, t3().catch(function(t4) {
          throw e.Vf = t4, e.pf = false, T("INTERNAL UNHANDLED ERROR: ", function(t5) {
            var e2 = t5.message || "";
            return t5.stack && (e2 = t5.stack.includes(t5.message) ? t5.stack : t5.message + "\n" + t5.stack), e2;
          }(t4)), t4;
        }).then(function(t4) {
          return e.pf = false, t4;
        });
      });
      return this.Rf = n2, n2;
    }, t2.prototype.Ir = function(t3, e, n2) {
      var r2 = this;
      this.Sf(), this.bf.indexOf(t3) > -1 && (e = 0);
      var i2 = Ar.Is(this, t3, e, n2, function(t4) {
        return r2.xf(t4);
      });
      return this.gf.push(i2), i2;
    }, t2.prototype.Sf = function() {
      this.Vf && S();
    }, t2.prototype.Af = function() {
    }, t2.prototype.Nf = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3;
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return [4, t3 = this.Rf];
            case 1:
              e.sent(), e.label = 2;
            case 2:
              if (t3 !== this.Rf)
                return [3, 0];
              e.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }, t2.prototype.Ff = function(t3) {
      for (var e = 0, n2 = this.gf; e < n2.length; e++) {
        if (n2[e].ds === t3)
          return true;
      }
      return false;
    }, t2.prototype.Of = function(t3) {
      var e = this;
      return this.Nf().then(function() {
        e.gf.sort(function(t4, e2) {
          return t4.ws - e2.ws;
        });
        for (var n2 = 0, r2 = e.gf; n2 < r2.length; n2++) {
          var i2 = r2[n2];
          if (i2.Ps(), "all" !== t3 && i2.ds === t3)
            break;
        }
        return e.Nf();
      });
    }, t2.prototype.kf = function(t3) {
      this.bf.push(t3);
    }, t2.prototype.xf = function(t3) {
      var e = this.gf.indexOf(t3);
      this.gf.splice(e, 1);
    }, t2;
  }();
  var Ma = -1;
  var qa = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this).Mf = new Ua(), r2.w_ = "name" in e2 ? e2.name : "[DEFAULT]", r2;
    }
    return __extends(e, t2), e.prototype.b_ = function() {
      return this.Lf || ja(this), this.Lf.terminate();
    }, e;
  }(zs);
  function Fa(t2) {
    return t2.Lf || ja(t2), t2.Lf.df(), t2.Lf;
  }
  function ja(t2) {
    var e = t2.p_(), n2 = function(t3, e2, n3) {
      return new G(t3, e2, n3.host, n3.ssl, n3.experimentalForceLongPolling, n3.experimentalAutoDetectLongPolling);
    }(t2.I_, t2.w_, e);
    t2.Lf = new Na(t2.m_, t2.Mf, n2);
  }
  function za(t2, e, n2) {
    var r2 = this, i2 = new vr();
    return t2.fs.enqueue(function() {
      return __awaiter(r2, void 0, void 0, function() {
        var r3;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return o.trys.push([0, 3, , 4]), [4, Aa(t2, n2)];
            case 1:
              return o.sent(), [4, Sa(t2, e)];
            case 2:
              return o.sent(), i2.resolve(), [3, 4];
            case 3:
              if (!function(t3) {
                return "FirebaseError" === t3.name ? t3.code === R.FAILED_PRECONDITION || t3.code === R.UNIMPLEMENTED : !("undefined" != typeof DOMException && t3 instanceof DOMException) || (22 === t3.code || 20 === t3.code || 11 === t3.code);
              }(r3 = o.sent()))
                throw r3;
              return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r3), i2.reject(r3), [3, 4];
            case 4:
              return [2];
          }
        });
      });
    }).then(function() {
      return i2.promise;
    });
  }
  function Ga(t2) {
    if (t2.R_ || t2.P_)
      throw new U(R.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
  }
  var Ba = function() {
    function t2() {
    }
    return t2.prototype.$f = function(t3, e) {
      switch (void 0 === e && (e = "none"), wt(t3)) {
        case 0:
          return null;
        case 1:
          return t3.booleanValue;
        case 2:
          return ht(t3.integerValue || t3.doubleValue);
        case 3:
          return this.Bf(t3.timestampValue);
        case 4:
          return this.qf(t3, e);
        case 5:
          return t3.stringValue;
        case 6:
          return this.Uf(lt(t3.bytesValue));
        case 7:
          return this.Qf(t3.referenceValue);
        case 8:
          return this.Kf(t3.geoPointValue);
        case 9:
          return this.Wf(t3.arrayValue, e);
        case 10:
          return this.jf(t3.mapValue, e);
        default:
          throw S();
      }
    }, t2.prototype.jf = function(t3, e) {
      var n2 = this, r2 = {};
      return ut(t3.fields || {}, function(t4, i2) {
        r2[t4] = n2.$f(i2, e);
      }), r2;
    }, t2.prototype.Kf = function(t3) {
      return new Ys(ht(t3.latitude), ht(t3.longitude));
    }, t2.prototype.Wf = function(t3, e) {
      var n2 = this;
      return (t3.values || []).map(function(t4) {
        return n2.$f(t4, e);
      });
    }, t2.prototype.qf = function(t3, e) {
      switch (e) {
        case "previous":
          var n2 = dt(t3);
          return null == n2 ? null : this.$f(n2, e);
        case "estimate":
          return this.Bf(vt(t3));
        default:
          return null;
      }
    }, t2.prototype.Bf = function(t3) {
      var e = ft(t3);
      return new $(e.seconds, e.nanos);
    }, t2.prototype.Gf = function(t3, e) {
      var n2 = et.ct(t3);
      D(dr(n2));
      var r2 = new B(n2.get(1), n2.get(3)), i2 = new it(n2.X(5));
      return r2.isEqual(e) || T("Document " + i2 + " contains a document reference within a different database (" + r2.projectId + "/" + r2.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), i2;
    }, t2;
  }();
  var Ka = function() {
    function t2(t3, e, n2, r2, i2) {
      this.zf = t3, this.Hf = e, this.S_ = n2, this.Jf = r2, this.v_ = i2;
    }
    return Object.defineProperty(t2.prototype, "id", {
      get: function() {
        return this.S_.path.et();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "ref", {
      get: function() {
        return new Gs(this.zf, this.v_, this.S_);
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.exists = function() {
      return null !== this.Jf;
    }, t2.prototype.data = function() {
      if (this.Jf) {
        if (this.v_) {
          var t3 = new Ha(this.zf, this.Hf, this.S_, this.Jf, null);
          return this.v_.fromFirestore(t3);
        }
        return this.Hf.$f(this.Jf.vt());
      }
    }, t2.prototype.get = function(t3) {
      if (this.Jf) {
        var e = this.Jf.data().field(Ja("DocumentSnapshot.get", t3));
        if (null !== e)
          return this.Hf.$f(e);
      }
    }, t2;
  }();
  var Ha = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function() {
      return t2.prototype.data.call(this);
    }, e;
  }(Ka);
  function Ja(t2, e) {
    return "string" == typeof e ? ba(t2, e) : e instanceof q ? e._.d_ : e.d_;
  }
  function Wa(t2) {
    if (ce(t2) && 0 === t2.Nt.length)
      throw new U(R.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
  }
  var Qa = function() {
  };
  function Ya(t2) {
    for (var e = [], n2 = 1; n2 < arguments.length; n2++)
      e[n2 - 1] = arguments[n2];
    for (var r2 = 0, i2 = e; r2 < i2.length; r2++) {
      var o = i2[r2];
      t2 = o.Yf(t2);
    }
    return t2;
  }
  var Xa = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).Xf = e2, i2.Zf = n2, i2.td = r2, i2.type = "where", i2;
    }
    return __extends(e, t2), e.prototype.Yf = function(t3) {
      var e2 = ra(t3.firestore), n2 = function(t4, e3, n3, r2, i2, o, u) {
        var s;
        if (i2.ht()) {
          if ("array-contains" === o || "array-contains-any" === o)
            throw new U(R.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
          if ("in" === o || "not-in" === o) {
            ic(u, o);
            for (var a = [], c = 0, f = u; c < f.length; c++) {
              var h2 = f[c];
              a.push(rc(r2, t4, h2));
            }
            s = {
              arrayValue: {
                values: a
              }
            };
          } else
            s = rc(r2, t4, u);
        } else
          "in" !== o && "not-in" !== o && "array-contains-any" !== o || ic(u, o), s = pa(n3, "where", u, "in" === o || "not-in" === o);
        var l = Bt.create(i2, o, s);
        return function(t5, e4) {
          if (e4.xt()) {
            var n4 = he(t5);
            if (null !== n4 && !n4.isEqual(e4.field))
              throw new U(R.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n4.toString() + "' and '" + e4.field.toString() + "'");
            var r3 = fe(t5);
            null !== r3 && oc(t5, e4.field, r3);
          }
          var i3 = function(t6, e5) {
            for (var n5 = 0, r4 = t6.filters; n5 < r4.length; n5++) {
              var i4 = r4[n5];
              if (e5.indexOf(i4.op) >= 0)
                return i4.op;
            }
            return null;
          }(t5, function(t6) {
            switch (t6) {
              case "!=":
                return ["!=", "not-in"];
              case "array-contains":
                return ["array-contains", "array-contains-any", "not-in"];
              case "in":
                return ["array-contains-any", "in", "not-in"];
              case "array-contains-any":
                return ["array-contains", "array-contains-any", "in", "not-in"];
              case "not-in":
                return ["array-contains", "array-contains-any", "in", "not-in", "!="];
              default:
                return [];
            }
          }(e4.op));
          if (null !== i3)
            throw i3 === e4.op ? new U(R.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e4.op.toString() + "' filter.") : new U(R.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e4.op.toString() + "' filters with '" + i3.toString() + "' filters.");
        }(t4, l), l;
      }(t3.C_, 0, e2, t3.firestore.I_, this.Xf, this.Zf, this.td);
      return new Bs(t3.firestore, t3.v_, function(t4, e3) {
        var n3 = t4.filters.concat([e3]);
        return new oe(t4.path, t4.collectionGroup, t4.Nt.slice(), n3, t4.limit, t4.limitType, t4.startAt, t4.endAt);
      }(t3.C_, n2));
    }, e;
  }(Qa);
  var $a = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Xf = e2, r2.ed = n2, r2.type = "orderBy", r2;
    }
    return __extends(e, t2), e.prototype.Yf = function(t3) {
      var e2 = function(t4, e3, n2) {
        if (null !== t4.startAt)
          throw new U(R.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t4.endAt)
          throw new U(R.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var r2 = new ee(e3, n2);
        return function(t5, e4) {
          if (null === fe(t5)) {
            var n3 = he(t5);
            null !== n3 && oc(t5, n3, e4.field);
          }
        }(t4, r2), r2;
      }(t3.C_, this.Xf, this.ed);
      return new Bs(t3.firestore, t3.v_, function(t4, e3) {
        var n2 = t4.Nt.concat([e3]);
        return new oe(t4.path, t4.collectionGroup, n2, t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, t4.endAt);
      }(t3.C_, e2));
    }, e;
  }(Qa);
  var Za = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).type = e2, i2.nd = n2, i2.sd = r2, i2;
    }
    return __extends(e, t2), e.prototype.Yf = function(t3) {
      return new Bs(t3.firestore, t3.v_, ve(t3.C_, this.nd, this.sd));
    }, e;
  }(Qa);
  var tc = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).type = e2, i2.rd = n2, i2.od = r2, i2;
    }
    return __extends(e, t2), e.prototype.Yf = function(t3) {
      var e2 = nc(t3, this.type, this.rd, this.od);
      return new Bs(t3.firestore, t3.v_, function(t4, e3) {
        return new oe(t4.path, t4.collectionGroup, t4.Nt.slice(), t4.filters.slice(), t4.limit, t4.limitType, e3, t4.endAt);
      }(t3.C_, e2));
    }, e;
  }(Qa);
  var ec = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this) || this).type = e2, i2.rd = n2, i2.od = r2, i2;
    }
    return __extends(e, t2), e.prototype.Yf = function(t3) {
      var e2 = nc(t3, this.type, this.rd, this.od);
      return new Bs(t3.firestore, t3.v_, function(t4, e3) {
        return new oe(t4.path, t4.collectionGroup, t4.Nt.slice(), t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, e3);
      }(t3.C_, e2));
    }, e;
  }(Qa);
  function nc(t2, e, n2, r2) {
    if (n2[0] instanceof q && (n2[0] = n2[0]._), n2[0] instanceof Ka)
      return function(t3, e2, n3, r3, i3) {
        if (!r3)
          throw new U(R.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n3 + "().");
        for (var o = [], u = 0, s = pe(t3); u < s.length; u++) {
          var a = s[u];
          if (a.field.ht())
            o.push(At(e2, r3.key));
          else {
            var c = r3.field(a.field);
            if (pt(c))
              throw new U(R.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
            if (null === c) {
              var f = a.field.ot();
              throw new U(R.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + f + "' (used as the orderBy) does not exist.");
            }
            o.push(c);
          }
        }
        return new Zt(o, i3);
      }(t2.C_, t2.firestore.I_, e, n2[0].Jf, r2);
    var i2 = ra(t2.firestore);
    return function(t3, e2, n3, r3, i3, o) {
      var u = t3.Nt;
      if (i3.length > u.length)
        throw new U(R.INVALID_ARGUMENT, "Too many arguments provided to " + r3 + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
      for (var s = [], a = 0; a < i3.length; a++) {
        var c = i3[a];
        if (u[a].field.ht()) {
          if ("string" != typeof c)
            throw new U(R.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r3 + "(), but got a " + typeof c);
          if (!le(t3) && -1 !== c.indexOf("/"))
            throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r3 + "() must be a plain document ID, but '" + c + "' contains a slash.");
          var f = t3.path.child(et.ct(c));
          if (!it.Et(f))
            throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r3 + "() must result in a valid document path, but '" + f + "' is not because it contains an odd number of segments.");
          var h2 = new it(f);
          s.push(At(e2, h2));
        } else {
          var l = pa(n3, r3, c);
          s.push(l);
        }
      }
      return new Zt(s, o);
    }(t2.C_, t2.firestore.I_, i2, e, n2, r2);
  }
  function rc(t2, e, n2) {
    if (n2 instanceof q && (n2 = n2._), "string" == typeof n2) {
      if ("" === n2)
        throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
      if (!le(e) && -1 !== n2.indexOf("/"))
        throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n2 + "' contains a '/' character.");
      var r2 = e.path.child(et.ct(n2));
      if (!it.Et(r2))
        throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r2 + "' is not because it has an odd number of segments (" + r2.length + ").");
      return At(t2, new it(r2));
    }
    if (n2 instanceof Gs)
      return At(t2, n2.S_);
    throw new U(R.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Us(n2) + ".");
  }
  function ic(t2, e) {
    if (!Array.isArray(t2) || 0 === t2.length)
      throw new U(R.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
    if (t2.length > 10)
      throw new U(R.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
  }
  function oc(t2, e, n2) {
    if (!n2.isEqual(e))
      throw new U(R.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n2.toString() + "' instead.");
  }
  function uc(t2) {
    return function(t3, e) {
      if ("object" != typeof t3 || null === t3)
        return false;
      for (var n2 = t3, r2 = 0, i2 = ["next", "error", "complete"]; r2 < i2.length; r2++) {
        var o = i2[r2];
        if (o in n2 && "function" == typeof n2[o])
          return true;
      }
      return false;
    }(t2);
  }
  function sc(t2, e, n2) {
    return t2 ? n2 && (n2.merge || n2.mergeFields) ? t2.toFirestore(e, n2) : t2.toFirestore(e) : e;
  }
  var ac = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.Uf = function(t3) {
      return new M(t3);
    }, e.prototype.Qf = function(t3) {
      var e2 = this.Gf(t3, this.firestore.I_);
      return new Gs(this.firestore, null, e2);
    }, e;
  }(Ba);
  var cc = function() {
    function t2(t3, e) {
      this.hasPendingWrites = t3, this.fromCache = e;
    }
    return t2.prototype.isEqual = function(t3) {
      return this.hasPendingWrites === t3.hasPendingWrites && this.fromCache === t3.fromCache;
    }, t2;
  }();
  var fc = function(t2) {
    function e(e2, n2, r2, i2, o, u) {
      var s = this;
      return (s = t2.call(this, e2, n2, r2, i2, u) || this).zf = e2, s.ad = e2, s.metadata = o, s;
    }
    return __extends(e, t2), e.prototype.exists = function() {
      return t2.prototype.exists.call(this);
    }, e.prototype.data = function(t3) {
      if (void 0 === t3 && (t3 = {}), this.Jf) {
        if (this.v_) {
          var e2 = new hc(this.zf, this.Hf, this.S_, this.Jf, this.metadata, null);
          return this.v_.fromFirestore(e2, t3);
        }
        return this.Hf.$f(this.Jf.vt(), t3.serverTimestamps);
      }
    }, e.prototype.get = function(t3, e2) {
      if (void 0 === e2 && (e2 = {}), this.Jf) {
        var n2 = this.Jf.data().field(Ja("DocumentSnapshot.get", t3));
        if (null !== n2)
          return this.Hf.$f(n2, e2.serverTimestamps);
      }
    }, e;
  }(Ka);
  var hc = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function(e2) {
      return void 0 === e2 && (e2 = {}), t2.prototype.data.call(this, e2);
    }, e;
  }(fc);
  var lc = function() {
    function t2(t3, e, n2, r2) {
      this.zf = t3, this.Hf = e, this.ud = r2, this.metadata = new cc(r2.hasPendingWrites, r2.fromCache), this.query = n2;
    }
    return Object.defineProperty(t2.prototype, "docs", {
      get: function() {
        var t3 = [];
        return this.forEach(function(e) {
          return t3.push(e);
        }), t3;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.ud.docs.size;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "empty", {
      get: function() {
        return 0 === this.size;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.forEach = function(t3, e) {
      var n2 = this;
      this.ud.docs.forEach(function(r2) {
        t3.call(e, new hc(n2.zf, n2.Hf, r2.key, r2, new cc(n2.ud.Ce.has(r2.key), n2.ud.fromCache), n2.query.v_));
      });
    }, t2.prototype.docChanges = function(t3) {
      void 0 === t3 && (t3 = {});
      var e = !!t3.includeMetadataChanges;
      if (e && this.ud.Ne)
        throw new U(R.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
      return this.hd && this.ld === e || (this.hd = function(t4, e2) {
        if (t4.ud.De.nt()) {
          var n2 = 0;
          return t4.ud.docChanges.map(function(e3) {
            var r3 = new hc(t4.zf, t4.Hf, e3.doc.key, e3.doc, new cc(t4.ud.Ce.has(e3.doc.key), t4.ud.fromCache), t4.query.v_);
            return e3.doc, {
              type: "added",
              doc: r3,
              oldIndex: -1,
              newIndex: n2++
            };
          });
        }
        var r2 = t4.ud.De;
        return t4.ud.docChanges.filter(function(t5) {
          return e2 || 3 !== t5.type;
        }).map(function(e3) {
          var n3 = new hc(t4.zf, t4.Hf, e3.doc.key, e3.doc, new cc(t4.ud.Ce.has(e3.doc.key), t4.ud.fromCache), t4.query.v_), i2 = -1, o = -1;
          return 0 !== e3.type && (i2 = r2.indexOf(e3.doc.key), r2 = r2.delete(e3.doc.key)), 1 !== e3.type && (o = (r2 = r2.add(e3.doc)).indexOf(e3.doc.key)), {
            type: pc(e3.type),
            doc: n3,
            oldIndex: i2,
            newIndex: o
          };
        });
      }(this, e), this.ld = e), this.hd;
    }, t2;
  }();
  function pc(t2) {
    switch (t2) {
      case 0:
        return "added";
      case 2:
      case 3:
        return "modified";
      case 1:
        return "removed";
      default:
        return S();
    }
  }
  function dc(t2, e) {
    return t2 instanceof fc && e instanceof fc ? t2.zf === e.zf && t2.S_.isEqual(e.S_) && (null === t2.Jf ? null === e.Jf : t2.Jf.isEqual(e.Jf)) && t2.v_ === e.v_ : t2 instanceof lc && e instanceof lc && t2.zf === e.zf && Qs(t2.query, e.query) && t2.metadata.isEqual(e.metadata) && t2.ud.isEqual(e.ud);
  }
  var vc = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.Uf = function(t3) {
      return new M(t3);
    }, e.prototype.Qf = function(t3) {
      var e2 = this.Gf(t3, this.firestore.I_);
      return new Gs(this.firestore, null, e2);
    }, e;
  }(Ba);
  function yc(t2, e, n2) {
    for (var r2 = [], i2 = 3; i2 < arguments.length; i2++)
      r2[i2 - 3] = arguments[i2];
    t2 = Ms(t2, Gs);
    var o = Ms(t2.firestore, qa), u = ra(o);
    return e instanceof q && (e = e._), gc(o, [("string" == typeof e || e instanceof ks ? la(u, "updateDoc", t2.S_, e, n2, r2) : ha(u, "updateDoc", t2.S_, e)).F_(t2.S_, Fe.exists(true))]);
  }
  function mc(t2) {
    for (var e, n2, r2, i2 = [], o = 1; o < arguments.length; o++)
      i2[o - 1] = arguments[o];
    t2 instanceof q && (t2 = t2._);
    var u = {
      includeMetadataChanges: false
    }, s = 0;
    "object" != typeof i2[s] || uc(i2[s]) || (u = i2[s], s++);
    var a, c, f, h2 = {
      includeMetadataChanges: u.includeMetadataChanges
    };
    if (uc(i2[s])) {
      var l = i2[s];
      i2[s] = null === (e = l.next) || void 0 === e ? void 0 : e.bind(l), i2[s + 1] = null === (n2 = l.error) || void 0 === n2 ? void 0 : n2.bind(l), i2[s + 2] = null === (r2 = l.complete) || void 0 === r2 ? void 0 : r2.bind(l);
    }
    if (t2 instanceof Gs)
      c = Ms(t2.firestore, qa), f = se(t2.S_.path), a = {
        next: function(e2) {
          i2[s] && i2[s](wc(c, t2, e2));
        },
        error: i2[s + 1],
        complete: i2[s + 2]
      };
    else {
      var p2 = Ms(t2, Bs);
      c = Ms(p2.firestore, qa), f = p2.C_;
      var d = new vc(c);
      a = {
        next: function(t3) {
          i2[s] && i2[s](new lc(c, d, p2, t3));
        },
        error: i2[s + 1],
        complete: i2[s + 2]
      }, Wa(t2.C_);
    }
    return function(t3, e2, n3, r3) {
      var i3 = this, o2 = new Ds(r3), u2 = new Cu(e2, o2, n3);
      return t3.fs.ys(function() {
        return __awaiter(i3, void 0, void 0, function() {
          var e3;
          return __generator(this, function(n4) {
            switch (n4.label) {
              case 0:
                return e3 = xu, [4, Ca(t3)];
              case 1:
                return [2, e3.apply(void 0, [n4.sent(), u2])];
            }
          });
        });
      }), function() {
        o2.r_(), t3.fs.ys(function() {
          return __awaiter(i3, void 0, void 0, function() {
            var e3;
            return __generator(this, function(n4) {
              switch (n4.label) {
                case 0:
                  return e3 = ku, [4, Ca(t3)];
                case 1:
                  return [2, e3.apply(void 0, [n4.sent(), u2])];
              }
            });
          });
        });
      };
    }(Fa(c), f, h2, a);
  }
  function gc(t2, e) {
    return function(t3, e2) {
      var n2 = this, r2 = new vr();
      return t3.fs.ys(function() {
        return __awaiter(n2, void 0, void 0, function() {
          var n3;
          return __generator(this, function(i2) {
            switch (i2.label) {
              case 0:
                return n3 = Wu, [4, La(t3)];
              case 1:
                return [2, n3.apply(void 0, [i2.sent(), e2, r2])];
            }
          });
        });
      }), r2.promise;
    }(Fa(t2), e);
  }
  function wc(t2, e, n2) {
    var r2 = n2.docs.get(e.S_), i2 = new vc(t2);
    return new fc(t2, i2, e.S_, r2, new cc(n2.hasPendingWrites, n2.fromCache), e.v_);
  }
  var bc = function() {
    function t2(t3, e) {
      this.zf = t3, this._d = e, this.fd = [], this.dd = false, this.wd = ra(t3);
    }
    return t2.prototype.set = function(t3, e, n2) {
      this.Ed();
      var r2 = _c(t3, this.zf), i2 = sc(r2.v_, e, n2), o = ia(this.wd, "WriteBatch.set", r2.S_, i2, null !== r2.v_, n2);
      return this.fd.push(o.F_(r2.S_, Fe.Wt())), this;
    }, t2.prototype.update = function(t3, e, n2) {
      for (var r2 = [], i2 = 3; i2 < arguments.length; i2++)
        r2[i2 - 3] = arguments[i2];
      this.Ed();
      var o, u = _c(t3, this.zf);
      return e instanceof q && (e = e._), o = "string" == typeof e || e instanceof ks ? la(this.wd, "WriteBatch.update", u.S_, e, n2, r2) : ha(this.wd, "WriteBatch.update", u.S_, e), this.fd.push(o.F_(u.S_, Fe.exists(true))), this;
    }, t2.prototype.delete = function(t3) {
      this.Ed();
      var e = _c(t3, this.zf);
      return this.fd = this.fd.concat(new nn(e.S_, Fe.Wt())), this;
    }, t2.prototype.commit = function() {
      return this.Ed(), this.dd = true, this.fd.length > 0 ? this._d(this.fd) : Promise.resolve();
    }, t2.prototype.Ed = function() {
      if (this.dd)
        throw new U(R.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t2;
  }();
  function _c(t2, e) {
    if (t2 instanceof q && (t2 = t2._), t2.firestore !== e)
      throw new U(R.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
    return t2;
  }
  var Ic = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this).zf = e2, r2;
    }
    return __extends(e, t2), e.prototype.get = function(e2) {
      var n2 = this, r2 = _c(e2, this.zf), i2 = new vc(this.zf);
      return t2.prototype.get.call(this, e2).then(function(t3) {
        return new fc(n2.zf, i2, r2.S_, t3.Jf, new cc(false, false), r2.v_);
      });
    }, e;
  }(function() {
    function t2(t3, e) {
      this.zf = t3, this.Td = e, this.wd = ra(t3);
    }
    return t2.prototype.get = function(t3) {
      var e = this, n2 = _c(t3, this.zf), r2 = new ac(this.zf);
      return this.Td.ef([n2.S_]).then(function(t4) {
        if (!t4 || 1 !== t4.length)
          return S();
        var i2 = t4[0];
        if (i2 instanceof Ut)
          return new Ka(e.zf, r2, n2.S_, null, n2.v_);
        if (i2 instanceof Rt)
          return new Ka(e.zf, r2, i2.key, i2, n2.v_);
        throw S();
      });
    }, t2.prototype.set = function(t3, e, n2) {
      var r2 = _c(t3, this.zf), i2 = sc(r2.v_, e, n2), o = ia(this.wd, "Transaction.set", r2.S_, i2, null !== r2.v_, n2);
      return this.Td.set(r2.S_, o), this;
    }, t2.prototype.update = function(t3, e, n2) {
      for (var r2 = [], i2 = 3; i2 < arguments.length; i2++)
        r2[i2 - 3] = arguments[i2];
      var o, u = _c(t3, this.zf);
      return e instanceof q && (e = e._), o = "string" == typeof e || e instanceof ks ? la(this.wd, "Transaction.update", u.S_, e, n2, r2) : ha(this.wd, "Transaction.update", u.S_, e), this.Td.update(u.S_, o), this;
    }, t2.prototype.delete = function(t3) {
      var e = _c(t3, this.zf);
      return this.Td.delete(e.S_), this;
    }, t2;
  }());
  var Ec = function() {
    function t2() {
    }
    return t2.prototype.enableIndexedDbPersistence = function(t3, e) {
      return function(t4, e2) {
        Ga(t4 = Ms(t4, qa));
        var n2 = Fa(t4), r2 = t4.p_(), i2 = new As();
        return za(n2, i2, new Ts(i2, r2.cacheSizeBytes, null == e2 ? void 0 : e2.forceOwnership));
      }(t3._, {
        forceOwnership: e
      });
    }, t2.prototype.enableMultiTabIndexedDbPersistence = function(t3) {
      return function(t4) {
        Ga(t4 = Ms(t4, qa));
        var e = Fa(t4), n2 = t4.p_(), r2 = new As();
        return za(e, r2, new Ns(r2, n2.cacheSizeBytes));
      }(t3._);
    }, t2.prototype.clearIndexedDbPersistence = function(t3) {
      return function(t4) {
        var e = this;
        if (t4.R_ && !t4.P_)
          throw new U(R.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        var n2 = new vr();
        return t4.Mf.Tf(function() {
          return __awaiter(e, void 0, void 0, function() {
            var e2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return r2.trys.push([0, 2, , 3]), [4, function(t5) {
                    return __awaiter(this, void 0, void 0, function() {
                      var e3;
                      return __generator(this, function(n3) {
                        switch (n3.label) {
                          case 0:
                            return gr.Wn() ? (e3 = t5 + "main", [4, gr.delete(e3)]) : [2, Promise.resolve()];
                          case 1:
                            return n3.sent(), [2];
                        }
                      });
                    });
                  }(Zi(t4.I_, t4.w_))];
                case 1:
                  return r2.sent(), n2.resolve(), [3, 3];
                case 2:
                  return e2 = r2.sent(), n2.reject(e2), [3, 3];
                case 3:
                  return [2];
              }
            });
          });
        }), n2.promise;
      }(t3._);
    }, t2;
  }();
  var Tc = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this, n2) || this).Id = r2, i2.INTERNAL = {
        delete: function() {
          return i2.terminate();
        }
      }, e2 instanceof B || (i2.md = e2), i2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "I_", {
      get: function() {
        return this._.I_;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.settings = function(t3) {
      t3.merge && delete (t3 = Object.assign(Object.assign({}, this._.V_()), t3)).merge, this._.g_(t3);
    }, e.prototype.useEmulator = function(t3, e2) {
      !function(t4, e3, n2) {
        var r2 = (t4 = Ms(t4, zs)).V_();
        "firestore.googleapis.com" !== r2.host && r2.host !== e3 && N("Host has been set in both settings() and useEmulator(), emulator host will be used"), t4.g_(Object.assign(Object.assign({}, r2), {
          host: e3 + ":" + n2,
          ssl: false
        }));
      }(this._, t3, e2);
    }, e.prototype.enableNetwork = function() {
      return function(t3) {
        var e2 = this;
        return t3.fs.enqueue(function() {
          return __awaiter(e2, void 0, void 0, function() {
            var e3, n2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, ka(t3)];
                case 1:
                  return e3 = r2.sent(), [4, Pa(t3)];
                case 2:
                  return n2 = r2.sent(), [2, (e3.Vo(true), function(t4) {
                    var e4 = x(t4);
                    return e4.Fh.delete(0), nu(e4);
                  }(n2))];
              }
            });
          });
        });
      }(Fa(Ms(this._, qa)));
    }, e.prototype.disableNetwork = function() {
      return function(t3) {
        var e2 = this;
        return t3.fs.enqueue(function() {
          return __awaiter(e2, void 0, void 0, function() {
            var e3, n2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, ka(t3)];
                case 1:
                  return e3 = r2.sent(), [4, Pa(t3)];
                case 2:
                  return n2 = r2.sent(), [2, (e3.Vo(false), function(t4) {
                    return __awaiter(this, void 0, void 0, function() {
                      var e4;
                      return __generator(this, function(n3) {
                        switch (n3.label) {
                          case 0:
                            return (e4 = x(t4)).Fh.add(0), [4, ru(e4)];
                          case 1:
                            return n3.sent(), e4.Mh.set("Offline"), [2];
                        }
                      });
                    });
                  }(n2))];
              }
            });
          });
        });
      }(Fa(Ms(this._, qa)));
    }, e.prototype.enablePersistence = function(t3) {
      var e2 = false, n2 = false;
      return t3 && Cs("synchronizeTabs", e2 = !!t3.synchronizeTabs, "experimentalForceOwningTab", n2 = !!t3.experimentalForceOwningTab), e2 ? this.Id.enableMultiTabIndexedDbPersistence(this) : this.Id.enableIndexedDbPersistence(this, n2);
    }, e.prototype.clearPersistence = function() {
      return this.Id.clearIndexedDbPersistence(this);
    }, e.prototype.terminate = function() {
      return this.app._removeServiceInstance("firestore"), this.app._removeServiceInstance("firestore-exp"), this._._delete();
    }, e.prototype.waitForPendingWrites = function() {
      return function(t3) {
        var e2 = this, n2 = new vr();
        return t3.fs.ys(function() {
          return __awaiter(e2, void 0, void 0, function() {
            var e3;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return e3 = ts, [4, La(t3)];
                case 1:
                  return [2, e3.apply(void 0, [r2.sent(), n2])];
              }
            });
          });
        }), n2.promise;
      }(Fa(Ms(this._, qa)));
    }, e.prototype.onSnapshotsInSync = function(t3) {
      return function(t4, e2) {
        return function(t5, e3) {
          var n2 = this, r2 = new Ds(e3);
          return t5.fs.ys(function() {
            return __awaiter(n2, void 0, void 0, function() {
              var e4;
              return __generator(this, function(n3) {
                switch (n3.label) {
                  case 0:
                    return e4 = function(t6, e5) {
                      x(t6).jh.add(e5), e5.next();
                    }, [4, Ca(t5)];
                  case 1:
                    return [2, e4.apply(void 0, [n3.sent(), r2])];
                }
              });
            });
          }), function() {
            r2.r_(), t5.fs.ys(function() {
              return __awaiter(n2, void 0, void 0, function() {
                var e4;
                return __generator(this, function(n3) {
                  switch (n3.label) {
                    case 0:
                      return e4 = function(t6, e5) {
                        x(t6).jh.delete(e5);
                      }, [4, Ca(t5)];
                    case 1:
                      return [2, e4.apply(void 0, [n3.sent(), r2])];
                  }
                });
              });
            });
          };
        }(Fa(t4 = Ms(t4, qa)), uc(e2) ? e2 : {
          next: e2
        });
      }(this._, t3);
    }, Object.defineProperty(e.prototype, "app", {
      get: function() {
        if (!this.md)
          throw new U(R.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this.md;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.collection = function(t3) {
      try {
        return new qc(this, Hs(this._, t3));
      } catch (t4) {
        throw Oc(t4, "collection()", "Firestore.collection()");
      }
    }, e.prototype.doc = function(t3) {
      try {
        return new kc(this, Js(this._, t3));
      } catch (t4) {
        throw Oc(t4, "doc()", "Firestore.doc()");
      }
    }, e.prototype.collectionGroup = function(t3) {
      try {
        return new Rc(this, function(t4, e2) {
          if (t4 = Ms(t4, zs), Ps("collectionGroup", "collection id", e2), e2.indexOf("/") >= 0)
            throw new U(R.INVALID_ARGUMENT, "Invalid collection ID '" + e2 + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
          return new Bs(t4, null, function(t5) {
            return new oe(et.at(), t5);
          }(e2));
        }(this._, t3));
      } catch (t4) {
        throw Oc(t4, "collectionGroup()", "Firestore.collectionGroup()");
      }
    }, e.prototype.runTransaction = function(t3) {
      var e2 = this;
      return function(t4, e3) {
        return function(t5, e4) {
          var n2 = this, r2 = new vr();
          return t5.fs.ys(function() {
            return __awaiter(n2, void 0, void 0, function() {
              var n3;
              return __generator(this, function(i2) {
                switch (i2.label) {
                  case 0:
                    return [4, function(t6) {
                      return xa(t6).then(function(t7) {
                        return t7.Dh;
                      });
                    }(t5)];
                  case 1:
                    return n3 = i2.sent(), new Ta(t5.fs, n3, e4, r2).run(), [2];
                }
              });
            });
          }), r2.promise;
        }(Fa(t4), function(n2) {
          return e3(new Ic(t4, n2));
        });
      }(this._, function(n2) {
        return t3(new Sc(e2, n2));
      });
    }, e.prototype.batch = function() {
      var t3 = this;
      return Fa(this._), new Dc(new bc(this._, function(e2) {
        return gc(t3._, e2);
      }));
    }, e.prototype.loadBundle = function(t3) {
      throw new U(R.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, e.prototype.namedQuery = function(t3) {
      throw new U(R.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, e;
  }(q);
  var Nc = function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.Uf = function(t3) {
      return new z(new M(t3));
    }, e.prototype.Qf = function(t3) {
      var e2 = this.Gf(t3, this.firestore.I_);
      return kc.Ad(e2, this.firestore, null);
    }, e;
  }(Ba);
  function Ac(t2) {
    var e;
    e = t2, _.setLogLevel(e);
  }
  var Sc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).zf = e2, r2.Hf = new Nc(e2), r2;
    }
    return __extends(e, t2), e.prototype.get = function(t3) {
      var e2 = this, n2 = Fc(t3);
      return this._.get(n2).then(function(t4) {
        return new Cc(e2.zf, new fc(e2.zf._, e2.Hf, t4.S_, t4.Jf, t4.metadata, n2.v_));
      });
    }, e.prototype.set = function(t3, e2, n2) {
      var r2 = Fc(t3);
      return n2 ? (Ls("Transaction.set", n2), this._.set(r2, e2, n2)) : this._.set(r2, e2), this;
    }, e.prototype.update = function(t3, e2, n2) {
      for (var r2, i2 = [], o = 3; o < arguments.length; o++)
        i2[o - 3] = arguments[o];
      var u = Fc(t3);
      return 2 === arguments.length ? this._.update(u, e2) : (r2 = this._).update.apply(r2, __spreadArrays([u, e2, n2], i2)), this;
    }, e.prototype.delete = function(t3) {
      var e2 = Fc(t3);
      return this._.delete(e2), this;
    }, e;
  }(q);
  var Dc = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.set = function(t3, e2, n2) {
      var r2 = Fc(t3);
      return n2 ? (Ls("WriteBatch.set", n2), this._.set(r2, e2, n2)) : this._.set(r2, e2), this;
    }, e.prototype.update = function(t3, e2, n2) {
      for (var r2, i2 = [], o = 3; o < arguments.length; o++)
        i2[o - 3] = arguments[o];
      var u = Fc(t3);
      return 2 === arguments.length ? this._.update(u, e2) : (r2 = this._).update.apply(r2, __spreadArrays([u, e2, n2], i2)), this;
    }, e.prototype.delete = function(t3) {
      var e2 = Fc(t3);
      return this._.delete(e2), this;
    }, e.prototype.commit = function() {
      return this._.commit();
    }, e;
  }(q);
  var xc = function(t2) {
    function e(e2, n2, r2) {
      var i2 = this;
      return (i2 = t2.call(this, r2) || this).zf = e2, i2.Hf = n2, i2;
    }
    return __extends(e, t2), e.prototype.fromFirestore = function(t3, e2) {
      var n2 = new hc(this.zf._, this.Hf, t3.S_, t3.Jf, t3.metadata, null);
      return this._.fromFirestore(new Vc(this.zf, n2), null != e2 ? e2 : {});
    }, e.prototype.toFirestore = function(t3, e2) {
      return e2 ? this._.toFirestore(t3, e2) : this._.toFirestore(t3);
    }, e.Rd = function(t3, n2) {
      var r2 = e.Pd, i2 = r2.get(t3);
      i2 || (i2 = new WeakMap(), r2.set(t3, i2));
      var o = i2.get(n2);
      return o || (o = new e(t3, new Nc(t3), n2), i2.set(n2, o)), o;
    }, e;
  }(q);
  xc.Pd = new WeakMap();
  var kc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).firestore = e2, r2.Hf = new Nc(e2), r2;
    }
    return __extends(e, t2), e.yd = function(t3, n2, r2) {
      if (t3.length % 2 != 0)
        throw new U(R.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t3.ot() + " has " + t3.length);
      return new e(n2, new Gs(n2._, r2, new it(t3)));
    }, e.Ad = function(t3, n2, r2) {
      return new e(n2, new Gs(n2._, r2, t3));
    }, Object.defineProperty(e.prototype, "id", {
      get: function() {
        return this._.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "parent", {
      get: function() {
        return new qc(this.firestore, this._.parent);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "path", {
      get: function() {
        return this._.path;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.collection = function(t3) {
      try {
        return new qc(this.firestore, Hs(this._, t3));
      } catch (t4) {
        throw Oc(t4, "collection()", "DocumentReference.collection()");
      }
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof q && (t3 = t3._), t3 instanceof Gs && Ws(this._, t3);
    }, e.prototype.set = function(t3, e2) {
      e2 = Ls("DocumentReference.set", e2);
      try {
        return function(t4, e3, n2) {
          t4 = Ms(t4, Gs);
          var r2 = Ms(t4.firestore, qa), i2 = sc(t4.v_, e3, n2);
          return gc(r2, [ia(ra(r2), "setDoc", t4.S_, i2, null !== t4.v_, n2).F_(t4.S_, Fe.Wt())]);
        }(this._, t3, e2);
      } catch (t4) {
        throw Oc(t4, "setDoc()", "DocumentReference.set()");
      }
    }, e.prototype.update = function(t3, e2) {
      for (var n2 = [], r2 = 2; r2 < arguments.length; r2++)
        n2[r2 - 2] = arguments[r2];
      try {
        return 1 === arguments.length ? yc(this._, t3) : yc.apply(void 0, __spreadArrays([this._, t3, e2], n2));
      } catch (t4) {
        throw Oc(t4, "updateDoc()", "DocumentReference.update()");
      }
    }, e.prototype.delete = function() {
      return gc(Ms((t3 = this._).firestore, qa), [new nn(t3.S_, Fe.Wt())]);
      var t3;
    }, e.prototype.onSnapshot = function() {
      for (var t3 = this, e2 = [], n2 = 0; n2 < arguments.length; n2++)
        e2[n2] = arguments[n2];
      var r2 = Pc(e2), i2 = Lc(e2, function(e3) {
        return new Cc(t3.firestore, new fc(t3.firestore._, t3.Hf, e3.S_, e3.Jf, e3.metadata, t3._.v_));
      });
      return mc(this._, r2, i2);
    }, e.prototype.get = function(t3) {
      var e2 = this;
      return ("cache" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Ms(t4, Gs);
        var e3 = Ms(t4.firestore, qa), n2 = Fa(e3), r2 = new vc(e3);
        return function(t5, e4) {
          var n3 = this, r3 = new vr();
          return t5.fs.ys(function() {
            return __awaiter(n3, void 0, void 0, function() {
              var n4;
              return __generator(this, function(i2) {
                switch (i2.label) {
                  case 0:
                    return n4 = function(t6, e5, n5) {
                      return __awaiter(this, void 0, void 0, function() {
                        var r4, i3;
                        return __generator(this, function(o) {
                          switch (o.label) {
                            case 0:
                              return o.trys.push([0, 2, , 3]), [4, function(t7, e6) {
                                var n6 = x(t7);
                                return n6.persistence.runTransaction("read document", "readonly", function(t8) {
                                  return n6.Ic.Jo(t8, e6);
                                });
                              }(t6, e5)];
                            case 1:
                              return (i3 = o.sent()) instanceof Rt ? n5.resolve(i3) : i3 instanceof Ut ? n5.resolve(null) : n5.reject(new U(R.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), [3, 3];
                            case 2:
                              return r4 = o.sent(), i3 = Sr(r4, "Failed to get document '" + e5 + " from cache"), n5.reject(i3), [3, 3];
                            case 3:
                              return [2];
                          }
                        });
                      });
                    }, [4, Oa(t5)];
                  case 1:
                    return [2, n4.apply(void 0, [i2.sent(), e4, r3])];
                }
              });
            });
          }), r3.promise;
        }(n2, t4.S_).then(function(n3) {
          return new fc(e3, r2, t4.S_, n3, new cc(n3 instanceof Rt && n3.bt, true), t4.v_);
        });
      }(this._) : "server" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Ms(t4, Gs);
        var e3 = Ms(t4.firestore, qa);
        return Va(Fa(e3), t4.S_, {
          source: "server"
        }).then(function(n2) {
          return wc(e3, t4, n2);
        });
      }(this._) : function(t4) {
        t4 = Ms(t4, Gs);
        var e3 = Ms(t4.firestore, qa);
        return Va(Fa(e3), t4.S_).then(function(n2) {
          return wc(e3, t4, n2);
        });
      }(this._)).then(function(t4) {
        return new Cc(e2.firestore, new fc(e2.firestore._, e2.Hf, t4.S_, t4.Jf, t4.metadata, e2._.v_));
      });
    }, e.prototype.withConverter = function(t3) {
      return new e(this.firestore, this._.withConverter(xc.Rd(this.firestore, t3)));
    }, e;
  }(q);
  function Oc(t2, e, n2) {
    return t2.message = t2.message.replace(e, n2), t2;
  }
  function Pc(t2) {
    for (var e = 0, n2 = t2; e < n2.length; e++) {
      var r2 = n2[e];
      if ("object" == typeof r2 && !uc(r2))
        return r2;
    }
    return {};
  }
  function Lc(t2, e) {
    var n2, r2, i2;
    return {
      next: function(t3) {
        i2.next && i2.next(e(t3));
      },
      error: null === (n2 = (i2 = uc(t2[0]) ? t2[0] : uc(t2[1]) ? t2[1] : "function" == typeof t2[0] ? {
        next: t2[0],
        error: t2[1],
        complete: t2[2]
      } : {
        next: t2[1],
        error: t2[2],
        complete: t2[3]
      }).error) || void 0 === n2 ? void 0 : n2.bind(i2),
      complete: null === (r2 = i2.complete) || void 0 === r2 ? void 0 : r2.bind(i2)
    };
  }
  var Cc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).zf = e2, r2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "ref", {
      get: function() {
        return new kc(this.zf, this._.ref);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "id", {
      get: function() {
        return this._.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "metadata", {
      get: function() {
        return this._.metadata;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "exists", {
      get: function() {
        return this._.exists();
      },
      enumerable: false,
      configurable: true
    }), e.prototype.data = function(t3) {
      return this._.data(t3);
    }, e.prototype.get = function(t3, e2) {
      return this._.get(t3, e2);
    }, e.prototype.isEqual = function(t3) {
      return dc(this._, t3._);
    }, e;
  }(q);
  var Vc = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function(t3) {
      return this._.data(t3);
    }, e;
  }(Cc);
  var Rc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).firestore = e2, r2.Hf = new Nc(e2), r2;
    }
    return __extends(e, t2), e.prototype.where = function(t3, n2, r2) {
      try {
        return new e(this.firestore, Ya(this._, function(t4, e2, n3) {
          var r3 = e2, i2 = Ja("where", t4);
          return new Xa(i2, r3, n3);
        }(t3, n2, r2)));
      } catch (t4) {
        throw Oc(t4, /(orderBy|where)\(\)/, "Query.$1()");
      }
    }, e.prototype.orderBy = function(t3, n2) {
      try {
        return new e(this.firestore, Ya(this._, function(t4, e2) {
          void 0 === e2 && (e2 = "asc");
          var n3 = e2, r2 = Ja("orderBy", t4);
          return new $a(r2, n3);
        }(t3, n2)));
      } catch (t4) {
        throw Oc(t4, /(orderBy|where)\(\)/, "Query.$1()");
      }
    }, e.prototype.limit = function(t3) {
      try {
        return new e(this.firestore, Ya(this._, function(t4) {
          return qs("limit", t4), new Za("limit", t4, "F");
        }(t3)));
      } catch (t4) {
        throw Oc(t4, "limit()", "Query.limit()");
      }
    }, e.prototype.limitToLast = function(t3) {
      try {
        return new e(this.firestore, Ya(this._, function(t4) {
          return qs("limitToLast", t4), new Za("limitToLast", t4, "L");
        }(t3)));
      } catch (t4) {
        throw Oc(t4, "limitToLast()", "Query.limitToLast()");
      }
    }, e.prototype.startAt = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      try {
        return new e(this.firestore, Ya(this._, function() {
          for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
            t4[e2] = arguments[e2];
          return new tc("startAt", t4, true);
        }.apply(void 0, t3)));
      } catch (t4) {
        throw Oc(t4, "startAt()", "Query.startAt()");
      }
    }, e.prototype.startAfter = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      try {
        return new e(this.firestore, Ya(this._, function() {
          for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
            t4[e2] = arguments[e2];
          return new tc("startAfter", t4, false);
        }.apply(void 0, t3)));
      } catch (t4) {
        throw Oc(t4, "startAfter()", "Query.startAfter()");
      }
    }, e.prototype.endBefore = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      try {
        return new e(this.firestore, Ya(this._, function() {
          for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
            t4[e2] = arguments[e2];
          return new ec("endBefore", t4, true);
        }.apply(void 0, t3)));
      } catch (t4) {
        throw Oc(t4, "endBefore()", "Query.endBefore()");
      }
    }, e.prototype.endAt = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      try {
        return new e(this.firestore, Ya(this._, function() {
          for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
            t4[e2] = arguments[e2];
          return new ec("endAt", t4, false);
        }.apply(void 0, t3)));
      } catch (t4) {
        throw Oc(t4, "endAt()", "Query.endAt()");
      }
    }, e.prototype.isEqual = function(t3) {
      return Qs(this._, t3._);
    }, e.prototype.get = function(t3) {
      var e2 = this;
      return ("cache" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Ms(t4, Bs);
        var e3 = Ms(t4.firestore, qa), n2 = Fa(e3), r2 = new vc(e3);
        return function(t5, e4) {
          var n3 = this, r3 = new vr();
          return t5.fs.ys(function() {
            return __awaiter(n3, void 0, void 0, function() {
              var n4;
              return __generator(this, function(i2) {
                switch (i2.label) {
                  case 0:
                    return n4 = function(t6, e5, n5) {
                      return __awaiter(this, void 0, void 0, function() {
                        var r4, i3, o, u, s;
                        return __generator(this, function(a) {
                          switch (a.label) {
                            case 0:
                              return a.trys.push([0, 2, , 3]), [4, vo(t6, e5, true)];
                            case 1:
                              return s = a.sent(), r4 = new ju(e5, s.Pc), i3 = r4.dl(s.documents), o = r4.Ei(i3, false), n5.resolve(o.snapshot), [3, 3];
                            case 2:
                              return u = a.sent(), s = Sr(u, "Failed to execute query '" + e5 + " against cache"), n5.reject(s), [3, 3];
                            case 3:
                              return [2];
                          }
                        });
                      });
                    }, [4, Oa(t5)];
                  case 1:
                    return [2, n4.apply(void 0, [i2.sent(), e4, r3])];
                }
              });
            });
          }), r3.promise;
        }(n2, t4.C_).then(function(n3) {
          return new lc(e3, r2, t4, n3);
        });
      }(this._) : "server" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Ms(t4, Bs);
        var e3 = Ms(t4.firestore, qa), n2 = Fa(e3), r2 = new vc(e3);
        return Ra(n2, t4.C_, {
          source: "server"
        }).then(function(n3) {
          return new lc(e3, r2, t4, n3);
        });
      }(this._) : function(t4) {
        t4 = Ms(t4, Bs);
        var e3 = Ms(t4.firestore, qa), n2 = Fa(e3), r2 = new vc(e3);
        return Wa(t4.C_), Ra(n2, t4.C_).then(function(n3) {
          return new lc(e3, r2, t4, n3);
        });
      }(this._)).then(function(t4) {
        return new Mc(e2.firestore, new lc(e2.firestore._, e2.Hf, e2._, t4.ud));
      });
    }, e.prototype.onSnapshot = function() {
      for (var t3 = this, e2 = [], n2 = 0; n2 < arguments.length; n2++)
        e2[n2] = arguments[n2];
      var r2 = Pc(e2), i2 = Lc(e2, function(e3) {
        return new Mc(t3.firestore, new lc(t3.firestore._, t3.Hf, t3._, e3.ud));
      });
      return mc(this._, r2, i2);
    }, e.prototype.withConverter = function(t3) {
      return new e(this.firestore, this._.withConverter(xc.Rd(this.firestore, t3)));
    }, e;
  }(q);
  var Uc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).zf = e2, r2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "type", {
      get: function() {
        return this._.type;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "doc", {
      get: function() {
        return new Vc(this.zf, this._.doc);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "oldIndex", {
      get: function() {
        return this._.oldIndex;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "newIndex", {
      get: function() {
        return this._.newIndex;
      },
      enumerable: false,
      configurable: true
    }), e;
  }(q);
  var Mc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).zf = e2, r2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "query", {
      get: function() {
        return new Rc(this.zf, this._.query);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "metadata", {
      get: function() {
        return this._.metadata;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "size", {
      get: function() {
        return this._.size;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "empty", {
      get: function() {
        return this._.empty;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "docs", {
      get: function() {
        var t3 = this;
        return this._.docs.map(function(e2) {
          return new Vc(t3.zf, e2);
        });
      },
      enumerable: false,
      configurable: true
    }), e.prototype.docChanges = function(t3) {
      var e2 = this;
      return this._.docChanges(t3).map(function(t4) {
        return new Uc(e2.zf, t4);
      });
    }, e.prototype.forEach = function(t3, e2) {
      var n2 = this;
      this._.forEach(function(r2) {
        t3.call(e2, new Vc(n2.zf, r2));
      });
    }, e.prototype.isEqual = function(t3) {
      return dc(this._, t3._);
    }, e;
  }(q);
  var qc = function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this).firestore = e2, r2._ = n2, r2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "id", {
      get: function() {
        return this._.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "path", {
      get: function() {
        return this._.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "parent", {
      get: function() {
        var t3 = this._.parent;
        return t3 ? new kc(this.firestore, t3) : null;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.doc = function(t3) {
      try {
        return new kc(this.firestore, void 0 === t3 ? Js(this._) : Js(this._, t3));
      } catch (t4) {
        throw Oc(t4, "doc()", "CollectionReference.doc()");
      }
    }, e.prototype.add = function(t3) {
      var e2 = this;
      return function(t4, e3) {
        var n2 = Ms(t4.firestore, qa), r2 = Js(t4), i2 = sc(t4.v_, e3);
        return gc(n2, [ia(ra(t4.firestore), "addDoc", r2.S_, i2, null !== t4.v_, {}).F_(r2.S_, Fe.exists(false))]).then(function() {
          return r2;
        });
      }(this._, t3).then(function(t4) {
        return new kc(e2.firestore, t4);
      });
    }, e.prototype.isEqual = function(t3) {
      return Ws(this._, t3._);
    }, e.prototype.withConverter = function(t3) {
      return new e(this.firestore, this._.withConverter(xc.Rd(this.firestore, t3)));
    }, e;
  }(Rc);
  function Fc(t2) {
    return t2 instanceof q && (t2 = t2._), Ms(t2, Gs);
  }
  var jc = function(t2) {
    function e() {
      for (var e2 = [], n2 = 0; n2 < arguments.length; n2++)
        e2[n2] = arguments[n2];
      return t2.call(this, new (ks.bind.apply(ks, __spreadArrays([void 0], e2)))()) || this;
    }
    return __extends(e, t2), e.documentId = function() {
      return new e(rt.lt().ot());
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof q && (t3 = t3._), t3 instanceof ks && this._.d_.isEqual(t3.d_);
    }, e;
  }(q);
  var zc = function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.serverTimestamp = function() {
      var t3 = new sa("serverTimestamp");
      return t3._methodName = "FieldValue.serverTimestamp", new e(t3);
    }, e.delete = function() {
      var t3 = new oa("deleteField");
      return t3._methodName = "FieldValue.delete", new e(t3);
    }, e.arrayUnion = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      var r2 = function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new aa("arrayUnion", t4);
      }.apply(void 0, t3);
      return r2._methodName = "FieldValue.arrayUnion", new e(r2);
    }, e.arrayRemove = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      var r2 = function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new ca("arrayRemove", t4);
      }.apply(void 0, t3);
      return r2._methodName = "FieldValue.arrayRemove", new e(r2);
    }, e.increment = function(t3) {
      var n2 = function(t4) {
        return new fa("increment", t4);
      }(t3);
      return n2._methodName = "FieldValue.increment", new e(n2);
    }, e.prototype.isEqual = function(t3) {
      return this._.isEqual(t3._);
    }, e;
  }(q);
  var Gc = function() {
    function t2() {
      this.gd = {}, this.Vd = new vr(), this.pd = {
        taskState: "Running",
        totalBytes: 0,
        totalDocuments: 0,
        bytesLoaded: 0,
        documentsLoaded: 0
      };
    }
    return t2.prototype.onProgress = function(t3, e, n2) {
      this.gd = {
        next: t3,
        error: e,
        complete: n2
      };
    }, t2.prototype.catch = function(t3) {
      return this.Vd.promise.catch(t3);
    }, t2.prototype.then = function(t3, e) {
      return this.Vd.promise.then(t3, e);
    }, t2.prototype.Ul = function(t3) {
      this.Ql(t3), this.gd.complete && this.gd.complete(), this.Vd.resolve(t3);
    }, t2.prototype.Wl = function(t3) {
      this.pd.taskState = "Error", this.gd.next && this.gd.next(this.pd), this.gd.error && this.gd.error(t3), this.Vd.reject(t3);
    }, t2.prototype.Ql = function(t3) {
      this.pd = t3, this.gd.next && this.gd.next(t3);
    }, t2;
  }();
  function Bc(t2, e) {
    var n2 = new Gc();
    return function(t3, e2, n3, r2) {
      var i2 = this, o = function(t4, e3) {
        return function(t5, e4) {
          return new xs(t5, e4);
        }(function(t5, e4) {
          if (t5 instanceof Uint8Array)
            return Ss(t5, e4);
          if (t5 instanceof ArrayBuffer)
            return Ss(new Uint8Array(t5), e4);
          if (t5 instanceof ReadableStream)
            return t5.getReader();
          throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }("string" == typeof t4 ? new TextEncoder().encode(t4) : t4), e3);
      }(n3, Wo(e2));
      t3.fs.ys(function() {
        return __awaiter(i2, void 0, void 0, function() {
          var e3;
          return __generator(this, function(n4) {
            switch (n4.label) {
              case 0:
                return e3 = Is, [4, La(t3)];
              case 1:
                return e3.apply(void 0, [n4.sent(), o, r2]), [2];
            }
          });
        });
      });
    }(Fa(t2._), t2.I_, e, n2), n2;
  }
  function Kc(t2, e) {
    return function(t3, e2) {
      var n2 = this;
      return t3.fs.enqueue(function() {
        return __awaiter(n2, void 0, void 0, function() {
          var n3;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return n3 = function(t4, e3) {
                  var n4 = x(t4);
                  return n4.persistence.runTransaction("Get named query", "readonly", function(t5) {
                    return n4.Eo.$s(t5, e3);
                  });
                }, [4, Oa(t3)];
              case 1:
                return [2, n3.apply(void 0, [r2.sent(), e2])];
            }
          });
        });
      });
    }(Fa(t2._), e).then(function(e2) {
      return e2 ? new Rc(t2, new Bs(t2._, null, e2.query)) : null;
    });
  }

  // node_modules/@firebase/firestore/dist/esm5/index.js
  var I = {
    Firestore: Tc,
    GeoPoint: Ys,
    Timestamp: $,
    Blob: z,
    Transaction: Sc,
    WriteBatch: Dc,
    DocumentReference: kc,
    DocumentSnapshot: Cc,
    Query: Rc,
    QueryDocumentSnapshot: Vc,
    QuerySnapshot: Mc,
    CollectionReference: qc,
    FieldPath: jc,
    FieldValue: zc,
    setLogLevel: Ac,
    CACHE_SIZE_UNLIMITED: Ma
  };
  function P(e) {
    !function(e2, r2) {
      e2.INTERNAL.registerComponent(new Component("firestore", function(e3) {
        var t2 = e3.getProvider("app").getImmediate();
        return r2(t2, e3.getProvider("auth-internal"));
      }, "PUBLIC").setServiceProps(Object.assign({}, I)));
    }(e, function(e2, o) {
      return new Tc(e2, new qa(e2, o), new Ec());
    }), e.registerVersion("@firebase/firestore", "2.1.3");
  }
  P(index_esm_default);

  // node_modules/@firebase/firestore/dist/esm5/bundle.js
  function i(t2) {
    t2.prototype.loadBundle = function(r2) {
      return Bc(this, r2);
    }, t2.prototype.namedQuery = function(e) {
      return Kc(this, e);
    };
  }
  i(Tc);

  // node_modules/@firebase/functions/dist/index.esm.js
  var errorCodeMap = {
    OK: "ok",
    CANCELLED: "cancelled",
    UNKNOWN: "unknown",
    INVALID_ARGUMENT: "invalid-argument",
    DEADLINE_EXCEEDED: "deadline-exceeded",
    NOT_FOUND: "not-found",
    ALREADY_EXISTS: "already-exists",
    PERMISSION_DENIED: "permission-denied",
    UNAUTHENTICATED: "unauthenticated",
    RESOURCE_EXHAUSTED: "resource-exhausted",
    FAILED_PRECONDITION: "failed-precondition",
    ABORTED: "aborted",
    OUT_OF_RANGE: "out-of-range",
    UNIMPLEMENTED: "unimplemented",
    INTERNAL: "internal",
    UNAVAILABLE: "unavailable",
    DATA_LOSS: "data-loss"
  };
  var HttpsErrorImpl = function(_super) {
    __extends(HttpsErrorImpl2, _super);
    function HttpsErrorImpl2(code, message, details) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, HttpsErrorImpl2.prototype);
      _this.code = code;
      _this.details = details;
      return _this;
    }
    return HttpsErrorImpl2;
  }(Error);
  function codeForHTTPStatus(status) {
    if (status >= 200 && status < 300) {
      return "ok";
    }
    switch (status) {
      case 0:
        return "internal";
      case 400:
        return "invalid-argument";
      case 401:
        return "unauthenticated";
      case 403:
        return "permission-denied";
      case 404:
        return "not-found";
      case 409:
        return "aborted";
      case 429:
        return "resource-exhausted";
      case 499:
        return "cancelled";
      case 500:
        return "internal";
      case 501:
        return "unimplemented";
      case 503:
        return "unavailable";
      case 504:
        return "deadline-exceeded";
    }
    return "unknown";
  }
  function _errorForResponse(status, bodyJSON, serializer2) {
    var code = codeForHTTPStatus(status);
    var description = code;
    var details = void 0;
    try {
      var errorJSON = bodyJSON && bodyJSON.error;
      if (errorJSON) {
        var status_1 = errorJSON.status;
        if (typeof status_1 === "string") {
          if (!errorCodeMap[status_1]) {
            return new HttpsErrorImpl("internal", "internal");
          }
          code = errorCodeMap[status_1];
          description = status_1;
        }
        var message = errorJSON.message;
        if (typeof message === "string") {
          description = message;
        }
        details = errorJSON.details;
        if (details !== void 0) {
          details = serializer2.decode(details);
        }
      }
    } catch (e) {
    }
    if (code === "ok") {
      return null;
    }
    return new HttpsErrorImpl(code, description, details);
  }
  var ContextProvider = function() {
    function ContextProvider2(authProvider, messagingProvider) {
      var _this = this;
      this.auth = null;
      this.messaging = null;
      this.auth = authProvider.getImmediate({optional: true});
      this.messaging = messagingProvider.getImmediate({
        optional: true
      });
      if (!this.auth) {
        authProvider.get().then(function(auth2) {
          return _this.auth = auth2;
        }, function() {
        });
      }
      if (!this.messaging) {
        messagingProvider.get().then(function(messaging2) {
          return _this.messaging = messaging2;
        }, function() {
        });
      }
    }
    ContextProvider2.prototype.getAuthToken = function() {
      return __awaiter(this, void 0, void 0, function() {
        var token, e_1;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              if (!this.auth) {
                return [2, void 0];
              }
              _a9.label = 1;
            case 1:
              _a9.trys.push([1, 3, , 4]);
              return [4, this.auth.getToken()];
            case 2:
              token = _a9.sent();
              if (!token) {
                return [2, void 0];
              }
              return [2, token.accessToken];
            case 3:
              e_1 = _a9.sent();
              return [2, void 0];
            case 4:
              return [2];
          }
        });
      });
    };
    ContextProvider2.prototype.getInstanceIdToken = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          if (!this.messaging || !("Notification" in self) || Notification.permission !== "granted") {
            return [2, void 0];
          }
          try {
            return [2, this.messaging.getToken()];
          } catch (e) {
            return [2, void 0];
          }
          return [2];
        });
      });
    };
    ContextProvider2.prototype.getContext = function() {
      return __awaiter(this, void 0, void 0, function() {
        var authToken, instanceIdToken;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.getAuthToken()];
            case 1:
              authToken = _a9.sent();
              return [4, this.getInstanceIdToken()];
            case 2:
              instanceIdToken = _a9.sent();
              return [2, {authToken, instanceIdToken}];
          }
        });
      });
    };
    return ContextProvider2;
  }();
  var LONG_TYPE = "type.googleapis.com/google.protobuf.Int64Value";
  var UNSIGNED_LONG_TYPE = "type.googleapis.com/google.protobuf.UInt64Value";
  function mapValues(o, f) {
    var result = {};
    for (var key2 in o) {
      if (o.hasOwnProperty(key2)) {
        result[key2] = f(o[key2]);
      }
    }
    return result;
  }
  var Serializer = function() {
    function Serializer2() {
    }
    Serializer2.prototype.encode = function(data) {
      var _this = this;
      if (data == null) {
        return null;
      }
      if (data instanceof Number) {
        data = data.valueOf();
      }
      if (typeof data === "number" && isFinite(data)) {
        return data;
      }
      if (data === true || data === false) {
        return data;
      }
      if (Object.prototype.toString.call(data) === "[object String]") {
        return data;
      }
      if (Array.isArray(data)) {
        return data.map(function(x3) {
          return _this.encode(x3);
        });
      }
      if (typeof data === "function" || typeof data === "object") {
        return mapValues(data, function(x3) {
          return _this.encode(x3);
        });
      }
      throw new Error("Data cannot be encoded in JSON: " + data);
    };
    Serializer2.prototype.decode = function(json) {
      var _this = this;
      if (json == null) {
        return json;
      }
      if (json["@type"]) {
        switch (json["@type"]) {
          case LONG_TYPE:
          case UNSIGNED_LONG_TYPE: {
            var value = Number(json["value"]);
            if (isNaN(value)) {
              throw new Error("Data cannot be decoded from JSON: " + json);
            }
            return value;
          }
          default: {
            throw new Error("Data cannot be decoded from JSON: " + json);
          }
        }
      }
      if (Array.isArray(json)) {
        return json.map(function(x3) {
          return _this.decode(x3);
        });
      }
      if (typeof json === "function" || typeof json === "object") {
        return mapValues(json, function(x3) {
          return _this.decode(x3);
        });
      }
      return json;
    };
    return Serializer2;
  }();
  function failAfter(millis) {
    var timer;
    var promise = new Promise(function(_2, reject) {
      timer = setTimeout(function() {
        reject(new HttpsErrorImpl("deadline-exceeded", "deadline-exceeded"));
      }, millis);
    });
    return {
      timer,
      promise
    };
  }
  var Service = function() {
    function Service2(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {
      var _this = this;
      if (regionOrCustomDomain_ === void 0) {
        regionOrCustomDomain_ = "us-central1";
      }
      this.app_ = app_;
      this.fetchImpl = fetchImpl;
      this.serializer = new Serializer();
      this.emulatorOrigin = null;
      this.INTERNAL = {
        delete: function() {
          return Promise.resolve(_this.deleteService());
        }
      };
      this.contextProvider = new ContextProvider(authProvider, messagingProvider);
      this.cancelAllRequests = new Promise(function(resolve) {
        _this.deleteService = function() {
          return resolve();
        };
      });
      try {
        var url = new URL(regionOrCustomDomain_);
        this.customDomain = url.origin;
        this.region = "us-central1";
      } catch (e) {
        this.customDomain = null;
        this.region = regionOrCustomDomain_;
      }
    }
    Object.defineProperty(Service2.prototype, "app", {
      get: function() {
        return this.app_;
      },
      enumerable: false,
      configurable: true
    });
    Service2.prototype._url = function(name9) {
      var projectId = this.app_.options.projectId;
      if (this.emulatorOrigin !== null) {
        var origin_1 = this.emulatorOrigin;
        return origin_1 + "/" + projectId + "/" + this.region + "/" + name9;
      }
      if (this.customDomain !== null) {
        return this.customDomain + "/" + name9;
      }
      return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name9;
    };
    Service2.prototype.useEmulator = function(host, port) {
      this.emulatorOrigin = "http://" + host + ":" + port;
    };
    Service2.prototype.useFunctionsEmulator = function(origin) {
      this.emulatorOrigin = origin;
    };
    Service2.prototype.httpsCallable = function(name9, options) {
      var _this = this;
      return function(data) {
        return _this.call(name9, data, options || {});
      };
    };
    Service2.prototype.postJSON = function(url, body, headers) {
      return __awaiter(this, void 0, void 0, function() {
        var response, e_1, json, e_2;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              headers["Content-Type"] = "application/json";
              _a9.label = 1;
            case 1:
              _a9.trys.push([1, 3, , 4]);
              return [4, this.fetchImpl(url, {
                method: "POST",
                body: JSON.stringify(body),
                headers
              })];
            case 2:
              response = _a9.sent();
              return [3, 4];
            case 3:
              e_1 = _a9.sent();
              return [2, {
                status: 0,
                json: null
              }];
            case 4:
              json = null;
              _a9.label = 5;
            case 5:
              _a9.trys.push([5, 7, , 8]);
              return [4, response.json()];
            case 6:
              json = _a9.sent();
              return [3, 8];
            case 7:
              e_2 = _a9.sent();
              return [3, 8];
            case 8:
              return [2, {
                status: response.status,
                json
              }];
          }
        });
      });
    };
    Service2.prototype.call = function(name9, data, options) {
      return __awaiter(this, void 0, void 0, function() {
        var url, body, headers, context2, timeout, _a9, timer, failAfterPromise, response, error, responseData, decodedData;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              url = this._url(name9);
              data = this.serializer.encode(data);
              body = {data};
              headers = {};
              return [4, this.contextProvider.getContext()];
            case 1:
              context2 = _b.sent();
              if (context2.authToken) {
                headers["Authorization"] = "Bearer " + context2.authToken;
              }
              if (context2.instanceIdToken) {
                headers["Firebase-Instance-ID-Token"] = context2.instanceIdToken;
              }
              timeout = options.timeout || 7e4;
              _a9 = failAfter(timeout), timer = _a9.timer, failAfterPromise = _a9.promise;
              return [4, Promise.race([
                clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),
                failAfterPromise,
                clearTimeoutWrapper(timer, this.cancelAllRequests)
              ])];
            case 2:
              response = _b.sent();
              if (!response) {
                throw new HttpsErrorImpl("cancelled", "Firebase Functions instance was deleted.");
              }
              error = _errorForResponse(response.status, response.json, this.serializer);
              if (error) {
                throw error;
              }
              if (!response.json) {
                throw new HttpsErrorImpl("internal", "Response is not valid JSON object.");
              }
              responseData = response.json.data;
              if (typeof responseData === "undefined") {
                responseData = response.json.result;
              }
              if (typeof responseData === "undefined") {
                throw new HttpsErrorImpl("internal", "Response is missing data field.");
              }
              decodedData = this.serializer.decode(responseData);
              return [2, {data: decodedData}];
          }
        });
      });
    };
    return Service2;
  }();
  function clearTimeoutWrapper(timer, promise) {
    return __awaiter(this, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, promise];
          case 1:
            result = _a9.sent();
            clearTimeout(timer);
            return [2, result];
        }
      });
    });
  }
  var FUNCTIONS_TYPE = "functions";
  function registerFunctions(instance, fetchImpl) {
    var namespaceExports = {
      Functions: Service
    };
    function factory3(container, regionOrCustomDomain) {
      var app12 = container.getProvider("app").getImmediate();
      var authProvider = container.getProvider("auth-internal");
      var messagingProvider = container.getProvider("messaging");
      return new Service(app12, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);
    }
    instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory3, "PUBLIC").setServiceProps(namespaceExports).setMultipleInstances(true));
  }
  var name3 = "@firebase/functions";
  var version3 = "0.6.1";
  registerFunctions(index_esm_default, fetch.bind(self));
  index_esm_default.registerVersion(name3, version3);

  // node_modules/@firebase/installations/dist/index.esm.js
  const idb = __toModule(require_idb());
  var name4 = "@firebase/installations";
  var version4 = "0.4.19";
  var PENDING_TIMEOUT_MS = 1e4;
  var PACKAGE_VERSION = "w:" + version4;
  var INTERNAL_AUTH_VERSION = "FIS_v2";
  var INSTALLATIONS_API_URL = "https://firebaseinstallations.googleapis.com/v1";
  var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1e3;
  var SERVICE = "installations";
  var SERVICE_NAME = "Installations";
  var _a4;
  var ERROR_DESCRIPTION_MAP = (_a4 = {}, _a4["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a4["not-registered"] = "Firebase Installation is not registered.", _a4["installation-not-found"] = "Firebase Installation not found.", _a4["request-failed"] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"', _a4["app-offline"] = "Could not process request. Application offline.", _a4["delete-pending-registration"] = "Can't delete installation while there is a pending registration request.", _a4);
  var ERROR_FACTORY3 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
  function isServerError(error) {
    return error instanceof FirebaseError && error.code.includes("request-failed");
  }
  function getInstallationsEndpoint(_a9) {
    var projectId = _a9.projectId;
    return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
  }
  function extractAuthTokenInfoFromResponse(response) {
    return {
      token: response.token,
      requestStatus: 2,
      expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
      creationTime: Date.now()
    };
  }
  function getErrorFromResponse(requestName, response) {
    return __awaiter(this, void 0, void 0, function() {
      var responseJson, errorData;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, response.json()];
          case 1:
            responseJson = _a9.sent();
            errorData = responseJson.error;
            return [2, ERROR_FACTORY3.create("request-failed", {
              requestName,
              serverCode: errorData.code,
              serverMessage: errorData.message,
              serverStatus: errorData.status
            })];
        }
      });
    });
  }
  function getHeaders2(_a9) {
    var apiKey = _a9.apiKey;
    return new Headers({
      "Content-Type": "application/json",
      Accept: "application/json",
      "x-goog-api-key": apiKey
    });
  }
  function getHeadersWithAuth(appConfig, _a9) {
    var refreshToken = _a9.refreshToken;
    var headers = getHeaders2(appConfig);
    headers.append("Authorization", getAuthorizationHeader(refreshToken));
    return headers;
  }
  function retryIfServerError(fn2) {
    return __awaiter(this, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, fn2()];
          case 1:
            result = _a9.sent();
            if (result.status >= 500 && result.status < 600) {
              return [2, fn2()];
            }
            return [2, result];
        }
      });
    });
  }
  function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
    return Number(responseExpiresIn.replace("s", "000"));
  }
  function getAuthorizationHeader(refreshToken) {
    return INTERNAL_AUTH_VERSION + " " + refreshToken;
  }
  function createInstallationRequest(appConfig, _a9) {
    var fid = _a9.fid;
    return __awaiter(this, void 0, void 0, function() {
      var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            endpoint = getInstallationsEndpoint(appConfig);
            headers = getHeaders2(appConfig);
            body = {
              fid,
              authVersion: INTERNAL_AUTH_VERSION,
              appId: appConfig.appId,
              sdkVersion: PACKAGE_VERSION
            };
            request = {
              method: "POST",
              headers,
              body: JSON.stringify(body)
            };
            return [4, retryIfServerError(function() {
              return fetch(endpoint, request);
            })];
          case 1:
            response = _b.sent();
            if (!response.ok)
              return [3, 3];
            return [4, response.json()];
          case 2:
            responseValue = _b.sent();
            registeredInstallationEntry = {
              fid: responseValue.fid || fid,
              registrationStatus: 2,
              refreshToken: responseValue.refreshToken,
              authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
            };
            return [2, registeredInstallationEntry];
          case 3:
            return [4, getErrorFromResponse("Create Installation", response)];
          case 4:
            throw _b.sent();
        }
      });
    });
  }
  function sleep(ms2) {
    return new Promise(function(resolve) {
      setTimeout(resolve, ms2);
    });
  }
  function bufferToBase64UrlSafe(array) {
    var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
    return b64.replace(/\+/g, "-").replace(/\//g, "_");
  }
  var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
  var INVALID_FID = "";
  function generateFid() {
    try {
      var fidByteArray = new Uint8Array(17);
      var crypto_1 = self.crypto || self.msCrypto;
      crypto_1.getRandomValues(fidByteArray);
      fidByteArray[0] = 112 + fidByteArray[0] % 16;
      var fid = encode(fidByteArray);
      return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
    } catch (_a9) {
      return INVALID_FID;
    }
  }
  function encode(fidByteArray) {
    var b64String = bufferToBase64UrlSafe(fidByteArray);
    return b64String.substr(0, 22);
  }
  function getKey(appConfig) {
    return appConfig.appName + "!" + appConfig.appId;
  }
  var fidChangeCallbacks = new Map();
  function fidChanged(appConfig, fid) {
    var key2 = getKey(appConfig);
    callFidChangeCallbacks(key2, fid);
    broadcastFidChange(key2, fid);
  }
  function addCallback(appConfig, callback) {
    getBroadcastChannel();
    var key2 = getKey(appConfig);
    var callbackSet = fidChangeCallbacks.get(key2);
    if (!callbackSet) {
      callbackSet = new Set();
      fidChangeCallbacks.set(key2, callbackSet);
    }
    callbackSet.add(callback);
  }
  function removeCallback(appConfig, callback) {
    var key2 = getKey(appConfig);
    var callbackSet = fidChangeCallbacks.get(key2);
    if (!callbackSet) {
      return;
    }
    callbackSet.delete(callback);
    if (callbackSet.size === 0) {
      fidChangeCallbacks.delete(key2);
    }
    closeBroadcastChannel();
  }
  function callFidChangeCallbacks(key2, fid) {
    var e_1, _a9;
    var callbacks = fidChangeCallbacks.get(key2);
    if (!callbacks) {
      return;
    }
    try {
      for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
        var callback = callbacks_1_1.value;
        callback(fid);
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (callbacks_1_1 && !callbacks_1_1.done && (_a9 = callbacks_1.return))
          _a9.call(callbacks_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  function broadcastFidChange(key2, fid) {
    var channel = getBroadcastChannel();
    if (channel) {
      channel.postMessage({key: key2, fid});
    }
    closeBroadcastChannel();
  }
  var broadcastChannel = null;
  function getBroadcastChannel() {
    if (!broadcastChannel && "BroadcastChannel" in self) {
      broadcastChannel = new BroadcastChannel("[Firebase] FID Change");
      broadcastChannel.onmessage = function(e) {
        callFidChangeCallbacks(e.data.key, e.data.fid);
      };
    }
    return broadcastChannel;
  }
  function closeBroadcastChannel() {
    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
      broadcastChannel.close();
      broadcastChannel = null;
    }
  }
  var DATABASE_NAME = "firebase-installations-database";
  var DATABASE_VERSION = 1;
  var OBJECT_STORE_NAME = "firebase-installations-store";
  var dbPromise = null;
  function getDbPromise() {
    if (!dbPromise) {
      dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function(upgradeDB) {
        switch (upgradeDB.oldVersion) {
          case 0:
            upgradeDB.createObjectStore(OBJECT_STORE_NAME);
        }
      });
    }
    return dbPromise;
  }
  function set(appConfig, value) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tx, objectStore, oldValue;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey(appConfig);
            return [4, getDbPromise()];
          case 1:
            db2 = _a9.sent();
            tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
            objectStore = tx.objectStore(OBJECT_STORE_NAME);
            return [4, objectStore.get(key2)];
          case 2:
            oldValue = _a9.sent();
            return [4, objectStore.put(value, key2)];
          case 3:
            _a9.sent();
            return [4, tx.complete];
          case 4:
            _a9.sent();
            if (!oldValue || oldValue.fid !== value.fid) {
              fidChanged(appConfig, value.fid);
            }
            return [2, value];
        }
      });
    });
  }
  function remove(appConfig) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tx;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey(appConfig);
            return [4, getDbPromise()];
          case 1:
            db2 = _a9.sent();
            tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
            return [4, tx.objectStore(OBJECT_STORE_NAME).delete(key2)];
          case 2:
            _a9.sent();
            return [4, tx.complete];
          case 3:
            _a9.sent();
            return [2];
        }
      });
    });
  }
  function update(appConfig, updateFn) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tx, store, oldValue, newValue;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey(appConfig);
            return [4, getDbPromise()];
          case 1:
            db2 = _a9.sent();
            tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
            store = tx.objectStore(OBJECT_STORE_NAME);
            return [4, store.get(key2)];
          case 2:
            oldValue = _a9.sent();
            newValue = updateFn(oldValue);
            if (!(newValue === void 0))
              return [3, 4];
            return [4, store.delete(key2)];
          case 3:
            _a9.sent();
            return [3, 6];
          case 4:
            return [4, store.put(newValue, key2)];
          case 5:
            _a9.sent();
            _a9.label = 6;
          case 6:
            return [4, tx.complete];
          case 7:
            _a9.sent();
            if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
              fidChanged(appConfig, newValue.fid);
            }
            return [2, newValue];
        }
      });
    });
  }
  function getInstallationEntry(appConfig) {
    return __awaiter(this, void 0, void 0, function() {
      var registrationPromise, installationEntry;
      var _a9;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, update(appConfig, function(oldEntry) {
              var installationEntry2 = updateOrCreateInstallationEntry(oldEntry);
              var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry2);
              registrationPromise = entryWithPromise.registrationPromise;
              return entryWithPromise.installationEntry;
            })];
          case 1:
            installationEntry = _b.sent();
            if (!(installationEntry.fid === INVALID_FID))
              return [3, 3];
            _a9 = {};
            return [4, registrationPromise];
          case 2:
            return [2, (_a9.installationEntry = _b.sent(), _a9)];
          case 3:
            return [2, {
              installationEntry,
              registrationPromise
            }];
        }
      });
    });
  }
  function updateOrCreateInstallationEntry(oldEntry) {
    var entry = oldEntry || {
      fid: generateFid(),
      registrationStatus: 0
    };
    return clearTimedOutRequest(entry);
  }
  function triggerRegistrationIfNecessary(appConfig, installationEntry) {
    if (installationEntry.registrationStatus === 0) {
      if (!navigator.onLine) {
        var registrationPromiseWithError = Promise.reject(ERROR_FACTORY3.create("app-offline"));
        return {
          installationEntry,
          registrationPromise: registrationPromiseWithError
        };
      }
      var inProgressEntry = {
        fid: installationEntry.fid,
        registrationStatus: 1,
        registrationTime: Date.now()
      };
      var registrationPromise = registerInstallation(appConfig, inProgressEntry);
      return {installationEntry: inProgressEntry, registrationPromise};
    } else if (installationEntry.registrationStatus === 1) {
      return {
        installationEntry,
        registrationPromise: waitUntilFidRegistration(appConfig)
      };
    } else {
      return {installationEntry};
    }
  }
  function registerInstallation(appConfig, installationEntry) {
    return __awaiter(this, void 0, void 0, function() {
      var registeredInstallationEntry, e_1;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            _a9.trys.push([0, 2, , 7]);
            return [4, createInstallationRequest(appConfig, installationEntry)];
          case 1:
            registeredInstallationEntry = _a9.sent();
            return [2, set(appConfig, registeredInstallationEntry)];
          case 2:
            e_1 = _a9.sent();
            if (!(isServerError(e_1) && e_1.customData.serverCode === 409))
              return [3, 4];
            return [4, remove(appConfig)];
          case 3:
            _a9.sent();
            return [3, 6];
          case 4:
            return [4, set(appConfig, {
              fid: installationEntry.fid,
              registrationStatus: 0
            })];
          case 5:
            _a9.sent();
            _a9.label = 6;
          case 6:
            throw e_1;
          case 7:
            return [2];
        }
      });
    });
  }
  function waitUntilFidRegistration(appConfig) {
    return __awaiter(this, void 0, void 0, function() {
      var entry, _a9, installationEntry, registrationPromise;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, updateInstallationRequest(appConfig)];
          case 1:
            entry = _b.sent();
            _b.label = 2;
          case 2:
            if (!(entry.registrationStatus === 1))
              return [3, 5];
            return [4, sleep(100)];
          case 3:
            _b.sent();
            return [4, updateInstallationRequest(appConfig)];
          case 4:
            entry = _b.sent();
            return [3, 2];
          case 5:
            if (!(entry.registrationStatus === 0))
              return [3, 7];
            return [4, getInstallationEntry(appConfig)];
          case 6:
            _a9 = _b.sent(), installationEntry = _a9.installationEntry, registrationPromise = _a9.registrationPromise;
            if (registrationPromise) {
              return [2, registrationPromise];
            } else {
              return [2, installationEntry];
            }
          case 7:
            return [2, entry];
        }
      });
    });
  }
  function updateInstallationRequest(appConfig) {
    return update(appConfig, function(oldEntry) {
      if (!oldEntry) {
        throw ERROR_FACTORY3.create("installation-not-found");
      }
      return clearTimedOutRequest(oldEntry);
    });
  }
  function clearTimedOutRequest(entry) {
    if (hasInstallationRequestTimedOut(entry)) {
      return {
        fid: entry.fid,
        registrationStatus: 0
      };
    }
    return entry;
  }
  function hasInstallationRequestTimedOut(installationEntry) {
    return installationEntry.registrationStatus === 1 && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
  }
  function generateAuthTokenRequest(_a9, installationEntry) {
    var appConfig = _a9.appConfig, platformLoggerProvider = _a9.platformLoggerProvider;
    return __awaiter(this, void 0, void 0, function() {
      var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
            headers = getHeadersWithAuth(appConfig, installationEntry);
            platformLogger = platformLoggerProvider.getImmediate({
              optional: true
            });
            if (platformLogger) {
              headers.append("x-firebase-client", platformLogger.getPlatformInfoString());
            }
            body = {
              installation: {
                sdkVersion: PACKAGE_VERSION
              }
            };
            request = {
              method: "POST",
              headers,
              body: JSON.stringify(body)
            };
            return [4, retryIfServerError(function() {
              return fetch(endpoint, request);
            })];
          case 1:
            response = _b.sent();
            if (!response.ok)
              return [3, 3];
            return [4, response.json()];
          case 2:
            responseValue = _b.sent();
            completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
            return [2, completedAuthToken];
          case 3:
            return [4, getErrorFromResponse("Generate Auth Token", response)];
          case 4:
            throw _b.sent();
        }
      });
    });
  }
  function getGenerateAuthTokenEndpoint(appConfig, _a9) {
    var fid = _a9.fid;
    return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
  }
  function refreshAuthToken(dependencies, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }
    return __awaiter(this, void 0, void 0, function() {
      var tokenPromise, entry, authToken, _a9;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, update(dependencies.appConfig, function(oldEntry) {
              if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY3.create("not-registered");
              }
              var oldAuthToken = oldEntry.authToken;
              if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                return oldEntry;
              } else if (oldAuthToken.requestStatus === 1) {
                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                return oldEntry;
              } else {
                if (!navigator.onLine) {
                  throw ERROR_FACTORY3.create("app-offline");
                }
                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
                return inProgressEntry;
              }
            })];
          case 1:
            entry = _b.sent();
            if (!tokenPromise)
              return [3, 3];
            return [4, tokenPromise];
          case 2:
            _a9 = _b.sent();
            return [3, 4];
          case 3:
            _a9 = entry.authToken;
            _b.label = 4;
          case 4:
            authToken = _a9;
            return [2, authToken];
        }
      });
    });
  }
  function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
    return __awaiter(this, void 0, void 0, function() {
      var entry, authToken;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, updateAuthTokenRequest(dependencies.appConfig)];
          case 1:
            entry = _a9.sent();
            _a9.label = 2;
          case 2:
            if (!(entry.authToken.requestStatus === 1))
              return [3, 5];
            return [4, sleep(100)];
          case 3:
            _a9.sent();
            return [4, updateAuthTokenRequest(dependencies.appConfig)];
          case 4:
            entry = _a9.sent();
            return [3, 2];
          case 5:
            authToken = entry.authToken;
            if (authToken.requestStatus === 0) {
              return [2, refreshAuthToken(dependencies, forceRefresh)];
            } else {
              return [2, authToken];
            }
        }
      });
    });
  }
  function updateAuthTokenRequest(appConfig) {
    return update(appConfig, function(oldEntry) {
      if (!isEntryRegistered(oldEntry)) {
        throw ERROR_FACTORY3.create("not-registered");
      }
      var oldAuthToken = oldEntry.authToken;
      if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
        return __assign(__assign({}, oldEntry), {authToken: {requestStatus: 0}});
      }
      return oldEntry;
    });
  }
  function fetchAuthTokenFromServer(dependencies, installationEntry) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            _a9.trys.push([0, 3, , 8]);
            return [4, generateAuthTokenRequest(dependencies, installationEntry)];
          case 1:
            authToken = _a9.sent();
            updatedInstallationEntry = __assign(__assign({}, installationEntry), {authToken});
            return [4, set(dependencies.appConfig, updatedInstallationEntry)];
          case 2:
            _a9.sent();
            return [2, authToken];
          case 3:
            e_1 = _a9.sent();
            if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404)))
              return [3, 5];
            return [4, remove(dependencies.appConfig)];
          case 4:
            _a9.sent();
            return [3, 7];
          case 5:
            updatedInstallationEntry = __assign(__assign({}, installationEntry), {authToken: {requestStatus: 0}});
            return [4, set(dependencies.appConfig, updatedInstallationEntry)];
          case 6:
            _a9.sent();
            _a9.label = 7;
          case 7:
            throw e_1;
          case 8:
            return [2];
        }
      });
    });
  }
  function isEntryRegistered(installationEntry) {
    return installationEntry !== void 0 && installationEntry.registrationStatus === 2;
  }
  function isAuthTokenValid(authToken) {
    return authToken.requestStatus === 2 && !isAuthTokenExpired(authToken);
  }
  function isAuthTokenExpired(authToken) {
    var now = Date.now();
    return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
  }
  function makeAuthTokenRequestInProgressEntry(oldEntry) {
    var inProgressAuthToken = {
      requestStatus: 1,
      requestTime: Date.now()
    };
    return __assign(__assign({}, oldEntry), {authToken: inProgressAuthToken});
  }
  function hasAuthTokenRequestTimedOut(authToken) {
    return authToken.requestStatus === 1 && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
  }
  function getId(dependencies) {
    return __awaiter(this, void 0, void 0, function() {
      var _a9, installationEntry, registrationPromise;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, getInstallationEntry(dependencies.appConfig)];
          case 1:
            _a9 = _b.sent(), installationEntry = _a9.installationEntry, registrationPromise = _a9.registrationPromise;
            if (registrationPromise) {
              registrationPromise.catch(console.error);
            } else {
              refreshAuthToken(dependencies).catch(console.error);
            }
            return [2, installationEntry.fid];
        }
      });
    });
  }
  function getToken(dependencies, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }
    return __awaiter(this, void 0, void 0, function() {
      var authToken;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, completeInstallationRegistration(dependencies.appConfig)];
          case 1:
            _a9.sent();
            return [4, refreshAuthToken(dependencies, forceRefresh)];
          case 2:
            authToken = _a9.sent();
            return [2, authToken.token];
        }
      });
    });
  }
  function completeInstallationRegistration(appConfig) {
    return __awaiter(this, void 0, void 0, function() {
      var registrationPromise;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, getInstallationEntry(appConfig)];
          case 1:
            registrationPromise = _a9.sent().registrationPromise;
            if (!registrationPromise)
              return [3, 3];
            return [4, registrationPromise];
          case 2:
            _a9.sent();
            _a9.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function deleteInstallationRequest(appConfig, installationEntry) {
    return __awaiter(this, void 0, void 0, function() {
      var endpoint, headers, request, response;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            endpoint = getDeleteEndpoint(appConfig, installationEntry);
            headers = getHeadersWithAuth(appConfig, installationEntry);
            request = {
              method: "DELETE",
              headers
            };
            return [4, retryIfServerError(function() {
              return fetch(endpoint, request);
            })];
          case 1:
            response = _a9.sent();
            if (!!response.ok)
              return [3, 3];
            return [4, getErrorFromResponse("Delete Installation", response)];
          case 2:
            throw _a9.sent();
          case 3:
            return [2];
        }
      });
    });
  }
  function getDeleteEndpoint(appConfig, _a9) {
    var fid = _a9.fid;
    return getInstallationsEndpoint(appConfig) + "/" + fid;
  }
  function deleteInstallation(dependencies) {
    return __awaiter(this, void 0, void 0, function() {
      var appConfig, entry;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            appConfig = dependencies.appConfig;
            return [4, update(appConfig, function(oldEntry) {
              if (oldEntry && oldEntry.registrationStatus === 0) {
                return void 0;
              }
              return oldEntry;
            })];
          case 1:
            entry = _a9.sent();
            if (!entry)
              return [3, 6];
            if (!(entry.registrationStatus === 1))
              return [3, 2];
            throw ERROR_FACTORY3.create("delete-pending-registration");
          case 2:
            if (!(entry.registrationStatus === 2))
              return [3, 6];
            if (!!navigator.onLine)
              return [3, 3];
            throw ERROR_FACTORY3.create("app-offline");
          case 3:
            return [4, deleteInstallationRequest(appConfig, entry)];
          case 4:
            _a9.sent();
            return [4, remove(appConfig)];
          case 5:
            _a9.sent();
            _a9.label = 6;
          case 6:
            return [2];
        }
      });
    });
  }
  function onIdChange(_a9, callback) {
    var appConfig = _a9.appConfig;
    addCallback(appConfig, callback);
    return function() {
      removeCallback(appConfig, callback);
    };
  }
  function extractAppConfig(app12) {
    var e_1, _a9;
    if (!app12 || !app12.options) {
      throw getMissingValueError("App Configuration");
    }
    if (!app12.name) {
      throw getMissingValueError("App Name");
    }
    var configKeys = [
      "projectId",
      "apiKey",
      "appId"
    ];
    try {
      for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
        var keyName = configKeys_1_1.value;
        if (!app12.options[keyName]) {
          throw getMissingValueError(keyName);
        }
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (configKeys_1_1 && !configKeys_1_1.done && (_a9 = configKeys_1.return))
          _a9.call(configKeys_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return {
      appName: app12.name,
      projectId: app12.options.projectId,
      apiKey: app12.options.apiKey,
      appId: app12.options.appId
    };
  }
  function getMissingValueError(valueName) {
    return ERROR_FACTORY3.create("missing-app-config-values", {
      valueName
    });
  }
  function registerInstallations(instance) {
    var installationsName = "installations";
    instance.INTERNAL.registerComponent(new Component(installationsName, function(container) {
      var app12 = container.getProvider("app").getImmediate();
      var appConfig = extractAppConfig(app12);
      var platformLoggerProvider = container.getProvider("platform-logger");
      var dependencies = {
        appConfig,
        platformLoggerProvider
      };
      var installations5 = {
        app: app12,
        getId: function() {
          return getId(dependencies);
        },
        getToken: function(forceRefresh) {
          return getToken(dependencies, forceRefresh);
        },
        delete: function() {
          return deleteInstallation(dependencies);
        },
        onIdChange: function(callback) {
          return onIdChange(dependencies, callback);
        }
      };
      return installations5;
    }, "PUBLIC"));
    instance.registerVersion(name4, version4);
  }
  registerInstallations(index_esm_default);

  // node_modules/@firebase/messaging/dist/index.esm.js
  const idb2 = __toModule(require_idb());
  var _a6;
  var ERROR_MAP = (_a6 = {}, _a6["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a6["only-available-in-window"] = "This method is available in a Window context.", _a6["only-available-in-sw"] = "This method is available in a service worker context.", _a6["permission-default"] = "The notification permission was not granted and dismissed instead.", _a6["permission-blocked"] = "The notification permission was not granted and blocked instead.", _a6["unsupported-browser"] = "This browser doesn't support the API's required to use the firebase SDK.", _a6["failed-service-worker-registration"] = "We are unable to register the default service worker. {$browserErrorMessage}", _a6["token-subscribe-failed"] = "A problem occurred while subscribing the user to FCM: {$errorInfo}", _a6["token-subscribe-no-token"] = "FCM returned no token when subscribing the user to push.", _a6["token-unsubscribe-failed"] = "A problem occurred while unsubscribing the user from FCM: {$errorInfo}", _a6["token-update-failed"] = "A problem occurred while updating the user from FCM: {$errorInfo}", _a6["token-update-no-token"] = "FCM returned no token when updating the user to push.", _a6["use-sw-after-get-token"] = "The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.", _a6["invalid-sw-registration"] = "The input to useServiceWorker() must be a ServiceWorkerRegistration.", _a6["invalid-bg-handler"] = "The input to setBackgroundMessageHandler() must be a function.", _a6["invalid-vapid-key"] = "The public VAPID key must be a string.", _a6["use-vapid-key-after-get-token"] = "The usePublicVapidKey() method may only be called once and must be called before calling getToken() to ensure your VAPID key is used.", _a6);
  var ERROR_FACTORY4 = new ErrorFactory("messaging", "Messaging", ERROR_MAP);
  var DEFAULT_SW_PATH = "/firebase-messaging-sw.js";
  var DEFAULT_SW_SCOPE = "/firebase-cloud-messaging-push-scope";
  var DEFAULT_VAPID_KEY = "BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4";
  var ENDPOINT = "https://fcmregistrations.googleapis.com/v1";
  var FCM_MSG = "FCM_MSG";
  var TAG = "FirebaseMessaging: ";
  var CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = "google.c.a.e";
  var CONSOLE_CAMPAIGN_ID = "google.c.a.c_id";
  var CONSOLE_CAMPAIGN_TIME = "google.c.a.ts";
  var CONSOLE_CAMPAIGN_NAME = "google.c.a.c_l";
  var BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1e3;
  var FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3e3;
  var MessageType;
  (function(MessageType2) {
    MessageType2["PUSH_RECEIVED"] = "push-received";
    MessageType2["NOTIFICATION_CLICKED"] = "notification-clicked";
  })(MessageType || (MessageType = {}));
  function arrayToBase64(array) {
    var uint8Array = new Uint8Array(array);
    var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));
    return base64String.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
  }
  function base64ToArray(base64String) {
    var padding = "=".repeat((4 - base64String.length % 4) % 4);
    var base642 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
    var rawData = atob(base642);
    var outputArray = new Uint8Array(rawData.length);
    for (var i2 = 0; i2 < rawData.length; ++i2) {
      outputArray[i2] = rawData.charCodeAt(i2);
    }
    return outputArray;
  }
  var OLD_DB_NAME = "fcm_token_details_db";
  var OLD_DB_VERSION = 5;
  var OLD_OBJECT_STORE_NAME = "fcm_token_object_Store";
  function migrateOldDatabase(senderId) {
    return __awaiter(this, void 0, void 0, function() {
      var databases, dbNames, tokenDetails, db2;
      var _this = this;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (!("databases" in indexedDB))
              return [3, 2];
            return [4, indexedDB.databases()];
          case 1:
            databases = _a9.sent();
            dbNames = databases.map(function(db3) {
              return db3.name;
            });
            if (!dbNames.includes(OLD_DB_NAME)) {
              return [2, null];
            }
            _a9.label = 2;
          case 2:
            tokenDetails = null;
            return [4, idb2.openDb(OLD_DB_NAME, OLD_DB_VERSION, function(db3) {
              return __awaiter(_this, void 0, void 0, function() {
                var objectStore, value, oldDetails, oldDetails, oldDetails;
                var _a10;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      if (db3.oldVersion < 2) {
                        return [2];
                      }
                      if (!db3.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                        return [2];
                      }
                      objectStore = db3.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                      return [4, objectStore.index("fcmSenderId").get(senderId)];
                    case 1:
                      value = _b.sent();
                      return [4, objectStore.clear()];
                    case 2:
                      _b.sent();
                      if (!value) {
                        return [2];
                      }
                      if (db3.oldVersion === 2) {
                        oldDetails = value;
                        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
                          return [2];
                        }
                        tokenDetails = {
                          token: oldDetails.fcmToken,
                          createTime: (_a10 = oldDetails.createTime) !== null && _a10 !== void 0 ? _a10 : Date.now(),
                          subscriptionOptions: {
                            auth: oldDetails.auth,
                            p256dh: oldDetails.p256dh,
                            endpoint: oldDetails.endpoint,
                            swScope: oldDetails.swScope,
                            vapidKey: typeof oldDetails.vapidKey === "string" ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
                          }
                        };
                      } else if (db3.oldVersion === 3) {
                        oldDetails = value;
                        tokenDetails = {
                          token: oldDetails.fcmToken,
                          createTime: oldDetails.createTime,
                          subscriptionOptions: {
                            auth: arrayToBase64(oldDetails.auth),
                            p256dh: arrayToBase64(oldDetails.p256dh),
                            endpoint: oldDetails.endpoint,
                            swScope: oldDetails.swScope,
                            vapidKey: arrayToBase64(oldDetails.vapidKey)
                          }
                        };
                      } else if (db3.oldVersion === 4) {
                        oldDetails = value;
                        tokenDetails = {
                          token: oldDetails.fcmToken,
                          createTime: oldDetails.createTime,
                          subscriptionOptions: {
                            auth: arrayToBase64(oldDetails.auth),
                            p256dh: arrayToBase64(oldDetails.p256dh),
                            endpoint: oldDetails.endpoint,
                            swScope: oldDetails.swScope,
                            vapidKey: arrayToBase64(oldDetails.vapidKey)
                          }
                        };
                      }
                      return [2];
                  }
                });
              });
            })];
          case 3:
            db2 = _a9.sent();
            db2.close();
            return [4, idb2.deleteDb(OLD_DB_NAME)];
          case 4:
            _a9.sent();
            return [4, idb2.deleteDb("fcm_vapid_details_db")];
          case 5:
            _a9.sent();
            return [4, idb2.deleteDb("undefined")];
          case 6:
            _a9.sent();
            return [2, checkTokenDetails(tokenDetails) ? tokenDetails : null];
        }
      });
    });
  }
  function checkTokenDetails(tokenDetails) {
    if (!tokenDetails || !tokenDetails.subscriptionOptions) {
      return false;
    }
    var subscriptionOptions = tokenDetails.subscriptionOptions;
    return typeof tokenDetails.createTime === "number" && tokenDetails.createTime > 0 && typeof tokenDetails.token === "string" && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === "string" && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === "string" && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === "string" && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === "string" && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === "string" && subscriptionOptions.vapidKey.length > 0;
  }
  var DATABASE_NAME2 = "firebase-messaging-database";
  var DATABASE_VERSION2 = 1;
  var OBJECT_STORE_NAME2 = "firebase-messaging-store";
  var dbPromise2 = null;
  function getDbPromise2() {
    if (!dbPromise2) {
      dbPromise2 = idb2.openDb(DATABASE_NAME2, DATABASE_VERSION2, function(upgradeDb) {
        switch (upgradeDb.oldVersion) {
          case 0:
            upgradeDb.createObjectStore(OBJECT_STORE_NAME2);
        }
      });
    }
    return dbPromise2;
  }
  function dbGet(firebaseDependencies) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tokenDetails, oldTokenDetails;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey2(firebaseDependencies);
            return [4, getDbPromise2()];
          case 1:
            db2 = _a9.sent();
            return [4, db2.transaction(OBJECT_STORE_NAME2).objectStore(OBJECT_STORE_NAME2).get(key2)];
          case 2:
            tokenDetails = _a9.sent();
            if (!tokenDetails)
              return [3, 3];
            return [2, tokenDetails];
          case 3:
            return [4, migrateOldDatabase(firebaseDependencies.appConfig.senderId)];
          case 4:
            oldTokenDetails = _a9.sent();
            if (!oldTokenDetails)
              return [3, 6];
            return [4, dbSet(firebaseDependencies, oldTokenDetails)];
          case 5:
            _a9.sent();
            return [2, oldTokenDetails];
          case 6:
            return [2];
        }
      });
    });
  }
  function dbSet(firebaseDependencies, tokenDetails) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tx;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey2(firebaseDependencies);
            return [4, getDbPromise2()];
          case 1:
            db2 = _a9.sent();
            tx = db2.transaction(OBJECT_STORE_NAME2, "readwrite");
            return [4, tx.objectStore(OBJECT_STORE_NAME2).put(tokenDetails, key2)];
          case 2:
            _a9.sent();
            return [4, tx.complete];
          case 3:
            _a9.sent();
            return [2, tokenDetails];
        }
      });
    });
  }
  function dbRemove(firebaseDependencies) {
    return __awaiter(this, void 0, void 0, function() {
      var key2, db2, tx;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            key2 = getKey2(firebaseDependencies);
            return [4, getDbPromise2()];
          case 1:
            db2 = _a9.sent();
            tx = db2.transaction(OBJECT_STORE_NAME2, "readwrite");
            return [4, tx.objectStore(OBJECT_STORE_NAME2).delete(key2)];
          case 2:
            _a9.sent();
            return [4, tx.complete];
          case 3:
            _a9.sent();
            return [2];
        }
      });
    });
  }
  function getKey2(_a9) {
    var appConfig = _a9.appConfig;
    return appConfig.appId;
  }
  function requestGetToken(firebaseDependencies, subscriptionOptions) {
    return __awaiter(this, void 0, void 0, function() {
      var headers, body, subscribeOptions, responseData, response, err_1, message;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, getHeaders3(firebaseDependencies)];
          case 1:
            headers = _a9.sent();
            body = getBody(subscriptionOptions);
            subscribeOptions = {
              method: "POST",
              headers,
              body: JSON.stringify(body)
            };
            _a9.label = 2;
          case 2:
            _a9.trys.push([2, 5, , 6]);
            return [4, fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];
          case 3:
            response = _a9.sent();
            return [4, response.json()];
          case 4:
            responseData = _a9.sent();
            return [3, 6];
          case 5:
            err_1 = _a9.sent();
            throw ERROR_FACTORY4.create("token-subscribe-failed", {
              errorInfo: err_1
            });
          case 6:
            if (responseData.error) {
              message = responseData.error.message;
              throw ERROR_FACTORY4.create("token-subscribe-failed", {
                errorInfo: message
              });
            }
            if (!responseData.token) {
              throw ERROR_FACTORY4.create("token-subscribe-no-token");
            }
            return [2, responseData.token];
        }
      });
    });
  }
  function requestUpdateToken(firebaseDependencies, tokenDetails) {
    return __awaiter(this, void 0, void 0, function() {
      var headers, body, updateOptions, responseData, response, err_2, message;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, getHeaders3(firebaseDependencies)];
          case 1:
            headers = _a9.sent();
            body = getBody(tokenDetails.subscriptionOptions);
            updateOptions = {
              method: "PATCH",
              headers,
              body: JSON.stringify(body)
            };
            _a9.label = 2;
          case 2:
            _a9.trys.push([2, 5, , 6]);
            return [4, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + tokenDetails.token, updateOptions)];
          case 3:
            response = _a9.sent();
            return [4, response.json()];
          case 4:
            responseData = _a9.sent();
            return [3, 6];
          case 5:
            err_2 = _a9.sent();
            throw ERROR_FACTORY4.create("token-update-failed", {
              errorInfo: err_2
            });
          case 6:
            if (responseData.error) {
              message = responseData.error.message;
              throw ERROR_FACTORY4.create("token-update-failed", {
                errorInfo: message
              });
            }
            if (!responseData.token) {
              throw ERROR_FACTORY4.create("token-update-no-token");
            }
            return [2, responseData.token];
        }
      });
    });
  }
  function requestDeleteToken(firebaseDependencies, token) {
    return __awaiter(this, void 0, void 0, function() {
      var headers, unsubscribeOptions, response, responseData, message, err_3;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, getHeaders3(firebaseDependencies)];
          case 1:
            headers = _a9.sent();
            unsubscribeOptions = {
              method: "DELETE",
              headers
            };
            _a9.label = 2;
          case 2:
            _a9.trys.push([2, 5, , 6]);
            return [4, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + token, unsubscribeOptions)];
          case 3:
            response = _a9.sent();
            return [4, response.json()];
          case 4:
            responseData = _a9.sent();
            if (responseData.error) {
              message = responseData.error.message;
              throw ERROR_FACTORY4.create("token-unsubscribe-failed", {
                errorInfo: message
              });
            }
            return [3, 6];
          case 5:
            err_3 = _a9.sent();
            throw ERROR_FACTORY4.create("token-unsubscribe-failed", {
              errorInfo: err_3
            });
          case 6:
            return [2];
        }
      });
    });
  }
  function getEndpoint(_a9) {
    var projectId = _a9.projectId;
    return ENDPOINT + "/projects/" + projectId + "/registrations";
  }
  function getHeaders3(_a9) {
    var appConfig = _a9.appConfig, installations5 = _a9.installations;
    return __awaiter(this, void 0, void 0, function() {
      var authToken;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, installations5.getToken()];
          case 1:
            authToken = _b.sent();
            return [2, new Headers({
              "Content-Type": "application/json",
              Accept: "application/json",
              "x-goog-api-key": appConfig.apiKey,
              "x-goog-firebase-installations-auth": "FIS " + authToken
            })];
        }
      });
    });
  }
  function getBody(_a9) {
    var p256dh = _a9.p256dh, auth2 = _a9.auth, endpoint = _a9.endpoint, vapidKey = _a9.vapidKey;
    var body = {
      web: {
        endpoint,
        auth: auth2,
        p256dh
      }
    };
    if (vapidKey !== DEFAULT_VAPID_KEY) {
      body.web.applicationPubKey = vapidKey;
    }
    return body;
  }
  var TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1e3;
  function getToken2(firebaseDependencies, swRegistration, vapidKey) {
    return __awaiter(this, void 0, void 0, function() {
      var pushSubscription, tokenDetails, subscriptionOptions, e_1;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (Notification.permission !== "granted") {
              throw ERROR_FACTORY4.create("permission-blocked");
            }
            return [4, getPushSubscription(swRegistration, vapidKey)];
          case 1:
            pushSubscription = _a9.sent();
            return [4, dbGet(firebaseDependencies)];
          case 2:
            tokenDetails = _a9.sent();
            subscriptionOptions = {
              vapidKey,
              swScope: swRegistration.scope,
              endpoint: pushSubscription.endpoint,
              auth: arrayToBase64(pushSubscription.getKey("auth")),
              p256dh: arrayToBase64(pushSubscription.getKey("p256dh"))
            };
            if (!!tokenDetails)
              return [3, 3];
            return [2, getNewToken(firebaseDependencies, subscriptionOptions)];
          case 3:
            if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions))
              return [3, 8];
            _a9.label = 4;
          case 4:
            _a9.trys.push([4, 6, , 7]);
            return [4, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
          case 5:
            _a9.sent();
            return [3, 7];
          case 6:
            e_1 = _a9.sent();
            console.warn(e_1);
            return [3, 7];
          case 7:
            return [2, getNewToken(firebaseDependencies, subscriptionOptions)];
          case 8:
            if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
              return [2, updateToken({
                token: tokenDetails.token,
                createTime: Date.now(),
                subscriptionOptions
              }, firebaseDependencies, swRegistration)];
            } else {
              return [2, tokenDetails.token];
            }
          case 9:
            return [2];
        }
      });
    });
  }
  function deleteToken(firebaseDependencies, swRegistration) {
    return __awaiter(this, void 0, void 0, function() {
      var tokenDetails, pushSubscription;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, dbGet(firebaseDependencies)];
          case 1:
            tokenDetails = _a9.sent();
            if (!tokenDetails)
              return [3, 4];
            return [4, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
          case 2:
            _a9.sent();
            return [4, dbRemove(firebaseDependencies)];
          case 3:
            _a9.sent();
            _a9.label = 4;
          case 4:
            return [4, swRegistration.pushManager.getSubscription()];
          case 5:
            pushSubscription = _a9.sent();
            if (pushSubscription) {
              return [2, pushSubscription.unsubscribe()];
            }
            return [2, true];
        }
      });
    });
  }
  function updateToken(tokenDetails, firebaseDependencies, swRegistration) {
    return __awaiter(this, void 0, void 0, function() {
      var updatedToken, updatedTokenDetails, e_2;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            _a9.trys.push([0, 3, , 5]);
            return [4, requestUpdateToken(firebaseDependencies, tokenDetails)];
          case 1:
            updatedToken = _a9.sent();
            updatedTokenDetails = __assign(__assign({}, tokenDetails), {token: updatedToken, createTime: Date.now()});
            return [4, dbSet(firebaseDependencies, updatedTokenDetails)];
          case 2:
            _a9.sent();
            return [2, updatedToken];
          case 3:
            e_2 = _a9.sent();
            return [4, deleteToken(firebaseDependencies, swRegistration)];
          case 4:
            _a9.sent();
            throw e_2;
          case 5:
            return [2];
        }
      });
    });
  }
  function getNewToken(firebaseDependencies, subscriptionOptions) {
    return __awaiter(this, void 0, void 0, function() {
      var token, tokenDetails;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, requestGetToken(firebaseDependencies, subscriptionOptions)];
          case 1:
            token = _a9.sent();
            tokenDetails = {
              token,
              createTime: Date.now(),
              subscriptionOptions
            };
            return [4, dbSet(firebaseDependencies, tokenDetails)];
          case 2:
            _a9.sent();
            return [2, tokenDetails.token];
        }
      });
    });
  }
  function getPushSubscription(swRegistration, vapidKey) {
    return __awaiter(this, void 0, void 0, function() {
      var subscription;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, swRegistration.pushManager.getSubscription()];
          case 1:
            subscription = _a9.sent();
            if (subscription) {
              return [2, subscription];
            }
            return [2, swRegistration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: base64ToArray(vapidKey)
            })];
        }
      });
    });
  }
  function isTokenValid(dbOptions, currentOptions) {
    var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
    var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
    var isAuthEqual = currentOptions.auth === dbOptions.auth;
    var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
    return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
  }
  function externalizePayload(internalPayload) {
    var payload = {
      from: internalPayload.from,
      collapseKey: internalPayload.collapse_key
    };
    propagateNotificationPayload(payload, internalPayload);
    propagateDataPayload(payload, internalPayload);
    propagateFcmOptions(payload, internalPayload);
    return payload;
  }
  function propagateNotificationPayload(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.notification) {
      return;
    }
    payload.notification = {};
    var title = messagePayloadInternal.notification.title;
    if (!!title) {
      payload.notification.title = title;
    }
    var body = messagePayloadInternal.notification.body;
    if (!!body) {
      payload.notification.body = body;
    }
    var image = messagePayloadInternal.notification.image;
    if (!!image) {
      payload.notification.image = image;
    }
  }
  function propagateDataPayload(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.data) {
      return;
    }
    payload.data = messagePayloadInternal.data;
  }
  function propagateFcmOptions(payload, messagePayloadInternal) {
    if (!messagePayloadInternal.fcmOptions) {
      return;
    }
    payload.fcmOptions = {};
    var link = messagePayloadInternal.fcmOptions.link;
    if (!!link) {
      payload.fcmOptions.link = link;
    }
    var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;
    if (!!analyticsLabel) {
      payload.fcmOptions.analyticsLabel = analyticsLabel;
    }
  }
  function isConsoleMessage(data) {
    return typeof data === "object" && !!data && CONSOLE_CAMPAIGN_ID in data;
  }
  function sleep2(ms2) {
    return new Promise(function(resolve) {
      setTimeout(resolve, ms2);
    });
  }
  var SwController = function() {
    function SwController2(firebaseDependencies) {
      var _this = this;
      this.firebaseDependencies = firebaseDependencies;
      this.isOnBackgroundMessageUsed = null;
      this.vapidKey = null;
      this.bgMessageHandler = null;
      self.addEventListener("push", function(e) {
        e.waitUntil(_this.onPush(e));
      });
      self.addEventListener("pushsubscriptionchange", function(e) {
        e.waitUntil(_this.onSubChange(e));
      });
      self.addEventListener("notificationclick", function(e) {
        e.waitUntil(_this.onNotificationClick(e));
      });
    }
    Object.defineProperty(SwController2.prototype, "app", {
      get: function() {
        return this.firebaseDependencies.app;
      },
      enumerable: false,
      configurable: true
    });
    SwController2.prototype.setBackgroundMessageHandler = function(callback) {
      this.isOnBackgroundMessageUsed = false;
      if (!callback || typeof callback !== "function") {
        throw ERROR_FACTORY4.create("invalid-bg-handler");
      }
      this.bgMessageHandler = callback;
    };
    SwController2.prototype.onBackgroundMessage = function(nextOrObserver) {
      var _this = this;
      this.isOnBackgroundMessageUsed = true;
      this.bgMessageHandler = nextOrObserver;
      return function() {
        _this.bgMessageHandler = null;
      };
    };
    SwController2.prototype.getToken = function() {
      var _a9, _b;
      return __awaiter(this, void 0, void 0, function() {
        var tokenDetails;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!!this.vapidKey)
                return [3, 2];
              return [4, dbGet(this.firebaseDependencies)];
            case 1:
              tokenDetails = _c2.sent();
              this.vapidKey = (_b = (_a9 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a9 === void 0 ? void 0 : _a9.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
              _c2.label = 2;
            case 2:
              return [2, getToken2(this.firebaseDependencies, self.registration, this.vapidKey)];
          }
        });
      });
    };
    SwController2.prototype.deleteToken = function() {
      return deleteToken(this.firebaseDependencies, self.registration);
    };
    SwController2.prototype.requestPermission = function() {
      throw ERROR_FACTORY4.create("only-available-in-window");
    };
    SwController2.prototype.usePublicVapidKey = function(vapidKey) {
      if (this.vapidKey !== null) {
        throw ERROR_FACTORY4.create("use-vapid-key-after-get-token");
      }
      if (typeof vapidKey !== "string" || vapidKey.length === 0) {
        throw ERROR_FACTORY4.create("invalid-vapid-key");
      }
      this.vapidKey = vapidKey;
    };
    SwController2.prototype.useServiceWorker = function() {
      throw ERROR_FACTORY4.create("only-available-in-window");
    };
    SwController2.prototype.onMessage = function() {
      throw ERROR_FACTORY4.create("only-available-in-window");
    };
    SwController2.prototype.onTokenRefresh = function() {
      throw ERROR_FACTORY4.create("only-available-in-window");
    };
    SwController2.prototype.onPush = function(event) {
      return __awaiter(this, void 0, void 0, function() {
        var internalPayload, clientList, isNotificationShown, payload;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              internalPayload = getMessagePayloadInternal(event);
              if (!internalPayload) {
                console.debug(TAG + "failed to get parsed MessagePayload from the PushEvent. Skip handling the push.");
                return [2];
              }
              return [4, getClientList()];
            case 1:
              clientList = _a9.sent();
              if (hasVisibleClients(clientList)) {
                return [2, sendMessagePayloadInternalToWindows(clientList, internalPayload)];
              }
              isNotificationShown = false;
              if (!!!internalPayload.notification)
                return [3, 3];
              return [4, showNotification(wrapInternalPayload(internalPayload))];
            case 2:
              _a9.sent();
              isNotificationShown = true;
              _a9.label = 3;
            case 3:
              if (isNotificationShown === true && this.isOnBackgroundMessageUsed === false) {
                return [2];
              }
              if (!!this.bgMessageHandler) {
                payload = externalizePayload(internalPayload);
                if (typeof this.bgMessageHandler === "function") {
                  this.bgMessageHandler(payload);
                } else {
                  this.bgMessageHandler.next(payload);
                }
              }
              return [4, sleep2(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)];
            case 4:
              _a9.sent();
              return [2];
          }
        });
      });
    };
    SwController2.prototype.onSubChange = function(event) {
      var _a9, _b;
      return __awaiter(this, void 0, void 0, function() {
        var newSubscription, tokenDetails;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              newSubscription = event.newSubscription;
              if (!!newSubscription)
                return [3, 2];
              return [4, deleteToken(this.firebaseDependencies, self.registration)];
            case 1:
              _c2.sent();
              return [2];
            case 2:
              return [4, dbGet(this.firebaseDependencies)];
            case 3:
              tokenDetails = _c2.sent();
              return [4, deleteToken(this.firebaseDependencies, self.registration)];
            case 4:
              _c2.sent();
              return [4, getToken2(this.firebaseDependencies, self.registration, (_b = (_a9 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a9 === void 0 ? void 0 : _a9.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];
            case 5:
              _c2.sent();
              return [2];
          }
        });
      });
    };
    SwController2.prototype.onNotificationClick = function(event) {
      var _a9, _b;
      return __awaiter(this, void 0, void 0, function() {
        var internalPayload, link, url, originUrl, client;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              internalPayload = (_b = (_a9 = event.notification) === null || _a9 === void 0 ? void 0 : _a9.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];
              if (!internalPayload) {
                return [2];
              } else if (event.action) {
                return [2];
              }
              event.stopImmediatePropagation();
              event.notification.close();
              link = getLink(internalPayload);
              if (!link) {
                return [2];
              }
              url = new URL(link, self.location.href);
              originUrl = new URL(self.location.origin);
              if (url.host !== originUrl.host) {
                return [2];
              }
              return [4, getWindowClient(url)];
            case 1:
              client = _c2.sent();
              if (!!client)
                return [3, 4];
              return [4, self.clients.openWindow(link)];
            case 2:
              client = _c2.sent();
              return [4, sleep2(FOREGROUND_HANDLE_PREPARATION_TIME_MS)];
            case 3:
              _c2.sent();
              return [3, 6];
            case 4:
              return [4, client.focus()];
            case 5:
              client = _c2.sent();
              _c2.label = 6;
            case 6:
              if (!client) {
                return [2];
              }
              internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
              internalPayload.isFirebaseMessaging = true;
              return [2, client.postMessage(internalPayload)];
          }
        });
      });
    };
    return SwController2;
  }();
  function wrapInternalPayload(internalPayload) {
    var _a9;
    var wrappedInternalPayload = __assign({}, internalPayload.notification);
    wrappedInternalPayload.data = (_a9 = {}, _a9[FCM_MSG] = internalPayload, _a9);
    return wrappedInternalPayload;
  }
  function getMessagePayloadInternal(_a9) {
    var data = _a9.data;
    if (!data) {
      return null;
    }
    try {
      return data.json();
    } catch (err) {
      return null;
    }
  }
  function getWindowClient(url) {
    return __awaiter(this, void 0, void 0, function() {
      var clientList, clientList_1, clientList_1_1, client, clientUrl;
      var e_1, _a9;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, getClientList()];
          case 1:
            clientList = _b.sent();
            try {
              for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {
                client = clientList_1_1.value;
                clientUrl = new URL(client.url, self.location.href);
                if (url.host === clientUrl.host) {
                  return [2, client];
                }
              }
            } catch (e_1_1) {
              e_1 = {error: e_1_1};
            } finally {
              try {
                if (clientList_1_1 && !clientList_1_1.done && (_a9 = clientList_1.return))
                  _a9.call(clientList_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            return [2, null];
        }
      });
    });
  }
  function hasVisibleClients(clientList) {
    return clientList.some(function(client) {
      return client.visibilityState === "visible" && !client.url.startsWith("chrome-extension://");
    });
  }
  function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
    var e_2, _a9;
    internalPayload.isFirebaseMessaging = true;
    internalPayload.messageType = MessageType.PUSH_RECEIVED;
    try {
      for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {
        var client = clientList_2_1.value;
        client.postMessage(internalPayload);
      }
    } catch (e_2_1) {
      e_2 = {error: e_2_1};
    } finally {
      try {
        if (clientList_2_1 && !clientList_2_1.done && (_a9 = clientList_2.return))
          _a9.call(clientList_2);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
  }
  function getClientList() {
    return self.clients.matchAll({
      type: "window",
      includeUncontrolled: true
    });
  }
  function showNotification(notificationPayloadInternal) {
    var _a9;
    var actions = notificationPayloadInternal.actions;
    var maxActions = Notification.maxActions;
    if (actions && maxActions && actions.length > maxActions) {
      console.warn("This browser only supports " + maxActions + " actions. The remaining actions will not be displayed.");
    }
    return self.registration.showNotification((_a9 = notificationPayloadInternal.title) !== null && _a9 !== void 0 ? _a9 : "", notificationPayloadInternal);
  }
  function getLink(payload) {
    var _a9, _b, _c2;
    var link = (_b = (_a9 = payload.fcmOptions) === null || _a9 === void 0 ? void 0 : _a9.link) !== null && _b !== void 0 ? _b : (_c2 = payload.notification) === null || _c2 === void 0 ? void 0 : _c2.click_action;
    if (link) {
      return link;
    }
    if (isConsoleMessage(payload.data)) {
      return self.location.origin;
    } else {
      return null;
    }
  }
  var WindowController = function() {
    function WindowController2(firebaseDependencies) {
      var _this = this;
      this.firebaseDependencies = firebaseDependencies;
      this.vapidKey = null;
      this.onMessageCallback = null;
      navigator.serviceWorker.addEventListener("message", function(e) {
        return _this.messageEventListener(e);
      });
    }
    Object.defineProperty(WindowController2.prototype, "app", {
      get: function() {
        return this.firebaseDependencies.app;
      },
      enumerable: false,
      configurable: true
    });
    WindowController2.prototype.messageEventListener = function(event) {
      return __awaiter(this, void 0, void 0, function() {
        var internalPayload, dataPayload;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              internalPayload = event.data;
              if (!internalPayload.isFirebaseMessaging) {
                return [2];
              }
              if (this.onMessageCallback && internalPayload.messageType === MessageType.PUSH_RECEIVED) {
                if (typeof this.onMessageCallback === "function") {
                  this.onMessageCallback(stripInternalFields(Object.assign({}, internalPayload)));
                } else {
                  this.onMessageCallback.next(Object.assign({}, internalPayload));
                }
              }
              dataPayload = internalPayload.data;
              if (!(isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === "1"))
                return [3, 2];
              return [4, this.logEvent(internalPayload.messageType, dataPayload)];
            case 1:
              _a9.sent();
              _a9.label = 2;
            case 2:
              return [2];
          }
        });
      });
    };
    WindowController2.prototype.getVapidKey = function() {
      return this.vapidKey;
    };
    WindowController2.prototype.getSwReg = function() {
      return this.swRegistration;
    };
    WindowController2.prototype.getToken = function(options) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              if (!(Notification.permission === "default"))
                return [3, 2];
              return [4, Notification.requestPermission()];
            case 1:
              _a9.sent();
              _a9.label = 2;
            case 2:
              if (Notification.permission !== "granted") {
                throw ERROR_FACTORY4.create("permission-blocked");
              }
              return [4, this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)];
            case 3:
              _a9.sent();
              return [4, this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];
            case 4:
              _a9.sent();
              return [2, getToken2(this.firebaseDependencies, this.swRegistration, this.vapidKey)];
          }
        });
      });
    };
    WindowController2.prototype.updateVapidKey = function(vapidKey) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          if (!!vapidKey) {
            this.vapidKey = vapidKey;
          } else if (!this.vapidKey) {
            this.vapidKey = DEFAULT_VAPID_KEY;
          }
          return [2];
        });
      });
    };
    WindowController2.prototype.updateSwReg = function(swRegistration) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              if (!(!swRegistration && !this.swRegistration))
                return [3, 2];
              return [4, this.registerDefaultSw()];
            case 1:
              _a9.sent();
              _a9.label = 2;
            case 2:
              if (!swRegistration && !!this.swRegistration) {
                return [2];
              }
              if (!(swRegistration instanceof ServiceWorkerRegistration)) {
                throw ERROR_FACTORY4.create("invalid-sw-registration");
              }
              this.swRegistration = swRegistration;
              return [2];
          }
        });
      });
    };
    WindowController2.prototype.registerDefaultSw = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a9, e_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _b.trys.push([0, 2, , 3]);
              _a9 = this;
              return [4, navigator.serviceWorker.register(DEFAULT_SW_PATH, {
                scope: DEFAULT_SW_SCOPE
              })];
            case 1:
              _a9.swRegistration = _b.sent();
              this.swRegistration.update().catch(function() {
              });
              return [3, 3];
            case 2:
              e_1 = _b.sent();
              throw ERROR_FACTORY4.create("failed-service-worker-registration", {
                browserErrorMessage: e_1.message
              });
            case 3:
              return [2];
          }
        });
      });
    };
    WindowController2.prototype.deleteToken = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              if (!!this.swRegistration)
                return [3, 2];
              return [4, this.registerDefaultSw()];
            case 1:
              _a9.sent();
              _a9.label = 2;
            case 2:
              return [2, deleteToken(this.firebaseDependencies, this.swRegistration)];
          }
        });
      });
    };
    WindowController2.prototype.requestPermission = function() {
      return __awaiter(this, void 0, void 0, function() {
        var permissionResult;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              if (Notification.permission === "granted") {
                return [2];
              }
              return [4, Notification.requestPermission()];
            case 1:
              permissionResult = _a9.sent();
              if (permissionResult === "granted") {
                return [2];
              } else if (permissionResult === "denied") {
                throw ERROR_FACTORY4.create("permission-blocked");
              } else {
                throw ERROR_FACTORY4.create("permission-default");
              }
          }
        });
      });
    };
    WindowController2.prototype.usePublicVapidKey = function(vapidKey) {
      if (this.vapidKey !== null) {
        throw ERROR_FACTORY4.create("use-vapid-key-after-get-token");
      }
      if (typeof vapidKey !== "string" || vapidKey.length === 0) {
        throw ERROR_FACTORY4.create("invalid-vapid-key");
      }
      this.vapidKey = vapidKey;
    };
    WindowController2.prototype.useServiceWorker = function(swRegistration) {
      if (!(swRegistration instanceof ServiceWorkerRegistration)) {
        throw ERROR_FACTORY4.create("invalid-sw-registration");
      }
      if (this.swRegistration) {
        throw ERROR_FACTORY4.create("use-sw-after-get-token");
      }
      this.swRegistration = swRegistration;
    };
    WindowController2.prototype.onMessage = function(nextOrObserver) {
      var _this = this;
      this.onMessageCallback = nextOrObserver;
      return function() {
        _this.onMessageCallback = null;
      };
    };
    WindowController2.prototype.setBackgroundMessageHandler = function() {
      throw ERROR_FACTORY4.create("only-available-in-sw");
    };
    WindowController2.prototype.onBackgroundMessage = function() {
      throw ERROR_FACTORY4.create("only-available-in-sw");
    };
    WindowController2.prototype.onTokenRefresh = function() {
      return function() {
      };
    };
    WindowController2.prototype.logEvent = function(messageType2, data) {
      return __awaiter(this, void 0, void 0, function() {
        var eventType, analytics2;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              eventType = getEventType(messageType2);
              return [4, this.firebaseDependencies.analyticsProvider.get()];
            case 1:
              analytics2 = _a9.sent();
              analytics2.logEvent(eventType, {
                message_id: data[CONSOLE_CAMPAIGN_ID],
                message_name: data[CONSOLE_CAMPAIGN_NAME],
                message_time: data[CONSOLE_CAMPAIGN_TIME],
                message_device_time: Math.floor(Date.now() / 1e3)
              });
              return [2];
          }
        });
      });
    };
    return WindowController2;
  }();
  function getEventType(messageType2) {
    switch (messageType2) {
      case MessageType.NOTIFICATION_CLICKED:
        return "notification_open";
      case MessageType.PUSH_RECEIVED:
        return "notification_foreground";
      default:
        throw new Error();
    }
  }
  function stripInternalFields(internalPayload) {
    delete internalPayload.messageType;
    delete internalPayload.isFirebaseMessaging;
    return internalPayload;
  }
  function extractAppConfig2(app12) {
    var e_1, _a9;
    if (!app12 || !app12.options) {
      throw getMissingValueError2("App Configuration Object");
    }
    if (!app12.name) {
      throw getMissingValueError2("App Name");
    }
    var configKeys = [
      "projectId",
      "apiKey",
      "appId",
      "messagingSenderId"
    ];
    var options = app12.options;
    try {
      for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
        var keyName = configKeys_1_1.value;
        if (!options[keyName]) {
          throw getMissingValueError2(keyName);
        }
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (configKeys_1_1 && !configKeys_1_1.done && (_a9 = configKeys_1.return))
          _a9.call(configKeys_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return {
      appName: app12.name,
      projectId: options.projectId,
      apiKey: options.apiKey,
      appId: options.appId,
      senderId: options.messagingSenderId
    };
  }
  function getMissingValueError2(valueName) {
    return ERROR_FACTORY4.create("missing-app-config-values", {
      valueName
    });
  }
  var MESSAGING_NAME = "messaging";
  function factoryMethod(container) {
    var app12 = container.getProvider("app").getImmediate();
    var appConfig = extractAppConfig2(app12);
    var installations5 = container.getProvider("installations").getImmediate();
    var analyticsProvider = container.getProvider("analytics-internal");
    var firebaseDependencies = {
      app: app12,
      appConfig,
      installations: installations5,
      analyticsProvider
    };
    if (!isSupported2()) {
      throw ERROR_FACTORY4.create("unsupported-browser");
    }
    if (self && "ServiceWorkerGlobalScope" in self) {
      return new SwController(firebaseDependencies);
    } else {
      return new WindowController(firebaseDependencies);
    }
  }
  var NAMESPACE_EXPORTS = {
    isSupported: isSupported2
  };
  index_esm_default.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, "PUBLIC").setServiceProps(NAMESPACE_EXPORTS));
  function isSupported2() {
    if (self && "ServiceWorkerGlobalScope" in self) {
      return isSWControllerSupported();
    } else {
      return isWindowControllerSupported();
    }
  }
  function isWindowControllerSupported() {
    return "indexedDB" in window && indexedDB !== null && navigator.cookieEnabled && "serviceWorker" in navigator && "PushManager" in window && "Notification" in window && "fetch" in window && ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification") && PushSubscription.prototype.hasOwnProperty("getKey");
  }
  function isSWControllerSupported() {
    return "indexedDB" in self && indexedDB !== null && "PushManager" in self && "Notification" in self && ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification") && PushSubscription.prototype.hasOwnProperty("getKey");
  }

  // node_modules/@firebase/storage/dist/index.esm.js
  var DEFAULT_HOST = "firebasestorage.googleapis.com";
  var CONFIG_STORAGE_BUCKET_KEY = "storageBucket";
  var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1e3;
  var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1e3;
  var FirebaseStorageError = function(_super) {
    __extends(FirebaseStorageError2, _super);
    function FirebaseStorageError2(code, message) {
      var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;
      _this.customData = {serverResponse: null};
      Object.setPrototypeOf(_this, FirebaseStorageError2.prototype);
      return _this;
    }
    FirebaseStorageError2.prototype.codeEquals = function(code) {
      return prependCode(code) === this.code;
    };
    Object.defineProperty(FirebaseStorageError2.prototype, "message", {
      get: function() {
        if (this.customData.serverResponse) {
          return this.message + "\n" + this.customData.serverResponse;
        } else {
          return this.message;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FirebaseStorageError2.prototype, "serverResponse", {
      get: function() {
        return this.customData.serverResponse;
      },
      set: function(serverResponse) {
        this.customData.serverResponse = serverResponse;
      },
      enumerable: false,
      configurable: true
    });
    return FirebaseStorageError2;
  }(FirebaseError);
  var Code = {
    UNKNOWN: "unknown",
    OBJECT_NOT_FOUND: "object-not-found",
    BUCKET_NOT_FOUND: "bucket-not-found",
    PROJECT_NOT_FOUND: "project-not-found",
    QUOTA_EXCEEDED: "quota-exceeded",
    UNAUTHENTICATED: "unauthenticated",
    UNAUTHORIZED: "unauthorized",
    RETRY_LIMIT_EXCEEDED: "retry-limit-exceeded",
    INVALID_CHECKSUM: "invalid-checksum",
    CANCELED: "canceled",
    INVALID_EVENT_NAME: "invalid-event-name",
    INVALID_URL: "invalid-url",
    INVALID_DEFAULT_BUCKET: "invalid-default-bucket",
    NO_DEFAULT_BUCKET: "no-default-bucket",
    CANNOT_SLICE_BLOB: "cannot-slice-blob",
    SERVER_FILE_WRONG_SIZE: "server-file-wrong-size",
    NO_DOWNLOAD_URL: "no-download-url",
    INVALID_ARGUMENT: "invalid-argument",
    INVALID_ARGUMENT_COUNT: "invalid-argument-count",
    APP_DELETED: "app-deleted",
    INVALID_ROOT_OPERATION: "invalid-root-operation",
    INVALID_FORMAT: "invalid-format",
    INTERNAL_ERROR: "internal-error",
    UNSUPPORTED_ENVIRONMENT: "unsupported-environment"
  };
  function prependCode(code) {
    return "storage/" + code;
  }
  function unknown() {
    var message = "An unknown error occurred, please check the error payload for server response.";
    return new FirebaseStorageError(Code.UNKNOWN, message);
  }
  function objectNotFound(path) {
    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
  }
  function quotaExceeded(bucket) {
    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" + bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
  }
  function unauthenticated() {
    var message = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
  }
  function unauthorized(path) {
    return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
  }
  function retryLimitExceeded() {
    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, "Max retry time for operation exceeded, please try again.");
  }
  function canceled() {
    return new FirebaseStorageError(Code.CANCELED, "User canceled the upload/download.");
  }
  function invalidUrl(url) {
    return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
  }
  function invalidDefaultBucket(bucket) {
    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
  }
  function noDefaultBucket() {
    return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, "No default bucket found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
  }
  function cannotSliceBlob() {
    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, "Cannot slice blob for upload. Please retry the upload.");
  }
  function serverFileWrongSize() {
    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, "Server recorded incorrect upload file size, please retry the upload.");
  }
  function noDownloadURL() {
    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, "The given file does not have any download URLs.");
  }
  function invalidArgument(message) {
    return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);
  }
  function appDeleted() {
    return new FirebaseStorageError(Code.APP_DELETED, "The Firebase app was deleted.");
  }
  function invalidRootOperation(name9) {
    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" + name9 + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
  }
  function invalidFormat(format, message) {
    return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
  }
  function internalError(message) {
    throw new FirebaseStorageError(Code.INTERNAL_ERROR, "Internal error: " + message);
  }
  var StringFormat = {
    RAW: "raw",
    BASE64: "base64",
    BASE64URL: "base64url",
    DATA_URL: "data_url"
  };
  var StringData = function() {
    function StringData2(data, contentType) {
      this.data = data;
      this.contentType = contentType || null;
    }
    return StringData2;
  }();
  function dataFromString(format, stringData) {
    switch (format) {
      case StringFormat.RAW:
        return new StringData(utf8Bytes_(stringData));
      case StringFormat.BASE64:
      case StringFormat.BASE64URL:
        return new StringData(base64Bytes_(format, stringData));
      case StringFormat.DATA_URL:
        return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
    }
    throw unknown();
  }
  function utf8Bytes_(value) {
    var b = [];
    for (var i2 = 0; i2 < value.length; i2++) {
      var c = value.charCodeAt(i2);
      if (c <= 127) {
        b.push(c);
      } else {
        if (c <= 2047) {
          b.push(192 | c >> 6, 128 | c & 63);
        } else {
          if ((c & 64512) === 55296) {
            var valid = i2 < value.length - 1 && (value.charCodeAt(i2 + 1) & 64512) === 56320;
            if (!valid) {
              b.push(239, 191, 189);
            } else {
              var hi2 = c;
              var lo2 = value.charCodeAt(++i2);
              c = 65536 | (hi2 & 1023) << 10 | lo2 & 1023;
              b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
            }
          } else {
            if ((c & 64512) === 56320) {
              b.push(239, 191, 189);
            } else {
              b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
            }
          }
        }
      }
    }
    return new Uint8Array(b);
  }
  function percentEncodedBytes_(value) {
    var decoded;
    try {
      decoded = decodeURIComponent(value);
    } catch (e) {
      throw invalidFormat(StringFormat.DATA_URL, "Malformed data URL.");
    }
    return utf8Bytes_(decoded);
  }
  function base64Bytes_(format, value) {
    switch (format) {
      case StringFormat.BASE64: {
        var hasMinus = value.indexOf("-") !== -1;
        var hasUnder = value.indexOf("_") !== -1;
        if (hasMinus || hasUnder) {
          var invalidChar = hasMinus ? "-" : "_";
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
        }
        break;
      }
      case StringFormat.BASE64URL: {
        var hasPlus = value.indexOf("+") !== -1;
        var hasSlash = value.indexOf("/") !== -1;
        if (hasPlus || hasSlash) {
          var invalidChar = hasPlus ? "+" : "/";
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
        }
        value = value.replace(/-/g, "+").replace(/_/g, "/");
        break;
      }
    }
    var bytes;
    try {
      bytes = atob(value);
    } catch (e) {
      throw invalidFormat(format, "Invalid character found");
    }
    var array = new Uint8Array(bytes.length);
    for (var i2 = 0; i2 < bytes.length; i2++) {
      array[i2] = bytes.charCodeAt(i2);
    }
    return array;
  }
  var DataURLParts = function() {
    function DataURLParts2(dataURL) {
      this.base64 = false;
      this.contentType = null;
      var matches = dataURL.match(/^data:([^,]+)?,/);
      if (matches === null) {
        throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
      }
      var middle = matches[1] || null;
      if (middle != null) {
        this.base64 = endsWith(middle, ";base64");
        this.contentType = this.base64 ? middle.substring(0, middle.length - ";base64".length) : middle;
      }
      this.rest = dataURL.substring(dataURL.indexOf(",") + 1);
    }
    return DataURLParts2;
  }();
  function dataURLBytes_(dataUrl) {
    var parts = new DataURLParts(dataUrl);
    if (parts.base64) {
      return base64Bytes_(StringFormat.BASE64, parts.rest);
    } else {
      return percentEncodedBytes_(parts.rest);
    }
  }
  function dataURLContentType_(dataUrl) {
    var parts = new DataURLParts(dataUrl);
    return parts.contentType;
  }
  function endsWith(s, end) {
    var longEnough = s.length >= end.length;
    if (!longEnough) {
      return false;
    }
    return s.substring(s.length - end.length) === end;
  }
  var TaskEvent = {
    STATE_CHANGED: "state_changed"
  };
  var InternalTaskState = {
    RUNNING: "running",
    PAUSING: "pausing",
    PAUSED: "paused",
    SUCCESS: "success",
    CANCELING: "canceling",
    CANCELED: "canceled",
    ERROR: "error"
  };
  var TaskState = {
    RUNNING: "running",
    PAUSED: "paused",
    SUCCESS: "success",
    CANCELED: "canceled",
    ERROR: "error"
  };
  function taskStateFromInternalTaskState(state) {
    switch (state) {
      case InternalTaskState.RUNNING:
      case InternalTaskState.PAUSING:
      case InternalTaskState.CANCELING:
        return TaskState.RUNNING;
      case InternalTaskState.PAUSED:
        return TaskState.PAUSED;
      case InternalTaskState.SUCCESS:
        return TaskState.SUCCESS;
      case InternalTaskState.CANCELED:
        return TaskState.CANCELED;
      case InternalTaskState.ERROR:
        return TaskState.ERROR;
      default:
        return TaskState.ERROR;
    }
  }
  var ErrorCode2;
  (function(ErrorCode3) {
    ErrorCode3[ErrorCode3["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode3[ErrorCode3["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode3[ErrorCode3["ABORT"] = 2] = "ABORT";
  })(ErrorCode2 || (ErrorCode2 = {}));
  var NetworkXhrIo = function() {
    function NetworkXhrIo2() {
      var _this = this;
      this.sent_ = false;
      this.xhr_ = new XMLHttpRequest();
      this.errorCode_ = ErrorCode2.NO_ERROR;
      this.sendPromise_ = new Promise(function(resolve) {
        _this.xhr_.addEventListener("abort", function() {
          _this.errorCode_ = ErrorCode2.ABORT;
          resolve(_this);
        });
        _this.xhr_.addEventListener("error", function() {
          _this.errorCode_ = ErrorCode2.NETWORK_ERROR;
          resolve(_this);
        });
        _this.xhr_.addEventListener("load", function() {
          resolve(_this);
        });
      });
    }
    NetworkXhrIo2.prototype.send = function(url, method, body, headers) {
      if (this.sent_) {
        throw internalError("cannot .send() more than once");
      }
      this.sent_ = true;
      this.xhr_.open(method, url, true);
      if (headers !== void 0) {
        for (var key2 in headers) {
          if (headers.hasOwnProperty(key2)) {
            this.xhr_.setRequestHeader(key2, headers[key2].toString());
          }
        }
      }
      if (body !== void 0) {
        this.xhr_.send(body);
      } else {
        this.xhr_.send();
      }
      return this.sendPromise_;
    };
    NetworkXhrIo2.prototype.getErrorCode = function() {
      if (!this.sent_) {
        throw internalError("cannot .getErrorCode() before sending");
      }
      return this.errorCode_;
    };
    NetworkXhrIo2.prototype.getStatus = function() {
      if (!this.sent_) {
        throw internalError("cannot .getStatus() before sending");
      }
      try {
        return this.xhr_.status;
      } catch (e) {
        return -1;
      }
    };
    NetworkXhrIo2.prototype.getResponseText = function() {
      if (!this.sent_) {
        throw internalError("cannot .getResponseText() before sending");
      }
      return this.xhr_.responseText;
    };
    NetworkXhrIo2.prototype.abort = function() {
      this.xhr_.abort();
    };
    NetworkXhrIo2.prototype.getResponseHeader = function(header) {
      return this.xhr_.getResponseHeader(header);
    };
    NetworkXhrIo2.prototype.addUploadProgressListener = function(listener) {
      if (this.xhr_.upload != null) {
        this.xhr_.upload.addEventListener("progress", listener);
      }
    };
    NetworkXhrIo2.prototype.removeUploadProgressListener = function(listener) {
      if (this.xhr_.upload != null) {
        this.xhr_.upload.removeEventListener("progress", listener);
      }
    };
    return NetworkXhrIo2;
  }();
  var XhrIoPool = function() {
    function XhrIoPool2() {
    }
    XhrIoPool2.prototype.createXhrIo = function() {
      return new NetworkXhrIo();
    };
    return XhrIoPool2;
  }();
  function isJustDef(p2) {
    return p2 !== void 0;
  }
  function isFunction(p2) {
    return typeof p2 === "function";
  }
  function isNonArrayObject(p2) {
    return typeof p2 === "object" && !Array.isArray(p2);
  }
  function isString(p2) {
    return typeof p2 === "string" || p2 instanceof String;
  }
  function isNativeBlob(p2) {
    return isNativeBlobDefined() && p2 instanceof Blob;
  }
  function isNativeBlobDefined() {
    return typeof Blob !== "undefined";
  }
  function validateNumber(argument, minValue, maxValue, value) {
    if (value < minValue) {
      throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
    }
    if (value > maxValue) {
      throw new FirebaseStorageError(Code.INVALID_ARGUMENT, "Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
    }
  }
  function getBlobBuilder() {
    if (typeof BlobBuilder !== "undefined") {
      return BlobBuilder;
    } else if (typeof WebKitBlobBuilder !== "undefined") {
      return WebKitBlobBuilder;
    } else {
      return void 0;
    }
  }
  function getBlob() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    var BlobBuilder2 = getBlobBuilder();
    if (BlobBuilder2 !== void 0) {
      var bb2 = new BlobBuilder2();
      for (var i2 = 0; i2 < args.length; i2++) {
        bb2.append(args[i2]);
      }
      return bb2.getBlob();
    } else {
      if (isNativeBlobDefined()) {
        return new Blob(args);
      } else {
        throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, "This browser doesn't seem to support creating Blobs");
      }
    }
  }
  function sliceBlob(blob, start2, end) {
    if (blob.webkitSlice) {
      return blob.webkitSlice(start2, end);
    } else if (blob.mozSlice) {
      return blob.mozSlice(start2, end);
    } else if (blob.slice) {
      return blob.slice(start2, end);
    }
    return null;
  }
  var FbsBlob = function() {
    function FbsBlob2(data, elideCopy) {
      var size = 0;
      var blobType = "";
      if (isNativeBlob(data)) {
        this.data_ = data;
        size = data.size;
        blobType = data.type;
      } else if (data instanceof ArrayBuffer) {
        if (elideCopy) {
          this.data_ = new Uint8Array(data);
        } else {
          this.data_ = new Uint8Array(data.byteLength);
          this.data_.set(new Uint8Array(data));
        }
        size = this.data_.length;
      } else if (data instanceof Uint8Array) {
        if (elideCopy) {
          this.data_ = data;
        } else {
          this.data_ = new Uint8Array(data.length);
          this.data_.set(data);
        }
        size = data.length;
      }
      this.size_ = size;
      this.type_ = blobType;
    }
    FbsBlob2.prototype.size = function() {
      return this.size_;
    };
    FbsBlob2.prototype.type = function() {
      return this.type_;
    };
    FbsBlob2.prototype.slice = function(startByte, endByte) {
      if (isNativeBlob(this.data_)) {
        var realBlob = this.data_;
        var sliced = sliceBlob(realBlob, startByte, endByte);
        if (sliced === null) {
          return null;
        }
        return new FbsBlob2(sliced);
      } else {
        var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
        return new FbsBlob2(slice, true);
      }
    };
    FbsBlob2.getBlob = function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      if (isNativeBlobDefined()) {
        var blobby = args.map(function(val) {
          if (val instanceof FbsBlob2) {
            return val.data_;
          } else {
            return val;
          }
        });
        return new FbsBlob2(getBlob.apply(null, blobby));
      } else {
        var uint8Arrays = args.map(function(val) {
          if (isString(val)) {
            return dataFromString(StringFormat.RAW, val).data;
          } else {
            return val.data_;
          }
        });
        var finalLength_1 = 0;
        uint8Arrays.forEach(function(array) {
          finalLength_1 += array.byteLength;
        });
        var merged_1 = new Uint8Array(finalLength_1);
        var index_1 = 0;
        uint8Arrays.forEach(function(array) {
          for (var i2 = 0; i2 < array.length; i2++) {
            merged_1[index_1++] = array[i2];
          }
        });
        return new FbsBlob2(merged_1, true);
      }
    };
    FbsBlob2.prototype.uploadData = function() {
      return this.data_;
    };
    return FbsBlob2;
  }();
  var Location = function() {
    function Location2(bucket, path) {
      this.bucket = bucket;
      this.path_ = path;
    }
    Object.defineProperty(Location2.prototype, "path", {
      get: function() {
        return this.path_;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Location2.prototype, "isRoot", {
      get: function() {
        return this.path.length === 0;
      },
      enumerable: false,
      configurable: true
    });
    Location2.prototype.fullServerUrl = function() {
      var encode2 = encodeURIComponent;
      return "/b/" + encode2(this.bucket) + "/o/" + encode2(this.path);
    };
    Location2.prototype.bucketOnlyServerUrl = function() {
      var encode2 = encodeURIComponent;
      return "/b/" + encode2(this.bucket) + "/o";
    };
    Location2.makeFromBucketSpec = function(bucketString) {
      var bucketLocation;
      try {
        bucketLocation = Location2.makeFromUrl(bucketString);
      } catch (e) {
        return new Location2(bucketString, "");
      }
      if (bucketLocation.path === "") {
        return bucketLocation;
      } else {
        throw invalidDefaultBucket(bucketString);
      }
    };
    Location2.makeFromUrl = function(url) {
      var location2 = null;
      var bucketDomain = "([A-Za-z0-9.\\-_]+)";
      function gsModify(loc) {
        if (loc.path.charAt(loc.path.length - 1) === "/") {
          loc.path_ = loc.path_.slice(0, -1);
        }
      }
      var gsPath = "(/(.*))?$";
      var gsRegex = new RegExp("^gs://" + bucketDomain + gsPath, "i");
      var gsIndices = {bucket: 1, path: 3};
      function httpModify(loc) {
        loc.path_ = decodeURIComponent(loc.path);
      }
      var version9 = "v[A-Za-z0-9_]+";
      var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, "\\.");
      var firebaseStoragePath = "(/([^?#]*).*)?$";
      var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version9 + "/b/" + bucketDomain + "/o" + firebaseStoragePath, "i");
      var firebaseStorageIndices = {bucket: 1, path: 3};
      var cloudStorageHost = "(?:storage.googleapis.com|storage.cloud.google.com)";
      var cloudStoragePath = "([^?#]*)";
      var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, "i");
      var cloudStorageIndices = {bucket: 1, path: 2};
      var groups = [
        {regex: gsRegex, indices: gsIndices, postModify: gsModify},
        {
          regex: firebaseStorageRegExp,
          indices: firebaseStorageIndices,
          postModify: httpModify
        },
        {
          regex: cloudStorageRegExp,
          indices: cloudStorageIndices,
          postModify: httpModify
        }
      ];
      for (var i2 = 0; i2 < groups.length; i2++) {
        var group = groups[i2];
        var captures = group.regex.exec(url);
        if (captures) {
          var bucketValue = captures[group.indices.bucket];
          var pathValue = captures[group.indices.path];
          if (!pathValue) {
            pathValue = "";
          }
          location2 = new Location2(bucketValue, pathValue);
          group.postModify(location2);
          break;
        }
      }
      if (location2 == null) {
        throw invalidUrl(url);
      }
      return location2;
    };
    return Location2;
  }();
  function jsonObjectOrNull(s) {
    var obj;
    try {
      obj = JSON.parse(s);
    } catch (e) {
      return null;
    }
    if (isNonArrayObject(obj)) {
      return obj;
    } else {
      return null;
    }
  }
  function parent(path) {
    if (path.length === 0) {
      return null;
    }
    var index2 = path.lastIndexOf("/");
    if (index2 === -1) {
      return "";
    }
    var newPath = path.slice(0, index2);
    return newPath;
  }
  function child(path, childPath) {
    var canonicalChildPath = childPath.split("/").filter(function(component10) {
      return component10.length > 0;
    }).join("/");
    if (path.length === 0) {
      return canonicalChildPath;
    } else {
      return path + "/" + canonicalChildPath;
    }
  }
  function lastComponent(path) {
    var index2 = path.lastIndexOf("/", path.length - 2);
    if (index2 === -1) {
      return path;
    } else {
      return path.slice(index2 + 1);
    }
  }
  function makeUrl(urlPart) {
    return "https://" + DEFAULT_HOST + "/v0" + urlPart;
  }
  function makeQueryString(params) {
    var encode2 = encodeURIComponent;
    var queryPart = "?";
    for (var key2 in params) {
      if (params.hasOwnProperty(key2)) {
        var nextPart = encode2(key2) + "=" + encode2(params[key2]);
        queryPart = queryPart + nextPart + "&";
      }
    }
    queryPart = queryPart.slice(0, -1);
    return queryPart;
  }
  function noXform_(metadata, value) {
    return value;
  }
  var Mapping = function() {
    function Mapping2(server, local, writable, xform) {
      this.server = server;
      this.local = local || server;
      this.writable = !!writable;
      this.xform = xform || noXform_;
    }
    return Mapping2;
  }();
  var mappings_ = null;
  function xformPath(fullPath) {
    if (!isString(fullPath) || fullPath.length < 2) {
      return fullPath;
    } else {
      return lastComponent(fullPath);
    }
  }
  function getMappings() {
    if (mappings_) {
      return mappings_;
    }
    var mappings = [];
    mappings.push(new Mapping("bucket"));
    mappings.push(new Mapping("generation"));
    mappings.push(new Mapping("metageneration"));
    mappings.push(new Mapping("name", "fullPath", true));
    function mappingsXformPath(_metadata, fullPath) {
      return xformPath(fullPath);
    }
    var nameMapping = new Mapping("name");
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    function xformSize(_metadata, size) {
      if (size !== void 0) {
        return Number(size);
      } else {
        return size;
      }
    }
    var sizeMapping = new Mapping("size");
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping("timeCreated"));
    mappings.push(new Mapping("updated"));
    mappings.push(new Mapping("md5Hash", null, true));
    mappings.push(new Mapping("cacheControl", null, true));
    mappings.push(new Mapping("contentDisposition", null, true));
    mappings.push(new Mapping("contentEncoding", null, true));
    mappings.push(new Mapping("contentLanguage", null, true));
    mappings.push(new Mapping("contentType", null, true));
    mappings.push(new Mapping("metadata", "customMetadata", true));
    mappings_ = mappings;
    return mappings_;
  }
  function addRef(metadata, service) {
    function generateRef() {
      var bucket = metadata["bucket"];
      var path = metadata["fullPath"];
      var loc = new Location(bucket, path);
      return service.makeStorageReference(loc);
    }
    Object.defineProperty(metadata, "ref", {get: generateRef});
  }
  function fromResource(service, resource, mappings) {
    var metadata = {};
    metadata["type"] = "file";
    var len = mappings.length;
    for (var i2 = 0; i2 < len; i2++) {
      var mapping = mappings[i2];
      metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
    }
    addRef(metadata, service);
    return metadata;
  }
  function fromResourceString(service, resourceString, mappings) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
      return null;
    }
    var resource = obj;
    return fromResource(service, resource, mappings);
  }
  function downloadUrlFromResourceString(metadata, resourceString) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
      return null;
    }
    if (!isString(obj["downloadTokens"])) {
      return null;
    }
    var tokens = obj["downloadTokens"];
    if (tokens.length === 0) {
      return null;
    }
    var encode2 = encodeURIComponent;
    var tokensList = tokens.split(",");
    var urls = tokensList.map(function(token) {
      var bucket = metadata["bucket"];
      var path = metadata["fullPath"];
      var urlPart = "/b/" + encode2(bucket) + "/o/" + encode2(path);
      var base = makeUrl(urlPart);
      var queryString = makeQueryString({
        alt: "media",
        token
      });
      return base + queryString;
    });
    return urls[0];
  }
  function toResourceString(metadata, mappings) {
    var resource = {};
    var len = mappings.length;
    for (var i2 = 0; i2 < len; i2++) {
      var mapping = mappings[i2];
      if (mapping.writable) {
        resource[mapping.server] = metadata[mapping.local];
      }
    }
    return JSON.stringify(resource);
  }
  var PREFIXES_KEY = "prefixes";
  var ITEMS_KEY = "items";
  function fromBackendResponse(service, bucket, resource) {
    var listResult = {
      prefixes: [],
      items: [],
      nextPageToken: resource["nextPageToken"]
    };
    if (resource[PREFIXES_KEY]) {
      for (var _i2 = 0, _a9 = resource[PREFIXES_KEY]; _i2 < _a9.length; _i2++) {
        var path = _a9[_i2];
        var pathWithoutTrailingSlash = path.replace(/\/$/, "");
        var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
        listResult.prefixes.push(reference);
      }
    }
    if (resource[ITEMS_KEY]) {
      for (var _b = 0, _c2 = resource[ITEMS_KEY]; _b < _c2.length; _b++) {
        var item = _c2[_b];
        var reference = service.makeStorageReference(new Location(bucket, item["name"]));
        listResult.items.push(reference);
      }
    }
    return listResult;
  }
  function fromResponseString(service, bucket, resourceString) {
    var obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
      return null;
    }
    var resource = obj;
    return fromBackendResponse(service, bucket, resource);
  }
  var RequestInfo = function() {
    function RequestInfo2(url, method, handler, timeout) {
      this.url = url;
      this.method = method;
      this.handler = handler;
      this.timeout = timeout;
      this.urlParams = {};
      this.headers = {};
      this.body = null;
      this.errorHandler = null;
      this.progressCallback = null;
      this.successCodes = [200];
      this.additionalRetryCodes = [];
    }
    return RequestInfo2;
  }();
  function handlerCheck(cndn) {
    if (!cndn) {
      throw unknown();
    }
  }
  function metadataHandler(service, mappings) {
    function handler(xhr, text) {
      var metadata = fromResourceString(service, text, mappings);
      handlerCheck(metadata !== null);
      return metadata;
    }
    return handler;
  }
  function listHandler(service, bucket) {
    function handler(xhr, text) {
      var listResult = fromResponseString(service, bucket, text);
      handlerCheck(listResult !== null);
      return listResult;
    }
    return handler;
  }
  function downloadUrlHandler(service, mappings) {
    function handler(xhr, text) {
      var metadata = fromResourceString(service, text, mappings);
      handlerCheck(metadata !== null);
      return downloadUrlFromResourceString(metadata, text);
    }
    return handler;
  }
  function sharedErrorHandler(location2) {
    function errorHandler(xhr, err) {
      var newErr;
      if (xhr.getStatus() === 401) {
        newErr = unauthenticated();
      } else {
        if (xhr.getStatus() === 402) {
          newErr = quotaExceeded(location2.bucket);
        } else {
          if (xhr.getStatus() === 403) {
            newErr = unauthorized(location2.path);
          } else {
            newErr = err;
          }
        }
      }
      newErr.serverResponse = err.serverResponse;
      return newErr;
    }
    return errorHandler;
  }
  function objectErrorHandler(location2) {
    var shared = sharedErrorHandler(location2);
    function errorHandler(xhr, err) {
      var newErr = shared(xhr, err);
      if (xhr.getStatus() === 404) {
        newErr = objectNotFound(location2.path);
      }
      newErr.serverResponse = err.serverResponse;
      return newErr;
    }
    return errorHandler;
  }
  function getMetadata(service, location2, mappings) {
    var urlPart = location2.fullServerUrl();
    var url = makeUrl(urlPart);
    var method = "GET";
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location2);
    return requestInfo;
  }
  function list(service, location2, delimiter, pageToken, maxResults) {
    var urlParams = {};
    if (location2.isRoot) {
      urlParams["prefix"] = "";
    } else {
      urlParams["prefix"] = location2.path + "/";
    }
    if (delimiter && delimiter.length > 0) {
      urlParams["delimiter"] = delimiter;
    }
    if (pageToken) {
      urlParams["pageToken"] = pageToken;
    }
    if (maxResults) {
      urlParams["maxResults"] = maxResults;
    }
    var urlPart = location2.bucketOnlyServerUrl();
    var url = makeUrl(urlPart);
    var method = "GET";
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, listHandler(service, location2.bucket), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.errorHandler = sharedErrorHandler(location2);
    return requestInfo;
  }
  function getDownloadUrl(service, location2, mappings) {
    var urlPart = location2.fullServerUrl();
    var url = makeUrl(urlPart);
    var method = "GET";
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location2);
    return requestInfo;
  }
  function updateMetadata(service, location2, metadata, mappings) {
    var urlPart = location2.fullServerUrl();
    var url = makeUrl(urlPart);
    var method = "PATCH";
    var body = toResourceString(metadata, mappings);
    var headers = {"Content-Type": "application/json; charset=utf-8"};
    var timeout = service.maxOperationRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location2);
    return requestInfo;
  }
  function deleteObject(service, location2) {
    var urlPart = location2.fullServerUrl();
    var url = makeUrl(urlPart);
    var method = "DELETE";
    var timeout = service.maxOperationRetryTime;
    function handler(_xhr, _text) {
    }
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.successCodes = [200, 204];
    requestInfo.errorHandler = objectErrorHandler(location2);
    return requestInfo;
  }
  function determineContentType_(metadata, blob) {
    return metadata && metadata["contentType"] || blob && blob.type() || "application/octet-stream";
  }
  function metadataForUpload_(location2, blob, metadata) {
    var metadataClone = Object.assign({}, metadata);
    metadataClone["fullPath"] = location2.path;
    metadataClone["size"] = blob.size();
    if (!metadataClone["contentType"]) {
      metadataClone["contentType"] = determineContentType_(null, blob);
    }
    return metadataClone;
  }
  function multipartUpload(service, location2, mappings, blob, metadata) {
    var urlPart = location2.bucketOnlyServerUrl();
    var headers = {
      "X-Goog-Upload-Protocol": "multipart"
    };
    function genBoundary() {
      var str = "";
      for (var i2 = 0; i2 < 2; i2++) {
        str = str + Math.random().toString().slice(2);
      }
      return str;
    }
    var boundary = genBoundary();
    headers["Content-Type"] = "multipart/related; boundary=" + boundary;
    var metadata_ = metadataForUpload_(location2, blob, metadata);
    var metadataString = toResourceString(metadata_, mappings);
    var preBlobPart = "--" + boundary + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + metadataString + "\r\n--" + boundary + "\r\nContent-Type: " + metadata_["contentType"] + "\r\n\r\n";
    var postBlobPart = "\r\n--" + boundary + "--";
    var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) {
      throw cannotSliceBlob();
    }
    var urlParams = {name: metadata_["fullPath"]};
    var url = makeUrl(urlPart);
    var method = "POST";
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location2);
    return requestInfo;
  }
  var ResumableUploadStatus = function() {
    function ResumableUploadStatus2(current, total, finalized, metadata) {
      this.current = current;
      this.total = total;
      this.finalized = !!finalized;
      this.metadata = metadata || null;
    }
    return ResumableUploadStatus2;
  }();
  function checkResumeHeader_(xhr, allowed) {
    var status = null;
    try {
      status = xhr.getResponseHeader("X-Goog-Upload-Status");
    } catch (e) {
      handlerCheck(false);
    }
    var allowedStatus = allowed || ["active"];
    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
    return status;
  }
  function createResumableUpload(service, location2, mappings, blob, metadata) {
    var urlPart = location2.bucketOnlyServerUrl();
    var metadataForUpload = metadataForUpload_(location2, blob, metadata);
    var urlParams = {name: metadataForUpload["fullPath"]};
    var url = makeUrl(urlPart);
    var method = "POST";
    var headers = {
      "X-Goog-Upload-Protocol": "resumable",
      "X-Goog-Upload-Command": "start",
      "X-Goog-Upload-Header-Content-Length": blob.size(),
      "X-Goog-Upload-Header-Content-Type": metadataForUpload["contentType"],
      "Content-Type": "application/json; charset=utf-8"
    };
    var body = toResourceString(metadataForUpload, mappings);
    var timeout = service.maxUploadRetryTime;
    function handler(xhr) {
      checkResumeHeader_(xhr);
      var url2;
      try {
        url2 = xhr.getResponseHeader("X-Goog-Upload-URL");
      } catch (e) {
        handlerCheck(false);
      }
      handlerCheck(isString(url2));
      return url2;
    }
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location2);
    return requestInfo;
  }
  function getResumableUploadStatus(service, location2, url, blob) {
    var headers = {"X-Goog-Upload-Command": "query"};
    function handler(xhr) {
      var status = checkResumeHeader_(xhr, ["active", "final"]);
      var sizeString = null;
      try {
        sizeString = xhr.getResponseHeader("X-Goog-Upload-Size-Received");
      } catch (e) {
        handlerCheck(false);
      }
      if (!sizeString) {
        handlerCheck(false);
      }
      var size = Number(sizeString);
      handlerCheck(!isNaN(size));
      return new ResumableUploadStatus(size, blob.size(), status === "final");
    }
    var method = "POST";
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location2);
    return requestInfo;
  }
  var resumableUploadChunkSize = 256 * 1024;
  function continueResumableUpload(location2, service, url, blob, chunkSize, mappings, status, progressCallback) {
    var status_ = new ResumableUploadStatus(0, 0);
    if (status) {
      status_.current = status.current;
      status_.total = status.total;
    } else {
      status_.current = 0;
      status_.total = blob.size();
    }
    if (blob.size() !== status_.total) {
      throw serverFileWrongSize();
    }
    var bytesLeft = status_.total - status_.current;
    var bytesToUpload = bytesLeft;
    if (chunkSize > 0) {
      bytesToUpload = Math.min(bytesToUpload, chunkSize);
    }
    var startByte = status_.current;
    var endByte = startByte + bytesToUpload;
    var uploadCommand = bytesToUpload === bytesLeft ? "upload, finalize" : "upload";
    var headers = {
      "X-Goog-Upload-Command": uploadCommand,
      "X-Goog-Upload-Offset": status_.current
    };
    var body = blob.slice(startByte, endByte);
    if (body === null) {
      throw cannotSliceBlob();
    }
    function handler(xhr, text) {
      var uploadStatus = checkResumeHeader_(xhr, ["active", "final"]);
      var newCurrent = status_.current + bytesToUpload;
      var size = blob.size();
      var metadata;
      if (uploadStatus === "final") {
        metadata = metadataHandler(service, mappings)(xhr, text);
      } else {
        metadata = null;
      }
      return new ResumableUploadStatus(newCurrent, size, uploadStatus === "final", metadata);
    }
    var method = "POST";
    var timeout = service.maxUploadRetryTime;
    var requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location2);
    return requestInfo;
  }
  var Observer = function() {
    function Observer2(nextOrObserver, error, complete) {
      var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
      if (asFunctions) {
        this.next = nextOrObserver;
        this.error = error;
        this.complete = complete;
      } else {
        var observer = nextOrObserver;
        this.next = observer.next;
        this.error = observer.error;
        this.complete = observer.complete;
      }
    }
    return Observer2;
  }();
  var UploadTaskSnapshot = function() {
    function UploadTaskSnapshot2(bytesTransferred, totalBytes, state, metadata, task, ref2) {
      this.bytesTransferred = bytesTransferred;
      this.totalBytes = totalBytes;
      this.state = state;
      this.metadata = metadata;
      this.task = task;
      this.ref = ref2;
    }
    return UploadTaskSnapshot2;
  }();
  function async(f) {
    return function() {
      var argsToForward = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        argsToForward[_i2] = arguments[_i2];
      }
      Promise.resolve().then(function() {
        return f.apply(void 0, argsToForward);
      });
    };
  }
  var UploadTask = function() {
    function UploadTask2(ref2, blob, metadata) {
      var _this = this;
      if (metadata === void 0) {
        metadata = null;
      }
      this._transferred = 0;
      this._needToFetchStatus = false;
      this._needToFetchMetadata = false;
      this._observers = [];
      this._error = void 0;
      this._uploadUrl = void 0;
      this._request = void 0;
      this._chunkMultiplier = 1;
      this._resolve = void 0;
      this._reject = void 0;
      this._ref = ref2;
      this._blob = blob;
      this._metadata = metadata;
      this._mappings = getMappings();
      this._resumable = this._shouldDoResumable(this._blob);
      this._state = InternalTaskState.RUNNING;
      this._errorHandler = function(error) {
        _this._request = void 0;
        _this._chunkMultiplier = 1;
        if (error.codeEquals(Code.CANCELED)) {
          _this._needToFetchStatus = true;
          _this.completeTransitions_();
        } else {
          _this._error = error;
          _this._transition(InternalTaskState.ERROR);
        }
      };
      this._metadataErrorHandler = function(error) {
        _this._request = void 0;
        if (error.codeEquals(Code.CANCELED)) {
          _this.completeTransitions_();
        } else {
          _this._error = error;
          _this._transition(InternalTaskState.ERROR);
        }
      };
      this._promise = new Promise(function(resolve, reject) {
        _this._resolve = resolve;
        _this._reject = reject;
        _this._start();
      });
      this._promise.then(null, function() {
      });
    }
    UploadTask2.prototype._makeProgressCallback = function() {
      var _this = this;
      var sizeBefore = this._transferred;
      return function(loaded) {
        return _this._updateProgress(sizeBefore + loaded);
      };
    };
    UploadTask2.prototype._shouldDoResumable = function(blob) {
      return blob.size() > 256 * 1024;
    };
    UploadTask2.prototype._start = function() {
      if (this._state !== InternalTaskState.RUNNING) {
        return;
      }
      if (this._request !== void 0) {
        return;
      }
      if (this._resumable) {
        if (this._uploadUrl === void 0) {
          this._createResumable();
        } else {
          if (this._needToFetchStatus) {
            this._fetchStatus();
          } else {
            if (this._needToFetchMetadata) {
              this._fetchMetadata();
            } else {
              this._continueUpload();
            }
          }
        }
      } else {
        this._oneShotUpload();
      }
    };
    UploadTask2.prototype._resolveToken = function(callback) {
      var _this = this;
      this._ref.storage.getAuthToken().then(function(authToken) {
        switch (_this._state) {
          case InternalTaskState.RUNNING:
            callback(authToken);
            break;
          case InternalTaskState.CANCELING:
            _this._transition(InternalTaskState.CANCELED);
            break;
          case InternalTaskState.PAUSING:
            _this._transition(InternalTaskState.PAUSED);
            break;
        }
      });
    };
    UploadTask2.prototype._createResumable = function() {
      var _this = this;
      this._resolveToken(function(authToken) {
        var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
        var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
        _this._request = createRequest;
        createRequest.getPromise().then(function(url) {
          _this._request = void 0;
          _this._uploadUrl = url;
          _this._needToFetchStatus = false;
          _this.completeTransitions_();
        }, _this._errorHandler);
      });
    };
    UploadTask2.prototype._fetchStatus = function() {
      var _this = this;
      var url = this._uploadUrl;
      this._resolveToken(function(authToken) {
        var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);
        var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
        _this._request = statusRequest;
        statusRequest.getPromise().then(function(status) {
          status = status;
          _this._request = void 0;
          _this._updateProgress(status.current);
          _this._needToFetchStatus = false;
          if (status.finalized) {
            _this._needToFetchMetadata = true;
          }
          _this.completeTransitions_();
        }, _this._errorHandler);
      });
    };
    UploadTask2.prototype._continueUpload = function() {
      var _this = this;
      var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;
      var status = new ResumableUploadStatus(this._transferred, this._blob.size());
      var url = this._uploadUrl;
      this._resolveToken(function(authToken) {
        var requestInfo;
        try {
          requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
        } catch (e) {
          _this._error = e;
          _this._transition(InternalTaskState.ERROR);
          return;
        }
        var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
        _this._request = uploadRequest;
        uploadRequest.getPromise().then(function(newStatus) {
          _this._increaseMultiplier();
          _this._request = void 0;
          _this._updateProgress(newStatus.current);
          if (newStatus.finalized) {
            _this._metadata = newStatus.metadata;
            _this._transition(InternalTaskState.SUCCESS);
          } else {
            _this.completeTransitions_();
          }
        }, _this._errorHandler);
      });
    };
    UploadTask2.prototype._increaseMultiplier = function() {
      var currentSize = resumableUploadChunkSize * this._chunkMultiplier;
      if (currentSize < 32 * 1024 * 1024) {
        this._chunkMultiplier *= 2;
      }
    };
    UploadTask2.prototype._fetchMetadata = function() {
      var _this = this;
      this._resolveToken(function(authToken) {
        var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);
        var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
        _this._request = metadataRequest;
        metadataRequest.getPromise().then(function(metadata) {
          _this._request = void 0;
          _this._metadata = metadata;
          _this._transition(InternalTaskState.SUCCESS);
        }, _this._metadataErrorHandler);
      });
    };
    UploadTask2.prototype._oneShotUpload = function() {
      var _this = this;
      this._resolveToken(function(authToken) {
        var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
        var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);
        _this._request = multipartRequest;
        multipartRequest.getPromise().then(function(metadata) {
          _this._request = void 0;
          _this._metadata = metadata;
          _this._updateProgress(_this._blob.size());
          _this._transition(InternalTaskState.SUCCESS);
        }, _this._errorHandler);
      });
    };
    UploadTask2.prototype._updateProgress = function(transferred) {
      var old = this._transferred;
      this._transferred = transferred;
      if (this._transferred !== old) {
        this._notifyObservers();
      }
    };
    UploadTask2.prototype._transition = function(state) {
      if (this._state === state) {
        return;
      }
      switch (state) {
        case InternalTaskState.CANCELING:
          this._state = state;
          if (this._request !== void 0) {
            this._request.cancel();
          }
          break;
        case InternalTaskState.PAUSING:
          this._state = state;
          if (this._request !== void 0) {
            this._request.cancel();
          }
          break;
        case InternalTaskState.RUNNING:
          var wasPaused = this._state === InternalTaskState.PAUSED;
          this._state = state;
          if (wasPaused) {
            this._notifyObservers();
            this._start();
          }
          break;
        case InternalTaskState.PAUSED:
          this._state = state;
          this._notifyObservers();
          break;
        case InternalTaskState.CANCELED:
          this._error = canceled();
          this._state = state;
          this._notifyObservers();
          break;
        case InternalTaskState.ERROR:
          this._state = state;
          this._notifyObservers();
          break;
        case InternalTaskState.SUCCESS:
          this._state = state;
          this._notifyObservers();
          break;
      }
    };
    UploadTask2.prototype.completeTransitions_ = function() {
      switch (this._state) {
        case InternalTaskState.PAUSING:
          this._transition(InternalTaskState.PAUSED);
          break;
        case InternalTaskState.CANCELING:
          this._transition(InternalTaskState.CANCELED);
          break;
        case InternalTaskState.RUNNING:
          this._start();
          break;
      }
    };
    Object.defineProperty(UploadTask2.prototype, "snapshot", {
      get: function() {
        var externalState = taskStateFromInternalTaskState(this._state);
        return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);
      },
      enumerable: false,
      configurable: true
    });
    UploadTask2.prototype.on = function(type, nextOrObserver, error, completed) {
      var _this = this;
      var observer = new Observer(nextOrObserver, error, completed);
      this._addObserver(observer);
      return function() {
        _this._removeObserver(observer);
      };
    };
    UploadTask2.prototype.then = function(onFulfilled, onRejected) {
      return this._promise.then(onFulfilled, onRejected);
    };
    UploadTask2.prototype.catch = function(onRejected) {
      return this.then(null, onRejected);
    };
    UploadTask2.prototype._addObserver = function(observer) {
      this._observers.push(observer);
      this._notifyObserver(observer);
    };
    UploadTask2.prototype._removeObserver = function(observer) {
      var i2 = this._observers.indexOf(observer);
      if (i2 !== -1) {
        this._observers.splice(i2, 1);
      }
    };
    UploadTask2.prototype._notifyObservers = function() {
      var _this = this;
      this._finishPromise();
      var observers = this._observers.slice();
      observers.forEach(function(observer) {
        _this._notifyObserver(observer);
      });
    };
    UploadTask2.prototype._finishPromise = function() {
      if (this._resolve !== void 0) {
        var triggered = true;
        switch (taskStateFromInternalTaskState(this._state)) {
          case TaskState.SUCCESS:
            async(this._resolve.bind(null, this.snapshot))();
            break;
          case TaskState.CANCELED:
          case TaskState.ERROR:
            var toCall = this._reject;
            async(toCall.bind(null, this._error))();
            break;
          default:
            triggered = false;
            break;
        }
        if (triggered) {
          this._resolve = void 0;
          this._reject = void 0;
        }
      }
    };
    UploadTask2.prototype._notifyObserver = function(observer) {
      var externalState = taskStateFromInternalTaskState(this._state);
      switch (externalState) {
        case TaskState.RUNNING:
        case TaskState.PAUSED:
          if (observer.next) {
            async(observer.next.bind(observer, this.snapshot))();
          }
          break;
        case TaskState.SUCCESS:
          if (observer.complete) {
            async(observer.complete.bind(observer))();
          }
          break;
        case TaskState.CANCELED:
        case TaskState.ERROR:
          if (observer.error) {
            async(observer.error.bind(observer, this._error))();
          }
          break;
        default:
          if (observer.error) {
            async(observer.error.bind(observer, this._error))();
          }
      }
    };
    UploadTask2.prototype.resume = function() {
      var valid = this._state === InternalTaskState.PAUSED || this._state === InternalTaskState.PAUSING;
      if (valid) {
        this._transition(InternalTaskState.RUNNING);
      }
      return valid;
    };
    UploadTask2.prototype.pause = function() {
      var valid = this._state === InternalTaskState.RUNNING;
      if (valid) {
        this._transition(InternalTaskState.PAUSING);
      }
      return valid;
    };
    UploadTask2.prototype.cancel = function() {
      var valid = this._state === InternalTaskState.RUNNING || this._state === InternalTaskState.PAUSING;
      if (valid) {
        this._transition(InternalTaskState.CANCELING);
      }
      return valid;
    };
    return UploadTask2;
  }();
  var Reference = function() {
    function Reference2(_service, location2) {
      this._service = _service;
      if (location2 instanceof Location) {
        this._location = location2;
      } else {
        this._location = Location.makeFromUrl(location2);
      }
    }
    Reference2.prototype.toString = function() {
      return "gs://" + this._location.bucket + "/" + this._location.path;
    };
    Reference2.prototype.newRef = function(service, location2) {
      return new Reference2(service, location2);
    };
    Object.defineProperty(Reference2.prototype, "root", {
      get: function() {
        var location2 = new Location(this._location.bucket, "");
        return this.newRef(this._service, location2);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "bucket", {
      get: function() {
        return this._location.bucket;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "fullPath", {
      get: function() {
        return this._location.path;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "name", {
      get: function() {
        return lastComponent(this._location.path);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "storage", {
      get: function() {
        return this._service;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "parent", {
      get: function() {
        var newPath = parent(this._location.path);
        if (newPath === null) {
          return null;
        }
        var location2 = new Location(this._location.bucket, newPath);
        return new Reference2(this._service, location2);
      },
      enumerable: false,
      configurable: true
    });
    Reference2.prototype._throwIfRoot = function(name9) {
      if (this._location.path === "") {
        throw invalidRootOperation(name9);
      }
    };
    return Reference2;
  }();
  function uploadBytesResumable(ref2, data, metadata) {
    if (metadata === void 0) {
      metadata = null;
    }
    ref2._throwIfRoot("uploadBytesResumable");
    return new UploadTask(ref2, new FbsBlob(data), metadata);
  }
  function uploadString(ref2, value, format, metadata) {
    if (format === void 0) {
      format = StringFormat.RAW;
    }
    ref2._throwIfRoot("putString");
    var data = dataFromString(format, value);
    var metadataClone = __assign({}, metadata);
    if (metadataClone["contentType"] == null && data.contentType != null) {
      metadataClone["contentType"] = data.contentType;
    }
    return new UploadTask(ref2, new FbsBlob(data.data, true), metadataClone);
  }
  function listAll(ref2) {
    var accumulator = {
      prefixes: [],
      items: []
    };
    return listAllHelper(ref2, accumulator).then(function() {
      return accumulator;
    });
  }
  function listAllHelper(ref2, accumulator, pageToken) {
    return __awaiter(this, void 0, void 0, function() {
      var opt, nextPage;
      var _a9, _b;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            opt = {
              pageToken
            };
            return [4, list$1(ref2, opt)];
          case 1:
            nextPage = _c2.sent();
            (_a9 = accumulator.prefixes).push.apply(_a9, nextPage.prefixes);
            (_b = accumulator.items).push.apply(_b, nextPage.items);
            if (!(nextPage.nextPageToken != null))
              return [3, 3];
            return [4, listAllHelper(ref2, accumulator, nextPage.nextPageToken)];
          case 2:
            _c2.sent();
            _c2.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function list$1(ref2, options) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, op, requestInfo;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (options != null) {
              if (typeof options.maxResults === "number") {
                validateNumber("options.maxResults", 1, 1e3, options.maxResults);
              }
            }
            return [4, ref2.storage.getAuthToken()];
          case 1:
            authToken = _a9.sent();
            op = options || {};
            requestInfo = list(ref2.storage, ref2._location, "/", op.pageToken, op.maxResults);
            return [2, ref2.storage.makeRequest(requestInfo, authToken).getPromise()];
        }
      });
    });
  }
  function getMetadata$1(ref2) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, requestInfo;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            ref2._throwIfRoot("getMetadata");
            return [4, ref2.storage.getAuthToken()];
          case 1:
            authToken = _a9.sent();
            requestInfo = getMetadata(ref2.storage, ref2._location, getMappings());
            return [2, ref2.storage.makeRequest(requestInfo, authToken).getPromise()];
        }
      });
    });
  }
  function updateMetadata$1(ref2, metadata) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, requestInfo;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            ref2._throwIfRoot("updateMetadata");
            return [4, ref2.storage.getAuthToken()];
          case 1:
            authToken = _a9.sent();
            requestInfo = updateMetadata(ref2.storage, ref2._location, metadata, getMappings());
            return [2, ref2.storage.makeRequest(requestInfo, authToken).getPromise()];
        }
      });
    });
  }
  function getDownloadURL(ref2) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, requestInfo;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            ref2._throwIfRoot("getDownloadURL");
            return [4, ref2.storage.getAuthToken()];
          case 1:
            authToken = _a9.sent();
            requestInfo = getDownloadUrl(ref2.storage, ref2._location, getMappings());
            return [2, ref2.storage.makeRequest(requestInfo, authToken).getPromise().then(function(url) {
              if (url === null) {
                throw noDownloadURL();
              }
              return url;
            })];
        }
      });
    });
  }
  function deleteObject$1(ref2) {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, requestInfo;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            ref2._throwIfRoot("deleteObject");
            return [4, ref2.storage.getAuthToken()];
          case 1:
            authToken = _a9.sent();
            requestInfo = deleteObject(ref2.storage, ref2._location);
            return [2, ref2.storage.makeRequest(requestInfo, authToken).getPromise()];
        }
      });
    });
  }
  function getChild(ref2, childPath) {
    var newPath = child(ref2._location.path, childPath);
    var location2 = new Location(ref2._location.bucket, newPath);
    return new Reference(ref2.storage, location2);
  }
  var UploadTaskSnapshotCompat = function() {
    function UploadTaskSnapshotCompat2(_delegate, task, ref2) {
      this._delegate = _delegate;
      this.task = task;
      this.ref = ref2;
    }
    Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "bytesTransferred", {
      get: function() {
        return this._delegate.bytesTransferred;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "metadata", {
      get: function() {
        return this._delegate.metadata;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "state", {
      get: function() {
        return this._delegate.state;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "totalBytes", {
      get: function() {
        return this._delegate.totalBytes;
      },
      enumerable: false,
      configurable: true
    });
    return UploadTaskSnapshotCompat2;
  }();
  var UploadTaskCompat = function() {
    function UploadTaskCompat2(_delegate, _ref) {
      this._delegate = _delegate;
      this._ref = _ref;
      this.cancel = this._delegate.cancel.bind(this._delegate);
      this.catch = this._delegate.catch.bind(this._delegate);
      this.pause = this._delegate.pause.bind(this._delegate);
      this.resume = this._delegate.resume.bind(this._delegate);
      this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
    }
    Object.defineProperty(UploadTaskCompat2.prototype, "snapshot", {
      get: function() {
        return this._snapshot;
      },
      enumerable: false,
      configurable: true
    });
    UploadTaskCompat2.prototype.then = function(onFulfilled, onRejected) {
      var _this = this;
      return this._delegate.then(function(snapshot) {
        if (onFulfilled) {
          return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
        }
      }, onRejected);
    };
    UploadTaskCompat2.prototype.on = function(type, nextOrObserver, error, completed) {
      var _this = this;
      var wrappedNextOrObserver = void 0;
      if (!!nextOrObserver) {
        if (typeof nextOrObserver === "function") {
          wrappedNextOrObserver = function(taskSnapshot) {
            return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
          };
        } else {
          wrappedNextOrObserver = {
            next: !!nextOrObserver.next ? function(taskSnapshot) {
              return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
            } : void 0,
            complete: nextOrObserver.complete || void 0,
            error: nextOrObserver.error || void 0
          };
        }
      }
      return this._delegate.on(type, wrappedNextOrObserver, error || void 0, completed || void 0);
    };
    return UploadTaskCompat2;
  }();
  var ListResultCompat = function() {
    function ListResultCompat2(_delegate, _service) {
      this._delegate = _delegate;
      this._service = _service;
    }
    Object.defineProperty(ListResultCompat2.prototype, "prefixes", {
      get: function() {
        var _this = this;
        return this._delegate.prefixes.map(function(ref2) {
          return new ReferenceCompat(ref2, _this._service);
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ListResultCompat2.prototype, "items", {
      get: function() {
        var _this = this;
        return this._delegate.items.map(function(ref2) {
          return new ReferenceCompat(ref2, _this._service);
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ListResultCompat2.prototype, "nextPageToken", {
      get: function() {
        return this._delegate.nextPageToken || null;
      },
      enumerable: false,
      configurable: true
    });
    return ListResultCompat2;
  }();
  var ReferenceCompat = function() {
    function ReferenceCompat2(_delegate, storage2) {
      this._delegate = _delegate;
      this.storage = storage2;
    }
    Object.defineProperty(ReferenceCompat2.prototype, "name", {
      get: function() {
        return this._delegate.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReferenceCompat2.prototype, "bucket", {
      get: function() {
        return this._delegate.bucket;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReferenceCompat2.prototype, "fullPath", {
      get: function() {
        return this._delegate.fullPath;
      },
      enumerable: false,
      configurable: true
    });
    ReferenceCompat2.prototype.toString = function() {
      return this._delegate.toString();
    };
    ReferenceCompat2.prototype.child = function(childPath) {
      var reference = getChild(this._delegate, childPath);
      return new ReferenceCompat2(reference, this.storage);
    };
    Object.defineProperty(ReferenceCompat2.prototype, "root", {
      get: function() {
        return new ReferenceCompat2(this._delegate.root, this.storage);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReferenceCompat2.prototype, "parent", {
      get: function() {
        var reference = this._delegate.parent;
        if (reference == null) {
          return null;
        }
        return new ReferenceCompat2(reference, this.storage);
      },
      enumerable: false,
      configurable: true
    });
    ReferenceCompat2.prototype.put = function(data, metadata) {
      this._throwIfRoot("put");
      return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
    };
    ReferenceCompat2.prototype.putString = function(value, format, metadata) {
      if (format === void 0) {
        format = StringFormat.RAW;
      }
      this._throwIfRoot("putString");
      return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);
    };
    ReferenceCompat2.prototype.listAll = function() {
      var _this = this;
      return listAll(this._delegate).then(function(r2) {
        return new ListResultCompat(r2, _this.storage);
      });
    };
    ReferenceCompat2.prototype.list = function(options) {
      var _this = this;
      return list$1(this._delegate, options).then(function(r2) {
        return new ListResultCompat(r2, _this.storage);
      });
    };
    ReferenceCompat2.prototype.getMetadata = function() {
      return getMetadata$1(this._delegate);
    };
    ReferenceCompat2.prototype.updateMetadata = function(metadata) {
      return updateMetadata$1(this._delegate, metadata);
    };
    ReferenceCompat2.prototype.getDownloadURL = function() {
      return getDownloadURL(this._delegate);
    };
    ReferenceCompat2.prototype.delete = function() {
      this._throwIfRoot("delete");
      return deleteObject$1(this._delegate);
    };
    ReferenceCompat2.prototype._throwIfRoot = function(name9) {
      if (this._delegate._location.path === "") {
        throw invalidRootOperation(name9);
      }
    };
    return ReferenceCompat2;
  }();
  var FailRequest = function() {
    function FailRequest2(error) {
      this.promise_ = Promise.reject(error);
    }
    FailRequest2.prototype.getPromise = function() {
      return this.promise_;
    };
    FailRequest2.prototype.cancel = function(_appDelete) {
    };
    return FailRequest2;
  }();
  function start(f, callback, timeout) {
    var waitSeconds = 1;
    var timeoutId = null;
    var hitTimeout = false;
    var cancelState = 0;
    function canceled2() {
      return cancelState === 2;
    }
    var triggeredCallback = false;
    function triggerCallback() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      if (!triggeredCallback) {
        triggeredCallback = true;
        callback.apply(null, args);
      }
    }
    function callWithDelay(millis) {
      timeoutId = setTimeout(function() {
        timeoutId = null;
        f(handler, canceled2());
      }, millis);
    }
    function handler(success) {
      var args = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        args[_i2 - 1] = arguments[_i2];
      }
      if (triggeredCallback) {
        return;
      }
      if (success) {
        triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
        return;
      }
      var mustStop = canceled2() || hitTimeout;
      if (mustStop) {
        triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
        return;
      }
      if (waitSeconds < 64) {
        waitSeconds *= 2;
      }
      var waitMillis;
      if (cancelState === 1) {
        cancelState = 2;
        waitMillis = 0;
      } else {
        waitMillis = (waitSeconds + Math.random()) * 1e3;
      }
      callWithDelay(waitMillis);
    }
    var stopped = false;
    function stop2(wasTimeout) {
      if (stopped) {
        return;
      }
      stopped = true;
      if (triggeredCallback) {
        return;
      }
      if (timeoutId !== null) {
        if (!wasTimeout) {
          cancelState = 2;
        }
        clearTimeout(timeoutId);
        callWithDelay(0);
      } else {
        if (!wasTimeout) {
          cancelState = 1;
        }
      }
    }
    callWithDelay(0);
    setTimeout(function() {
      hitTimeout = true;
      stop2(true);
    }, timeout);
    return stop2;
  }
  function stop(id2) {
    id2(false);
  }
  var NetworkRequest = function() {
    function NetworkRequest2(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
      var _this = this;
      this.pendingXhr_ = null;
      this.backoffId_ = null;
      this.canceled_ = false;
      this.appDelete_ = false;
      this.url_ = url;
      this.method_ = method;
      this.headers_ = headers;
      this.body_ = body;
      this.successCodes_ = successCodes.slice();
      this.additionalRetryCodes_ = additionalRetryCodes.slice();
      this.callback_ = callback;
      this.errorCallback_ = errorCallback;
      this.progressCallback_ = progressCallback;
      this.timeout_ = timeout;
      this.pool_ = pool;
      this.promise_ = new Promise(function(resolve, reject) {
        _this.resolve_ = resolve;
        _this.reject_ = reject;
        _this.start_();
      });
    }
    NetworkRequest2.prototype.start_ = function() {
      var self2 = this;
      function doTheRequest(backoffCallback, canceled2) {
        if (canceled2) {
          backoffCallback(false, new RequestEndStatus(false, null, true));
          return;
        }
        var xhr = self2.pool_.createXhrIo();
        self2.pendingXhr_ = xhr;
        function progressListener(progressEvent) {
          var loaded = progressEvent.loaded;
          var total = progressEvent.lengthComputable ? progressEvent.total : -1;
          if (self2.progressCallback_ !== null) {
            self2.progressCallback_(loaded, total);
          }
        }
        if (self2.progressCallback_ !== null) {
          xhr.addUploadProgressListener(progressListener);
        }
        xhr.send(self2.url_, self2.method_, self2.body_, self2.headers_).then(function(xhr2) {
          if (self2.progressCallback_ !== null) {
            xhr2.removeUploadProgressListener(progressListener);
          }
          self2.pendingXhr_ = null;
          xhr2 = xhr2;
          var hitServer = xhr2.getErrorCode() === ErrorCode2.NO_ERROR;
          var status = xhr2.getStatus();
          if (!hitServer || self2.isRetryStatusCode_(status)) {
            var wasCanceled = xhr2.getErrorCode() === ErrorCode2.ABORT;
            backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
            return;
          }
          var successCode = self2.successCodes_.indexOf(status) !== -1;
          backoffCallback(true, new RequestEndStatus(successCode, xhr2));
        });
      }
      function backoffDone(requestWentThrough, status) {
        var resolve = self2.resolve_;
        var reject = self2.reject_;
        var xhr = status.xhr;
        if (status.wasSuccessCode) {
          try {
            var result = self2.callback_(xhr, xhr.getResponseText());
            if (isJustDef(result)) {
              resolve(result);
            } else {
              resolve();
            }
          } catch (e) {
            reject(e);
          }
        } else {
          if (xhr !== null) {
            var err = unknown();
            err.serverResponse = xhr.getResponseText();
            if (self2.errorCallback_) {
              reject(self2.errorCallback_(xhr, err));
            } else {
              reject(err);
            }
          } else {
            if (status.canceled) {
              var err = self2.appDelete_ ? appDeleted() : canceled();
              reject(err);
            } else {
              var err = retryLimitExceeded();
              reject(err);
            }
          }
        }
      }
      if (this.canceled_) {
        backoffDone(false, new RequestEndStatus(false, null, true));
      } else {
        this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
      }
    };
    NetworkRequest2.prototype.getPromise = function() {
      return this.promise_;
    };
    NetworkRequest2.prototype.cancel = function(appDelete) {
      this.canceled_ = true;
      this.appDelete_ = appDelete || false;
      if (this.backoffId_ !== null) {
        stop(this.backoffId_);
      }
      if (this.pendingXhr_ !== null) {
        this.pendingXhr_.abort();
      }
    };
    NetworkRequest2.prototype.isRetryStatusCode_ = function(status) {
      var isFiveHundredCode = status >= 500 && status < 600;
      var extraRetryCodes = [
        408,
        429
      ];
      var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
      var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
      return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
    };
    return NetworkRequest2;
  }();
  var RequestEndStatus = function() {
    function RequestEndStatus2(wasSuccessCode, xhr, canceled2) {
      this.wasSuccessCode = wasSuccessCode;
      this.xhr = xhr;
      this.canceled = !!canceled2;
    }
    return RequestEndStatus2;
  }();
  function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) {
      headers["Authorization"] = "Firebase " + authToken;
    }
  }
  function addVersionHeader_(headers) {
    var version9 = typeof index_esm_default !== "undefined" ? index_esm_default.SDK_VERSION : "AppManager";
    headers["X-Firebase-Storage-Version"] = "webjs/" + version9;
  }
  function addGmpidHeader_(headers, appId) {
    if (appId) {
      headers["X-Firebase-GMPID"] = appId;
    }
  }
  function makeRequest(requestInfo, appId, authToken, pool) {
    var queryPart = makeQueryString(requestInfo.urlParams);
    var url = requestInfo.url + queryPart;
    var headers = Object.assign({}, requestInfo.headers);
    addGmpidHeader_(headers, appId);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
  }
  function isUrl(path) {
    return /^[A-Za-z]+:\/\//.test(path);
  }
  function refFromURL(service, url) {
    return new Reference(service, url);
  }
  function refFromPath(ref2, path) {
    if (ref2 instanceof StorageService) {
      var service = ref2;
      if (service._bucket == null) {
        throw noDefaultBucket();
      }
      var reference = new Reference(service, service._bucket);
      if (path != null) {
        return refFromPath(reference, path);
      } else {
        return reference;
      }
    } else {
      if (path !== void 0) {
        if (path.includes("..")) {
          throw invalidArgument('`path` param cannot contain ".."');
        }
        return getChild(ref2, path);
      } else {
        return ref2;
      }
    }
  }
  function ref(serviceOrRef, pathOrUrl) {
    if (pathOrUrl && isUrl(pathOrUrl)) {
      if (serviceOrRef instanceof StorageService) {
        return refFromURL(serviceOrRef, pathOrUrl);
      } else {
        throw invalidArgument("To use ref(service, url), the first argument must be a Storage instance.");
      }
    } else {
      return refFromPath(serviceOrRef, pathOrUrl);
    }
  }
  function extractBucket(config2) {
    var bucketString = config2 === null || config2 === void 0 ? void 0 : config2[CONFIG_STORAGE_BUCKET_KEY];
    if (bucketString == null) {
      return null;
    }
    return Location.makeFromBucketSpec(bucketString);
  }
  var StorageService = function() {
    function StorageService2(app12, _authProvider, _pool, _url) {
      this.app = app12;
      this._authProvider = _authProvider;
      this._pool = _pool;
      this._url = _url;
      this._bucket = null;
      this._appId = null;
      this._deleted = false;
      this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
      this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
      this._requests = new Set();
      if (_url != null) {
        this._bucket = Location.makeFromBucketSpec(_url);
      } else {
        this._bucket = extractBucket(this.app.options);
      }
    }
    Object.defineProperty(StorageService2.prototype, "maxUploadRetryTime", {
      get: function() {
        return this._maxUploadRetryTime;
      },
      set: function(time) {
        validateNumber("time", 0, Number.POSITIVE_INFINITY, time);
        this._maxUploadRetryTime = time;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StorageService2.prototype, "maxOperationRetryTime", {
      get: function() {
        return this._maxOperationRetryTime;
      },
      set: function(time) {
        validateNumber("time", 0, Number.POSITIVE_INFINITY, time);
        this._maxOperationRetryTime = time;
      },
      enumerable: false,
      configurable: true
    });
    StorageService2.prototype.getAuthToken = function() {
      return __awaiter(this, void 0, void 0, function() {
        var auth2, tokenData;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              auth2 = this._authProvider.getImmediate({optional: true});
              if (!auth2)
                return [3, 2];
              return [4, auth2.getToken()];
            case 1:
              tokenData = _a9.sent();
              if (tokenData !== null) {
                return [2, tokenData.accessToken];
              }
              _a9.label = 2;
            case 2:
              return [2, null];
          }
        });
      });
    };
    StorageService2.prototype._delete = function() {
      this._deleted = true;
      this._requests.forEach(function(request) {
        return request.cancel();
      });
      this._requests.clear();
      return Promise.resolve();
    };
    StorageService2.prototype.makeStorageReference = function(loc) {
      return new Reference(this, loc);
    };
    StorageService2.prototype.makeRequest = function(requestInfo, authToken) {
      var _this = this;
      if (!this._deleted) {
        var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);
        this._requests.add(request_1);
        request_1.getPromise().then(function() {
          return _this._requests.delete(request_1);
        }, function() {
          return _this._requests.delete(request_1);
        });
        return request_1;
      } else {
        return new FailRequest(appDeleted());
      }
    };
    return StorageService2;
  }();
  var StorageServiceCompat = function() {
    function StorageServiceCompat2(app12, _delegate) {
      var _this = this;
      this.app = app12;
      this._delegate = _delegate;
      this.INTERNAL = {
        delete: function() {
          return _this._delegate._delete();
        }
      };
    }
    Object.defineProperty(StorageServiceCompat2.prototype, "maxOperationRetryTime", {
      get: function() {
        return this._delegate.maxOperationRetryTime;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StorageServiceCompat2.prototype, "maxUploadRetryTime", {
      get: function() {
        return this._delegate.maxUploadRetryTime;
      },
      enumerable: false,
      configurable: true
    });
    StorageServiceCompat2.prototype.ref = function(path) {
      if (isUrl(path)) {
        throw invalidArgument("ref() expected a child path but got a URL, use refFromURL instead.");
      }
      return new ReferenceCompat(ref(this._delegate, path), this);
    };
    StorageServiceCompat2.prototype.refFromURL = function(url) {
      if (!isUrl(url)) {
        throw invalidArgument("refFromURL() expected a full URL but got a child path, use ref() instead.");
      }
      try {
        Location.makeFromUrl(url);
      } catch (e) {
        throw invalidArgument("refFromUrl() expected a valid full URL but got an invalid one.");
      }
      return new ReferenceCompat(ref(this._delegate, url), this);
    };
    StorageServiceCompat2.prototype.setMaxUploadRetryTime = function(time) {
      this._delegate.maxUploadRetryTime = time;
    };
    StorageServiceCompat2.prototype.setMaxOperationRetryTime = function(time) {
      this._delegate.maxOperationRetryTime = time;
    };
    return StorageServiceCompat2;
  }();
  var name7 = "@firebase/storage";
  var version7 = "0.4.2";
  var STORAGE_TYPE = "storage";
  function factory2(container, url) {
    var app12 = container.getProvider("app").getImmediate();
    var authProvider = container.getProvider("auth-internal");
    var storageServiceCompat = new StorageServiceCompat(app12, new StorageService(app12, authProvider, new XhrIoPool(), url));
    return storageServiceCompat;
  }
  function registerStorage(instance) {
    var namespaceExports = {
      TaskState,
      TaskEvent,
      StringFormat,
      Storage: StorageService,
      Reference: ReferenceCompat
    };
    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory2, "PUBLIC").setServiceProps(namespaceExports).setMultipleInstances(true));
    instance.registerVersion(name7, version7);
  }
  registerStorage(index_esm_default);

  // node_modules/@firebase/performance/dist/index.esm.js
  var name5 = "@firebase/performance";
  var version5 = "0.4.5";
  var SDK_VERSION = version5;
  var TRACE_START_MARK_PREFIX = "FB-PERF-TRACE-START";
  var TRACE_STOP_MARK_PREFIX = "FB-PERF-TRACE-STOP";
  var TRACE_MEASURE_PREFIX = "FB-PERF-TRACE-MEASURE";
  var OOB_TRACE_PAGE_LOAD_PREFIX = "_wt_";
  var FIRST_PAINT_COUNTER_NAME = "_fp";
  var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = "_fcp";
  var FIRST_INPUT_DELAY_COUNTER_NAME = "_fid";
  var CONFIG_LOCAL_STORAGE_KEY = "@firebase/performance/config";
  var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = "@firebase/performance/configexpire";
  var SERVICE2 = "performance";
  var SERVICE_NAME2 = "Performance";
  var _a7;
  var ERROR_DESCRIPTION_MAP2 = (_a7 = {}, _a7["trace started"] = "Trace {$traceName} was started before.", _a7["trace stopped"] = "Trace {$traceName} is not running.", _a7["nonpositive trace startTime"] = "Trace {$traceName} startTime should be positive.", _a7["nonpositive trace duration"] = "Trace {$traceName} duration should be positive.", _a7["no window"] = "Window is not available.", _a7["no app id"] = "App id is not available.", _a7["no project id"] = "Project id is not available.", _a7["no api key"] = "Api key is not available.", _a7["invalid cc log"] = "Attempted to queue invalid cc event", _a7["FB not default"] = "Performance can only start when Firebase app instance is the default one.", _a7["RC response not ok"] = "RC response is not ok", _a7["invalid attribute name"] = "Attribute name {$attributeName} is invalid.", _a7["invalid attribute value"] = "Attribute value {$attributeValue} is invalid.", _a7["invalid custom metric name"] = "Custom metric name {$customMetricName} is invalid", _a7["invalid String merger input"] = "Input for String merger is invalid, contact support team to resolve.", _a7);
  var ERROR_FACTORY5 = new ErrorFactory(SERVICE2, SERVICE_NAME2, ERROR_DESCRIPTION_MAP2);
  var consoleLogger = new Logger(SERVICE_NAME2);
  consoleLogger.logLevel = LogLevel.INFO;
  var apiInstance;
  var windowInstance;
  var Api = function() {
    function Api2(window2) {
      this.window = window2;
      if (!window2) {
        throw ERROR_FACTORY5.create("no window");
      }
      this.performance = window2.performance;
      this.PerformanceObserver = window2.PerformanceObserver;
      this.windowLocation = window2.location;
      this.navigator = window2.navigator;
      this.document = window2.document;
      if (this.navigator && this.navigator.cookieEnabled) {
        this.localStorage = window2.localStorage;
      }
      if (window2.perfMetrics && window2.perfMetrics.onFirstInputDelay) {
        this.onFirstInputDelay = window2.perfMetrics.onFirstInputDelay;
      }
    }
    Api2.prototype.getUrl = function() {
      return this.windowLocation.href.split("?")[0];
    };
    Api2.prototype.mark = function(name9) {
      if (!this.performance || !this.performance.mark) {
        return;
      }
      this.performance.mark(name9);
    };
    Api2.prototype.measure = function(measureName, mark1, mark2) {
      if (!this.performance || !this.performance.measure) {
        return;
      }
      this.performance.measure(measureName, mark1, mark2);
    };
    Api2.prototype.getEntriesByType = function(type) {
      if (!this.performance || !this.performance.getEntriesByType) {
        return [];
      }
      return this.performance.getEntriesByType(type);
    };
    Api2.prototype.getEntriesByName = function(name9) {
      if (!this.performance || !this.performance.getEntriesByName) {
        return [];
      }
      return this.performance.getEntriesByName(name9);
    };
    Api2.prototype.getTimeOrigin = function() {
      return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
    };
    Api2.prototype.requiredApisAvailable = function() {
      if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {
        consoleLogger.info("Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.");
        return false;
      }
      if (!isIndexedDBAvailable()) {
        consoleLogger.info("IndexedDB is not supported by current browswer");
        return false;
      }
      return true;
    };
    Api2.prototype.setupObserver = function(entryType, callback) {
      if (!this.PerformanceObserver) {
        return;
      }
      var observer = new this.PerformanceObserver(function(list2) {
        for (var _i2 = 0, _a9 = list2.getEntries(); _i2 < _a9.length; _i2++) {
          var entry = _a9[_i2];
          callback(entry);
        }
      });
      observer.observe({entryTypes: [entryType]});
    };
    Api2.getInstance = function() {
      if (apiInstance === void 0) {
        apiInstance = new Api2(windowInstance);
      }
      return apiInstance;
    };
    return Api2;
  }();
  function setupApi(window2) {
    windowInstance = window2;
  }
  function mergeStrings(part1, part2) {
    var sizeDiff = part1.length - part2.length;
    if (sizeDiff < 0 || sizeDiff > 1) {
      throw ERROR_FACTORY5.create("invalid String merger input");
    }
    var resultArray = [];
    for (var i2 = 0; i2 < part1.length; i2++) {
      resultArray.push(part1.charAt(i2));
      if (part2.length > i2) {
        resultArray.push(part2.charAt(i2));
      }
    }
    return resultArray.join("");
  }
  var settingsServiceInstance;
  var SettingsService = function() {
    function SettingsService2() {
      this.instrumentationEnabled = true;
      this.dataCollectionEnabled = true;
      this.loggingEnabled = false;
      this.tracesSamplingRate = 1;
      this.networkRequestsSamplingRate = 1;
      this.logEndPointUrl = "https://firebaselogging.googleapis.com/v0cc/log?format=json_proto";
      this.flTransportEndpointUrl = mergeStrings("hts/frbslgigp.ogepscmv/ieo/eaylg", "tp:/ieaeogn-agolai.o/1frlglgc/o");
      this.transportKey = mergeStrings("AzSC8r6ReiGqFMyfvgow", "Iayx0u-XT3vksVM-pIV");
      this.logSource = 462;
      this.logTraceAfterSampling = false;
      this.logNetworkAfterSampling = false;
      this.configTimeToLive = 12;
    }
    SettingsService2.prototype.getAppId = function() {
      var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;
      if (!appId) {
        throw ERROR_FACTORY5.create("no app id");
      }
      return appId;
    };
    SettingsService2.prototype.getProjectId = function() {
      var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;
      if (!projectId) {
        throw ERROR_FACTORY5.create("no project id");
      }
      return projectId;
    };
    SettingsService2.prototype.getApiKey = function() {
      var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;
      if (!apiKey) {
        throw ERROR_FACTORY5.create("no api key");
      }
      return apiKey;
    };
    SettingsService2.prototype.getFlTransportFullUrl = function() {
      return this.flTransportEndpointUrl.concat("?key=", this.transportKey);
    };
    SettingsService2.getInstance = function() {
      if (settingsServiceInstance === void 0) {
        settingsServiceInstance = new SettingsService2();
      }
      return settingsServiceInstance;
    };
    return SettingsService2;
  }();
  var iid;
  function getIidPromise() {
    var iidPromise = SettingsService.getInstance().installationsService.getId();
    iidPromise.then(function(iidVal) {
      iid = iidVal;
    });
    return iidPromise;
  }
  function getIid() {
    return iid;
  }
  function getAuthTokenPromise() {
    var authTokenPromise = SettingsService.getInstance().installationsService.getToken();
    authTokenPromise.then(function(authTokenVal) {
    });
    return authTokenPromise;
  }
  var VisibilityState;
  (function(VisibilityState2) {
    VisibilityState2[VisibilityState2["UNKNOWN"] = 0] = "UNKNOWN";
    VisibilityState2[VisibilityState2["VISIBLE"] = 1] = "VISIBLE";
    VisibilityState2[VisibilityState2["HIDDEN"] = 2] = "HIDDEN";
  })(VisibilityState || (VisibilityState = {}));
  var RESERVED_ATTRIBUTE_PREFIXES = ["firebase_", "google_", "ga_"];
  var ATTRIBUTE_FORMAT_REGEX = new RegExp("^[a-zA-Z]\\w*$");
  var MAX_ATTRIBUTE_NAME_LENGTH = 40;
  var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
  function getServiceWorkerStatus() {
    var navigator2 = Api.getInstance().navigator;
    if ("serviceWorker" in navigator2) {
      if (navigator2.serviceWorker.controller) {
        return 2;
      } else {
        return 3;
      }
    } else {
      return 1;
    }
  }
  function getVisibilityState() {
    var document2 = Api.getInstance().document;
    var visibilityState = document2.visibilityState;
    switch (visibilityState) {
      case "visible":
        return VisibilityState.VISIBLE;
      case "hidden":
        return VisibilityState.HIDDEN;
      default:
        return VisibilityState.UNKNOWN;
    }
  }
  function getEffectiveConnectionType() {
    var navigator2 = Api.getInstance().navigator;
    var navigatorConnection = navigator2.connection;
    var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
    switch (effectiveType) {
      case "slow-2g":
        return 1;
      case "2g":
        return 2;
      case "3g":
        return 3;
      case "4g":
        return 4;
      default:
        return 0;
    }
  }
  function isValidCustomAttributeName(name9) {
    if (name9.length === 0 || name9.length > MAX_ATTRIBUTE_NAME_LENGTH) {
      return false;
    }
    var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function(prefix2) {
      return name9.startsWith(prefix2);
    });
    return !matchesReservedPrefix && !!name9.match(ATTRIBUTE_FORMAT_REGEX);
  }
  function isValidCustomAttributeValue(value) {
    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
  }
  var REMOTE_CONFIG_SDK_VERSION = "0.0.1";
  var DEFAULT_CONFIGS = {
    loggingEnabled: true
  };
  var FIS_AUTH_PREFIX = "FIREBASE_INSTALLATIONS_AUTH";
  function getConfig(iid2) {
    var config2 = getStoredConfig();
    if (config2) {
      processConfig(config2);
      return Promise.resolve();
    }
    return getRemoteConfig(iid2).then(processConfig).then(function(config3) {
      return storeConfig(config3);
    }, function() {
    });
  }
  function getStoredConfig() {
    var localStorage = Api.getInstance().localStorage;
    if (!localStorage) {
      return;
    }
    var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
    if (!expiryString || !configValid(expiryString)) {
      return;
    }
    var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
    if (!configStringified) {
      return;
    }
    try {
      var configResponse = JSON.parse(configStringified);
      return configResponse;
    } catch (_a9) {
      return;
    }
  }
  function storeConfig(config2) {
    var localStorage = Api.getInstance().localStorage;
    if (!config2 || !localStorage) {
      return;
    }
    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config2));
    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1e3));
  }
  var COULD_NOT_GET_CONFIG_MSG = "Could not fetch config, will use default configs";
  function getRemoteConfig(iid2) {
    return getAuthTokenPromise().then(function(authToken) {
      var projectId = SettingsService.getInstance().getProjectId();
      var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + SettingsService.getInstance().getApiKey();
      var request = new Request(configEndPoint, {
        method: "POST",
        headers: {Authorization: FIS_AUTH_PREFIX + " " + authToken},
        body: JSON.stringify({
          app_instance_id: iid2,
          app_instance_id_token: authToken,
          app_id: SettingsService.getInstance().getAppId(),
          app_version: SDK_VERSION,
          sdk_version: REMOTE_CONFIG_SDK_VERSION
        })
      });
      return fetch(request).then(function(response) {
        if (response.ok) {
          return response.json();
        }
        throw ERROR_FACTORY5.create("RC response not ok");
      });
    }).catch(function() {
      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
      return void 0;
    });
  }
  function processConfig(config2) {
    if (!config2) {
      return config2;
    }
    var settingsServiceInstance2 = SettingsService.getInstance();
    var entries = config2.entries || {};
    if (entries.fpr_enabled !== void 0) {
      settingsServiceInstance2.loggingEnabled = String(entries.fpr_enabled) === "true";
    } else {
      settingsServiceInstance2.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
    }
    if (entries.fpr_log_source) {
      settingsServiceInstance2.logSource = Number(entries.fpr_log_source);
    }
    if (entries.fpr_log_endpoint_url) {
      settingsServiceInstance2.logEndPointUrl = entries.fpr_log_endpoint_url;
    }
    if (entries.fpr_log_transport_key) {
      settingsServiceInstance2.transportKey = entries.fpr_log_transport_key;
    }
    if (entries.fpr_vc_network_request_sampling_rate !== void 0) {
      settingsServiceInstance2.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
    }
    if (entries.fpr_vc_trace_sampling_rate !== void 0) {
      settingsServiceInstance2.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
    }
    settingsServiceInstance2.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.tracesSamplingRate);
    settingsServiceInstance2.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.networkRequestsSamplingRate);
    return config2;
  }
  function configValid(expiry) {
    return Number(expiry) > Date.now();
  }
  function shouldLogAfterSampling(samplingRate) {
    return Math.random() <= samplingRate;
  }
  var initializationStatus = 1;
  var initializationPromise;
  function getInitializationPromise() {
    initializationStatus = 2;
    initializationPromise = initializationPromise || initializePerf();
    return initializationPromise;
  }
  function isPerfInitialized() {
    return initializationStatus === 3;
  }
  function initializePerf() {
    return getDocumentReadyComplete().then(function() {
      return getIidPromise();
    }).then(function(iid2) {
      return getConfig(iid2);
    }).then(function() {
      return changeInitializationStatus();
    }, function() {
      return changeInitializationStatus();
    });
  }
  function getDocumentReadyComplete() {
    var document2 = Api.getInstance().document;
    return new Promise(function(resolve) {
      if (document2 && document2.readyState !== "complete") {
        var handler_1 = function() {
          if (document2.readyState === "complete") {
            document2.removeEventListener("readystatechange", handler_1);
            resolve();
          }
        };
        document2.addEventListener("readystatechange", handler_1);
      } else {
        resolve();
      }
    });
  }
  function changeInitializationStatus() {
    initializationStatus = 3;
  }
  var DEFAULT_SEND_INTERVAL_MS = 10 * 1e3;
  var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1e3;
  var DEFAULT_REMAINING_TRIES = 3;
  var MAX_EVENT_COUNT_PER_REQUEST = 1e3;
  var remainingTries = DEFAULT_REMAINING_TRIES;
  var queue = [];
  var isTransportSetup = false;
  function setupTransportService() {
    if (!isTransportSetup) {
      processQueue(INITIAL_SEND_TIME_DELAY_MS);
      isTransportSetup = true;
    }
  }
  function processQueue(timeOffset) {
    setTimeout(function() {
      if (remainingTries === 0) {
        return;
      }
      if (!queue.length) {
        return processQueue(DEFAULT_SEND_INTERVAL_MS);
      }
      dispatchQueueEvents();
    }, timeOffset);
  }
  function dispatchQueueEvents() {
    var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
    var log_event = staged.map(function(evt) {
      return {
        source_extension_json_proto3: evt.message,
        event_time_ms: String(evt.eventTime)
      };
    });
    var data = {
      request_time_ms: String(Date.now()),
      client_info: {
        client_type: 1,
        js_client_info: {}
      },
      log_source: SettingsService.getInstance().logSource,
      log_event
    };
    sendEventsToFl(data, staged).catch(function() {
      queue = __spreadArrays(staged, queue);
      remainingTries--;
      consoleLogger.info("Tries left: " + remainingTries + ".");
      processQueue(DEFAULT_SEND_INTERVAL_MS);
    });
  }
  function sendEventsToFl(data, staged) {
    return postToFlEndpoint(data).then(function(res) {
      if (!res.ok) {
        consoleLogger.info("Call to Firebase backend failed.");
      }
      return res.json();
    }).then(function(res) {
      var transportWait = Number(res.nextRequestWaitMillis);
      var requestOffset = DEFAULT_SEND_INTERVAL_MS;
      if (!isNaN(transportWait)) {
        requestOffset = Math.max(transportWait, requestOffset);
      }
      var logResponseDetails = res.logResponseDetails;
      if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === "RETRY_REQUEST_LATER") {
        queue = __spreadArrays(staged, queue);
        consoleLogger.info("Retry transport request later.");
      }
      remainingTries = DEFAULT_REMAINING_TRIES;
      processQueue(requestOffset);
    });
  }
  function postToFlEndpoint(data) {
    var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
    return fetch(flTransportFullUrl, {
      method: "POST",
      body: JSON.stringify(data)
    });
  }
  function addToQueue(evt) {
    if (!evt.eventTime || !evt.message) {
      throw ERROR_FACTORY5.create("invalid cc log");
    }
    queue = __spreadArrays(queue, [evt]);
  }
  function transportHandler(serializer2) {
    return function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      var message = serializer2.apply(void 0, args);
      addToQueue({
        message,
        eventTime: Date.now()
      });
    };
  }
  var logger9;
  function sendLog(resource, resourceType) {
    if (!logger9) {
      logger9 = transportHandler(serializer);
    }
    logger9(resource, resourceType);
  }
  function logTrace(trace) {
    var settingsService = SettingsService.getInstance();
    if (!settingsService.instrumentationEnabled && trace.isAuto) {
      return;
    }
    if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
      return;
    }
    if (!Api.getInstance().requiredApisAvailable()) {
      return;
    }
    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
      return;
    }
    if (isPerfInitialized()) {
      sendTraceLog(trace);
    } else {
      getInitializationPromise().then(function() {
        return sendTraceLog(trace);
      }, function() {
        return sendTraceLog(trace);
      });
    }
  }
  function sendTraceLog(trace) {
    if (!getIid()) {
      return;
    }
    var settingsService = SettingsService.getInstance();
    if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {
      return;
    }
    setTimeout(function() {
      return sendLog(trace, 1);
    }, 0);
  }
  function logNetworkRequest(networkRequest) {
    var settingsService = SettingsService.getInstance();
    if (!settingsService.instrumentationEnabled) {
      return;
    }
    var networkRequestUrl = networkRequest.url;
    var logEndpointUrl = settingsService.logEndPointUrl.split("?")[0];
    var flEndpointUrl = settingsService.flTransportEndpointUrl.split("?")[0];
    if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {
      return;
    }
    if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {
      return;
    }
    setTimeout(function() {
      return sendLog(networkRequest, 0);
    }, 0);
  }
  function serializer(resource, resourceType) {
    if (resourceType === 0) {
      return serializeNetworkRequest(resource);
    }
    return serializeTrace(resource);
  }
  function serializeNetworkRequest(networkRequest) {
    var networkRequestMetric = {
      url: networkRequest.url,
      http_method: networkRequest.httpMethod || 0,
      http_response_code: 200,
      response_payload_bytes: networkRequest.responsePayloadBytes,
      client_start_time_us: networkRequest.startTimeUs,
      time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
      time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
    };
    var perfMetric = {
      application_info: getApplicationInfo(),
      network_request_metric: networkRequestMetric
    };
    return JSON.stringify(perfMetric);
  }
  function serializeTrace(trace) {
    var traceMetric = {
      name: trace.name,
      is_auto: trace.isAuto,
      client_start_time_us: trace.startTimeUs,
      duration_us: trace.durationUs
    };
    if (Object.keys(trace.counters).length !== 0) {
      traceMetric.counters = trace.counters;
    }
    var customAttributes = trace.getAttributes();
    if (Object.keys(customAttributes).length !== 0) {
      traceMetric.custom_attributes = customAttributes;
    }
    var perfMetric = {
      application_info: getApplicationInfo(),
      trace_metric: traceMetric
    };
    return JSON.stringify(perfMetric);
  }
  function getApplicationInfo() {
    return {
      google_app_id: SettingsService.getInstance().getAppId(),
      app_instance_id: getIid(),
      web_app_info: {
        sdk_version: SDK_VERSION,
        page_url: Api.getInstance().getUrl(),
        service_worker_status: getServiceWorkerStatus(),
        visibility_state: getVisibilityState(),
        effective_connection_type: getEffectiveConnectionType()
      },
      application_process_state: 0
    };
  }
  var MAX_METRIC_NAME_LENGTH = 100;
  var RESERVED_AUTO_PREFIX = "_";
  var oobMetrics = [
    FIRST_PAINT_COUNTER_NAME,
    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
    FIRST_INPUT_DELAY_COUNTER_NAME
  ];
  function isValidMetricName(name9, traceName) {
    if (name9.length === 0 || name9.length > MAX_METRIC_NAME_LENGTH) {
      return false;
    }
    return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name9) > -1 || !name9.startsWith(RESERVED_AUTO_PREFIX);
  }
  function convertMetricValueToInteger(providedValue) {
    var valueAsInteger = Math.floor(providedValue);
    if (valueAsInteger < providedValue) {
      consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
    }
    return valueAsInteger;
  }
  var Trace = function() {
    function Trace2(name9, isAuto, traceMeasureName) {
      if (isAuto === void 0) {
        isAuto = false;
      }
      this.name = name9;
      this.isAuto = isAuto;
      this.state = 1;
      this.customAttributes = {};
      this.counters = {};
      this.api = Api.getInstance();
      this.randomId = Math.floor(Math.random() * 1e6);
      if (!this.isAuto) {
        this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
        this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
        this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
        if (traceMeasureName) {
          this.calculateTraceMetrics();
        }
      }
    }
    Trace2.prototype.start = function() {
      if (this.state !== 1) {
        throw ERROR_FACTORY5.create("trace started", {
          traceName: this.name
        });
      }
      this.api.mark(this.traceStartMark);
      this.state = 2;
    };
    Trace2.prototype.stop = function() {
      if (this.state !== 2) {
        throw ERROR_FACTORY5.create("trace stopped", {
          traceName: this.name
        });
      }
      this.state = 3;
      this.api.mark(this.traceStopMark);
      this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
      this.calculateTraceMetrics();
      logTrace(this);
    };
    Trace2.prototype.record = function(startTime, duration, options) {
      if (startTime <= 0) {
        throw ERROR_FACTORY5.create("nonpositive trace startTime", {
          traceName: this.name
        });
      }
      if (duration <= 0) {
        throw ERROR_FACTORY5.create("nonpositive trace duration", {
          traceName: this.name
        });
      }
      this.durationUs = Math.floor(duration * 1e3);
      this.startTimeUs = Math.floor(startTime * 1e3);
      if (options && options.attributes) {
        this.customAttributes = __assign({}, options.attributes);
      }
      if (options && options.metrics) {
        for (var _i2 = 0, _a9 = Object.keys(options.metrics); _i2 < _a9.length; _i2++) {
          var metric = _a9[_i2];
          if (!isNaN(Number(options.metrics[metric]))) {
            this.counters[metric] = Number(Math.floor(options.metrics[metric]));
          }
        }
      }
      logTrace(this);
    };
    Trace2.prototype.incrementMetric = function(counter, numAsInteger) {
      if (numAsInteger === void 0) {
        numAsInteger = 1;
      }
      if (this.counters[counter] === void 0) {
        this.putMetric(counter, numAsInteger);
      } else {
        this.putMetric(counter, this.counters[counter] + numAsInteger);
      }
    };
    Trace2.prototype.putMetric = function(counter, numAsInteger) {
      if (isValidMetricName(counter, this.name)) {
        this.counters[counter] = convertMetricValueToInteger(numAsInteger);
      } else {
        throw ERROR_FACTORY5.create("invalid custom metric name", {
          customMetricName: counter
        });
      }
    };
    Trace2.prototype.getMetric = function(counter) {
      return this.counters[counter] || 0;
    };
    Trace2.prototype.putAttribute = function(attr, value) {
      var isValidName = isValidCustomAttributeName(attr);
      var isValidValue = isValidCustomAttributeValue(value);
      if (isValidName && isValidValue) {
        this.customAttributes[attr] = value;
        return;
      }
      if (!isValidName) {
        throw ERROR_FACTORY5.create("invalid attribute name", {
          attributeName: attr
        });
      }
      if (!isValidValue) {
        throw ERROR_FACTORY5.create("invalid attribute value", {
          attributeValue: value
        });
      }
    };
    Trace2.prototype.getAttribute = function(attr) {
      return this.customAttributes[attr];
    };
    Trace2.prototype.removeAttribute = function(attr) {
      if (this.customAttributes[attr] === void 0) {
        return;
      }
      delete this.customAttributes[attr];
    };
    Trace2.prototype.getAttributes = function() {
      return __assign({}, this.customAttributes);
    };
    Trace2.prototype.setStartTime = function(startTime) {
      this.startTimeUs = startTime;
    };
    Trace2.prototype.setDuration = function(duration) {
      this.durationUs = duration;
    };
    Trace2.prototype.calculateTraceMetrics = function() {
      var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
      var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
      if (perfMeasureEntry) {
        this.durationUs = Math.floor(perfMeasureEntry.duration * 1e3);
        this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1e3);
      }
    };
    Trace2.createOobTrace = function(navigationTimings, paintTimings, firstInputDelay) {
      var route = Api.getInstance().getUrl();
      if (!route) {
        return;
      }
      var trace = new Trace2(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
      var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1e3);
      trace.setStartTime(timeOriginUs);
      if (navigationTimings && navigationTimings[0]) {
        trace.setDuration(Math.floor(navigationTimings[0].duration * 1e3));
        trace.putMetric("domInteractive", Math.floor(navigationTimings[0].domInteractive * 1e3));
        trace.putMetric("domContentLoadedEventEnd", Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1e3));
        trace.putMetric("loadEventEnd", Math.floor(navigationTimings[0].loadEventEnd * 1e3));
      }
      var FIRST_PAINT = "first-paint";
      var FIRST_CONTENTFUL_PAINT = "first-contentful-paint";
      if (paintTimings) {
        var firstPaint = paintTimings.find(function(paintObject) {
          return paintObject.name === FIRST_PAINT;
        });
        if (firstPaint && firstPaint.startTime) {
          trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1e3));
        }
        var firstContentfulPaint = paintTimings.find(function(paintObject) {
          return paintObject.name === FIRST_CONTENTFUL_PAINT;
        });
        if (firstContentfulPaint && firstContentfulPaint.startTime) {
          trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1e3));
        }
        if (firstInputDelay) {
          trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1e3));
        }
      }
      logTrace(trace);
    };
    Trace2.createUserTimingTrace = function(measureName) {
      var trace = new Trace2(measureName, false, measureName);
      logTrace(trace);
    };
    return Trace2;
  }();
  function createNetworkRequestEntry(entry) {
    var performanceEntry = entry;
    if (!performanceEntry || performanceEntry.responseStart === void 0) {
      return;
    }
    var timeOrigin = Api.getInstance().getTimeOrigin();
    var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1e3);
    var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1e3) : void 0;
    var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1e3);
    var url = performanceEntry.name && performanceEntry.name.split("?")[0];
    var networkRequest = {
      url,
      responsePayloadBytes: performanceEntry.transferSize,
      startTimeUs,
      timeToResponseInitiatedUs,
      timeToResponseCompletedUs
    };
    logNetworkRequest(networkRequest);
  }
  var FID_WAIT_TIME_MS = 5e3;
  function setupOobResources() {
    if (!getIid()) {
      return;
    }
    setTimeout(function() {
      return setupOobTraces();
    }, 0);
    setTimeout(function() {
      return setupNetworkRequests();
    }, 0);
    setTimeout(function() {
      return setupUserTimingTraces();
    }, 0);
  }
  function setupNetworkRequests() {
    var api = Api.getInstance();
    var resources = api.getEntriesByType("resource");
    for (var _i2 = 0, resources_1 = resources; _i2 < resources_1.length; _i2++) {
      var resource = resources_1[_i2];
      createNetworkRequestEntry(resource);
    }
    api.setupObserver("resource", createNetworkRequestEntry);
  }
  function setupOobTraces() {
    var api = Api.getInstance();
    var navigationTimings = api.getEntriesByType("navigation");
    var paintTimings = api.getEntriesByType("paint");
    if (api.onFirstInputDelay) {
      var timeoutId_1 = setTimeout(function() {
        Trace.createOobTrace(navigationTimings, paintTimings);
        timeoutId_1 = void 0;
      }, FID_WAIT_TIME_MS);
      api.onFirstInputDelay(function(fid) {
        if (timeoutId_1) {
          clearTimeout(timeoutId_1);
          Trace.createOobTrace(navigationTimings, paintTimings, fid);
        }
      });
    } else {
      Trace.createOobTrace(navigationTimings, paintTimings);
    }
  }
  function setupUserTimingTraces() {
    var api = Api.getInstance();
    var measures = api.getEntriesByType("measure");
    for (var _i2 = 0, measures_1 = measures; _i2 < measures_1.length; _i2++) {
      var measure = measures_1[_i2];
      createUserTimingTrace(measure);
    }
    api.setupObserver("measure", createUserTimingTrace);
  }
  function createUserTimingTrace(measure) {
    var measureName = measure.name;
    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {
      return;
    }
    Trace.createUserTimingTrace(measureName);
  }
  var PerformanceController = function() {
    function PerformanceController2(app12) {
      this.app = app12;
      if (Api.getInstance().requiredApisAvailable()) {
        validateIndexedDBOpenable().then(function(isAvailable) {
          if (isAvailable) {
            setupTransportService();
            getInitializationPromise().then(setupOobResources, setupOobResources);
          }
        }).catch(function(error) {
          consoleLogger.info("Environment doesn't support IndexedDB: " + error);
        });
      }
    }
    PerformanceController2.prototype.trace = function(name9) {
      return new Trace(name9);
    };
    Object.defineProperty(PerformanceController2.prototype, "instrumentationEnabled", {
      get: function() {
        return SettingsService.getInstance().instrumentationEnabled;
      },
      set: function(val) {
        SettingsService.getInstance().instrumentationEnabled = val;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PerformanceController2.prototype, "dataCollectionEnabled", {
      get: function() {
        return SettingsService.getInstance().dataCollectionEnabled;
      },
      set: function(val) {
        SettingsService.getInstance().dataCollectionEnabled = val;
      },
      enumerable: false,
      configurable: true
    });
    return PerformanceController2;
  }();
  var DEFAULT_ENTRY_NAME3 = "[DEFAULT]";
  function registerPerformance(instance) {
    var factoryMethod2 = function(app12, installations5) {
      if (app12.name !== DEFAULT_ENTRY_NAME3) {
        throw ERROR_FACTORY5.create("FB not default");
      }
      if (typeof window === "undefined") {
        throw ERROR_FACTORY5.create("no window");
      }
      setupApi(window);
      SettingsService.getInstance().firebaseAppInstance = app12;
      SettingsService.getInstance().installationsService = installations5;
      return new PerformanceController(app12);
    };
    instance.INTERNAL.registerComponent(new Component("performance", function(container) {
      var app12 = container.getProvider("app").getImmediate();
      var installations5 = container.getProvider("installations").getImmediate();
      return factoryMethod2(app12, installations5);
    }, "PUBLIC"));
    instance.registerVersion(name5, version5);
  }
  registerPerformance(index_esm_default);

  // node_modules/@firebase/analytics/dist/index.esm.js
  var GA_FID_KEY = "firebase_id";
  var ORIGIN_KEY = "origin";
  var FETCH_TIMEOUT_MILLIS = 60 * 1e3;
  var DYNAMIC_CONFIG_URL = "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig";
  var GTAG_URL = "https://www.googletagmanager.com/gtag/js";
  var GtagCommand;
  (function(GtagCommand2) {
    GtagCommand2["EVENT"] = "event";
    GtagCommand2["SET"] = "set";
    GtagCommand2["CONFIG"] = "config";
  })(GtagCommand || (GtagCommand = {}));
  var EventName;
  (function(EventName2) {
    EventName2["ADD_SHIPPING_INFO"] = "add_shipping_info";
    EventName2["ADD_PAYMENT_INFO"] = "add_payment_info";
    EventName2["ADD_TO_CART"] = "add_to_cart";
    EventName2["ADD_TO_WISHLIST"] = "add_to_wishlist";
    EventName2["BEGIN_CHECKOUT"] = "begin_checkout";
    EventName2["CHECKOUT_PROGRESS"] = "checkout_progress";
    EventName2["EXCEPTION"] = "exception";
    EventName2["GENERATE_LEAD"] = "generate_lead";
    EventName2["LOGIN"] = "login";
    EventName2["PAGE_VIEW"] = "page_view";
    EventName2["PURCHASE"] = "purchase";
    EventName2["REFUND"] = "refund";
    EventName2["REMOVE_FROM_CART"] = "remove_from_cart";
    EventName2["SCREEN_VIEW"] = "screen_view";
    EventName2["SEARCH"] = "search";
    EventName2["SELECT_CONTENT"] = "select_content";
    EventName2["SELECT_ITEM"] = "select_item";
    EventName2["SELECT_PROMOTION"] = "select_promotion";
    EventName2["SET_CHECKOUT_OPTION"] = "set_checkout_option";
    EventName2["SHARE"] = "share";
    EventName2["SIGN_UP"] = "sign_up";
    EventName2["TIMING_COMPLETE"] = "timing_complete";
    EventName2["VIEW_CART"] = "view_cart";
    EventName2["VIEW_ITEM"] = "view_item";
    EventName2["VIEW_ITEM_LIST"] = "view_item_list";
    EventName2["VIEW_PROMOTION"] = "view_promotion";
    EventName2["VIEW_SEARCH_RESULTS"] = "view_search_results";
  })(EventName || (EventName = {}));
  function logEvent(gtagFunction, initializationPromise2, eventName, eventParams, options) {
    return __awaiter(this, void 0, void 0, function() {
      var measurementId, params;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (!(options && options.global))
              return [3, 1];
            gtagFunction(GtagCommand.EVENT, eventName, eventParams);
            return [2];
          case 1:
            return [4, initializationPromise2];
          case 2:
            measurementId = _a9.sent();
            params = __assign(__assign({}, eventParams), {send_to: measurementId});
            gtagFunction(GtagCommand.EVENT, eventName, params);
            _a9.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function setCurrentScreen(gtagFunction, initializationPromise2, screenName, options) {
    return __awaiter(this, void 0, void 0, function() {
      var measurementId;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (!(options && options.global))
              return [3, 1];
            gtagFunction(GtagCommand.SET, {screen_name: screenName});
            return [2, Promise.resolve()];
          case 1:
            return [4, initializationPromise2];
          case 2:
            measurementId = _a9.sent();
            gtagFunction(GtagCommand.CONFIG, measurementId, {
              update: true,
              screen_name: screenName
            });
            _a9.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function setUserId(gtagFunction, initializationPromise2, id2, options) {
    return __awaiter(this, void 0, void 0, function() {
      var measurementId;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (!(options && options.global))
              return [3, 1];
            gtagFunction(GtagCommand.SET, {user_id: id2});
            return [2, Promise.resolve()];
          case 1:
            return [4, initializationPromise2];
          case 2:
            measurementId = _a9.sent();
            gtagFunction(GtagCommand.CONFIG, measurementId, {
              update: true,
              user_id: id2
            });
            _a9.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function setUserProperties(gtagFunction, initializationPromise2, properties, options) {
    return __awaiter(this, void 0, void 0, function() {
      var flatProperties, _i2, _a9, key2, measurementId;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!(options && options.global))
              return [3, 1];
            flatProperties = {};
            for (_i2 = 0, _a9 = Object.keys(properties); _i2 < _a9.length; _i2++) {
              key2 = _a9[_i2];
              flatProperties["user_properties." + key2] = properties[key2];
            }
            gtagFunction(GtagCommand.SET, flatProperties);
            return [2, Promise.resolve()];
          case 1:
            return [4, initializationPromise2];
          case 2:
            measurementId = _b.sent();
            gtagFunction(GtagCommand.CONFIG, measurementId, {
              update: true,
              user_properties: properties
            });
            _b.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }
  function setAnalyticsCollectionEnabled(initializationPromise2, enabled) {
    return __awaiter(this, void 0, void 0, function() {
      var measurementId;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            return [4, initializationPromise2];
          case 1:
            measurementId = _a9.sent();
            window["ga-disable-" + measurementId] = !enabled;
            return [2];
        }
      });
    });
  }
  var logger2 = new Logger("@firebase/analytics");
  function insertScriptTag(dataLayerName2) {
    var script = document.createElement("script");
    script.src = GTAG_URL + "?l=" + dataLayerName2;
    script.async = true;
    document.head.appendChild(script);
  }
  function getOrCreateDataLayer(dataLayerName2) {
    var dataLayer = [];
    if (Array.isArray(window[dataLayerName2])) {
      dataLayer = window[dataLayerName2];
    } else {
      window[dataLayerName2] = dataLayer;
    }
    return dataLayer;
  }
  function gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, measurementId, gtagParams) {
    return __awaiter(this, void 0, void 0, function() {
      var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            correspondingAppId = measurementIdToAppId2[measurementId];
            _a9.label = 1;
          case 1:
            _a9.trys.push([1, 7, , 8]);
            if (!correspondingAppId)
              return [3, 3];
            return [4, initializationPromisesMap2[correspondingAppId]];
          case 2:
            _a9.sent();
            return [3, 6];
          case 3:
            return [4, Promise.all(dynamicConfigPromisesList2)];
          case 4:
            dynamicConfigResults = _a9.sent();
            foundConfig = dynamicConfigResults.find(function(config2) {
              return config2.measurementId === measurementId;
            });
            if (!foundConfig)
              return [3, 6];
            return [4, initializationPromisesMap2[foundConfig.appId]];
          case 5:
            _a9.sent();
            _a9.label = 6;
          case 6:
            return [3, 8];
          case 7:
            e_1 = _a9.sent();
            logger2.error(e_1);
            return [3, 8];
          case 8:
            gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
            return [2];
        }
      });
    });
  }
  function gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementId, gtagParams) {
    return __awaiter(this, void 0, void 0, function() {
      var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i2, gaSendToList_1, sendToId, state_1, e_2;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            _a9.trys.push([0, 4, , 5]);
            initializationPromisesToWaitFor = [];
            if (!(gtagParams && gtagParams["send_to"]))
              return [3, 2];
            gaSendToList = gtagParams["send_to"];
            if (!Array.isArray(gaSendToList)) {
              gaSendToList = [gaSendToList];
            }
            return [4, Promise.all(dynamicConfigPromisesList2)];
          case 1:
            dynamicConfigResults = _a9.sent();
            _loop_1 = function(sendToId2) {
              var foundConfig = dynamicConfigResults.find(function(config2) {
                return config2.measurementId === sendToId2;
              });
              var initializationPromise2 = foundConfig && initializationPromisesMap2[foundConfig.appId];
              if (initializationPromise2) {
                initializationPromisesToWaitFor.push(initializationPromise2);
              } else {
                initializationPromisesToWaitFor = [];
                return "break";
              }
            };
            for (_i2 = 0, gaSendToList_1 = gaSendToList; _i2 < gaSendToList_1.length; _i2++) {
              sendToId = gaSendToList_1[_i2];
              state_1 = _loop_1(sendToId);
              if (state_1 === "break")
                break;
            }
            _a9.label = 2;
          case 2:
            if (initializationPromisesToWaitFor.length === 0) {
              initializationPromisesToWaitFor = Object.values(initializationPromisesMap2);
            }
            return [4, Promise.all(initializationPromisesToWaitFor)];
          case 3:
            _a9.sent();
            gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});
            return [3, 5];
          case 4:
            e_2 = _a9.sent();
            logger2.error(e_2);
            return [3, 5];
          case 5:
            return [2];
        }
      });
    });
  }
  function wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2) {
    function gtagWrapper(command, idOrNameOrParams, gtagParams) {
      return __awaiter(this, void 0, void 0, function() {
        var e_3;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              _a9.trys.push([0, 6, , 7]);
              if (!(command === GtagCommand.EVENT))
                return [3, 2];
              return [4, gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, idOrNameOrParams, gtagParams)];
            case 1:
              _a9.sent();
              return [3, 5];
            case 2:
              if (!(command === GtagCommand.CONFIG))
                return [3, 4];
              return [4, gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, idOrNameOrParams, gtagParams)];
            case 3:
              _a9.sent();
              return [3, 5];
            case 4:
              gtagCore(GtagCommand.SET, idOrNameOrParams);
              _a9.label = 5;
            case 5:
              return [3, 7];
            case 6:
              e_3 = _a9.sent();
              logger2.error(e_3);
              return [3, 7];
            case 7:
              return [2];
          }
        });
      });
    }
    return gtagWrapper;
  }
  function wrapOrCreateGtag(initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, dataLayerName2, gtagFunctionName) {
    var gtagCore = function() {
      var _args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        _args[_i2] = arguments[_i2];
      }
      window[dataLayerName2].push(arguments);
    };
    if (window[gtagFunctionName] && typeof window[gtagFunctionName] === "function") {
      gtagCore = window[gtagFunctionName];
    }
    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2);
    return {
      gtagCore,
      wrappedGtag: window[gtagFunctionName]
    };
  }
  function findGtagScriptOnPage() {
    var scriptTags = window.document.getElementsByTagName("script");
    for (var _i2 = 0, _a9 = Object.values(scriptTags); _i2 < _a9.length; _i2++) {
      var tag = _a9[_i2];
      if (tag.src && tag.src.includes(GTAG_URL)) {
        return tag;
      }
    }
    return null;
  }
  var _a;
  var ERRORS = (_a = {}, _a["already-exists"] = "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.", _a["already-initialized"] = "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.", _a["interop-component-reg-failed"] = "Firebase Analytics Interop Component failed to instantiate: {$reason}", _a["invalid-analytics-context"] = "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["indexeddb-unavailable"] = "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["fetch-throttle"] = "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.", _a["config-fetch-failed"] = "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}", _a["no-api-key"] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.', _a["no-app-id"] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.', _a);
  var ERROR_FACTORY = new ErrorFactory("analytics", "Analytics", ERRORS);
  var LONG_RETRY_FACTOR = 30;
  var BASE_INTERVAL_MILLIS = 1e3;
  var RetryData = function() {
    function RetryData2(throttleMetadata, intervalMillis) {
      if (throttleMetadata === void 0) {
        throttleMetadata = {};
      }
      if (intervalMillis === void 0) {
        intervalMillis = BASE_INTERVAL_MILLIS;
      }
      this.throttleMetadata = throttleMetadata;
      this.intervalMillis = intervalMillis;
    }
    RetryData2.prototype.getThrottleMetadata = function(appId) {
      return this.throttleMetadata[appId];
    };
    RetryData2.prototype.setThrottleMetadata = function(appId, metadata) {
      this.throttleMetadata[appId] = metadata;
    };
    RetryData2.prototype.deleteThrottleMetadata = function(appId) {
      delete this.throttleMetadata[appId];
    };
    return RetryData2;
  }();
  var defaultRetryData = new RetryData();
  function getHeaders(apiKey) {
    return new Headers({
      Accept: "application/json",
      "x-goog-api-key": apiKey
    });
  }
  function fetchDynamicConfig(appFields) {
    var _a9;
    return __awaiter(this, void 0, void 0, function() {
      var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            appId = appFields.appId, apiKey = appFields.apiKey;
            request = {
              method: "GET",
              headers: getHeaders(apiKey)
            };
            appUrl = DYNAMIC_CONFIG_URL.replace("{app-id}", appId);
            return [4, fetch(appUrl, request)];
          case 1:
            response = _b.sent();
            if (!(response.status !== 200 && response.status !== 304))
              return [3, 6];
            errorMessage = "";
            _b.label = 2;
          case 2:
            _b.trys.push([2, 4, , 5]);
            return [4, response.json()];
          case 3:
            jsonResponse = _b.sent();
            if ((_a9 = jsonResponse.error) === null || _a9 === void 0 ? void 0 : _a9.message) {
              errorMessage = jsonResponse.error.message;
            }
            return [3, 5];
          case 4:
            _ignored_1 = _b.sent();
            return [3, 5];
          case 5:
            throw ERROR_FACTORY.create("config-fetch-failed", {
              httpStatus: response.status,
              responseMessage: errorMessage
            });
          case 6:
            return [2, response.json()];
        }
      });
    });
  }
  function fetchDynamicConfigWithRetry(app12, retryData, timeoutMillis) {
    if (retryData === void 0) {
      retryData = defaultRetryData;
    }
    return __awaiter(this, void 0, void 0, function() {
      var _a9, appId, apiKey, measurementId, throttleMetadata, signal;
      var _this = this;
      return __generator(this, function(_b) {
        _a9 = app12.options, appId = _a9.appId, apiKey = _a9.apiKey, measurementId = _a9.measurementId;
        if (!appId) {
          throw ERROR_FACTORY.create("no-app-id");
        }
        if (!apiKey) {
          if (measurementId) {
            return [2, {
              measurementId,
              appId
            }];
          }
          throw ERROR_FACTORY.create("no-api-key");
        }
        throttleMetadata = retryData.getThrottleMetadata(appId) || {
          backoffCount: 0,
          throttleEndTimeMillis: Date.now()
        };
        signal = new AnalyticsAbortSignal();
        setTimeout(function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a10) {
              signal.abort();
              return [2];
            });
          });
        }, timeoutMillis !== void 0 ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
        return [2, attemptFetchDynamicConfigWithRetry({appId, apiKey, measurementId}, throttleMetadata, signal, retryData)];
      });
    });
  }
  function attemptFetchDynamicConfigWithRetry(appFields, _a9, signal, retryData) {
    var throttleEndTimeMillis = _a9.throttleEndTimeMillis, backoffCount = _a9.backoffCount;
    if (retryData === void 0) {
      retryData = defaultRetryData;
    }
    return __awaiter(this, void 0, void 0, function() {
      var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            appId = appFields.appId, measurementId = appFields.measurementId;
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, setAbortableTimeout(signal, throttleEndTimeMillis)];
          case 2:
            _b.sent();
            return [3, 4];
          case 3:
            e_1 = _b.sent();
            if (measurementId) {
              logger2.warn("Timed out fetching this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_1.message + "]"));
              return [2, {appId, measurementId}];
            }
            throw e_1;
          case 4:
            _b.trys.push([4, 6, , 7]);
            return [4, fetchDynamicConfig(appFields)];
          case 5:
            response = _b.sent();
            retryData.deleteThrottleMetadata(appId);
            return [2, response];
          case 6:
            e_2 = _b.sent();
            if (!isRetriableError(e_2)) {
              retryData.deleteThrottleMetadata(appId);
              if (measurementId) {
                logger2.warn("Failed to fetch this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_2.message + "]"));
                return [2, {appId, measurementId}];
              } else {
                throw e_2;
              }
            }
            backoffMillis = Number(e_2.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
            throttleMetadata = {
              throttleEndTimeMillis: Date.now() + backoffMillis,
              backoffCount: backoffCount + 1
            };
            retryData.setThrottleMetadata(appId, throttleMetadata);
            logger2.debug("Calling attemptFetch again in " + backoffMillis + " millis");
            return [2, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
          case 7:
            return [2];
        }
      });
    });
  }
  function setAbortableTimeout(signal, throttleEndTimeMillis) {
    return new Promise(function(resolve, reject) {
      var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
      var timeout = setTimeout(resolve, backoffMillis);
      signal.addEventListener(function() {
        clearTimeout(timeout);
        reject(ERROR_FACTORY.create("fetch-throttle", {
          throttleEndTimeMillis
        }));
      });
    });
  }
  function isRetriableError(e) {
    if (!(e instanceof FirebaseError) || !e.customData) {
      return false;
    }
    var httpStatus = Number(e.customData["httpStatus"]);
    return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
  }
  var AnalyticsAbortSignal = function() {
    function AnalyticsAbortSignal2() {
      this.listeners = [];
    }
    AnalyticsAbortSignal2.prototype.addEventListener = function(listener) {
      this.listeners.push(listener);
    };
    AnalyticsAbortSignal2.prototype.abort = function() {
      this.listeners.forEach(function(listener) {
        return listener();
      });
    };
    return AnalyticsAbortSignal2;
  }();
  function validateIndexedDB() {
    return __awaiter(this, void 0, void 0, function() {
      var e_1;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (!!isIndexedDBAvailable())
              return [3, 1];
            logger2.warn(ERROR_FACTORY.create("indexeddb-unavailable", {
              errorInfo: "IndexedDB is not available in this environment."
            }).message);
            return [2, false];
          case 1:
            _a9.trys.push([1, 3, , 4]);
            return [4, validateIndexedDBOpenable()];
          case 2:
            _a9.sent();
            return [3, 4];
          case 3:
            e_1 = _a9.sent();
            logger2.warn(ERROR_FACTORY.create("indexeddb-unavailable", {
              errorInfo: e_1
            }).message);
            return [2, false];
          case 4:
            return [2, true];
        }
      });
    });
  }
  function initializeIds(app12, dynamicConfigPromisesList2, measurementIdToAppId2, installations5, gtagCore) {
    return __awaiter(this, void 0, void 0, function() {
      var dynamicConfigPromise, fidPromise, _a9, dynamicConfig, fid, configProperties;
      var _b;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            dynamicConfigPromise = fetchDynamicConfigWithRetry(app12);
            dynamicConfigPromise.then(function(config2) {
              measurementIdToAppId2[config2.measurementId] = config2.appId;
              if (app12.options.measurementId && config2.measurementId !== app12.options.measurementId) {
                logger2.warn("The measurement ID in the local Firebase config (" + app12.options.measurementId + ")" + (" does not match the measurement ID fetched from the server (" + config2.measurementId + ").") + " To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.");
              }
            }).catch(function(e) {
              return logger2.error(e);
            });
            dynamicConfigPromisesList2.push(dynamicConfigPromise);
            fidPromise = validateIndexedDB().then(function(envIsValid) {
              if (envIsValid) {
                return installations5.getId();
              } else {
                return void 0;
              }
            });
            return [4, Promise.all([
              dynamicConfigPromise,
              fidPromise
            ])];
          case 1:
            _a9 = _c2.sent(), dynamicConfig = _a9[0], fid = _a9[1];
            gtagCore("js", new Date());
            configProperties = (_b = {}, _b[ORIGIN_KEY] = "firebase", _b.update = true, _b);
            if (fid != null) {
              configProperties[GA_FID_KEY] = fid;
            }
            gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
            return [2, dynamicConfig.measurementId];
        }
      });
    });
  }
  var initializationPromisesMap = {};
  var dynamicConfigPromisesList = [];
  var measurementIdToAppId = {};
  var dataLayerName = "dataLayer";
  var gtagName = "gtag";
  var gtagCoreFunction;
  var wrappedGtagFunction;
  var globalInitDone = false;
  function settings(options) {
    if (globalInitDone) {
      throw ERROR_FACTORY.create("already-initialized");
    }
    if (options.dataLayerName) {
      dataLayerName = options.dataLayerName;
    }
    if (options.gtagName) {
      gtagName = options.gtagName;
    }
  }
  function warnOnBrowserContextMismatch() {
    var mismatchedEnvMessages = [];
    if (isBrowserExtension()) {
      mismatchedEnvMessages.push("This is a browser extension environment.");
    }
    if (!areCookiesEnabled()) {
      mismatchedEnvMessages.push("Cookies are not available.");
    }
    if (mismatchedEnvMessages.length > 0) {
      var details = mismatchedEnvMessages.map(function(message, index2) {
        return "(" + (index2 + 1) + ") " + message;
      }).join(" ");
      var err = ERROR_FACTORY.create("invalid-analytics-context", {
        errorInfo: details
      });
      logger2.warn(err.message);
    }
  }
  function factory(app12, installations5) {
    warnOnBrowserContextMismatch();
    var appId = app12.options.appId;
    if (!appId) {
      throw ERROR_FACTORY.create("no-app-id");
    }
    if (!app12.options.apiKey) {
      if (app12.options.measurementId) {
        logger2.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest' + (" measurement ID for this Firebase app. Falling back to the measurement ID " + app12.options.measurementId) + ' provided in the "measurementId" field in the local Firebase config.');
      } else {
        throw ERROR_FACTORY.create("no-api-key");
      }
    }
    if (initializationPromisesMap[appId] != null) {
      throw ERROR_FACTORY.create("already-exists", {
        id: appId
      });
    }
    if (!globalInitDone) {
      if (!findGtagScriptOnPage()) {
        insertScriptTag(dataLayerName);
      }
      getOrCreateDataLayer(dataLayerName);
      var _a9 = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a9.wrappedGtag, gtagCore = _a9.gtagCore;
      wrappedGtagFunction = wrappedGtag;
      gtagCoreFunction = gtagCore;
      globalInitDone = true;
    }
    initializationPromisesMap[appId] = initializeIds(app12, dynamicConfigPromisesList, measurementIdToAppId, installations5, gtagCoreFunction);
    var analyticsInstance = {
      app: app12,
      logEvent: function(eventName, eventParams, options) {
        logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function(e) {
          return logger2.error(e);
        });
      },
      setCurrentScreen: function(screenName, options) {
        setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function(e) {
          return logger2.error(e);
        });
      },
      setUserId: function(id2, options) {
        setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id2, options).catch(function(e) {
          return logger2.error(e);
        });
      },
      setUserProperties: function(properties, options) {
        setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function(e) {
          return logger2.error(e);
        });
      },
      setAnalyticsCollectionEnabled: function(enabled) {
        setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function(e) {
          return logger2.error(e);
        });
      },
      INTERNAL: {
        delete: function() {
          delete initializationPromisesMap[appId];
          return Promise.resolve();
        }
      }
    };
    return analyticsInstance;
  }
  var name2 = "@firebase/analytics";
  var version = "0.6.2";
  var ANALYTICS_TYPE = "analytics";
  function registerAnalytics(instance) {
    instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function(container) {
      var app12 = container.getProvider("app").getImmediate();
      var installations5 = container.getProvider("installations").getImmediate();
      return factory(app12, installations5);
    }, "PUBLIC").setServiceProps({
      settings,
      EventName,
      isSupported
    }));
    instance.INTERNAL.registerComponent(new Component("analytics-internal", internalFactory, "PRIVATE"));
    instance.registerVersion(name2, version);
    function internalFactory(container) {
      try {
        var analytics2 = container.getProvider(ANALYTICS_TYPE).getImmediate();
        return {
          logEvent: analytics2.logEvent
        };
      } catch (e) {
        throw ERROR_FACTORY.create("interop-component-reg-failed", {
          reason: e
        });
      }
    }
  }
  registerAnalytics(index_esm_default);
  function isSupported() {
    return __awaiter(this, void 0, void 0, function() {
      var isDBOpenable, error_1;
      return __generator(this, function(_a9) {
        switch (_a9.label) {
          case 0:
            if (isBrowserExtension()) {
              return [2, false];
            }
            if (!areCookiesEnabled()) {
              return [2, false];
            }
            if (!isIndexedDBAvailable()) {
              return [2, false];
            }
            _a9.label = 1;
          case 1:
            _a9.trys.push([1, 3, , 4]);
            return [4, validateIndexedDBOpenable()];
          case 2:
            isDBOpenable = _a9.sent();
            return [2, isDBOpenable];
          case 3:
            error_1 = _a9.sent();
            return [2, false];
          case 4:
            return [2];
        }
      });
    });
  }

  // node_modules/@firebase/remote-config/dist/index.esm.js
  var CachingClient = function() {
    function CachingClient2(client, storage2, storageCache, logger11) {
      this.client = client;
      this.storage = storage2;
      this.storageCache = storageCache;
      this.logger = logger11;
    }
    CachingClient2.prototype.isCachedDataFresh = function(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
      if (!lastSuccessfulFetchTimestampMillis) {
        this.logger.debug("Config fetch cache check. Cache unpopulated.");
        return false;
      }
      var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
      var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
      this.logger.debug("Config fetch cache check." + (" Cache age millis: " + cacheAgeMillis + ".") + (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") + (" Is cache hit: " + isCachedDataFresh + "."));
      return isCachedDataFresh;
    };
    CachingClient2.prototype.fetch = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var _a9, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, Promise.all([
                this.storage.getLastSuccessfulFetchTimestampMillis(),
                this.storage.getLastSuccessfulFetchResponse()
              ])];
            case 1:
              _a9 = _b.sent(), lastSuccessfulFetchTimestampMillis = _a9[0], lastSuccessfulFetchResponse = _a9[1];
              if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
                return [2, lastSuccessfulFetchResponse];
              }
              request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
              return [4, this.client.fetch(request)];
            case 2:
              response = _b.sent();
              storageOperations = [
                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
              ];
              if (response.status === 200) {
                storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
              }
              return [4, Promise.all(storageOperations)];
            case 3:
              _b.sent();
              return [2, response];
          }
        });
      });
    };
    return CachingClient2;
  }();
  var _a8;
  var ERROR_DESCRIPTION_MAP3 = (_a8 = {}, _a8["registration-window"] = "Undefined window object. This SDK only supports usage in a browser environment.", _a8["registration-project-id"] = "Undefined project identifier. Check Firebase app initialization.", _a8["registration-api-key"] = "Undefined API key. Check Firebase app initialization.", _a8["registration-app-id"] = "Undefined app identifier. Check Firebase app initialization.", _a8["storage-open"] = "Error thrown when opening storage. Original error: {$originalErrorMessage}.", _a8["storage-get"] = "Error thrown when reading from storage. Original error: {$originalErrorMessage}.", _a8["storage-set"] = "Error thrown when writing to storage. Original error: {$originalErrorMessage}.", _a8["storage-delete"] = "Error thrown when deleting from storage. Original error: {$originalErrorMessage}.", _a8["fetch-client-network"] = "Fetch client failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.", _a8["fetch-timeout"] = 'The config fetch request timed out.  Configure timeout using "fetchTimeoutMillis" SDK setting.', _a8["fetch-throttle"] = 'The config fetch request timed out while in an exponential backoff state. Configure timeout using "fetchTimeoutMillis" SDK setting. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a8["fetch-client-parse"] = "Fetch client could not parse response. Original error: {$originalErrorMessage}.", _a8["fetch-status"] = "Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.", _a8);
  var ERROR_FACTORY6 = new ErrorFactory("remoteconfig", "Remote Config", ERROR_DESCRIPTION_MAP3);
  function hasErrorCode(e, errorCode) {
    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
  }
  function getUserLanguage(navigatorLanguage) {
    if (navigatorLanguage === void 0) {
      navigatorLanguage = navigator;
    }
    return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language;
  }
  var RestClient = function() {
    function RestClient2(firebaseInstallations, sdkVersion2, namespace, projectId, apiKey, appId) {
      this.firebaseInstallations = firebaseInstallations;
      this.sdkVersion = sdkVersion2;
      this.namespace = namespace;
      this.projectId = projectId;
      this.apiKey = apiKey;
      this.appId = appId;
    }
    RestClient2.prototype.fetch = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var _a9, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config2, state, responseBody, originalError_2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, Promise.all([
                this.firebaseInstallations.getId(),
                this.firebaseInstallations.getToken()
              ])];
            case 1:
              _a9 = _b.sent(), installationId = _a9[0], installationToken = _a9[1];
              urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || "https://firebaseremoteconfig.googleapis.com";
              url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
              headers = {
                "Content-Type": "application/json",
                "Content-Encoding": "gzip",
                "If-None-Match": request.eTag || "*"
              };
              requestBody = {
                sdk_version: this.sdkVersion,
                app_instance_id: installationId,
                app_instance_id_token: installationToken,
                app_id: this.appId,
                language_code: getUserLanguage()
              };
              options = {
                method: "POST",
                headers,
                body: JSON.stringify(requestBody)
              };
              fetchPromise = fetch(url, options);
              timeoutPromise = new Promise(function(_resolve, reject) {
                request.signal.addEventListener(function() {
                  var error = new Error("The operation was aborted.");
                  error.name = "AbortError";
                  reject(error);
                });
              });
              _b.label = 2;
            case 2:
              _b.trys.push([2, 5, , 6]);
              return [4, Promise.race([fetchPromise, timeoutPromise])];
            case 3:
              _b.sent();
              return [4, fetchPromise];
            case 4:
              response = _b.sent();
              return [3, 6];
            case 5:
              originalError_1 = _b.sent();
              errorCode = "fetch-client-network";
              if (originalError_1.name === "AbortError") {
                errorCode = "fetch-timeout";
              }
              throw ERROR_FACTORY6.create(errorCode, {
                originalErrorMessage: originalError_1.message
              });
            case 6:
              status = response.status;
              responseEtag = response.headers.get("ETag") || void 0;
              if (!(response.status === 200))
                return [3, 11];
              responseBody = void 0;
              _b.label = 7;
            case 7:
              _b.trys.push([7, 9, , 10]);
              return [4, response.json()];
            case 8:
              responseBody = _b.sent();
              return [3, 10];
            case 9:
              originalError_2 = _b.sent();
              throw ERROR_FACTORY6.create("fetch-client-parse", {
                originalErrorMessage: originalError_2.message
              });
            case 10:
              config2 = responseBody["entries"];
              state = responseBody["state"];
              _b.label = 11;
            case 11:
              if (state === "INSTANCE_STATE_UNSPECIFIED") {
                status = 500;
              } else if (state === "NO_CHANGE") {
                status = 304;
              } else if (state === "NO_TEMPLATE" || state === "EMPTY_CONFIG") {
                config2 = {};
              }
              if (status !== 304 && status !== 200) {
                throw ERROR_FACTORY6.create("fetch-status", {
                  httpStatus: status
                });
              }
              return [2, {status, eTag: responseEtag, config: config2}];
          }
        });
      });
    };
    return RestClient2;
  }();
  var RemoteConfigAbortSignal = function() {
    function RemoteConfigAbortSignal2() {
      this.listeners = [];
    }
    RemoteConfigAbortSignal2.prototype.addEventListener = function(listener) {
      this.listeners.push(listener);
    };
    RemoteConfigAbortSignal2.prototype.abort = function() {
      this.listeners.forEach(function(listener) {
        return listener();
      });
    };
    return RemoteConfigAbortSignal2;
  }();
  var DEFAULT_VALUE_FOR_BOOLEAN = false;
  var DEFAULT_VALUE_FOR_STRING = "";
  var DEFAULT_VALUE_FOR_NUMBER = 0;
  var BOOLEAN_TRUTHY_VALUES = ["1", "true", "t", "yes", "y", "on"];
  var Value = function() {
    function Value2(_source, _value) {
      if (_value === void 0) {
        _value = DEFAULT_VALUE_FOR_STRING;
      }
      this._source = _source;
      this._value = _value;
    }
    Value2.prototype.asString = function() {
      return this._value;
    };
    Value2.prototype.asBoolean = function() {
      if (this._source === "static") {
        return DEFAULT_VALUE_FOR_BOOLEAN;
      }
      return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
    };
    Value2.prototype.asNumber = function() {
      if (this._source === "static") {
        return DEFAULT_VALUE_FOR_NUMBER;
      }
      var num = Number(this._value);
      if (isNaN(num)) {
        num = DEFAULT_VALUE_FOR_NUMBER;
      }
      return num;
    };
    Value2.prototype.getSource = function() {
      return this._source;
    };
    return Value2;
  }();
  var DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1e3;
  var DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1e3;
  var RemoteConfig = function() {
    function RemoteConfig2(app12, _client, _storageCache, _storage, _logger) {
      this.app = app12;
      this._client = _client;
      this._storageCache = _storageCache;
      this._storage = _storage;
      this._logger = _logger;
      this._isInitializationComplete = false;
      this.settings = {
        fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
        minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
      };
      this.defaultConfig = {};
    }
    RemoteConfig2.prototype.setLogLevel = function(logLevel) {
      switch (logLevel) {
        case "debug":
          this._logger.logLevel = LogLevel.DEBUG;
          break;
        case "silent":
          this._logger.logLevel = LogLevel.SILENT;
          break;
        default:
          this._logger.logLevel = LogLevel.ERROR;
      }
    };
    Object.defineProperty(RemoteConfig2.prototype, "fetchTimeMillis", {
      get: function() {
        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(RemoteConfig2.prototype, "lastFetchStatus", {
      get: function() {
        return this._storageCache.getLastFetchStatus() || "no-fetch-yet";
      },
      enumerable: false,
      configurable: true
    });
    RemoteConfig2.prototype.activate = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a9, lastSuccessfulFetchResponse, activeConfigEtag;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, Promise.all([
                this._storage.getLastSuccessfulFetchResponse(),
                this._storage.getActiveConfigEtag()
              ])];
            case 1:
              _a9 = _b.sent(), lastSuccessfulFetchResponse = _a9[0], activeConfigEtag = _a9[1];
              if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
                return [2, false];
              }
              return [4, Promise.all([
                this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
                this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
              ])];
            case 2:
              _b.sent();
              return [2, true];
          }
        });
      });
    };
    RemoteConfig2.prototype.ensureInitialized = function() {
      var _this = this;
      if (!this._initializePromise) {
        this._initializePromise = this._storageCache.loadFromStorage().then(function() {
          _this._isInitializationComplete = true;
        });
      }
      return this._initializePromise;
    };
    RemoteConfig2.prototype.fetch = function() {
      return __awaiter(this, void 0, void 0, function() {
        var abortSignal, e_1, lastFetchStatus;
        var _this = this;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              abortSignal = new RemoteConfigAbortSignal();
              setTimeout(function() {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a10) {
                    abortSignal.abort();
                    return [2];
                  });
                });
              }, this.settings.fetchTimeoutMillis);
              _a9.label = 1;
            case 1:
              _a9.trys.push([1, 4, , 6]);
              return [4, this._client.fetch({
                cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,
                signal: abortSignal
              })];
            case 2:
              _a9.sent();
              return [4, this._storageCache.setLastFetchStatus("success")];
            case 3:
              _a9.sent();
              return [3, 6];
            case 4:
              e_1 = _a9.sent();
              lastFetchStatus = hasErrorCode(e_1, "fetch-throttle") ? "throttle" : "failure";
              return [4, this._storageCache.setLastFetchStatus(lastFetchStatus)];
            case 5:
              _a9.sent();
              throw e_1;
            case 6:
              return [2];
          }
        });
      });
    };
    RemoteConfig2.prototype.fetchAndActivate = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.fetch()];
            case 1:
              _a9.sent();
              return [2, this.activate()];
          }
        });
      });
    };
    RemoteConfig2.prototype.getAll = function() {
      var _this = this;
      return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function(allConfigs, key2) {
        allConfigs[key2] = _this.getValue(key2);
        return allConfigs;
      }, {});
    };
    RemoteConfig2.prototype.getBoolean = function(key2) {
      return this.getValue(key2).asBoolean();
    };
    RemoteConfig2.prototype.getNumber = function(key2) {
      return this.getValue(key2).asNumber();
    };
    RemoteConfig2.prototype.getString = function(key2) {
      return this.getValue(key2).asString();
    };
    RemoteConfig2.prototype.getValue = function(key2) {
      if (!this._isInitializationComplete) {
        this._logger.debug('A value was requested for key "' + key2 + '" before SDK initialization completed. Await on ensureInitialized if the intent was to get a previously activated value.');
      }
      var activeConfig = this._storageCache.getActiveConfig();
      if (activeConfig && activeConfig[key2] !== void 0) {
        return new Value("remote", activeConfig[key2]);
      } else if (this.defaultConfig && this.defaultConfig[key2] !== void 0) {
        return new Value("default", String(this.defaultConfig[key2]));
      }
      this._logger.debug('Returning static value for key "' + key2 + '". Define a default or remote value if this is unintentional.');
      return new Value("static");
    };
    return RemoteConfig2;
  }();
  function getAllKeys(obj1, obj2) {
    if (obj1 === void 0) {
      obj1 = {};
    }
    if (obj2 === void 0) {
      obj2 = {};
    }
    return Object.keys(__assign(__assign({}, obj1), obj2));
  }
  function toFirebaseError(event, errorCode) {
    var originalError = event.target.error || void 0;
    return ERROR_FACTORY6.create(errorCode, {
      originalErrorMessage: originalError && originalError.message
    });
  }
  var APP_NAMESPACE_STORE = "app_namespace_store";
  var DB_NAME = "firebase_remote_config";
  var DB_VERSION = 1;
  function openDatabase() {
    return new Promise(function(resolve, reject) {
      var request = indexedDB.open(DB_NAME, DB_VERSION);
      request.onerror = function(event) {
        reject(toFirebaseError(event, "storage-open"));
      };
      request.onsuccess = function(event) {
        resolve(event.target.result);
      };
      request.onupgradeneeded = function(event) {
        var db2 = event.target.result;
        switch (event.oldVersion) {
          case 0:
            db2.createObjectStore(APP_NAMESPACE_STORE, {
              keyPath: "compositeKey"
            });
        }
      };
    });
  }
  var Storage = function() {
    function Storage2(appId, appName, namespace, openDbPromise) {
      if (openDbPromise === void 0) {
        openDbPromise = openDatabase();
      }
      this.appId = appId;
      this.appName = appName;
      this.namespace = namespace;
      this.openDbPromise = openDbPromise;
    }
    Storage2.prototype.getLastFetchStatus = function() {
      return this.get("last_fetch_status");
    };
    Storage2.prototype.setLastFetchStatus = function(status) {
      return this.set("last_fetch_status", status);
    };
    Storage2.prototype.getLastSuccessfulFetchTimestampMillis = function() {
      return this.get("last_successful_fetch_timestamp_millis");
    };
    Storage2.prototype.setLastSuccessfulFetchTimestampMillis = function(timestamp) {
      return this.set("last_successful_fetch_timestamp_millis", timestamp);
    };
    Storage2.prototype.getLastSuccessfulFetchResponse = function() {
      return this.get("last_successful_fetch_response");
    };
    Storage2.prototype.setLastSuccessfulFetchResponse = function(response) {
      return this.set("last_successful_fetch_response", response);
    };
    Storage2.prototype.getActiveConfig = function() {
      return this.get("active_config");
    };
    Storage2.prototype.setActiveConfig = function(config2) {
      return this.set("active_config", config2);
    };
    Storage2.prototype.getActiveConfigEtag = function() {
      return this.get("active_config_etag");
    };
    Storage2.prototype.setActiveConfigEtag = function(etag) {
      return this.set("active_config_etag", etag);
    };
    Storage2.prototype.getThrottleMetadata = function() {
      return this.get("throttle_metadata");
    };
    Storage2.prototype.setThrottleMetadata = function(metadata) {
      return this.set("throttle_metadata", metadata);
    };
    Storage2.prototype.deleteThrottleMetadata = function() {
      return this.delete("throttle_metadata");
    };
    Storage2.prototype.get = function(key2) {
      return __awaiter(this, void 0, void 0, function() {
        var db2;
        var _this = this;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.openDbPromise];
            case 1:
              db2 = _a9.sent();
              return [2, new Promise(function(resolve, reject) {
                var transaction = db2.transaction([APP_NAMESPACE_STORE], "readonly");
                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                var compositeKey = _this.createCompositeKey(key2);
                try {
                  var request = objectStore.get(compositeKey);
                  request.onerror = function(event) {
                    reject(toFirebaseError(event, "storage-get"));
                  };
                  request.onsuccess = function(event) {
                    var result = event.target.result;
                    if (result) {
                      resolve(result.value);
                    } else {
                      resolve(void 0);
                    }
                  };
                } catch (e) {
                  reject(ERROR_FACTORY6.create("storage-get", {
                    originalErrorMessage: e && e.message
                  }));
                }
              })];
          }
        });
      });
    };
    Storage2.prototype.set = function(key2, value) {
      return __awaiter(this, void 0, void 0, function() {
        var db2;
        var _this = this;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.openDbPromise];
            case 1:
              db2 = _a9.sent();
              return [2, new Promise(function(resolve, reject) {
                var transaction = db2.transaction([APP_NAMESPACE_STORE], "readwrite");
                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                var compositeKey = _this.createCompositeKey(key2);
                try {
                  var request = objectStore.put({
                    compositeKey,
                    value
                  });
                  request.onerror = function(event) {
                    reject(toFirebaseError(event, "storage-set"));
                  };
                  request.onsuccess = function() {
                    resolve();
                  };
                } catch (e) {
                  reject(ERROR_FACTORY6.create("storage-set", {
                    originalErrorMessage: e && e.message
                  }));
                }
              })];
          }
        });
      });
    };
    Storage2.prototype.delete = function(key2) {
      return __awaiter(this, void 0, void 0, function() {
        var db2;
        var _this = this;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.openDbPromise];
            case 1:
              db2 = _a9.sent();
              return [2, new Promise(function(resolve, reject) {
                var transaction = db2.transaction([APP_NAMESPACE_STORE], "readwrite");
                var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                var compositeKey = _this.createCompositeKey(key2);
                try {
                  var request = objectStore.delete(compositeKey);
                  request.onerror = function(event) {
                    reject(toFirebaseError(event, "storage-delete"));
                  };
                  request.onsuccess = function() {
                    resolve();
                  };
                } catch (e) {
                  reject(ERROR_FACTORY6.create("storage-delete", {
                    originalErrorMessage: e && e.message
                  }));
                }
              })];
          }
        });
      });
    };
    Storage2.prototype.createCompositeKey = function(key2) {
      return [this.appId, this.appName, this.namespace, key2].join();
    };
    return Storage2;
  }();
  var StorageCache = function() {
    function StorageCache2(storage2) {
      this.storage = storage2;
    }
    StorageCache2.prototype.getLastFetchStatus = function() {
      return this.lastFetchStatus;
    };
    StorageCache2.prototype.getLastSuccessfulFetchTimestampMillis = function() {
      return this.lastSuccessfulFetchTimestampMillis;
    };
    StorageCache2.prototype.getActiveConfig = function() {
      return this.activeConfig;
    };
    StorageCache2.prototype.loadFromStorage = function() {
      return __awaiter(this, void 0, void 0, function() {
        var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              lastFetchStatusPromise = this.storage.getLastFetchStatus();
              lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
              activeConfigPromise = this.storage.getActiveConfig();
              return [4, lastFetchStatusPromise];
            case 1:
              lastFetchStatus = _a9.sent();
              if (lastFetchStatus) {
                this.lastFetchStatus = lastFetchStatus;
              }
              return [4, lastSuccessfulFetchTimestampMillisPromise];
            case 2:
              lastSuccessfulFetchTimestampMillis = _a9.sent();
              if (lastSuccessfulFetchTimestampMillis) {
                this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
              }
              return [4, activeConfigPromise];
            case 3:
              activeConfig = _a9.sent();
              if (activeConfig) {
                this.activeConfig = activeConfig;
              }
              return [2];
          }
        });
      });
    };
    StorageCache2.prototype.setLastFetchStatus = function(status) {
      this.lastFetchStatus = status;
      return this.storage.setLastFetchStatus(status);
    };
    StorageCache2.prototype.setLastSuccessfulFetchTimestampMillis = function(timestampMillis) {
      this.lastSuccessfulFetchTimestampMillis = timestampMillis;
      return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
    };
    StorageCache2.prototype.setActiveConfig = function(activeConfig) {
      this.activeConfig = activeConfig;
      return this.storage.setActiveConfig(activeConfig);
    };
    return StorageCache2;
  }();
  function setAbortableTimeout2(signal, throttleEndTimeMillis) {
    return new Promise(function(resolve, reject) {
      var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
      var timeout = setTimeout(resolve, backoffMillis);
      signal.addEventListener(function() {
        clearTimeout(timeout);
        reject(ERROR_FACTORY6.create("fetch-throttle", {
          throttleEndTimeMillis
        }));
      });
    });
  }
  function isRetriableError2(e) {
    if (!(e instanceof FirebaseError) || !e.customData) {
      return false;
    }
    var httpStatus = Number(e.customData["httpStatus"]);
    return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
  }
  var RetryingClient = function() {
    function RetryingClient2(client, storage2) {
      this.client = client;
      this.storage = storage2;
    }
    RetryingClient2.prototype.fetch = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var throttleMetadata;
        return __generator(this, function(_a9) {
          switch (_a9.label) {
            case 0:
              return [4, this.storage.getThrottleMetadata()];
            case 1:
              throttleMetadata = _a9.sent() || {
                backoffCount: 0,
                throttleEndTimeMillis: Date.now()
              };
              return [2, this.attemptFetch(request, throttleMetadata)];
          }
        });
      });
    };
    RetryingClient2.prototype.attemptFetch = function(request, _a9) {
      var throttleEndTimeMillis = _a9.throttleEndTimeMillis, backoffCount = _a9.backoffCount;
      return __awaiter(this, void 0, void 0, function() {
        var response, e_1, throttleMetadata;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, setAbortableTimeout2(request.signal, throttleEndTimeMillis)];
            case 1:
              _b.sent();
              _b.label = 2;
            case 2:
              _b.trys.push([2, 5, , 7]);
              return [4, this.client.fetch(request)];
            case 3:
              response = _b.sent();
              return [4, this.storage.deleteThrottleMetadata()];
            case 4:
              _b.sent();
              return [2, response];
            case 5:
              e_1 = _b.sent();
              if (!isRetriableError2(e_1)) {
                throw e_1;
              }
              throttleMetadata = {
                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
                backoffCount: backoffCount + 1
              };
              return [4, this.storage.setThrottleMetadata(throttleMetadata)];
            case 6:
              _b.sent();
              return [2, this.attemptFetch(request, throttleMetadata)];
            case 7:
              return [2];
          }
        });
      });
    };
    return RetryingClient2;
  }();
  var name6 = "@firebase/remote-config";
  var version6 = "0.1.30";
  function registerRemoteConfig(firebaseInstance) {
    firebaseInstance.INTERNAL.registerComponent(new Component("remoteConfig", remoteConfigFactory, "PUBLIC").setMultipleInstances(true));
    firebaseInstance.registerVersion(name6, version6);
    function remoteConfigFactory(container, namespace) {
      var app12 = container.getProvider("app").getImmediate();
      var installations5 = container.getProvider("installations").getImmediate();
      if (typeof window === "undefined") {
        throw ERROR_FACTORY6.create("registration-window");
      }
      var _a9 = app12.options, projectId = _a9.projectId, apiKey = _a9.apiKey, appId = _a9.appId;
      if (!projectId) {
        throw ERROR_FACTORY6.create("registration-project-id");
      }
      if (!apiKey) {
        throw ERROR_FACTORY6.create("registration-api-key");
      }
      if (!appId) {
        throw ERROR_FACTORY6.create("registration-app-id");
      }
      namespace = namespace || "firebase";
      var storage2 = new Storage(appId, app12.name, namespace);
      var storageCache = new StorageCache(storage2);
      var logger11 = new Logger(name6);
      logger11.logLevel = LogLevel.ERROR;
      var restClient = new RestClient(installations5, firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);
      var retryingClient = new RetryingClient(restClient, storage2);
      var cachingClient = new CachingClient(retryingClient, storage2, storageCache, logger11);
      var remoteConfigInstance = new RemoteConfig(app12, cachingClient, storageCache, storage2, logger11);
      remoteConfigInstance.ensureInitialized();
      return remoteConfigInstance;
    }
  }
  registerRemoteConfig(index_esm_default);

  // node_modules/firebase/dist/index.esm.js
  const database = __toModule(require_index_esm());
  var name8 = "firebase";
  var version8 = "8.2.4";
  index_esm_default.registerVersion(name8, version8, "app");
  var name$12 = "firebase";
  var version$12 = "8.2.4";
  console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");
  index_esm_default.registerVersion(name$12, version$12);

  // src/components/fire.js
  var config = {
    apiKey: "AIzaSyAPplaF1AaBWw47dvf-SOpD27DrrCxkNKo",
    authDomain: "survey-203e2.firebaseapp.com",
    databaseURL: "https://survey-203e2-default-rtdb.firebaseio.com",
    projectId: "survey-203e2",
    storageBucket: "survey-203e2.appspot.com",
    messagingSenderId: "260497538012",
    appId: "1:260497538012:web:260f2cae0e6b74e5ce6d19"
  };
  var fire3 = index_esm_default.initializeApp(config);
  const fire_default = fire3;

  // src/components/Survey.js
  const react6 = __toModule(require_react());
  class Survey3 extends react6.default.Component {
    constructor() {
      super();
      this.state = {
        name: "",
        gender: "",
        age: "",
        weight: "",
        height: "",
        show: false
      };
      this.handleChange = this.handleChange.bind(this);
      this.showVals = this.showVals.bind(this);
    }
    handleChange(event) {
      const {name: name9, value} = event.target;
      this.setState({[name9]: value});
    }
    showVals() {
      this.setState({show: true});
      var data = {
        Name: this.state.name,
        Gender: this.state.gender,
        Age: this.state.age,
        Weight: this.state.weight,
        Height: this.state.height
      };
      fire_default.database().ref("Survey 1/").push(data);
    }
    render() {
      return react6.default.createElement("div", null, react6.default.createElement("h2", null, "Health Form"), react6.default.createElement("div", {
        className: "form"
      }, react6.default.createElement("div", {
        className: "question1"
      }, react6.default.createElement("label", null, "Name: ", react6.default.createElement("br", null), react6.default.createElement("input", {
        type: "text",
        name: "name",
        value: this.state.name,
        onChange: this.handleChange
      })), react6.default.createElement("br", null)), react6.default.createElement("div", {
        className: "question"
      }, react6.default.createElement("label", null, "Gender: ", react6.default.createElement("br", null), react6.default.createElement("input", {
        type: "radio",
        name: "gender",
        value: "male",
        checked: this.state.gender == "male",
        onChange: this.handleChange
      }), "Male", react6.default.createElement("input", {
        type: "radio",
        name: "gender",
        value: "female",
        checked: this.state.gender == "female",
        onChange: this.handleChange
      }), "Female"), react6.default.createElement("br", null)), react6.default.createElement("div", {
        className: "question"
      }, react6.default.createElement("label", null, "Age: ", react6.default.createElement("br", null), react6.default.createElement("input", {
        type: "text",
        name: "age",
        value: this.state.age,
        onChange: this.handleChange
      })), react6.default.createElement("br", null)), react6.default.createElement("div", {
        className: "question"
      }, react6.default.createElement("label", null, "Weight: ", react6.default.createElement("br", null), react6.default.createElement("input", {
        type: "text",
        name: "weight",
        value: this.state.weight,
        onChange: this.handleChange
      }), " kg"), react6.default.createElement("br", null)), react6.default.createElement("div", {
        className: "question"
      }, react6.default.createElement("label", null, "Height: ", react6.default.createElement("br", null), react6.default.createElement("input", {
        type: "text",
        name: "height",
        value: this.state.height,
        onChange: this.handleChange
      }), " cm")), react6.default.createElement("br", null)), react6.default.createElement("div", {
        className: "submit"
      }, react6.default.createElement("button", {
        onClick: this.showVals
      }, "Submit")), react6.default.createElement("h3", null, "Name: ", this.state.show ? this.state.name : null, " "), react6.default.createElement("h3", null, "Gender: ", this.state.show ? this.state.gender : null, " "), react6.default.createElement("h3", null, "Age: ", this.state.show ? this.state.age : null), react6.default.createElement("h3", null, "Weight: ", this.state.show ? this.state.weight : null, " kg"), react6.default.createElement("h3", null, "Height: ", this.state.show ? this.state.height : null, " cm"));
    }
  }
  const Survey_default = Survey3;

  // src/components/Survey2.js
  const react7 = __toModule(require_react());
  class Survey22 extends react7.default.Component {
    constructor() {
      super();
      this.state = {
        name: "",
        gender: "",
        age: "",
        interests: "",
        height: "",
        comments: "",
        show: false
      };
      this.handleChange = this.handleChange.bind(this);
      this.showVals = this.showVals.bind(this);
    }
    handleChange(event) {
      const {name: name9, value} = event.target;
      this.setState({[name9]: value});
    }
    showVals() {
      this.setState({show: true});
      var data = {
        Name: this.state.name,
        Gender: this.state.gender,
        Age: this.state.age,
        Interests: this.state.interests,
        Comments: this.state.comments
      };
      fire_default.database().ref("Survey 2/").push(data);
    }
    render() {
      return react7.default.createElement("div", null, react7.default.createElement("h2", null, "Interest Form"), react7.default.createElement("div", {
        className: "form"
      }, react7.default.createElement("div", {
        className: "question1"
      }, react7.default.createElement("label", null, "Name: ", react7.default.createElement("br", null), react7.default.createElement("input", {
        type: "text",
        name: "name",
        value: this.state.name,
        onChange: this.handleChange
      })), react7.default.createElement("br", null)), react7.default.createElement("div", {
        className: "question"
      }, react7.default.createElement("label", null, "Gender: ", react7.default.createElement("br", null), react7.default.createElement("input", {
        type: "radio",
        name: "gender",
        value: "male",
        checked: this.state.gender == "male",
        onChange: this.handleChange
      }), "Male", react7.default.createElement("input", {
        type: "radio",
        name: "gender",
        value: "female",
        checked: this.state.gender == "female",
        onChange: this.handleChange
      }), "Female"), react7.default.createElement("br", null)), react7.default.createElement("div", {
        className: "question"
      }, react7.default.createElement("label", null, "Age: ", react7.default.createElement("br", null), react7.default.createElement("input", {
        type: "text",
        name: "age",
        value: this.state.age,
        onChange: this.handleChange
      })), react7.default.createElement("br", null)), react7.default.createElement("div", {
        className: "question"
      }, react7.default.createElement("label", null, "Interests: ", react7.default.createElement("br", null), react7.default.createElement("textarea", {
        name: "interests",
        value: this.state.interests,
        onChange: this.handleChange
      })), react7.default.createElement("br", null)), react7.default.createElement("div", {
        className: "question"
      }, react7.default.createElement("label", null, "Other comments: ", react7.default.createElement("br", null), react7.default.createElement("textarea", {
        name: "comments",
        value: this.state.comments,
        onChange: this.handleChange
      })), react7.default.createElement("br", null))), react7.default.createElement("br", null), react7.default.createElement("div", {
        className: "submit"
      }, react7.default.createElement("button", {
        onClick: this.showVals
      }, "Submit")), react7.default.createElement("h3", null, "Name: ", this.state.show ? this.state.name : null, " "), react7.default.createElement("h3", null, "Gender: ", this.state.show ? this.state.gender : null, " "), react7.default.createElement("h3", null, "Age: ", this.state.show ? this.state.age : null), react7.default.createElement("h3", null, "Interests: ", this.state.show ? this.state.interests : null), react7.default.createElement("h3", null, "Comments: ", this.state.show ? this.state.comments : null));
    }
  }
  const Survey2_default = Survey22;

  // src/App.js
  const react4 = __toModule(require_react());
  const react_dom = __toModule(require_react_dom());
  class App extends react4.Component {
    render() {
      return react4.default.createElement("div", {
        className: "App"
      }, react4.default.createElement("header", null, react4.default.createElement("h1", null, "Survey Page")), react4.default.createElement(BrowserRouter, null, react4.default.createElement("nav", null, react4.default.createElement("a", {
        className: "link"
      }, react4.default.createElement(Link, {
        to: "/MyInfo"
      }, "Home")), react4.default.createElement("a", {
        className: "link"
      }, react4.default.createElement(Link, {
        to: "/Survey"
      }, "Survey 1")), react4.default.createElement("a", {
        className: "link"
      }, react4.default.createElement(Link, {
        to: "/Survey2"
      }, "Survey 2"))), react4.default.createElement(Switch, null, react4.default.createElement(Route, {
        path: "/MyInfo"
      }, react4.default.createElement(MyInfo_default, null)), react4.default.createElement(Route, {
        path: "/Survey"
      }, react4.default.createElement(Survey_default, null)), react4.default.createElement(Route, {
        path: "/Survey2"
      }, react4.default.createElement(Survey2_default, null)))));
    }
  }
  react_dom.default.render(react4.default.createElement(App, null), document.getElementById("root"));
})();
//# sourceMappingURL=bundle.js.map
